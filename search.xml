<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2023总结</title>
    <url>/86cce350.html</url>
    <content><![CDATA[<p>眨眼2023年已经结束，2024年也已经开启。明天就是2024年第一个工作日了。自己想了很久，觉得还是得总结一下自己的这一年。<br>工作几年，感觉自己混了几年，好像从来没有过总结这一说。想了很久，在这个时候便想着写一个过去的总结。</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>2023年，想着其实收获还挺大，简单的从<code>工作</code>和<code>生活</code>这两方面来说说吧。</p>
<h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h3><p>不知不觉，来深圳工作已经一年多了~去年9月份来的深圳。</p>
<h4 id="工作经历"><a href="#工作经历" class="headerlink" title="工作经历"></a>工作经历</h4><p>去年，2023年，我第一次被公司开除。说实话，当时还是有一点气馁的，因为被公司劝退了。以前也没有经历过，想着既然公司都这么说了，自己就识趣的走吧。说到这个，就得特别感谢我的前同事了。<br>我记得当天下午，公司同事找我谈了劝退的事情，然后我直接一口答应了，其他的想都想。到了晚上吃饭的时候，和前同事一起吃饭聊到了这个事情，前同事就很诧异我为什么直接答应，没有谈赔偿。听到赔偿，我很惊讶，难道劝退还有赔偿的吗？(因为之前一直待在长沙工作，长沙出了名的是劳动法的法外之地,而且自己也就辞职过1次（还一次是公司解散，公司给了赔偿），没有特意了解过)然后自己去网上了解下，吃完饭回到公司果断找领导谈赔偿的事情，刚开始领导没有同意。于是我也没有辞职，坐在办公室耗着，自己写简历，在boss上找工作，反正就是正常上下班。最后还是谈成了赔偿~</p>
<h4 id="工作能力收获"><a href="#工作能力收获" class="headerlink" title="工作能力收获"></a>工作能力收获</h4><p>在这一块感觉收获还是挺大的。自己以前做的都是Lua开发和ios上架这部分的。<br>在去年的1、2、3月份有接触过google上架，这也是第一次接触安卓这部分内容。4月份来到新公司后开始接触cocos creator。产品几乎也是从0到1的开发(1个人负责整个前端，从别人那里拿了一套框架)，所以自己的压力也一直挺大，也是一直在学习。之前也是只做手机端，今年也做了web端的一些东西，发现其中还是有一些差异的。<br>12月份还做了安卓部分的内容，以前也是没有学习过，所以12月份基本上是晚上10点之后才下班。今年1月份压力更大，因为项目要求上线，以前只是写纯业务代码，因为有过开发经验，换一种开发语言和引擎感觉压力都不是太大。但是现在涉及到安卓原生的东西（完全陌生的一个环境）,需要学习的就更多，压力也就更大。</p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>1、开了抖音，2月份的时候注销了抖音，重新开了一个新的抖音。原本是想着可以抖音带货挣点副业。但是到目前为止，抖音粉丝才2000+，也没有想到很好的套现的方法，这个还是会一直坚持下去，套现的事情先放一放吧。<br>2、开了微信公众号，没有坚持，在年尾的时候直接注销了~</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>总的来说，2023年还是算比较好的一年，自己毕业这几年，2023年可能是自己在工作中付出最多的一年。</p>
<h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p>生活有了几个比较大的改变。</p>
<h4 id="运动"><a href="#运动" class="headerlink" title="运动"></a>运动</h4><p>今年换了新公司后，就会经常去运动(也可能是年纪大了),几乎每周都有，打球、游泳、爬山、徒步等，有公司同事一起的，也有自己单独去的。</p>
<h4 id="恋爱"><a href="#恋爱" class="headerlink" title="恋爱"></a>恋爱</h4><p>这个事情还是比较值得高兴的，今年找了一个女朋友，哈哈哈哈~</p>
<h3 id="2024年新计划"><a href="#2024年新计划" class="headerlink" title="2024年新计划"></a>2024年新计划</h3><h4 id="工作-1"><a href="#工作-1" class="headerlink" title="工作"></a>工作</h4><p>2023年一年的工作，发现自己还是有很多的不足，2024年要多学习，弥补工作中的不足。</p>
<h4 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h4><p>无论技术好坏，还是要坚持阅读，目标是不低于12本书籍的阅读</p>
<h4 id="运动-1"><a href="#运动-1" class="headerlink" title="运动"></a>运动</h4><p>坚持每周运动，希望是能够将自由泳练好(目前只会蛙泳，自由泳还不太会,想要报班学习)。游泳距离达到50公里。</p>
<h4 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h4><p>全款买一辆车，不低于20w</p>
]]></content>
  </entry>
  <entry>
    <title>cleanMyMac中文破解版</title>
    <url>/fc44a28c.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>CleanMyMac X中文破解版是一款mac系统清理垃圾软件，CleanMyMac已经完成了向全面清理，优化和管理工具的转变。它的算法和功能变得更加智能，但外观仍然像您预期的那样简单。CleanMyMac X以极其快速和时尚的方式为您提供及时的建议，组织，更新和保护您的Mac。</p>
<img data-src="https://pic.imgdb.cn/item/664387de0ea9cb140356f0dc.jpg" alt="效果图" />

<h3 id="功能列表"><a href="#功能列表" class="headerlink" title="功能列表"></a>功能列表</h3><img data-src="https://pic.imgdb.cn/item/664387ed0ea9cb140357126b.jpg" alt="效果图" />

<h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p>网上也有很多安装教程，但是基本都要激活码，而激活码相对有点昂贵。或者是有免费激活的，但是操作起来比较麻烦。<br>这里推荐一款<code>CleanMyMac X中文破解版</code>下载快捷，安装方便，一键傻瓜式安装，只要会在macbook安装软件即可使用。</p>
<a href="https://k.youshop10.com/wSozMuCN" title="" target="">下载地址,</a>
]]></content>
      <categories>
        <category>破解软件</category>
      </categories>
      <tags>
        <tag>破解软件</tag>
      </tags>
  </entry>
  <entry>
    <title>Autodesk3dMax破解版下载及汉化</title>
    <url>/f028beb1.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p><a href="https://help.autodesk.com/view/3DSMAX/2024/CHS/?guid=GUID-2B24CF20-383F-48B7-955B-03D8AECCD3B9">Autodesk 3d Max 使用教程:</a><br>破解版下载，微信关注“历史回眸”，发送<code>3d建模</code>获取资源链接。<br><img data-src="https://s1.ax1x.com/2023/05/08/p9wEfHJ.jpg" style="width:200px;height:200px" alt="" /></p>
<p>安装的软件是英文的，但是这里的教程又是中文的，对于英文不是很好的我来说确实有点为难，于是乎就想着将软件汉化。<br>汉化的方法也比较简单<br>点电脑桌面软件快捷方式图标，进入“属性”界面，在“目标”后面加上<code>空格/Luanguage=CHS</code>即可。如下图：<br><img data-src="https://s1.ax1x.com/2023/05/08/p9wE4E9.png" style="width:200px;height:400px" alt="" /><br>设置完后再打开软件，软件上所有的显示就是中文的啦~<br>如下图：<br><img data-src="https://s1.ax1x.com/2023/05/08/p9wEI41.png" style="width:400px;height:350px" alt="" /></p>
]]></content>
      <categories>
        <category>Autodesk3dMax</category>
      </categories>
      <tags>
        <tag>Autodesk3dMax</tag>
      </tags>
  </entry>
  <entry>
    <title>Cannot read properties of null (reading &#39;getGFXTexture&#39;)</title>
    <url>/db08b38f.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>最近在浏览器上运行cocos creator工程时，总是提示这个错误<code>Cannot read properties of null (reading &#39;getGFXTexture&#39;)</code>,如下图：</p>
<img data-src="https://s11.ax1x.com/2024/01/30/pFKDIqs.png" alt="" />

<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>图片纹理被清空所导致，自己在网上找的答案</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>这里简单说下我自己的解决方案。<br>1、vsCode打开cocos的源码调试功能(报这个错的时候vscode会有提示，或者自己百度)<br>2、查看堆栈，定位到这个地方，如下图：<br><img data-src="https://pic.imgdb.cn/item/6643274b0ea9cb14038e966b.png" alt="" /></p>
<p>3.1 在cocoscreator中文社区里有人回答了一种方法，将这里 <code>if(frame)</code> 的判断改为<code>if(frame &amp;&amp; frame.isVaild)</code>，我试了下这个方法，好像没有什么用，即使有用的话也只是阻止报错，不能从根本上解决问题（后面一句是自己的见解，如果有误，还请谅解）。</p>
<p>这里介绍我的方法：<br>还是一样断点到这个地方，千万别想着打日志，这个文件是只读文件。然后查看<code>frame</code>的值，这个<code>frame</code>就是你要加载的那个<code>SpriteFrame</code>，这里面有个参数<code>uuid</code>。复制<code>uuid</code>然后在cocos creator的资源管理器中直接搜索，看是哪张图片的纹理被清空了。<br><img data-src="https://pic.imgdb.cn/item/664327760ea9cb14038eceba.png" alt="" /></p>
<p>找到这张图片后，点击右键，选择<code>查找UUID的使用</code>，就可以知道有哪些地方引用了这张图片，然后根据引用去查看，就可以很好的解决这个问题啦~</p>
]]></content>
      <categories>
        <category>cocos Creator</category>
      </categories>
      <tags>
        <tag>cocos Creator</tag>
      </tags>
  </entry>
  <entry>
    <title>CocosCreator之翻页容器（PageView）和滚动容器（ScrollView）的触摸冲突处理</title>
    <url>/6803a9d8.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>在开发的时候，我们需要一个既能翻页又能上下滑动的界面，这时候就会遇到翻页容器和滚动容器触摸冲突的情况。以下是博主这里的解决方法。</p>
<p><code>ScrollView</code>和<code>PageView</code>层级关系如下：<br><img data-src="https://s1.ax1x.com/2023/07/07/pCcG7lT.png" alt="" /><br>在不做任何处理前，在<code>ScrollView</code>区域（上图白色区域）滑动，<code>ScrollView</code>可以正常上下滑动，<code>PageView</code>不能左右滑动，但是<code>PageView</code>可以在上图中红不红、粉不粉的区域左右滑动。查了一下，是因为两者的触摸冲突了。<br>下面是我的解决方法：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">intiView</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_view</span>.<span class="property">_ScrollC_game</span>.<span class="property">node</span>.<span class="title function_">on</span>(<span class="title class_">Node</span>.<span class="property">EventType</span>.<span class="property">TOUCH_START</span>, <span class="variable language_">this</span>.<span class="property">touchStart</span>, <span class="variable language_">this</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_view</span>.<span class="property">_ScrollC_game</span>.<span class="property">node</span>.<span class="title function_">on</span>(<span class="title class_">Node</span>.<span class="property">EventType</span>.<span class="property">TOUCH_MOVE</span>, <span class="variable language_">this</span>.<span class="property">touchMove</span>, <span class="variable language_">this</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_view</span>.<span class="property">_ScrollC_game</span>.<span class="property">node</span>.<span class="title function_">on</span>(<span class="title class_">Node</span>.<span class="property">EventType</span>.<span class="property">TOUCH_END</span>, <span class="variable language_">this</span>.<span class="property">touchEnd</span>, <span class="variable language_">this</span>);       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">touchStart</span>(<span class="params">event</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">chuandi</span> = <span class="literal">true</span>; <span class="comment">//chuandi:是否可以传递，默认为true；</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;开始&quot;</span>,event.<span class="title function_">getLocation</span>());</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">startPosition</span> = event.<span class="title function_">getLocation</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pageIdx</span> = <span class="variable language_">this</span>.<span class="property">_view</span>.<span class="property">_PageC_record</span>.<span class="title function_">getCurrentPageIndex</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">touchMove</span>(<span class="params">event</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">chuandi</span> == <span class="literal">false</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">chuandi</span> = <span class="literal">true</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;移动 = &quot;</span>, event.<span class="title function_">getLocation</span>());</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">movePosition</span> = event.<span class="title function_">getLocation</span>();</span><br><span class="line">        <span class="keyword">let</span> distance_x = <span class="variable language_">this</span>.<span class="property">movePosition</span>.<span class="property">x</span> - <span class="variable language_">this</span>.<span class="property">startPosition</span>.<span class="property">x</span>;</span><br><span class="line">        <span class="keyword">let</span> distance_y = <span class="variable language_">this</span>.<span class="property">movePosition</span>.<span class="property">y</span> - <span class="variable language_">this</span>.<span class="property">startPosition</span>.<span class="property">y</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;距离差== &quot;</span>, distance_x, distance_y);</span><br><span class="line">        <span class="comment">//判断是否需要翻页</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">abs</span>(distance_x) &gt; <span class="number">50</span> &amp;&amp; distance_x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;向前翻页&quot;</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_view</span>.<span class="property">_PageC_record</span>.<span class="title function_">scrollToPage</span>(<span class="variable language_">this</span>.<span class="property">pageIdx</span> - <span class="number">1</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">chuandi</span> = <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">abs</span>(distance_x) &gt; <span class="number">50</span> &amp;&amp; distance_x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;向后翻页&quot;</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_view</span>.<span class="property">_PageC_record</span>.<span class="title function_">scrollToPage</span>(<span class="variable language_">this</span>.<span class="property">pageIdx</span> + <span class="number">1</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">chuandi</span> = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">touchEnd</span>(<span class="params">event</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">endPosition</span> = event.<span class="title function_">getLocation</span>();</span><br><span class="line">        <span class="keyword">let</span> distance_x = <span class="variable language_">this</span>.<span class="property">endPosition</span>.<span class="property">x</span> - <span class="variable language_">this</span>.<span class="property">startPosition</span>.<span class="property">x</span>;</span><br><span class="line">        <span class="keyword">let</span> distance_y = <span class="variable language_">this</span>.<span class="property">endPosition</span>.<span class="property">y</span> - <span class="variable language_">this</span>.<span class="property">startPosition</span>.<span class="property">y</span>;</span><br><span class="line">        <span class="comment">//判断是否是点击</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">abs</span>(distance_y) &lt; <span class="number">50</span> &amp;&amp; <span class="title class_">Math</span>.<span class="title function_">abs</span>(distance_x) &lt; <span class="number">50</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;触摸结束，是点击&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;结束1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
<p>最后实现了期望效果:</p>
<!-- ![](/img/gif/View.gif) -->
<img data-src="https://pic.imgdb.cn/item/64b2bbbd1ddac507ccd0891a.gif" alt="" />

]]></content>
      <categories>
        <category>cocos Creator</category>
      </categories>
  </entry>
  <entry>
    <title>CocosCreator纹理缓存与图片大小不同的可能原因</title>
    <url>/d1b0e98d.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>在Cocos Creator游戏开发中，纹理缓存大小与单个图片大小不一致可能涉及到一些额外的处理和优化，以提高游戏性能和效率。以下是一些可能导致这种差异的原因：</p>
<span id="more"></span>
<h3 id="压缩算法"><a href="#压缩算法" class="headerlink" title="压缩算法"></a>压缩算法</h3><p>游戏引擎通常会使用不同的压缩算法来减小纹理的内存占用。这包括各种纹理压缩技术，如ETC、PVRTC、ASTC等。这些算法在减小纹理占用内存的同时，保持较高的质量。</p>
<h3 id="Mipmap"><a href="#Mipmap" class="headerlink" title="Mipmap"></a>Mipmap</h3><p>引擎可能会生成纹理的Mipmap，即原始纹理的不同分辨率版本。Mipmap可以提高渲染效果，但会增加纹理占用的内存。</p>
<h3 id="纹理格式"><a href="#纹理格式" class="headerlink" title="纹理格式"></a>纹理格式</h3><p>引擎可能会使用不同的纹理格式，例如RGBA8888、RGB565等。这些格式在存储和渲染时都有不同的内存占用。</p>
<h3 id="动态合批"><a href="#动态合批" class="headerlink" title="动态合批"></a>动态合批</h3><p>Cocos Creator可能会对纹理进行动态合批，将多个小纹理合并成一个大的纹理集，以减少渲染调用和提高性能。这可能导致纹理缓存的大小与单个图片的大小不同。</p>
<p>要查看纹理缓存的实际大小，可以使用开发者工具或引擎提供的性能分析工具。这样可以更详细地了解引擎是如何处理纹理的，并找到可能的优化方法。</p>
<p>请注意，这些只是可能的原因之一，具体情况可能会因引擎版本、平台和项目设置而异。如果有特定的问题，建议查阅Cocos Creator的官方文档或在相关的社区论坛上咨询。</p>
]]></content>
      <categories>
        <category>游戏开发</category>
      </categories>
      <tags>
        <tag>Cocos Creator</tag>
        <tag>纹理优化</tag>
        <tag>游戏性能</tag>
      </tags>
  </entry>
  <entry>
    <title>在Cocos Creator中监听输入框的输入事件</title>
    <url>/3344996d.html</url>
    <content><![CDATA[<p>在 Cocos Creator 中，要监听输入框的输入事件，你可以使用 <code>EditBox</code> 组件提供的回调函数。以下是一个简单的示例，演示如何在用户输入时监听 <code>EditBox</code> 事件。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">-- 用于监听输入框事件的示例脚本</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; ccclass, property &#125; = cc.<span class="property">_decorator</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ccclass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">YourComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">cc.Component</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@property</span>(cc.<span class="property">EditBox</span>)</span><br><span class="line">    <span class="attr">yourEditBox</span>: cc.<span class="property">EditBox</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">onLoad</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 监听输入框的输入事件</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">yourEditBox</span>.<span class="property">node</span>.<span class="title function_">on</span>(<span class="string">&#x27;editing-did-began&#x27;</span>, <span class="variable language_">this</span>.<span class="property">onEditingDidBegan</span>, <span class="variable language_">this</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">yourEditBox</span>.<span class="property">node</span>.<span class="title function_">on</span>(<span class="string">&#x27;text-changed&#x27;</span>, <span class="variable language_">this</span>.<span class="property">onTextChanged</span>, <span class="variable language_">this</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">yourEditBox</span>.<span class="property">node</span>.<span class="title function_">on</span>(<span class="string">&#x27;editing-did-ended&#x27;</span>, <span class="variable language_">this</span>.<span class="property">onEditingDidEnded</span>, <span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">onEditingDidBegan</span>(<span class="params"></span>) &#123;</span><br><span class="line">        cc.<span class="title function_">log</span>(<span class="string">&#x27;用户开始输入&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">onTextChanged</span>(<span class="params"></span>) &#123;</span><br><span class="line">        cc.<span class="title function_">log</span>(<span class="string">&#x27;用户输入内容发生变化&#x27;</span>, <span class="variable language_">this</span>.<span class="property">yourEditBox</span>.<span class="property">string</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">onEditingDidEnded</span>(<span class="params"></span>) &#123;</span><br><span class="line">        cc.<span class="title function_">log</span>(<span class="string">&#x27;用户结束输入&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个例子中，我们使用了三个事件：</p>
<p><code>editing-did-began</code>：当用户开始在输入框中输入时触发。<br><code>text-changed</code>：当输入框的文本内容发生变化时触发。<br><code>editing-did-ended</code>：当用户结束在输入框中输入时触发。<br>你可以根据需要选择使用这些事件中的一个或多个。在每个事件的回调函数中，你可以执行你希望进行的操作，例如更新 UI、验证输入等。</p>
<p>确保在适当的时机（例如 onLoad 函数中）添加事件监听器，并在适当的时机（例如组件销毁时）移除事件监听器，以避免潜在的内存泄漏问题。</p>
]]></content>
      <categories>
        <category>游戏开发</category>
      </categories>
      <tags>
        <tag>Cocos Creator</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua连续教程之C语言API总览</title>
    <url>/21185.html</url>
    <content><![CDATA[<p>Lua是一种嵌入式语言，这就意味着Lua并不是一个独立运行的应用，而是一个库，它可以链接到其他应用程序，将Lua的功能融入这些应用。</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>因为能够当作库来扩展某个应用程序，所以Lua是一种嵌入式语言。同时，使用了Lua语言的程序也可以在Lua环境中注册新的函数，比如用C语言实现函数，从而增加一些无法直接用Lua语言编写的功能。因此Lua也是一种可扩展的语言。<br>上述两种对Lua语言的定位分别对应C语言和Lua语言之间的两种交互形式。在第一种形式中，C语言拥有控制权，而Lua语言被用作库，这种交互形式中的C代码被称为应用代码。在第二种形式中，Lua语言拥有控制权，而C语言被用作库，此时的C代码被称为库代码。应用代码和库代码都适用相同的API与Lua语言通信，这些API被称为C API。<br>C API是一个函数、常量和类型组成的集合，有了它，C语言代码就能与Lua语言交互。C API包括读写Lua全局变量的函数、调用Lua函数的函数、运行Lua代码段的函数，以及注册C函数的函数等。通过调用CAPI，C代码几乎可以做Lua代码能够做的所有事情。<br>CAPI遵循C语言的操作模式，与Lua的操作模式由很大的区别。在使用C语言编程时，我们必须注意类型检查、错误恢复、内存分配错误和其他一些复杂的概念。CAPI中的大多数函数都不会检查其参数的正确性，我们必须在调用函数前确保参数的合法性，一旦出错，程序会直接崩溃而不会收到规范的错误信息。此外，CAPI强调的是灵活性和简洁性，某些情况下会以牺牲易用性为代价，即便是常见的需求，也可能需要调用好几个API。这么做虽然有些繁琐，但我们却可以完全控制所有细节。</p>
<h2 id="第一个示例"><a href="#第一个示例" class="headerlink" title="第一个示例"></a>第一个示例</h2><p>首先来学习一个简单的应用程序的例子：一个独立的解释器。</p>
<blockquote>
<p>一个简单地额独立解释器</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;lua.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;luaxlib.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;lualib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">	<span class="type">char</span> buff[<span class="number">256</span>];</span><br><span class="line">	<span class="type">int</span> error;</span><br><span class="line">	lua_State *L = luaL_newstate();     <span class="comment">/*打开Lua*/</span></span><br><span class="line">	luaL_openlibs(L);				<span class="comment">/*打开标准库*/</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (fgets(buff,<span class="keyword">sizeof</span>(buff),<span class="built_in">stdin</span>)!= <span class="literal">NULL</span>)&#123;</span><br><span class="line">		error = luaL_loadstring(L,buff)||lua_pcall(L,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">if</span>(error)&#123;</span><br><span class="line">			<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;%s\n&quot;</span>,lua_tostring(L,<span class="number">-1</span>));</span><br><span class="line">			lua_pop(L,<span class="number">1</span>);			<span class="comment">/*从栈中弹出错误信息*/</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	lua_close(L);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>头文件lua.h声明了Lua提供的基础函数，其中包括创建新Lua环境的函数、调用Lua函数的函数、读写环境中的全局变量的函数，以及注册供Lua语言调用新函数的函数等等。lua.h中声明的所有内容都有一个前缀lua_。<br>头文件luaxlib.h声明了辅助库所提供的函数，其中所有的声明均以luaL_开头。辅助库使用lua.h提供的基础API来提供更高层次的抽象，特别是对标准库用到的相关机制进行抽象。基础API追求经济性和正交性，而辅助库则追求对常见任务的实用性。当然，要在程序中创建其他所需的抽象也是非常简单的。请记住，辅助库不能访问Lua的内部元素，而只能通过lua.h中声明的官方基础API完成所有工作。辅助库能实现什么，你的程序就能实现什么。<br>Lua标准库没有定义任何C语言全局变量，它将其所有的状态都保存在动态的结构体lua_State中，Lua中的所有函数都接收一个指向该结构的指针作为参数。这种设计使得Lua是可重入的，并且可以直接用于编程多线程代码。<br>顾名思义，函数luaL_newstate用于创建一个新的Lua状态。当它创建一个新状态时，新环境中没有包含预定义的函数，甚至连print也没有。为了保持Lua语言的精炼，所有的标准库都被组织成不同的包，这样我们在不需要使用某些包时可以忽略它们。头文件lualib.h中声明了用于打开这些库的函数。函数luaL_openlibs用于打开所有的标准库。<br>当创建好一个状态并且在其中加载标准库以后，就可以处理用户的输入了。程序会首先调用函数luaL_loadstring来编译用户输入的每一行内容。如果没有错误，则返回零，并向栈中压入编译后得到的函数。然后，程序调用函数lua_pcall从栈中弹出编译后的函数，并以保护模式运行。与函数lua_loadstring类似，如果没有错误发生，函数lua_pcall则返回零；当发生错误时，这两个函数都会向栈中压入一条错误信息。随后我们可以通过函数lua_tostring获取错误信息，并在打印错误信息后使用函数lua_pop将从栈中删除。<br>在C语言中，真是的错误处理可能会相当复杂，并且如何处理错误取决于应用的性质。Lua核不会直接向任何输出流写入数据，它只会通过返回错误信息来提示错误。每个应用可以用其所需的最恰当的方式来处理这些错误信息。为了简化讨论，假设一下示例使用如下简单的错误处理函数，即打印一条错误信息，关闭Lua状态并结束整个应用：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">error</span> <span class="params">(lua_State *L,<span class="type">const</span> <span class="type">char</span> *fmt, ...)</span>&#123;</span><br><span class="line">	va_list argp;</span><br><span class="line">	va_start(argp,fmt);</span><br><span class="line">	<span class="built_in">vfprintf</span>(<span class="built_in">stderr</span>,fmt,argp);</span><br><span class="line">	va_end(argp);</span><br><span class="line">	lua_close(L);</span><br><span class="line">	<span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于Lua既可以作为C代码来编译，也可以作为C++代码来编译，因此lua.h中并没有包含以下这种在C标准库中的常见的写法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span>&#123;</span><br><span class="line">	<span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	...</span><br><span class="line">	<span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>如果将Lua作为C代码编译出来后又要在C++中使用，那么可以引入lua.hpp来替代lua.h，定义如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span>&#123;</span><br><span class="line">	<span class="meta">#<span class="keyword">include</span> <span class="string">&quot;lua.h&quot;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>Lua和C之间通信的主要组件是无处不在的虚拟栈，几乎所有的API调用都是在操作这个栈中的值，Lua与C之间所有的数据交换都是通过这个栈完成的。此外，还可以利用栈保存中间结果。<br>当我们想在Lua和C之间交换数据时，会面对两个问题：第一个问题是动态类型和静态类型体系之间不匹配；第二个问题是自动内存管理和手动内存管理之间不匹配。<br>在Lua中，如果我们写t[k]&#x3D;v，k和v都可以是几种不同类型；由于元表的存在，甚至t也可以有不同的类型。然而，如果要在C语言中提供这种操作，任意给定的settable函数都必须有一个固定的类型。为了实现这样的操作，我们就需要好几十个不同的函数。<br>可以通过在C语言中声明某种联合体类型来解决这个问题，假设这种类型叫lua_Value，它能够表示Lua语言中所有的值，然后，可以把settable声明为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">lua_settable</span> <span class="params">(lua_Value a,lua_Value k,lua_Value v)</span>;</span><br></pre></td></tr></table></figure>
<p>这种方法有两个缺点。首先，我们很难将如此复杂的类型映射到其他语言中；而在设计Lua时，我们又要求Lua语言不仅能方便地与C&#x2F;C++交互，而且还能与<code>Java</code>、<code>Fortran</code>、<code>C#</code>等其他语言方便地交互。其次，Lua语言会做垃圾收集：由于Lua预压引擎并不知道Lua中的一个表可能会被保存在一个C语言变量中，因此它可能会认为这个表是垃圾并将其收回。<br>因此，LuaAPI中灭有定义任何类似于lua_Value的类型，而是使用栈在Lua和C之间交换数据。栈中的每个元素都能保存Lua中任意类型的值。当我们想要从Lua中获取一个值时，只需要调用Lua，Lua就会将指定的值压入栈中。当想要将一个值传给Lua时，首先要将这个值压入栈，然后调用Lua将其中栈中弹出即可。尽管我们仍然需要一个不同的函数将每种C语言类型的值压入栈，还需要另一个不同函数从栈中弹出每种C语言类型的值，但是避免了过多的组合。另外，由于这个栈是Lua状态的一部分，因此垃圾收集器知道C语言正在使用哪些值。<br>几乎CAPI中的所有函数都会用到栈。正如第一个示例，函数luaL_loadstring将其结果留在栈中；函数lua_pcall从栈中取出要调用的函数，并且也会将错误消息留在栈中。<br>Lua严格地按照LIFO的规则来操作栈。在调用Lua时只有栈顶部的部分会发生改变，而C语言代码则有更大的自由度。更具体地说，C语言可以检视栈中的任何一个元素，甚至可以在栈的任意位置插入或删除元素。</p>
<h3 id="压入元素"><a href="#压入元素" class="headerlink" title="压入元素"></a>压入元素</h3><p>针对每一种能用C语言直接表示的Lua数据类型，CAPI中都有一个对应的亚栈函数：常量nil使用lua_pushnil；布尔值使用lua_pushboolean;双精度浮点数使用lua_pushnumber；整型使用lua_pushinteger；任意字符串使用lua_pushlstring；以\0终止的字符串使用lua_pushstring。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">lua_pushnil</span>         <span class="params">(lua_State *L)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">lua_pushboolean</span>     <span class="params">(lua_State *L, <span class="type">int</span> <span class="type">bool</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">lua_pushnumber</span>		 <span class="params">(lua_State *L, lua_Number n)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">lua_pushinteger</span>     <span class="params">(lua_State *L, lua_Integer n)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">lua_pushlstring</span>     <span class="params">(lua_State *L, <span class="type">const</span> <span class="type">char</span> *s, <span class="type">size_t</span> len)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">lua_pushstring</span>      <span class="params">(lua_State *L, <span class="type">const</span> <span class="type">char</span> *s)</span>;</span><br></pre></td></tr></table></figure>
<p>当然，也有向栈中压入C函数和用户数据的函数。<br>类型Lua_Number相当于Lua语言的浮点数类型，默认为double，但可以在编译时配置Lua，让Lua_Number为float甚至long double。类型lua_Integer相当于Lua语言中的整型，通常被定义为long long ，既有符号64位整型。同样，要把Lua语言中的lua_Integer配置为使用int或long也很容易。如果使用float-int组合，也就是32浮点数类型和整型，即我们所说的精简Lua，对于资源受限的机器和硬件而言，相当高效。<br>Lua语言中的额字符串不是以\0结尾的，它们可以包含任意二进制数据。因此，将字符串压栈的基本函数lua_pushlstring需要一个明确的长度作为参数。对于以\0结尾的字符串，也可以使用函数lua_pushstring，该函数通过strlen来计算字符串的长度。Lua语言不会保留指向外部字符串的指针。对于不得不保留的字符串，Lua要么生成一个内部副本，要么复用已有的字符串。因此，一旦上述函数返回，即使立即释放或修改缓冲区也不会出现问题。<br>无论何时向栈内压入一个元素，我们都应该确保栈中有足够的空间。请注意，现在你是一个C语言程序员，Lua语言不会宠着你。当Lua启动时，以及Lua调用C语言时，栈中至少有20个空闲的位置。对于大多数情况，这个空间是完全够用，所以我们一般无须考虑栈空间的问题。不过，有些任务可能会需要更多的栈空间，特备是循环向栈中压入元素时。在这些情况下，就需要调用哈数lua_checkstack来检查栈中是否有足够的空间：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> lua_checkstack (lua_State *L, <span class="built_in">int</span> sz);</span><br></pre></td></tr></table></figure>
<p>这里，sz是我们所需要的额外栈位置的数量。如果可能，函数lua_checkstack会增加栈的大小，以容纳所需的额外空间；否则，该函数返回零。<br>辅助库也提供了一个高层函数来检查栈空间：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">void luaL_checkstack (lua_State *L, <span class="built_in">int</span> sz, const char *msg);</span><br></pre></td></tr></table></figure>
<p>该函数类似于函数lua_checkstack，但是如果栈空间不能满足请求，该函数会使用指定的错误信息抛出异常，而不是返回错误码。</p>
<h3 id="查询元素"><a href="#查询元素" class="headerlink" title="查询元素"></a>查询元素</h3><p>CAPI使用索引来引用栈中的元素。第一个被压入栈的元素索引为1，第二个被压入的元素索引为2，依次类推。我们还可以以栈顶为参照，使用负数索引来访问栈中的元素，此时，-1表示栈顶元素，-2表示在它之前被压入栈的元素，依次类推。例如，调用lua_tostring(L,-1)会将栈顶的值作为字符串返回。正如你接下来要看到的，有些情况下从栈底对栈进行索引更加自然，而有些情况下则使用负数索引更好。<br>要检查栈中的一个元素是否为特定的类型，CAPI提供了一系列名为lua_is<em>的函数，其中</em>可以是任意一种Lua数据类型。这些函数包括lua_isnil、lua_isnumber、lua_isstring和lua_istable等。所有这些函数都有同样的原型：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> lua_is* (lua_State *L, <span class="type">int</span> index);</span><br></pre></td></tr></table></figure>
<p>实际上，函数lua_isnumber不会检查某个值是否为特定类型，而是检查该值是否能被转换为特定类型。函数lua_isstring与之类似，特别之处在于，它接受数字。<br>还有一个函数lua_type，用于返回栈中元素的类型，每一种类型都由一个对应的常量表示，包括LUA_INIT、LUA_TBOOLEAN、LUA_TUMBER、LUA_TSTRING等。还函数一般与switch语句连用。当需要检查字符串和数值是否存在潜在的强制类型转换时，该函数也同样有用。<br>函数lua_to*用于从栈中获取一个值：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> 				<span class="title function_">lua_toboolean</span><span class="params">(lua_State *L, <span class="type">int</span> index)</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> 			*<span class="title function_">lua_tolstring</span><span class="params">(lua_State *L, <span class="type">int</span> index, <span class="type">size_t</span> *len)</span>;</span><br><span class="line">lua_State           *<span class="title function_">lua_tothread</span><span class="params">(lua_State *L, <span class="type">int</span> index)</span>;</span><br><span class="line">lua_Number          <span class="title function_">lua_tonumber</span><span class="params">(lua_State *L, <span class="type">int</span> index)</span>;</span><br><span class="line">lua_Integer         <span class="title function_">lua_tointeger</span><span class="params">(lua_State *L, <span class="type">int</span> index)</span>;</span><br></pre></td></tr></table></figure>
<p>即使指定的元素的类型不正确，调用这些函数也不会有问题。函数lua_toboolean适用于所有类型，它可以按照如下的规则将任意Lua值转换为C的布尔值：nil和false转换为0，所有其他的Lua值转换为1.对于类型不正确的值，函数lua_tolstring和lua_tothread返回NULL。不过，数值相关的函数都无法提示数值的类型错误，因此只能简单地返回0。以前我们需要调用函数lua_isnumber来检查类型，但是Lua5.2引入了如下的新函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lua_Number      lua_tonumberx(lua_State *L, <span class="built_in">int</span> idx, <span class="built_in">int</span> *isnum)</span><br><span class="line">lua_Integer     lua_tointegerx(lua_State *L,<span class="built_in">int</span> idx, <span class="built_in">int</span> *isnum)</span><br></pre></td></tr></table></figure>
<p>出口参数isnum返回了一个布尔值，来表示Lua值是否被强制转换为期望的类型。<br>函数lua_tolstring返回一个指向该字符串内部副本的指针，并将字符串的长度存入到参数len指定的位置。我们无法修改这个内部副本。Lua语言保证，只要对应的字符串还在栈中，那么这个指针就是有效的。当Lua调用的一个C函数返回时，Lua就会清空栈。因此，作为规则，永远不要指向Lua字符串的指针存放到获取该指针的函数之外。<br>函数lua_tolstring返回的所有字符串在其末尾都会有一个额外的\0，不过这些字符串中也可能会有\0，因此可以通过第三个参数len获取字符串的真实长度。特别的，假设栈顶的值是一个字符串，那么如下推断永远成立：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">size_t</span> len;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *s = lua_tolstring(L, <span class="number">-1</span> ,&amp;len); <span class="comment">/*任意Lua字符串*/</span></span><br><span class="line">assert(s[len] == <span class="string">&#x27;\0&#x27;</span>);</span><br><span class="line">assert(<span class="built_in">strlen</span>(s) &lt;= len);</span><br></pre></td></tr></table></figure>
<p>如果不需要长度信息，可以在调用函数lua_tolstring时将第三个参数设为NULL。不过，使用宏lua_tostring会更好，因此这个宏就是用NULL作为第三个参数来调用函数lua_tolstring的。<br>为了掩饰这些函数的用法，示例提供了一个有用的辅助函数，它输出整个栈的内容。</p>
<blockquote>
<p>对栈进行Dump</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">static void stackDump(lua_State *L)&#123;</span><br><span class="line">	<span class="built_in">int</span> i;</span><br><span class="line">	<span class="built_in">int</span> top = lua_gettop(L); /*栈的深度*/</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i&lt;= top;i++)&#123;</span><br><span class="line">		<span class="built_in">int</span> t = lua_type(L,i);</span><br><span class="line">		switch(t)&#123;</span><br><span class="line">			<span class="keyword">case</span> LUA_TSTRING:&#123;</span><br><span class="line">				printf(<span class="string">&quot;&#x27;%s&#x27;&quot;</span>,lua_tostring(L,i));</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> LUA_TBOOLEAN:&#123;</span><br><span class="line">				printf(lua_toboolean(L,i)?<span class="string">&quot;true&quot;</span>:<span class="string">&quot;false&quot;</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> LUA_TUNMBER:&#123;</span><br><span class="line">				printf(<span class="string">&quot;%g&quot;</span>,lua_tonumber(L,i));</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			default:&#123;</span><br><span class="line">				printf(<span class="string">&quot;%s&quot;</span>,lua_typename(L,t));</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		printf(<span class="string">&quot; &quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	printf(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个函数从栈底向栈顶遍历，并根据每个元素的类型打印其值。它打印字符串时会用单引号将其括起来，对数值类型的值则使用格式”%g”输出，对于其他C语言中不存在等价类型的值则只打印出它们的类型。<br>在Lua5.3中，由于整型总是可以被强制转换为浮点型，因此仍然可以用函数lua_tonumber和”%g”的格式打印所有的数值。但是，我们倾向于将整数打印为整型，以避免损失精度。此时，我们可以用新函数lua_isinteger来区分整型和浮点型：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> LUA_TNUMBER:&#123;</span><br><span class="line">	<span class="keyword">if</span> (lua_isinteger(L,i))</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,lua_tointeger(L,i));</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%g&quot;</span>,lua_tonumber(L,i));</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="其他栈操作"><a href="#其他栈操作" class="headerlink" title="其他栈操作"></a>其他栈操作</h3><p>除了上述在C语言和栈之间交换数据的函数外CAPI还提供了下列用于通过栈操作的函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">lua_gettop</span>			<span class="params">(lua_State *L)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">lua_settop</span>         <span class="params">(lua_State *L, <span class="type">int</span> index)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">lua_pushvalue</span>		<span class="params">(lua_State *L, <span class="type">int</span> index)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">lua_rotate</span>			<span class="params">(lua_State *L, <span class="type">int</span> index, <span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">lua_remove</span>  		<span class="params">(lua_State *L, <span class="type">int</span> index)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">lua_insert</span> 		<span class="params">(lua_State *L, <span class="type">int</span> index)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">lua_replace</span>        <span class="params">(lua_State *L, <span class="type">int</span> index)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">lua_copy</span> 			<span class="params">(lua_State *L, <span class="type">int</span> fromidx,<span class="type">int</span> toidx)</span>;</span><br></pre></td></tr></table></figure>
<p>函数lua_gettop返回栈中元素的个数，也即栈顶元素的索引。函数lua_settop将栈顶设置为一个指定的值，即修改栈中的元素数量。如果之前的栈顶比新设置的更高，那么高出来的这些元素就会被丢弃；反之，该函数会向栈中压入nil来不足大小。特别的，函数lua_settop(L,0)用于清空栈。在调用函数lua_settop时也可以使用负数索引；基于这个功能，CAPI提供了下面的宏，用于从栈中弹出n个元素：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> lua_pop(L,n)  lua_settop(L,-(n) -1)</span></span><br></pre></td></tr></table></figure>
<p>函数lua_pushvalue用于将指定索引上的元素的副本压入栈。<br>函数lua_rotate是Lua5.3中新引入的。顾名思义，该函数将指定索引的元素向栈顶转动n个位置。若n为整数，表示将元素向栈顶方向转动，而n为负数则表示向相反的方向转动。这是一个非常有用的函数，另外两个CAPI操作实际上是基于使用该函数的宏定义的。其中一个是lua_remove，用于删除指定索引的元素，并将该位置上的所有元素下移以填补空缺，其定义如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> lua_remove(L,idx) \ (lua_rotate(L,(idx),-1),lua_pop(L,1))</span></span><br></pre></td></tr></table></figure>
<p>也就是说，该函数会将栈顶转动一格，把想要的那个元素移动到栈顶，然后弹出该元素。另一个宏是lua_insert，用于将栈顶元素移动到指定位置，并上移指定位置之上的所有元素以开辟出一个元素的空间：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> lua_insert(L,inx)    lua_rotate(L,(idx),1)</span></span><br></pre></td></tr></table></figure>
<p>函数lua_replace弹出一个值，并将栈顶设置为指定索引上的值，而不移动任何元素。最后，函数lua_copy将一个索引上的值复制到另一个索引上，并且原值不受影响。请注意，以下的操作不会对空栈产生影响：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">lua_settop(L,<span class="number">-1</span>);<span class="comment">/*将栈顶设为当前值*/</span></span><br><span class="line">lua_insert(L,<span class="number">-1</span>);<span class="comment">/*将栈顶的元素移动到栈顶*/</span></span><br><span class="line">lua_copy(L,x,x);<span class="comment">/*把一个元素复制到它当前的位置*/</span></span><br><span class="line">lua_rotate(L,x,<span class="number">0</span>);<span class="comment">/*旋转零个位置*/</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>示例 栈操作示例</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;lua.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;luaxlib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">stackDump</span><span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	参见上面那个示例</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">	lua_State *L = luaL_newstate();</span><br><span class="line">	lua_pushboolean(L,<span class="number">1</span>);</span><br><span class="line">	lua_pushnumber(L,<span class="number">10</span>);</span><br><span class="line">	lua_pushnil(L);</span><br><span class="line">	lua_pushstring(L,<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">	stackDump(L):</span><br><span class="line">	<span class="comment">/*将输出：true 10 nil &#x27;hello&#x27; */</span></span><br><span class="line">	lua_pushvalue(L.<span class="number">-4</span>); stackDump(L);</span><br><span class="line">	<span class="comment">/*将输出：true 10 nil &#x27;hello&#x27; true */</span></span><br><span class="line">	lua_replace(L,<span class="number">3</span>); stackDump(L);</span><br><span class="line">	<span class="comment">/*将输出：true 10 nil &#x27;hello&#x27; */</span></span><br><span class="line">	lua_settop(L,<span class="number">6</span>);stackDump(L);</span><br><span class="line">	<span class="comment">/*将输出：true 10 true &#x27;hello&#x27; nil nil */</span></span><br><span class="line">	lua_rotate(L,<span class="number">3</span>,<span class="number">1</span>);stackDump(L);</span><br><span class="line">	<span class="comment">/*将输出：true 10 nil true &#x27;hello&#x27; nil */</span></span><br><span class="line">	lua_remove(L,<span class="number">-3</span>);stackDump(L);</span><br><span class="line">	<span class="comment">/*将输出：true 10 nil &#x27;hello&#x27; nil*/</span></span><br><span class="line">	lua_settop(L,<span class="number">-5</span>);stackDump(L);</span><br><span class="line">	<span class="comment">/*将输出：true */</span></span><br><span class="line">	lua_close(L);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用CAPI进行错误处理"><a href="#使用CAPI进行错误处理" class="headerlink" title="使用CAPI进行错误处理"></a>使用CAPI进行错误处理</h2><p>Lua中所有的结构都是动态的：它们会按需扩展，并且在可能时最后重新收缩。这意味着在Lua中内存分配失败可能无处不在，几乎所有的操作最终都可能会面临内存分配失败。此外，许多操作可能会抛出异常。例如，访问一个全局变量可能会触发__index元方法，而该元方法又可能会抛出异常。最后，分配内存的操作会触发垃圾收集器，而垃圾收集器又可能会调用同样可能抛出异常的析构器。简而言之，Lua API中的绝大部分函数都可能抛出异常。<br>Lua语言使用异常来提示错误，而没有再API的每个操作中使用错误码。与C++或Java不同，C语言没有提供异常处理机制。为了解决这个问题，Lua使用了C语言中的setjmp机制，setjmp营造了一个类似异常处理的机制。因此，大多数API函数都可以跑出异常而不是直接返回。<br>在编写库代码时，由于Lua会捕获所有异常，因此，对我们来说使用longjmp并不是进行额外的操作。不过，在编写应用程序代码时，则必须提供一种捕获异常的方法。</p>
<h3 id="处理应用代码中的错误"><a href="#处理应用代码中的错误" class="headerlink" title="处理应用代码中的错误"></a>处理应用代码中的错误</h3><p>如果应用调用了Lua API中的函数，就可能发生错误。Lua语言通常通过长跳转来提示错误。但是，如果没有相应的setjmp，解释器就无法进行长跳转。此时，API中的任何错误都会导致Lua调用紧急函数，当这个函数返回后，应用就会退出。我们可以通过函数lua_atpanic来设置自己的紧急函数，但作用不大。<br>要正确地处理应用代码中的错误，就必须通过Lua语言调用我们自己的代码，这样Lua语言才能设置适合的上下文来捕获异常，即在setjmp的上下文中运行代码。类似于通过函数pcall在保护模式中运行Lua代码，我们也可以用函数lua_pcall运行C代码。更具体地说，可以把C代码封装到一个函数F中，然后使用lua_pcall调用这个函数F。通过这种方式，我们的C代码会在保护模式下运行。即便发生内存分配失败，函数lua_pcall也会返回一个对应的错误码，是解释器能够保持一致的状态，如下所示：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">foo</span><span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	code to run in protected <span class="title function_">mode</span><span class="params">(要以保护模式运行的代码)</span></span><br><span class="line">	<span class="keyword">return</span> 0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">secure_foo</span><span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	lua_pushcfunction(L,foo)<span class="comment">/*将foo作为Lua函数压栈*/</span></span><br><span class="line">	<span class="keyword">return</span> (lua_pcall(L,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>) == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上述示例中，无论发生什么，调用secure_foo时都会返回一个布尔值，来表示foo执行是否成功。特别的，请注意，栈中已经预先分配了空间，而且函数lua_pushcfunction不会分配内存，这样才不会引发错误。</p>
<h3 id="处理库代码中的错误"><a href="#处理库代码中的错误" class="headerlink" title="处理库代码中的错误"></a>处理库代码中的错误</h3><p>Lua是一种安全的语言。这意味着不管用Lua写什么，也不管写出来的内容多么不正确，我们总能用它自身的机制来理解程序的行为。此外，程序中的错误也是通过Lua语言的机制来检测和解释的。与之相比，许多C语言代码中的错误只能从底层硬件的角度来解释。<br>只要往Lua中加入新的C函数，这种安全性就可能被打破。例如，一个等价于BASIC命令poke的函数就可能导致各种各样的内存崩溃。因此，我们必须确保新加入的内容对Lua语言来说是安全的，并提供妥善的错误处理。<br>正如之前讨论的，C语言程序必须通过lua_pcall设置错误处理。不过，在为lua编写库函数时，通常无须处理错误。库函数抛出的错误要么被Lua中的pcall捕获，要么被应用代码中的lua_pcall捕获。因此，当C语言库中的函数检测到错误时，只需要简单地调用lua_error即可。函数lua_error会收拾Lua系统中的残局，然后跳转回保护模式调用处，并传递错误信息。</p>
<h2 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h2><p>Lua语言核心对内存分配不进行任何假设，它既不会调用malloc也不会调用realloc来分配内存。相反，Lua语言核心只会通过一个分配函数来分配和释放内存，当用户创建Lua状态时必须提供该函数。<br>luaL_newstate是一个用默认分配函数来创建Lua状态的辅助函数。该默认分配函数使用了来自C语言标准函数库的标准函数malloc-realloc-free，对于大多数应用程序来说，这几个函数够用了。但是，要完全控制Lua的内存分配也很容易，使用原始的lua_newstate来创建我们自己的Lua状态即可：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">lua_State *<span class="title function_">lua_newstate</span><span class="params">(lua_Alloc f, <span class="type">void</span> *ud)</span>;</span><br></pre></td></tr></table></figure>
<p>该函数有两个参数：一个是分配函数，另一个是用户数据。用这种方式创建的Lua状态会通过调用f完成所有的内存分配和释放，甚至结构lua_State也是由f分配的。<br>分配函数必须满足lua_Alloc的类型声明：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">void</span> * (*lua_Alloc) (<span class="type">void</span> *ud,</span><br><span class="line">							 <span class="type">void</span> *ptr,</span><br><span class="line">							 <span class="type">size_t</span> osize,</span><br><span class="line">							 <span class="type">size_t</span> nsize);</span><br></pre></td></tr></table></figure>
<p>第一个参数始终为lua_newstate所提供的用户数据；第二个参数是正要被分配或者释放的地址；第三个参数是原始块的大小；最后一个参数是请求的块大小。如果ptr不是NULL，Lua会保证其之前被分配的大小就是osize。<br>Lua语言使用NULL表示大小为零的块。当nsize为零时，分配函数必须释放ptr指向的块并返回NULL，对应于所要求的大小的块。当ptr是NULL时，该函数必须分配并返回一个指定大小的块；如果无法分配指定的块，则必须返回NULL。如果ptr是NULL并且nsize为零，则两条规则都适用：最终结果是分配函数什么都不做，返回NULL。<br>最后，当ptr不是NULL并且nsize不为零时，分配函数应该像realloc一样重新分配块并且返回新地址。同样，当出现错误分配函数必须返回NULL。Lua假定分配函数在块的新尺寸小于或等于旧尺寸时不会失败。<br>luaL_newstate使用的标准分配函数定义如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">l_alloc</span> <span class="params">(<span class="type">void</span> *ud , <span class="type">void</span> *ptr, <span class="type">size_t</span> osize, <span class="type">size_t</span> nsize)</span>&#123;</span><br><span class="line">	(<span class="type">void</span>)ud; (<span class="type">void</span>)osie;<span class="comment">/*未使用*/</span></span><br><span class="line">	<span class="keyword">if</span>(nsize == <span class="number">0</span> )&#123;</span><br><span class="line">		<span class="built_in">free</span>(ptr);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">realloc</span> (ptr,nsize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该函数假设free(NULL)什么也不做，并且realloc(NULL,size)等价于malloc(size)。IOSC标准会托管这两种行为。<br>我们可以通过调用lua_getallocf恢复Lua状态的内存分配器：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">lua_Alloc <span class="title function_">lua_getallocf</span> <span class="params">(lua_State *L, <span class="type">void</span> **ud)</span>;</span><br></pre></td></tr></table></figure>
<p>如果ud不是NULL，那么该函数会把*ud设置为该分配器的用户数据。我们可以通过调用lua_setallocf来更改Lua状态的内存分配器：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">lua_setallocf</span> <span class="params">(lua_State *L, Lua_Alloc f, <span class="type">void</span> *ud)</span>;</span><br></pre></td></tr></table></figure>
<p>请记住，所有新的分配函数都有责任释放由前一个分配函数分配的块。通常情况下，新的分配函数是在旧分配函数的基础上做了包装，来追踪或同步访问堆的。<br>Lua在内部不会为了重用而缓存空闲内存。它假定分配函数会完成这种缓存工作；而优秀的分配函数确实也会这么做。Lua不会试图压缩内存碎片。研究表明，内存碎片更多是由糟糕的分配决策导致的，而非程序的行为造成的；而优秀的分配函数不会造成太多内存碎片。<br>对于已有的优秀分配函数，想要做到比它更好是很难的，但有时候也不妨试一试。例如，Lua会告诉你已经释放或者重新分配的块的大小。因此，一个特定的分配函数不需要保存有关块大小的信息，以此减少每个块的内存开销。<br>还有一种可以改善的内存分配的场景，是在多线程系统中。这种系统通常需要对内存分配函数进行线程同步，因为这些函数使用的是全局资源。不过，对Lua状态的访问也必须是同步的——或者更好的情况是，限制只有一个线程能够访问Lua状态。如果每个Lua状态都从私有的内存池中分配内存，那么分配函数就可以避免线程同步导致的额外开销了。</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo添加jVectorMap足迹地图</title>
    <url>/ced8a6a3.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>本方法适用与任何主题<br>足迹地图作者效果如下：<br><img data-src="https://s1.ax1x.com/2022/11/03/xqsHHK.jpg" alt="效果图" /></p>
<span id="more"></span>

<h3 id="jVectorMap"><a href="#jVectorMap" class="headerlink" title="jVectorMap"></a>jVectorMap</h3><p>JVectorMap 是一个优秀的、兼容性强的 jQuery 地图插件。</p>
<p>它可以工作在包括 IE6 在内的各款浏览器中，矢量图输出，除官方提供各国地图数据外，用户可以使用数据转换程序定制地图数据。例如街道地图、小区地图等等。</p>
<p>JVectorMap 官方网站提供了很多相关文档和使用示例，感兴趣的小伙伴可以自己研究一下。</p>
<a href="http://jvectormap.com/" title="" target="">官方网站,</a>

<p>今天教大家通过 jVectorMap 制作旅行足迹地图，最终的效果可以查看下面的 Demo 演示（中国），并教大家如何将制作好的足迹地图嵌入到我们自己的博客中。</p>
<a href="https://lengmo714.top/net/map/index.html" title="" target="">Demo,</a>


<h3 id="获取源码"><a href="#获取源码" class="headerlink" title="获取源码"></a>获取源码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">git clone <span class="attr">https</span>:<span class="comment">//github.com/HelloWuJiaYi/jVectorMap-Footprint</span></span><br></pre></td></tr></table></figure>
<h3 id="文件说明"><a href="#文件说明" class="headerlink" title="文件说明"></a>文件说明</h3><img data-src="https://s1.ax1x.com/2022/11/03/xqs7B6.jpg" alt="示意图"/>

<ul>
<li>绿色框中是必须要引入的文件内容。</li>
<li>下面三个文件是展示的地图，可自行到官网下载需要的地图 : <a href="http://jvectormap.com/maps/world/world/">http://jvectormap.com/maps/world/world/</a>  ，拷贝到 js 目录。(这里获取的源代码中已经提供)</li>
<li>index.html中需要添加足迹位置和相关样式。</li>
</ul>
<h3 id="如何更换不同国家地图"><a href="#如何更换不同国家地图" class="headerlink" title="如何更换不同国家地图"></a>如何更换不同国家地图</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!--引入jQuery框架--&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-1.9.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!--引入jVectorMap库--&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-jvectormap-1.2.2.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!--引入样式表--&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;js/jquery-jvectormap-1.2.2.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">media</span>=<span class="string">&quot;screen&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!--引入中国地图数据库--&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-jvectormap-cn-merc-en.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!--引入美国地图数据库--&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!--script type=&quot;text/javascript&quot; src=&quot;js/jquery-jvectormap-us-aea.js&quot;&gt;&lt;/script--&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!--引入世界地图数据库--&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!--script type=&quot;text/javascript&quot; src=&quot;js/jquery-jvectormap-world-mill.js&quot;&gt;&lt;/script--&gt;</span></span></span><br><span class="line"></span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br></pre></td></tr></table></figure>

<p>提前下载需要的国家地图，默认使用中国地图拷贝到 <code>js</code> 目录下。</p>
<p>在 <code>&lt;head&gt;</code> 标签里引入地图数据： <code>&lt;script type=&quot;text/javascript&quot; src=&quot;js/地图文件名&quot;&gt;&lt;/script&gt;</code><br>同时只能有一个地图库，注意不要引入多个地图数据。</p>
<h3 id="修改地图颜色等相关样式"><a href="#修改地图颜色等相关样式" class="headerlink" title="修改地图颜色等相关样式"></a>修改地图颜色等相关样式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  &lt;!--background-<span class="attr">color</span>: 地图背景颜色--&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color:#353535&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="string">&#x27;#map&#x27;</span>).<span class="title function_">vectorMap</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 此处更改地图</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">map</span>: <span class="string">&#x27;cn_merc_en&#x27;</span>,   <span class="comment">// 中国地图</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//map: &#x27;us-aea&#x27;,     // 美国地图</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//map: &#x27;world-mill&#x27;, // 世界地图</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">backgroundColor</span>: <span class="string">&#x27;transparent&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">zoomMin</span>: <span class="number">0.9</span>, <span class="comment">// 鼠标缩放时的最小比例</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">zoomMax</span>: <span class="number">2.4</span>, <span class="comment">// 鼠标缩放时的最大比例</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">focusOn</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">x</span>: <span class="number">0.55</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">y</span>: <span class="number">2</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">scale</span>: <span class="number">0.9</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">regionStyle</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">initial</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">fill</span>: <span class="string">&#x27;#e5e5e5&#x27;</span>,   <span class="comment">// 地图颜色</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="string">&quot;fill-opacity&quot;</span>: <span class="number">1</span>, <span class="comment">// 省份（州）是否隐藏，鼠标滑动时显示; 1：显示，2：隐藏。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">stroke</span>: <span class="string">&#x27;none&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="string">&quot;stroke-width&quot;</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="string">&quot;stroke-opacity&quot;</span>: <span class="number">1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">hover</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">fill</span>: <span class="string">&#x27;#ccc&#x27;</span>,  <span class="comment">// 鼠标滑动至某省份的高亮颜色。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="string">&quot;fill-opacity&quot;</span>: <span class="number">0.8</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">selected</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">fill</span>: <span class="string">&#x27;yellow&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">selectedHover</span>: &#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">markerStyle</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">initial</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">fill</span>: <span class="string">&#x27;#fd8888&#x27;</span>, <span class="comment">// 足迹位置的填充颜色</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">stroke</span>: <span class="string">&#x27;#fff&#x27;</span>   <span class="comment">// 足迹位置的描边颜色</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">hover</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">fill</span>: <span class="string">&#x27;#fd2020&#x27;</span>, <span class="comment">// 鼠标滑动至足迹位置后的填充颜色</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">stroke</span>: <span class="string">&#x27;#fff&#x27;</span>,  <span class="comment">// 鼠标滑动至足迹位置后的描边颜色</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="string">&quot;fill-opacity&quot;</span>: <span class="number">0.8</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>参照代码注释修改颜色和相关样式。</p>
<p><strong>千万注意：</strong> 在更改地图时 <code>map: &#39;地图名称&#39;</code> ，地图名称是地图数据文件名的后半部分。</p>
<p>例如：</p>
<p>中国地图文件名：<code>jquery-jvectormap-cn-merc-en.js</code></p>
<p>那地图的名称是：<code>cn-merc-en</code></p>
<p>但是要注意把 <code>-</code> (横杠)更改成 <code>_</code>（下划线）。 否则不会显示地图。</p>
<h3 id="添加足迹位置"><a href="#添加足迹位置" class="headerlink" title="添加足迹位置"></a>添加足迹位置</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">markers</span>: [ <span class="comment">// 足迹位置</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;latLng: [经度（保留两位小数）, 纬度（保留两位小数）], name: &#x27;城市名称&#x27;&#125;,</span></span><br><span class="line"></span><br><span class="line">        &#123;<span class="attr">latLng</span>: [<span class="number">39.90</span>, <span class="number">116.41</span>], <span class="attr">name</span>: <span class="string">&#x27;北京&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">latLng</span>: [<span class="number">31.24</span>, <span class="number">121.50</span>], <span class="attr">name</span>: <span class="string">&#x27;上海&#x27;</span>&#125;,</span><br><span class="line"></span><br><span class="line">        &#123;<span class="attr">latLng</span>: [<span class="number">46.06</span>, <span class="number">122.06</span>], <span class="attr">name</span>: <span class="string">&#x27;内蒙古 - 乌兰浩特&#x27;</span>&#125;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>
<p>语法：<code>&#123;latLng: [经度（保留两位小数）, 纬度（保留两位小数）], name: &#39;城市名称&#39;&#125;</code>。</p>
<h3 id="嵌入到博客"><a href="#嵌入到博客" class="headerlink" title="嵌入到博客"></a>嵌入到博客</h3><p>这里介绍作者嵌入到博客中的方法，不一定通用。<br>作者使用的是Hexo静态博客。<br>首先将下载下来的源代码放到blog文件夹下，上传到服务器。<br>再在主题配置文件<code>_config.yml</code>中<code>menu</code>中添加刚刚修改好的<code>index.html</code>在服务器上的文件路径，比如<code>https://abc.com/map/index</code><br>最后将修改后的配置文件上传即可。</p>
<a href="https://lengmo714.top/net/map/index.html" title="" target="">笔者效果,</a>

]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo Next主题美化归档页</title>
    <url>/5391295.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>hexo静态博客归档页美化后如下<br><img data-src="https://s1.ax1x.com/2022/11/03/xqsc7T.jpg" art="效果图"/></p>
<span id="more"></span>
<p>由于笔者使用的是next主题最新版本，所以网上很多方法都没有行通。于是便记录下来，方便作者自己，也方便和我有同样问题的朋友。<br><a href="https://lengmo714.top/archives/" class="演示地址">Demo</a></p>
<h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>在<code>blog/themes/next/layout/_macro/ </code>下新建文件<code>post-collapse.swig</code>并复制一下内容</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;% macro <span class="title function_">render</span>(posts) %&#125;</span><br><span class="line">&#123;%- set current_year = <span class="string">&#x27;1970&#x27;</span> %&#125;</span><br><span class="line">&#123;%- <span class="keyword">for</span> post <span class="keyword">in</span> posts.<span class="title function_">toArray</span>() %&#125;</span><br><span class="line"></span><br><span class="line">  &#123;%- set year = <span class="title function_">date</span>(post.<span class="property">date</span>, <span class="string">&#x27;YYYY&#x27;</span>) %&#125;</span><br><span class="line"></span><br><span class="line">  &#123;%- <span class="keyword">if</span> year !== current_year %&#125;</span><br><span class="line">    &#123;%- set current_year = year %&#125;</span><br><span class="line">    &lt;div <span class="keyword">class</span>=<span class="string">&quot;collection-year&quot;</span>&gt;</span><br><span class="line">      &lt;&#123;%- <span class="keyword">if</span> theme.<span class="property">seo</span> %&#125;h2&#123;% <span class="keyword">else</span> %&#125;h1&#123;%- endif %&#125; <span class="keyword">class</span>=<span class="string">&quot;collection-header&quot;</span>&gt;&#123;&#123; current_year &#125;&#125;&lt;/&#123;%- <span class="keyword">if</span> theme.<span class="property">seo</span> %&#125;h2&#123;% <span class="keyword">else</span> %&#125;h1&#123;%- endif %&#125;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">  &lt;article <span class="keyword">class</span>=<span class="string">&quot;my-post post-type-&#123;&#123; post.type | default(&#x27;normal&#x27;) &#125;&#125;&quot;</span> itemscope itemtype=<span class="string">&quot;http://schema.org/Article&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;my-post-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;my-post-meta&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">time</span> <span class="attr">class</span>=<span class="string">&quot;my-post-time&quot;</span> <span class="attr">itemprop</span>=<span class="string">&quot;dateCreated&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">datetime</span>=<span class="string">&quot;&#123;&#123; moment(post.date).format() &#125;&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">content</span>=<span class="string">&quot;&#123;&#123; date(post.date, config.date_format) &#125;&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;&#123; date(post.date, &#x27;MM-DD&#x27;) &#125;&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">time</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      &lt;&#123;%- if theme.seo %&#125;h3&#123;% else %&#125;h2&#123;%- endif %&#125; class=&quot;my-post-title&quot;&gt;</span></span><br><span class="line"><span class="language-xml">        &#123;%- if post.link %&#125;&#123;# Link posts #&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;my-post-title-link post-title-link-external&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(post.link) &#125;&#125;&quot;</span> <span class="attr">itemprop</span>=<span class="string">&quot;url&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;&#123; post.title or post.link &#125;&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-external-link&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;% else %&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;my-post-title-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot;</span> <span class="attr">itemprop</span>=<span class="string">&quot;url&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;% if post.type === &#x27;picture&#x27; %&#125;</span></span><br><span class="line"><span class="language-xml">              &#123;&#123; post.content &#125;&#125;</span></span><br><span class="line"><span class="language-xml">            &#123;% else %&#125;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">itemprop</span>=<span class="string">&quot;name&quot;</span>&gt;</span>&#123;&#123; post.title or __(&#x27;post.untitled&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;% endif %&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;%- endif %&#125;</span></span><br><span class="line"><span class="language-xml">      &lt;/&#123;%- if theme.seo %&#125;h3&#123;% else %&#125;h2&#123;%- endif %&#125;&gt;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line">  &lt;/article&gt;</span><br><span class="line"></span><br><span class="line">&#123;%- endfor %&#125;</span><br><span class="line">&#123;% endmacro %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>复制下面内容，粘贴到你所用主题的<code>index.styl</code>后面</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 归档页样式 began */</span></span><br><span class="line">.<span class="property">page</span>-archive .<span class="property">archive</span>-page-counter &#123;</span><br><span class="line">  font-<span class="attr">size</span>: 18px;</span><br><span class="line">  background-<span class="attr">color</span>: #49b1f5;</span><br><span class="line">  padding-<span class="attr">left</span>: 10px;</span><br><span class="line">  padding-<span class="attr">right</span>: 10px;</span><br><span class="line">  border-<span class="attr">radius</span>: 8px;</span><br><span class="line">  <span class="attr">color</span>: #fff;</span><br><span class="line">  +<span class="title function_">mobile</span>(<span class="params"></span>) &#123;</span><br><span class="line">    font-<span class="attr">size</span>: 16px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">my</span>-post-time&#123;</span><br><span class="line">  font-<span class="attr">size</span>: 11px;</span><br><span class="line">  <span class="attr">position</span>: absolute;</span><br><span class="line">  <span class="attr">color</span>: #fff;</span><br><span class="line">  background-<span class="attr">color</span>: #49b1f5;</span><br><span class="line">  border-<span class="attr">radius</span>: 5px;</span><br><span class="line">  padding-<span class="attr">left</span>: 5px;</span><br><span class="line">  padding-<span class="attr">right</span>: 5px;</span><br><span class="line">  margin-<span class="attr">left</span>: 15px;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">mypost</span>&#123;</span><br><span class="line">  <span class="attr">position</span>: relative;</span><br><span class="line">  margin-<span class="attr">bottom</span>: 1rem;</span><br><span class="line">  -webkit-<span class="attr">transition</span>: all .2s ease-<span class="keyword">in</span>-out;</span><br><span class="line">  -moz-<span class="attr">transition</span>: all .2s ease-<span class="keyword">in</span>-out;</span><br><span class="line">  -o-<span class="attr">transition</span>: all .2s ease-<span class="keyword">in</span>-out;</span><br><span class="line">  -ms-<span class="attr">transition</span>: all .2s ease-<span class="keyword">in</span>-out;</span><br><span class="line">  <span class="attr">transition</span>: all .2s ease-<span class="keyword">in</span>-out;</span><br><span class="line">&#125;</span><br><span class="line">a.<span class="property">my</span>-post-title-<span class="attr">link</span>:before&#123;</span><br><span class="line">  <span class="attr">top</span>: 10px;</span><br><span class="line">  <span class="attr">width</span>: 18px;</span><br><span class="line">  <span class="attr">height</span>: 18px;</span><br><span class="line">  <span class="attr">content</span>: <span class="string">&quot;📚&quot;</span>;</span><br><span class="line">  margin-<span class="attr">right</span>: 5px;</span><br><span class="line">  <span class="attr">font</span>: normal normal normal 14px/<span class="number">1</span> <span class="title class_">FontAwesome</span>;</span><br><span class="line">  font-<span class="attr">size</span>: 15px;</span><br><span class="line">  line-<span class="attr">height</span>: 18px;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">my</span>-<span class="attr">post</span>:hover&#123;</span><br><span class="line">  <span class="attr">transform</span>: <span class="title function_">scale</span>(<span class="number">1.1</span>);</span><br><span class="line">  box-<span class="attr">shadow</span>: 10px 10px 15px 2px <span class="title function_">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">.12</span>), <span class="number">0</span> <span class="number">0</span> 6px <span class="number">0</span> <span class="title function_">rgba</span>(<span class="number">104</span>, <span class="number">104</span>, <span class="number">105</span>, <span class="number">0.1</span>);</span><br><span class="line">  border-<span class="attr">radius</span>: 30px;</span><br><span class="line">  <span class="attr">width</span>: 400px;</span><br><span class="line">  <span class="attr">padding</span>: 1px 10px;</span><br><span class="line">  margin-<span class="attr">left</span>: 25px;</span><br><span class="line">  font-<span class="attr">size</span>: 16px;</span><br><span class="line">  transition-<span class="attr">duration</span>: <span class="number">0.</span>15s;</span><br><span class="line">  +<span class="title function_">mobile</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="attr">width</span>: 260px;</span><br><span class="line">    margin-<span class="attr">left</span>: 18px;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//display:flex;</span></span><br><span class="line">&#125;</span><br><span class="line">a.<span class="property">my</span>-post-title-link&#123;</span><br><span class="line">  text-<span class="attr">decoration</span>: none;</span><br><span class="line">  font-<span class="attr">size</span>: 15px;</span><br><span class="line">  font-<span class="attr">weight</span>: <span class="number">400</span>;</span><br><span class="line">  +<span class="title function_">mobile</span>(<span class="params"></span>) &#123;</span><br><span class="line">    font-<span class="attr">size</span>: 14px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">my</span>-post-title&#123;</span><br><span class="line">  <span class="attr">display</span>: block;</span><br><span class="line">  margin-<span class="attr">left</span>: <span class="number">4.</span>5rem;</span><br><span class="line">  <span class="attr">color</span>: #4c4948;</span><br><span class="line">  text-<span class="attr">decoration</span>: none;</span><br><span class="line">  font-<span class="attr">size</span>: .8rem;</span><br><span class="line">  <span class="attr">cursor</span>: pointer;</span><br><span class="line">  +<span class="title function_">mobile</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//margin-left: 4rem;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">my</span>-post-header&#123;</span><br><span class="line">  <span class="attr">position</span>: top;</span><br><span class="line">  margin-<span class="attr">bottom</span>: 1rem;</span><br><span class="line">  -webkit-<span class="attr">transition</span>: all .2s ease-<span class="keyword">in</span>-out;</span><br><span class="line">  -moz-<span class="attr">transition</span>: all .2s ease-<span class="keyword">in</span>-out;</span><br><span class="line">  -o-<span class="attr">transition</span>: all .2s ease-<span class="keyword">in</span>-out;</span><br><span class="line">  -ms-<span class="attr">transition</span>: all .2s ease-<span class="keyword">in</span>-out;</span><br><span class="line">  <span class="attr">transition</span>: all .2s ease-<span class="keyword">in</span>-out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//.my-post-title-link&#123;</span></span><br><span class="line"><span class="comment">//  font-size: 16px;</span></span><br><span class="line"><span class="comment">//  font-weight: 500;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">.<span class="property">my</span>-post-meta&#123;</span><br><span class="line">  <span class="attr">position</span>: absolute;</span><br><span class="line">  <span class="attr">color</span>: #99a9bf;</span><br><span class="line">  <span class="attr">width</span>: 80px;</span><br><span class="line">  <span class="attr">color</span>: #<span class="number">114142</span>;</span><br><span class="line">&#125;</span><br><span class="line">div.<span class="property">post</span>-block.<span class="property">tag</span> .<span class="property">collection</span>-title h2 &#123;</span><br><span class="line">  border-<span class="attr">width</span>: 1px;</span><br><span class="line">  border-<span class="attr">style</span>: solid;</span><br><span class="line">  border-<span class="attr">color</span>: #3f3f3f;</span><br><span class="line">  border-<span class="attr">radius</span>: 20px;</span><br><span class="line">  font-<span class="attr">size</span>: 22px;</span><br><span class="line">  background-<span class="attr">color</span>: #b4e8fa;</span><br><span class="line">  <span class="attr">padding</span>: 2px 15px;</span><br><span class="line">  letter-<span class="attr">spacing</span>: <span class="number">1.</span>5px;</span><br><span class="line">  box-<span class="attr">sizing</span>: border-box;</span><br><span class="line">  <span class="attr">color</span>: #3f3f3f;</span><br><span class="line">  <span class="attr">display</span>: inline-block;</span><br><span class="line">  <span class="attr">margin</span>: 10px <span class="number">0</span> 10px;</span><br><span class="line">  text-<span class="attr">align</span>: center;</span><br><span class="line">  +<span class="title function_">mobile</span>(<span class="params"></span>)&#123;</span><br><span class="line">    font-<span class="attr">size</span>: 18px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 归档页样式 end */</span></span><br></pre></td></tr></table></figure>
<p>粘贴文件路径如图</p>
<img data-src="https://s1.ax1x.com/2022/11/03/xqs6BV.jpg" art="示意图" />

<h3 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h3><p>前两步可能网上很多文章都提到过，作者也按照其方法试了很多次都没有成功。这里作者写下自己所改动的地方<br>打开<code>blog/themes/next/layout/archive.njk</code><br>将里面第二行所引用的<code>_macro/post-collapse.njk</code>改为<code>_macro/post-collapse.swig</code>即可<br><img data-src="https://s1.ax1x.com/2022/11/03/xqs2AU.jpg" art="示意图" /></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>IE浏览器停用，靠IE才能打开的网页怎么办</title>
    <url>/fbea9931.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>众所周知，微软已经停用IE浏览器，取而代之的是Edge浏览器。这一改变，导致现在市面上需要仅IE浏览器才能打开的网站无法使用，网上有许多的解决方法，这里笔者也介绍一种我正在使用的。</p>
<p>笔者显示需要打开这个网站<a href="https://www.yljr.com/register.xhtml">中企云链</a>，打开就会有下面弹窗提示：<br><img data-src="https://pic.imgdb.cn/item/664332a50ea9cb1403a5089c.png" alt="" /></p>
<h3 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h3><ol>
<li>打开Edge浏览器，点击右上角的三个点按钮，选择<code>设置</code>”&#96;。<img data-src="https://pic.imgdb.cn/item/664335c30ea9cb1403a9ddb4.jpg" alt="" /></li>
<li>在设置菜单中选择<code>默认浏览器</code>，将<code>允许在Internet Explorer模式下重新加载网站</code>设置为<code>允许</code>。<img data-src="https://pic.imgdb.cn/item/664335ee0ea9cb1403aa1a24.png" alt="" /></li>
<li>点击<code>重启</code>，以便使设置生效。<img data-src="https://pic.imgdb.cn/item/664336140ea9cb1403ab4f22.png" alt="" /></li>
<li>浏览器重启后，在Edge浏览器中打开所需网页，点击右上角的三个点，然后选择<code>在Internet Explorer模式下重新加载网站</code>。<img data-src="https://pic.imgdb.cn/item/6643362b0ea9cb1403ac3245.jpg" alt="" /></li>
</ol>
<p>设置完后，就可以正常使用啦~</p>
]]></content>
      <categories>
        <category>电脑使用技巧</category>
      </categories>
      <tags>
        <tag>电脑使用技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中System.out.println和System.out.print的区别</title>
    <url>/774329ab.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>java里常用的控制台输出语句有System.out.println和System.out.print。但是这2者有什么区别了？</p>
<p>最明显的区别就是</p>
<blockquote>
<p>System.out.println()输出后追加一个换行<br>而 System.out.print()输出后不会换行</p>
</blockquote>
<p>例如:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForEachLoop</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        String[] words = &#123;<span class="string">&quot;Welcome &quot;</span>,<span class="string">&quot;to &quot;</span>,<span class="string">&quot;myBlog&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (String word: words)&#123;</span><br><span class="line">            System.out.println(word);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Welcome</span><br><span class="line">to</span><br><span class="line">myBlog</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForEachLoop</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        String[] words = &#123;<span class="string">&quot;Welcome &quot;</span>,<span class="string">&quot;to &quot;</span>,<span class="string">&quot;myBlog&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (String word: words)&#123;</span><br><span class="line">            System.out.print(word);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Welcome to myBlog</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java变量</title>
    <url>/c4c9aa95.html</url>
    <content><![CDATA[<h2 id="什么是变量"><a href="#什么是变量" class="headerlink" title="什么是变量"></a>什么是变量</h2><p>在程序设计中，变量是指一个包含值的存储地址以及对应的符号名称。<br>从定义上来看，变量大概可分为两部分：变量的名字和变量的值，可通过变量名来访问变量值。简单来说，变量就是存储数据的载体。</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>对于 Java 语言来讲，Java 是一种强类型的语言，因此变量都必须有一个类型。在 Java 代码中，变量是长这个样子的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// =左侧的age是变量名，右侧的22是变量值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">22</span>;</span><br></pre></td></tr></table></figure>

<h2 id="创建变量"><a href="#创建变量" class="headerlink" title="创建变量"></a>创建变量</h2><p>我们已经在上面看到了变量在代码中的样子，现在我们来动手创建变量。</p>
<p>在Java语言中，我们需要做两件事才能创建一个变量：</p>
<ul>
<li>给变量起一个名字</li>
<li>定义变量的数据类型<br>创建变量的过程也叫声明变量，声明变量的语法如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DataType 变量名;</span><br></pre></td></tr></table></figure>
<p>声明一个变量，实例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a;</span><br></pre></td></tr></table></figure>
<p>上述代码，声明了一个名字为<code>a</code>，类型为<strong>整型</strong>的变量。</p>
<p>我们可以再声明一个名字为<code>b</code>，类型为<strong>字符型</strong>的变量，实例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> b;</span><br></pre></td></tr></table></figure>
<p>再声明两个整型的变量<code>age</code>、<code>number</code>，实例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">int</span> number;</span><br></pre></td></tr></table></figure>
<h2 id="给变量赋值"><a href="#给变量赋值" class="headerlink" title="给变量赋值"></a>给变量赋值</h2><p>变量声明操作已经告诉了编译器变量的数据类型。数据类型决定了变量中可以存放什么，不能存放什么，上述的变量<code>a</code>为<code>int</code>类型（整型），因此只能存放整数。</p>
<p>一旦声明了一个变量，我们就可以使用赋值语句为其赋值，实例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 变量声明语句</span></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="comment">// 赋值语句</span></span><br><span class="line">a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>为变量分配值的语句，就称为赋值语句。需要特别提醒的是，语句中<code>=</code>的意义不同于数学中的等号，在 Java 中，<code>=</code>是赋值符号。</p>
<p>对于变量的声明和赋值操作，我们也可以将这两条语句合并成一条语句，实例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>另外，如果要创建多个类型相同的变量，我们可以在一条语句中将多个变量的声明进行分组：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a, b;</span><br><span class="line">a = <span class="number">1</span>;</span><br><span class="line">b = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<p>为了精简语法，还可以将变量的声明和赋值同时分组：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>, b = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<p>在作用域范围内，变量的值能够随时访问或重新赋值，比如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PrintVariable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    	System.out.println(<span class="string">&quot;修改前变量a=&quot;</span> + a);</span><br><span class="line">    	<span class="comment">// 将变量a重新赋值为100</span></span><br><span class="line">    	a = <span class="number">100</span>;</span><br><span class="line">    	System.out.println(<span class="string">&quot;修改后变量a=&quot;</span> + a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修改前变量a=<span class="number">20</span></span><br><span class="line">修改后变量a=<span class="number">100</span></span><br></pre></td></tr></table></figure>
<p>上述代码中，声明了一个整型变量<code>a</code>，且初始化值为<code>20</code>，可以使用<code>a = 100</code>;这种赋值语句，对变量<code>a</code>重新赋值。</p>
<p>注意，在 Java 中，对变量进行重新赋值，这样的写法是错误的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">100</span>;</span><br></pre></td></tr></table></figure>
<p>编译代码，将会抛出异常：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Test.java:5: 错误: 已在方法 main(String[])中定义了变量 a</span><br><span class="line">	int a = 2;</span><br><span class="line">	    ^</span><br><span class="line">1 个错误</span><br></pre></td></tr></table></figure>
<p>编译报错的原因很简单，第二行代码再次定义了变量<code>a</code>，而变量<code>a</code>已经在内存中存在了，不能再重复定义。这与对变量重新赋值不同。</p>
<h2 id="变量命名规范"><a href="#变量命名规范" class="headerlink" title="变量命名规范"></a>变量命名规范</h2><p>对于变量的命名，每种编程语言都有自己的规则和约定，Java 语言也不例外。命名变量的规则和约定如下：</p>
<ul>
<li><strong>变量的名称可以是任何合法的标识符，以字母，美元符号<code>$</code>或下划线<code>_</code>开头</strong>。但是，按照约定俗成，变量应始终以字母开头，不推荐使用美元符号和下划线开头；</li>
<li><strong>开头后续的字符可以是字母、数字、美元符号或下划线</strong>。为变量选择名称时，推荐使用完整的英文单词，不推荐使用单词缩写，更不要使用中文拼音。这样做有利于代码的阅读和理解。另外请牢记，选择的名称不能是<strong>关键字</strong>或<strong>保留字</strong>；</li>
<li><strong>变量命名区分大小写</strong>；</li>
<li><strong>变量命名应采用小驼峰命名法</strong>。所谓小驼峰命名法，就是如果你选择的名称只包含一个单词，那么用全部小写字母拼写该单词；如果名称包含多个单词，请将第二个单词起的每个单词的第一个字母都大写；</li>
<li><strong>如果变量存储了一个常量值，要将每个字母大写并用下划线字符分隔每个单词</strong>。比如<code>static final int MAX_NUM = 100</code>。按照约定俗成，除了常量命名的情况，下划线字符永远不会在其他地方使用。<br>下面我们对照上述规则和约定来看几个实例。</li>
</ul>
<p>实例1：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> $a;</span><br><span class="line"><span class="type">int</span> _b;</span><br><span class="line"><span class="type">int</span> age;</span><br></pre></td></tr></table></figure>
<p>上面3个变量的声明都是合法的，但是根据约定俗称，不推荐<code>$a</code>这种以美元符号开头、<code>_b</code>这种以下划线开头的命名方式。</p>
<p>实例2：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VariablesNameing2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">Name</span> <span class="operator">=</span> <span class="string">&quot;Colorful&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Colorful1&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;Name=&quot;</span> + Name);</span><br><span class="line">        System.out.println(<span class="string">&quot;name=&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>变量名区分大小写，因此上面的<code>Name</code>和<code>name</code>是两个不同的变量。由于只有一个单词组成，应将单词使用全部小写拼写，不推荐第1行<code>Name</code>这种命名方式。</p>
<p>实例3：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明姓和名变量</span></span><br><span class="line">String firstName;</span><br><span class="line">String lastname;</span><br></pre></td></tr></table></figure>
<p>上面声明了两个变量 <code>firstName</code>和<code>lastname</code>，由于它们都是由两个单词组成，按照小驼峰命名法的约定俗成：第2行<code>lastname</code> 变量名由两个英文单词组成，因此推荐改为<code>lastName</code>。</p>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>所谓常量，就是恒常不变的量。我们可以将常量理解成一种特殊的变量。</p>
<p>与变量不同的是，一旦它被赋值后，在程序的运行过程中不允许被改变。常量使用<code>final</code>关键字修饰：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> DataType 常量名 = 常量值;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>Tips:</strong> 常量的命名规范与普通变量有所不同，要将每个字母大写并用下划线字符分隔每个单词。</p>
</blockquote>
<p>如果我们尝试在代码中修改常量的值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ConstantTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 声明并初始化常量 TOTAL_NUM</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TOTAL_NUM</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">        <span class="comment">// 对 TOTAL_NUM 重新赋值</span></span><br><span class="line">        TOTAL_NUM = <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译执行代码，编译器将会报错：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ConstantTest.java:<span class="number">6</span>: 错误: 无法为最终变量TOTAL_NUM分配值</span><br><span class="line">        TOTAL_NUM = <span class="number">20</span>;</span><br><span class="line">        ^</span><br><span class="line"><span class="number">1</span> 个错误</span><br></pre></td></tr></table></figure>
<p>适当地使用常量可以提高代码的安全性和可维护性。例如，我们可以在程序中声明一个表示网站名称的常量： <code>final String SITE_NAME = &quot;三尺青锋&quot;</code>;，这样在所有需要用到网站名称的地方，都调用这个常量即可。这样既保证了其值不可修改，提高了代码的安全性，又统一了调用方的规范。</p>
<h2 id="变量的种类"><a href="#变量的种类" class="headerlink" title="变量的种类"></a>变量的种类</h2><p>学习变量的种类，需要你对 Java 的类和对象有一定的了解。目前不要求完全理解，等到后面学完面向对象相关知识后再回过头来回味。</p>
<p>Java 语言定义了以下<strong>4 种变量</strong>：</p>
<ul>
<li>实例变量（见代码中<code>instanceVariable</code>）</li>
<li>类变量（见代码中<code>classVariable</code>）</li>
<li>局部变量（见代码中<code>localVariable</code>）</li>
<li>参数（见代码中<code>parameter和args</code>）<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KindsOfVariables</span> &#123;</span><br><span class="line">    <span class="comment">// 1.实例变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">instanceVariable</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 2.类变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> classVariable;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demoMethod</span><span class="params">(<span class="type">int</span> parameter)</span> &#123; <span class="comment">// 3.参数	    </span></span><br><span class="line">        <span class="comment">// 4.局部变量</span></span><br><span class="line">        <span class="type">int</span> localVariable;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 入口方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="实例变量"><a href="#实例变量" class="headerlink" title="实例变量"></a>实例变量</h3><p>实例变量在类范围内声明。声明时不使用<code>static</code>关键字修饰，因此也称为<strong>非静态字段</strong>。</p>
<p>实例变量用于存储对象的状态，它的值对于类的每个实例都是唯一的，每个对象都拥有自己的变量副本。只要相应的对象存在于内存中，它就占用着存储空间。</p>
<p>下面是一个实例变量的实例，当然，我们还没有介绍类和对象的概念，如果你了解类和对象，可以阅读源码帮助理解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">// 实例变量 name</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="comment">// 实例变量 age</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印学生基本信息的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生姓名为：&quot;</span> + name);</span><br><span class="line">        System.out.println(<span class="string">&quot;学生年龄为：&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 实例化两个学生对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;小慕&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;小李&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="comment">// 分别调用打印学生基本信息方法，打印两个对象下的两个实例变量</span></span><br><span class="line">        student1.printInfo();</span><br><span class="line">        System.out.println(<span class="string">&quot;--------分割线--------&quot;</span>);</span><br><span class="line">        student2.printInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">学生姓名为：小慕</span><br><span class="line">学生年龄为：20</span><br><span class="line">--------分割线--------</span><br><span class="line">学生姓名为：小李</span><br><span class="line">学生年龄为：18</span><br></pre></td></tr></table></figure>
<p>实例变量和实例对象相关，因此需要通过<code>new</code>关键字实例化出对象，通过对象才能访问其实例变量（也称实例属性）。 上述代码中，<code>name</code>和<code>age</code>就是用于存储其对象的属性，我们实例化了两个学生对象，其实例变量<code>name</code>和<code>age</code>，在每个对象实例中是唯一的。</p>
<h3 id="类变量"><a href="#类变量" class="headerlink" title="类变量"></a>类变量</h3><p>类变量在类范围内使用<code>static</code>关键字修饰，因此类变量又被称为静态字段、静态变量。</p>
<p><code>static</code>修饰符告诉编译器，无论类被实例化多少次，类变量始终只有一个变量副本。只要类被加载到内存中，它就会存在。</p>
<p>另外，类变量可以被声明为常量，通过使用<code>final</code>关键字以表示变量永远不会改变。例如：<code>public static final NAME = &quot;慕慕&quot;</code>，这里的<code>NAME</code>就是不会改变的常量。再次提醒，在常量的命名规范中，要将字母全部大写。</p>
<p>对于类变量，我们再来看一个实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Course</span> &#123;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">// 类变量 courseType</span></span><br><span class="line">  	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">courseType</span> <span class="operator">=</span> <span class="string">&quot;文字课程&quot;</span>;</span><br><span class="line">  	<span class="comment">// 常量 COURSE_NAME</span></span><br><span class="line">  	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">COURSE_NAME</span> <span class="operator">=</span> <span class="string">&quot;Java 基础教程&quot;</span>;</span><br><span class="line">  	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      	<span class="comment">// 分别打印类变量和常量</span></span><br><span class="line">      	System.out.println(Course.courseType);</span><br><span class="line">      	System.out.println(Course.COURSE_NAME);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">文字课程</span><br><span class="line">Java 基础教程</span><br></pre></td></tr></table></figure>
<p>类变量和类相关，因此不需要使用<code>new</code>关键字实例化对象后再调用，可以直接通过<strong>类名 + <code>.</code>点运算符 + 类变量名</strong>的方式调用。</p>
<p>上述代码中，<code>courseType</code> 和<code>COURSE_NAME</code>都使用<code>static</code>关键字修饰，它们都可以直接通过<code>Course.变量名</code>的方式调用。</p>
<h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>局部变量是在方法范围内被声明和使用的。它们没有任何关键字修饰，可以根据<strong>变量声明的位置</strong>来认定局部变量（即方法的左花括号和右花括号之间），因此，局部变量只可以对声明它们的方法可见。方法返回后，它们将被销毁。</p>
<p>在<code>main</code>方法中的局部变量实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  	<span class="comment">// 局部变量 name</span></span><br><span class="line">  	<span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;小慕&quot;</span>;</span><br><span class="line">  	<span class="comment">// 局部变量 age</span></span><br><span class="line">  	<span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">20</span>;    	</span><br><span class="line">  	System.out.println(<span class="string">&quot;姓名：&quot;</span> + name);</span><br><span class="line">  	System.out.println(<span class="string">&quot;年龄：&quot;</span> + age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们再来看一个自定义方法中的局部变量实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintNumber</span> &#123;</span><br><span class="line">  </span><br><span class="line">  	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printer</span><span class="params">()</span> &#123;</span><br><span class="line">  	    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">  	    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= num; i ++) &#123;</span><br><span class="line">	      	System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>局部变量和方法相关，因此只能在方法内部局部定义和使用，在第二个实例中没有代码注释，请思考<code>printer</code>方法中有哪几个局部变量。</p>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>参数是用于传递给方法签名的变量（例如入口方法<code>main</code>中的<code>args</code>），它们可以在方法中的任何位置被调用。在方法执行的期间位于内存中，方法返回后被销毁。</p>
<p>例如，上面实例变量的实例中，<code>Student</code>类的构造方法就接收两个参数，如下为代码截取：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Student 类构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;  <span class="comment">// name 和 age 就是传递给Student构造方法的参数</span></span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意，方法体中的<code>this.name</code>和<code>this.age</code>指代的是实例变量，而 <code>name</code>和<code>age</code>是参数，它们被用于赋值给实例变量。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基本数据类型</title>
    <url>/c80e1ec8.html</url>
    <content><![CDATA[<h1 id="Java-基本数据类型"><a href="#Java-基本数据类型" class="headerlink" title="Java 基本数据类型"></a>Java 基本数据类型</h1><p>在 Java 中，一共有两大数据类型：</p>
<ul>
<li>基本数据类型（内置数据类型）</li>
<li>引用数据类型<br>出来经常用到的 <code>int</code> 类型外,Java 语言还有其他 7 种基本数据类型。它们由语言预先定义，也称内置数据类型，顾名思义，它们是 Java 语言中最基本的数据类型。另外注意：引用数据类型并不属于基本数据类型的范畴，我们将在后面讲解。<span id="more"></span></li>
</ul>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>Java 语言支持 8 种基本数据类型：<code>byte</code>，<code>short</code>，<code>int</code>，<code>long</code>，<code>float</code>，<code>double</code>，<code>char</code> 和 <code>boolean</code></p>
<h2 id="分类和特点"><a href="#分类和特点" class="headerlink" title="分类和特点"></a>分类和特点</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>基本数据类型定义在 <code>Java</code>类型系统中，在类型系统中，又可将基本类型分为三大类：</p>
<ul>
<li>数字型：包含 <code>short</code>、<code>int</code>、<code>long</code>、<code>float</code> 和 <code>double</code>，只能存储数字数据；</li>
<li>字符型：<code>byte</code> 和 <code>char</code>，只能存储字符数据；</li>
<li>布尔类型：<code>boolean</code>，只能存储 <code>true</code>(真) 或 <code>false</code>(假)。</li>
</ul>
<h3 id="范围和默认值"><a href="#范围和默认值" class="headerlink" title="范围和默认值"></a>范围和默认值</h3><p>基本类型都有固定的大小，因此，基本类型的值会被限制在一个范围内。</p>
<p>另外，在声明变量时，不一定总是需要分配值。编译器会将已声明但未初始化的字段设置合理的默认值。<strong>但是，建议为每个变量都赋初始值，这是很好的编程习惯</strong>。</p>
<h3 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h3><p>在编码过程中，要特别注意变量不要超出其类型的范围，请查看如下示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemoryOverflow</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      	<span class="comment">// Integer.MAX_VALUE 用来int类型能存储的最大值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">maximumValue</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">      	System.out.println(<span class="string">&quot;int类型能够存储的最大值为：&quot;</span> + maximumValue);</span><br><span class="line">        System.out.println(maximumValue + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int 类型能够存储的最大值为2147483647</span><br><span class="line">-2147483648</span><br></pre></td></tr></table></figure>
<p>我们发现 <code>int</code> 类型能存储的最大值加 1 之后，变成了一个负数，这个数其实就是 <code>int</code> 类型能够存放的最小值，这是因为加 1 之后变量超出了 <code>int</code> 类型能够存储的最大值，这就是我们常常说的内存溢出错误。</p>
<p>还要特别注意一点，由于<strong>Java</strong>是<strong>强类型</strong>的，每个变量都有一个类型，只有给定种类的值能够存储到该变量中。例如，不能将浮点型的数字赋值给整型变量：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IncompatibleTypeError</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> age;</span><br><span class="line">      	age = <span class="number">20.5f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>源代码在编译阶段就会报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ javac IncompatibleTypeError.java</span><br><span class="line">IncompatibleTypeError.java:4: 错误: 不兼容的类型: 从float转换到int可能会有损失</span><br><span class="line">      	age = 20.5f;</span><br><span class="line">      	      ^</span><br><span class="line">1 个错误</span><br></pre></td></tr></table></figure>
<h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><p>整型就是整数类型，和数学中的整数意义相同，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明一个整型变量age</span></span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 声明一个整型变量 score</span></span><br><span class="line"><span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">100</span>;</span><br></pre></td></tr></table></figure>
<p>整型除了 <code>int </code>类型，还有 <code>short</code> 和 <code>long</code> 类型，也就是短整型和长整型，他们用于存放不同范围的整数值。需要注意的是，<code>long</code> 类型的值后面要以大写字母 <code>L </code>或小写字母 <code>l</code> 结尾。请阅读以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明一个短整型变量a</span></span><br><span class="line"><span class="type">short</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="comment">// 声明一个长整型变量b</span></span><br><span class="line"><span class="type">long</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">100l</span>;</span><br><span class="line"><span class="comment">// 声明一个长整型变量c</span></span><br><span class="line"><span class="type">long</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">100L</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>Tips</strong>：对于长整型，推荐后面总以大写字母 <code>L</code> 结尾，因为小写字母 <code>l</code>与数字 <code>1</code> 容易混淆。</p>
</blockquote>
<p>和数学一样，计算机中的整型也有进制的概念，<code>Java</code> 可以通过以下几种进制系统表示：</p>
<ul>
<li><strong>十进制</strong>：基数为 10，由 0 到 9 组成； 这是我们日常生活中使用的数字系统；</li>
<li><strong>十六进制</strong>：基数为 16，由数字 0 到 9 和字母 A 到 F 组成；</li>
<li><strong>二进制</strong>：基数为 2，由数字 0 和 1 组成。<br>在 <code>Java</code> 中，十六进制和二进制需要以前缀区分，前缀 <code>0x</code> 表示十六进制，前缀 <code>0b</code> 表示二进制，我们来看一个示例：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 十进制表示数字10</span></span><br><span class="line"><span class="type">int</span> <span class="variable">decimalValue</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 十六进制表示数字10</span></span><br><span class="line"><span class="type">int</span> <span class="variable">hexadecimalValue</span> <span class="operator">=</span> <span class="number">0xA</span>;</span><br><span class="line"><span class="comment">// 二进制表示数字10</span></span><br><span class="line"><span class="type">int</span> <span class="variable">binaryValue</span> <span class="operator">=</span> <span class="number">0b1010</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h2><p>浮点类型就是数学中的小数，在 <code>Java</code> 中，浮点型又可分为单精度浮点型 (<code>float</code>) 和双精度浮点型 (<code>double</code>)。需要注意的是，<code>float</code> 类型的值必须要以大写字母 <code>F</code> 或小写字母 <code>f</code> 结尾，我们来看一个示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="number">1.2f</span>;</span><br><span class="line"><span class="type">float</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="number">10.56F</span>;</span><br></pre></td></tr></table></figure>
<p><code>double</code> 类型的值可以以字母 <code>D</code> 或 <code>d</code> 结尾，但不做强制：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明三个double类型变量，其值都为123.3</span></span><br><span class="line"><span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="number">123.3</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="number">123.3D</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">d3</span> <span class="operator">=</span> <span class="number">123.3d</span>;</span><br></pre></td></tr></table></figure>
<p>另外浮点类型也可以使用字母 <code>E</code> 或 <code>e</code>，后面跟上次方的数值，来表示数学中的科学计数法，我们来看一个示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 科学计数法表示的 123.4</span></span><br><span class="line"><span class="type">double</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="number">1.234e2</span>;</span><br><span class="line"><span class="type">float</span> <span class="variable">f1</span>  <span class="operator">=</span> <span class="number">1.234e2f</span>;</span><br><span class="line"><span class="comment">// 科学计数法表示 200022.1</span></span><br><span class="line"><span class="type">double</span> <span class="variable">d3</span> <span class="operator">=</span> <span class="number">2.000221e5</span></span><br></pre></td></tr></table></figure>
<h2 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h2><p>布尔类型 <code>boolean</code> 只有两个可能的值：<code>true</code> 和 <code>false</code>，它是用于跟踪判断条件真假的标志。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>

<h2 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h2><p>字符类型 <code>char</code> 表示一个字符。Java 中的 <code>char</code> 类型除了可表示标准的 <code>ASCII</code> 外，还可以表示一个 <code>Unicode</code> 字符：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharType</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 存放一个 ASCII 码</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">97</span>;</span><br><span class="line">        <span class="comment">// 存放一个Unicode字符</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">zh</span> <span class="operator">=</span> <span class="string">&#x27;慕&#x27;</span>;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(zh);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a</span><br><span class="line">慕</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础语法</title>
    <url>/ea538f2a.html</url>
    <content><![CDATA[<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>第一个<code>Java</code>程序</p>
<span id="more"></span>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h3 id="大小写敏感"><a href="#大小写敏感" class="headerlink" title="大小写敏感"></a>大小写敏感</h3><p>Java 语言是大小写敏感的，这个知识点很好理解：所有的命名都区分大小写 (文件名、类名、方法名等等)。</p>
<p>例如：<code>HelloWorld</code> 与 <code>helloWorld</code> 是不同的；<code>Hello.java</code> 和 <code>HellO.java</code> 也是不同的。</p>
<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>Java 是纯面向对象的编程语言，因此类 (class) 是一个程序的基本单位。所有的 Java 程序想要运行，都离不开类。</p>
<p>我们可以来看看代码的第一行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br></pre></td></tr></table></figure>
<p>其中，<code>public</code> 是一个关键字，它属于访问控制符，它表示这个类是公开的。关于什么是访问控制符，在初学阶段不必理解。</p>
<p>紧接着的 <code>class</code> 也是一个关键字用于声明类， <code>HelloWorld</code> 是类名，类名的首字母要大写。如果类名由多个单词组成，那么每个单词的首字母都要大写。例如，我们可以这样声明一个表示学生的类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImoocStudent</span> &#123;</span><br><span class="line">  	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="主方法"><a href="#主方法" class="headerlink" title="主方法"></a>主方法</h3><p>什么是主方法呢？请观察示例代码的 <code>class</code> 内部（指的是类名 <code>HelloWorld</code> 后面用大括号 {} 包含的内容），这个方法被称为主方法。每个类只能拥有一个主方法。</p>
<p>需要特别注意的是：所有的 <code>Java</code> 程序都从主方法开始执行。 以下的写法是固定的，所以你暂时无需深究：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而在主方法内部（指的是 <code>main()</code> 后面一对大括号中间包含的内容）我们可以定义一些指令，例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>我们称这个指令为输出语句，它的作用是向屏幕输出 <code>Hello World!</code> 。输出语句在后面会经常用到。</p>
<p>我们也可以在主方法内部多次调用输出语句，以输出多条内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImoocStudent</span> &#123;</span><br><span class="line">  	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;第一行输出&quot;</span>);</span><br><span class="line">      	System.out.println(<span class="string">&quot;第二行输出&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外补充一点，类的内部不仅可以包含一个主方法，也可以包含多个方法。在学习方法的概念之前，我们将主要在主方法中编写示例代码。</p>
<h3 id="源代码文件"><a href="#源代码文件" class="headerlink" title="源代码文件"></a>源代码文件</h3><p>既然源代码需要提供给计算机执行，我们就要将源代码以文件的形式保存在计算机的磁盘上。</p>
<p>需要注意的是：源代码文件的命名必须与类名相同，且后缀名为<code>.java</code>。例如：<code>HelloWorld</code> 类对应的源代码文件名应该为 <code>HelloWorld.java</code>。</p>
<h2 id="Java标识符"><a href="#Java标识符" class="headerlink" title="Java标识符"></a>Java标识符</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>在计算机编程语言中，标识符是开发者编程时使用的名字，用于给变量、常量、函数、语句块等命名，以建立起名称与使用之间的关系。标识符通常由字母和数字以及其它字符构成。</p>
<p>在 Java 中，标识符通常用来给类、对象、变量、方法、接口、自定义数据类型命名。</p>
<h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><p>标识符都以字母（A-Z 或者 a-z），美元符号（$）或下划线（_）开始；首字母后可以是字母、数字、下划线的任意组合；正如我们前面所提到的，标识符是大小写敏感的；需要特别注意的是，Java 中的 <strong>关键字</strong>（本节最后将会介绍）不能被用作标识符。</p>
<p>以下是合法的标识符命名实例：</p>
<ul>
<li>$name</li>
<li>_World<br>以下不合法的标识符命名实例：</li>
<li>￥color</li>
<li>12name</li>
<li>final</li>
</ul>
<h2 id="Java-注释和空行"><a href="#Java-注释和空行" class="headerlink" title="Java 注释和空行"></a>Java 注释和空行</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>注释是一种便于给人阅读程序的文本，它不会被编译器解析。养成多些注释的习惯，不但有助于自己理解程序，也有助于别人更好地理解自己的程序。在团队协作的项目中，代码注释更加重要，代码的研发人员通过编写通俗易懂的注释，可以极大地降低协作成员之间沟通成本。</p>
<p>下图灰色部分为 Java 源码中的注释：<br><img data-src="https://s1.ax1x.com/2023/02/22/pSvrVVH.png" style="width:300px;height:200px" alt=""/></p>
<h4 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h4><p>空行就是空白行，与注释一样，同样不会被编译器解析。</p>
<p>适当地使用空行，可以让代码的结构看起来更好看，例如，下面程序中第 2 行、第 5 行和第 8 行都是空行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HelloImooc</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    	System.out.println(<span class="string">&quot;你好慕课网&quot;</span>);</span><br><span class="line">        </span><br><span class="line">      System.out.println(<span class="string">&quot;Hello, Imooc!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="注释的分类"><a href="#注释的分类" class="headerlink" title="注释的分类"></a>注释的分类</h3><p>Java 语言提供了三种类别的注释：</p>
<ul>
<li>单行注释</li>
<li>多行注释</li>
<li>文档注释</li>
</ul>
<h4 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h4><p>单行注释用于注释一行文本，它以双斜线开始，后面跟上要注释的内容，其写法为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 被注释的内容</span><br></pre></td></tr></table></figure>
<p>在 Java 代码中，它是这样的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloImooc</span> &#123;</span><br><span class="line">  	<span class="comment">// 定义入口方法</span></span><br><span class="line">  	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      	<span class="comment">// 打印输出：你好</span></span><br><span class="line">      	System.out.println(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h4><p>多行注释用于注释多行文本，它以 <code>/*</code> 开头，以 <code>*/</code> 结尾，其写法为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">被注释的第一行内容</span></span><br><span class="line"><span class="comment">被注释的第二行内容</span></span><br><span class="line"><span class="comment">被注释的第三行内容</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>当我们在开发时为了方便调试，需要注释一段多行的逻辑代码，可以使用多行注释：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">  	<span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"> 	<span class="keyword">private</span> String name;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">/*</span></span><br><span class="line"><span class="comment">  	多行注释，注释了这段代码</span></span><br><span class="line"><span class="comment">  	public Dog (String name, int age) &#123;</span></span><br><span class="line"><span class="comment">  		this.name = name;</span></span><br><span class="line"><span class="comment">      	this.age = age;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h4><p>Java 中还有一种特殊的多行注释 —— 文档注释，它以 <code>/**</code> 开头，以 <code>*/</code> 结尾，如果有多行，则每行都以 <code>*</code> 开头，其在代码中的写法为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HelloWorld 类</span></span><br><span class="line"><span class="comment"> * 它是我的第一个 Java 程序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Colorful</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/02/02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主方法，向屏幕打印 Hello World!</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 主方法的固定参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      	System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种特殊的多行注释需要写在类和方法的定义处，可以使用 javadoc 这样的命令来自动创建文档。另外通常在程序开头加入作者，时间，版本，要实现的功能等内容注释，方便程序的维护以及程序员的交流。</p>
<h2 id="关键字和保留字"><a href="#关键字和保留字" class="headerlink" title="关键字和保留字"></a>关键字和保留字</h2><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><p>关键字 (<code>Keyword</code>) 是 Java 语言中的特殊标记。它已经被语言本身预先使用，因此我们不能使用关键字作为我们标识符的命名。</p>
<p>例如 Java 基本类型的 <code>int</code>、<code>boolean</code>，流程控制语句中的 <code>if</code>、<code>for</code>，访问修饰符 <code>public</code>，以及一些用于声明和定义 Java 类、包、接口的 <code>class</code>、<code>package</code>、<code>interface</code>。</p>
<p>而保留字 (<code>Reserved word</code>) 可能是未来的关键字，也就是说可能在未来的版本中，Java 语言作为特殊标记。</p>
<blockquote>
<p>Tips：无论是关键字还是保留字，我们都要记住：不能使用它们作为我们的代码中的标识符。</p>
</blockquote>
<h2 id="Java-中有哪些关键字"><a href="#Java-中有哪些关键字" class="headerlink" title="Java 中有哪些关键字"></a>Java 中有哪些关键字</h2><p>关键字一律用小写字母标识，Java 语言中定义了如下表所示的关键字：</p>
<table>
<thead>
<tr>
<th>关键词</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>abstract</td>
<td>表明类或者成员方法具有抽象属性</td>
</tr>
<tr>
<td>assert</td>
<td>断言，常用于程序的调试</td>
</tr>
<tr>
<td>boolean</td>
<td>基本数据类型：布尔类型</td>
</tr>
<tr>
<td>break</td>
<td>提前跳出一个块</td>
</tr>
<tr>
<td>byte</td>
<td>基本数据类型，字节类型</td>
</tr>
<tr>
<td>case</td>
<td>用在 switch 语句之中，表示其中的一个分支</td>
</tr>
<tr>
<td>catch</td>
<td>用在异常处理中，用来捕捉异常</td>
</tr>
<tr>
<td>char</td>
<td>基本数据类型：字符类型</td>
</tr>
<tr>
<td>class</td>
<td>用于声明一个类</td>
</tr>
<tr>
<td>const</td>
<td>保留关键字</td>
</tr>
<tr>
<td>continue</td>
<td>回到一个块的开始处</td>
</tr>
<tr>
<td>default</td>
<td>默认，用在 switch 语句中，表明一个默认的分支；<code>JDK1.8</code> 以后也作用于声明接口函数的默认实现</td>
</tr>
<tr>
<td>do</td>
<td>用在 do-while 循环结构中</td>
</tr>
<tr>
<td>double</td>
<td>基本数据类型：双精度浮点数类型</td>
</tr>
<tr>
<td>else</td>
<td>用在条件语句中，表明当条件不成立时的分支</td>
</tr>
<tr>
<td>enum</td>
<td>枚举</td>
</tr>
<tr>
<td>extends</td>
<td>表明一个类型是另一个类型的子类型。对于类，可以是另一个类或者抽象类；对于接口，可以是另一个接口</td>
</tr>
<tr>
<td>final</td>
<td>用来说明最终属性，表明一个类不能派生出子类，或者成员方法不能被覆盖，或者成员域的值不能被改变，用来定义常量</td>
</tr>
<tr>
<td>finally</td>
<td>用于处理异常情况，用来声明一个基本肯定会被执行到的语句块</td>
</tr>
<tr>
<td>float</td>
<td>基本数据类型之一，单精度浮点数类型</td>
</tr>
<tr>
<td>for</td>
<td>一种循环结构的引导词</td>
</tr>
<tr>
<td>goto</td>
<td>保留关键字，没有具体含义</td>
</tr>
<tr>
<td>if</td>
<td>条件语句的引导词</td>
</tr>
<tr>
<td>implements</td>
<td>表明一个类实现了给定的接口</td>
</tr>
<tr>
<td>import</td>
<td>表明要访问指定的类或包</td>
</tr>
<tr>
<td>instanceof</td>
<td>用来测试一个对象是否是指定类型的实例对象</td>
</tr>
<tr>
<td>int</td>
<td>基本数据类型之一，整数类型</td>
</tr>
<tr>
<td>interface</td>
<td>接口</td>
</tr>
<tr>
<td>long</td>
<td>基本数据类型之一，长整数类型</td>
</tr>
<tr>
<td>native</td>
<td>用来声明一个方法是由与计算机相关的语言（如 C&#x2F;C++&#x2F;FORTRAN 语言）实现的</td>
</tr>
<tr>
<td>new</td>
<td>用来创建新实例对象</td>
</tr>
<tr>
<td>package</td>
<td>包</td>
</tr>
<tr>
<td>private</td>
<td>一种访问控制方式：私用模式</td>
</tr>
<tr>
<td>protected</td>
<td>一种访问控制方式：保护模式</td>
</tr>
<tr>
<td>public</td>
<td>一种访问控制方式：共用模式</td>
</tr>
<tr>
<td>return</td>
<td>从成员方法中返回数据</td>
</tr>
<tr>
<td>short</td>
<td>基本数据类型之一，短整数类型</td>
</tr>
<tr>
<td>static</td>
<td>表明具有静态属性</td>
</tr>
<tr>
<td>strictfp</td>
<td>用来声明 FP_strict（单精度或双精度浮点数）表达式遵循 IEEE 754 算术规范</td>
</tr>
<tr>
<td>super</td>
<td>表明当前对象的父类型的引用或者父类型的构造方法</td>
</tr>
<tr>
<td>switch</td>
<td>分支语句结构的引导词</td>
</tr>
<tr>
<td>synchronized</td>
<td>表明一段代码需要同步执行</td>
</tr>
<tr>
<td>this</td>
<td>指向当前实例对象的引用</td>
</tr>
<tr>
<td>throw</td>
<td>抛出一个异常</td>
</tr>
<tr>
<td>throws</td>
<td>声明在当前定义的成员方法中所有需要抛出的异常</td>
</tr>
<tr>
<td>transient</td>
<td>声明不用序列化的成员域</td>
</tr>
<tr>
<td>try</td>
<td>尝试一个可能抛出异常的程序块</td>
</tr>
<tr>
<td>void</td>
<td>声明当前成员方法没有返回值</td>
</tr>
<tr>
<td>volatile</td>
<td>表明两个或者多个变量必须同步地发生变化</td>
</tr>
<tr>
<td>while</td>
<td>用在循环结构中</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java表达式、语句和块</title>
    <url>/d5e4b0c3.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote>
<p>表达式，是由数字、运算符、数字分组符号（括号）、自由变量和约束变量等以能求得数值的有意义排列方法所得的组合。约束变量是在表达式中已被指定数值，而自由变量则可以在表达式之外另行指定数值。</p>
</blockquote>
<p>在 <code>Java </code>中，表达式是根据 Java 语法由<strong>变量、运算符</strong>和<strong>方法</strong>调用组成的结构，表达式的结算结果为<strong>单个值</strong>。<br>表达式实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Expression</span> &#123;</span><br><span class="line">  	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      	<span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line">      	<span class="comment">// (a + b) * 2 就是一个算数表达式</span></span><br><span class="line">      	<span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> (a + b) * <span class="number">2</span>;</span><br><span class="line">      	<span class="comment">// c &gt; b 就是一个布尔表达式</span></span><br><span class="line">      	<span class="keyword">if</span> (c &gt; b) &#123; <span class="comment">// if语句将在下一小节讲到，此处只需知道 c &gt; b 是一个表达式即可</span></span><br><span class="line">          	System.out.println(<span class="string">&quot;c大于b&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行案例<br>点击 “运行案例” 可查看在线运行效果<br>上面代码中，<code>(a + b) * 2</code> 就是一个算数表达式，而 <code>c &gt; b</code> 就是一个布尔表达式，代码中的 <code>if</code> 语句将在下一小节讲到，此处只需知道 c &gt; b 是一个表达式即可。</p>
<p>下面我们将围绕算数表达式和布尔表达式来学习表达式。</p>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="算数表达式"><a href="#算数表达式" class="headerlink" title="算数表达式"></a>算数表达式</h4><p>算数表达式是最常用的表达式，又称为数学表达式。它是通过算术运算符来进行运算的数学公式。</p>
<p>为了使用 <code>Java</code> 进行算数运算，首先必须至少声明一个变量。如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<p>变量创建后，可以使用<code>算数运算符</code>（<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、 <code>%</code>、<code>++</code>、 <code>--</code> ）来操作变量的值。使用算数表达式的实例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArithmeticExpression1</span> &#123;</span><br><span class="line">  	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      	<span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">      	<span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> num / <span class="number">3</span>;</span><br><span class="line">      	System.out.println( num + <span class="string">&quot; / 3 = &quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译执行程序，屏幕上将会打印：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10 / 3 = 3</span><br></pre></td></tr></table></figure>
<p>对于操作数为整型的除法表达式，其计算结果将始终取整数部分。所以上面的 <code>10 / 3</code> 的结果等于 <code>3</code>。如果我们想得到小数，可以使用浮点类型的变量来作为操作数<code>（10.0 / 3）</code>，其返回的值也是一个浮点型。</p>
<p>除了除法表达式之外，在使用<strong>自增 &#x2F; 自减表达式</strong>运算的时候，也要额外注意前后<strong>自增 &#x2F; 自减</strong>运算符的差别。我们来看下面一个实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArithmeticExpression2</span> &#123;</span><br><span class="line">  	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     	<span class="comment">// 前自增</span></span><br><span class="line">      	System.out.println(<span class="string">&quot;------ 前自增 ------&quot;</span>);</span><br><span class="line">	    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">      	System.out.println(<span class="string">&quot;++num = &quot;</span> + (++num));</span><br><span class="line">      	System.out.println(<span class="string">&quot;num = &quot;</span> + num);</span><br><span class="line">      	<span class="comment">// 前自减</span></span><br><span class="line">        System.out.println(<span class="string">&quot;------ 前自减 ------&quot;</span>);</span><br><span class="line">	    num = <span class="number">10</span>;</span><br><span class="line">      	System.out.println(<span class="string">&quot;--num = &quot;</span> + (--num));</span><br><span class="line">      	System.out.println(<span class="string">&quot;num = &quot;</span> + num);</span><br><span class="line"></span><br><span class="line">      	<span class="comment">// 后自增</span></span><br><span class="line">        System.out.println(<span class="string">&quot;------ 后自增 ------&quot;</span>);</span><br><span class="line">	    num = <span class="number">10</span>;</span><br><span class="line">      	System.out.println(<span class="string">&quot;num++ = &quot;</span> + (num ++));</span><br><span class="line">        System.out.println(<span class="string">&quot;num = &quot;</span> + num);</span><br><span class="line">      	<span class="comment">// 前自减</span></span><br><span class="line">      	System.out.println(<span class="string">&quot;------ 前自减 ------&quot;</span>);</span><br><span class="line">      	num = <span class="number">10</span>;</span><br><span class="line">      	System.out.println(<span class="string">&quot;num-- = &quot;</span> + (num --));</span><br><span class="line">        System.out.println(<span class="string">&quot;num = &quot;</span> + num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行案例<br>注意观察前后自增自减的区别，运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">------ 前自增 ------</span><br><span class="line">++num = 11</span><br><span class="line">num = 11</span><br><span class="line">------ 前自减 ------</span><br><span class="line">--num = 9</span><br><span class="line">num = 9</span><br><span class="line">------ 后自增 ------</span><br><span class="line">num++ = 10</span><br><span class="line">num = 11</span><br><span class="line">------ 前自减 ------</span><br><span class="line">num-- = 10</span><br><span class="line">num = 9</span><br></pre></td></tr></table></figure>
<p>结论：</p>
<ul>
<li><p><strong>前自增 &#x2F; 自减的运算规则是</strong>：先进行自增或者自减运算，再进行表达式运算；</p>
</li>
<li><p><strong>后自增 &#x2F; 自减的运算规则是</strong>：先进行表达式运算，再进行自增或者自减运算。</p>
</li>
</ul>
<h4 id="布尔表达式"><a href="#布尔表达式" class="headerlink" title="布尔表达式"></a>布尔表达式</h4><p><strong>布尔表达式（Boolean expression）</strong>的结果只有 <code>true</code>（真）和 <code>false</code>（假）两个值。在 <code>Java</code> 语言中，布尔表达式可以使用关系运算符或逻辑运算符来代替算数运算符。</p>
<p>我们来看一个使用<strong>关系运算符</strong>的实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BooleanExpression1</span> &#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      	<span class="comment">// 初始化两个整型变量a、b，值分别为2、3</span></span><br><span class="line">      	<span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">2</span>, b = <span class="number">3</span>;</span><br><span class="line">      	<span class="comment">// 分别打印比较运算符比较的结果</span></span><br><span class="line">      	System.out.println(a == b);</span><br><span class="line">      	System.out.println(a != b);</span><br><span class="line">      	System.out.println(a &gt; b);</span><br><span class="line">      	System.out.println(a &lt; b);</span><br><span class="line">      	System.out.println(a &gt;= b);</span><br><span class="line">      	System.out.println(a &lt;= b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>请阅读上面代码，并算出每一次打印的结果。这里不再展示代码打印结果。</p>
<p>布尔表达式常作为条件分支语句中的<strong>条件</strong>。因此下面的示例需要你对条件语句有一定的了解，我们再来看一个稍微复杂一些的实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BooleanExpression2</span> &#123;</span><br><span class="line">  	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化4个整型变量</span></span><br><span class="line">      	<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">4</span>, j = <span class="number">5</span>, k = <span class="number">7</span>, m = <span class="number">8</span>;</span><br><span class="line">        <span class="comment">// i &gt; j &amp;&amp; m &lt; k++ 即为条件表达式</span></span><br><span class="line">      	<span class="keyword">if</span>(i &gt; j &amp;&amp; m &lt; k++) &#123;</span><br><span class="line">          	k++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          	k--;</span><br><span class="line">        &#125;</span><br><span class="line">      	System.out.println(<span class="string">&quot;k = &quot;</span> + k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译执行代码，屏幕上将会打印：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">k = 6</span><br></pre></td></tr></table></figure>
<p>上述代码，是使用逻辑运算符和算数运算符结合的布尔表达式示例，如果布尔表达式 <code>i &gt; j &amp;&amp; m &lt; k++ </code>结果为真，则执行 <code>if</code> 分支，<code>k</code> 自增 <code>1</code>，否则执行 <code>else</code> 分支，<code>k</code> 自减 <code>1</code>，最后打印出 <code>k</code> 的值。由于 <code>i</code> 的值小于 <code>j</code>，并且 <code>&amp;&amp;</code> 运算符有短路作用，所以 <code>m &lt; k++</code> 不做运算，直接走到 <code>else</code> 分支，最后得到结果 <code>k = 6</code>。</p>
<p>这里再次强调一下逻辑运算符的短路：</p>
<p>在表达式中 <code>(a &amp;&amp; b)</code>，如果 a 为假，则 b 不会被求值，因为无论如何表达式都会为假。</p>
<p>同理，在表达式中 <code>(a || b)</code>，如果 a 为真，则 b 不会被求值，因为无论如何表达式都会为真。</p>
<p>这就是我们所说的短路。如果想要取消短路，可以使用 <code>&amp;</code> 代替 <code>&amp;&amp;</code>、使用 <code>|</code> 代替 <code>||</code>，但是不建议这样写，会降低代码的可读性。</p>
<p>试想，如果将表达式中 <code>i &gt; j &amp;&amp; m &lt; k++</code> 的 <code>&amp;&amp;</code> 改为 <code>&amp;</code>，变量 <code>k</code> 的值将会是多少？</p>
<h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><p>在计算机科学的编程中，一个语句是指令式编程语言中<strong>最小的独立元素</strong>，语句用以表达程序要执行的一些动作。多数语句是以高级语言编写成一个或多个语句的序列，用于命令计算机执行指定的一系列操作。</p>
<p>语句和自然语言（例如英语、汉语）中的句子大致相同。一条语句构成了完整的执行单元。通过使用英文分号（<code>;</code>）终止表达式，可以将以下类型的表达式制成语句：</p>
<ul>
<li>赋值表达式</li>
<li>自增 &#x2F; 自减 ++ 或 –</li>
<li>方法调用</li>
<li>对象创建表达式（面向对象部分将会学到）<br>请结合如下示例理解语句的概念：</li>
</ul>
<p>变量声明语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> age;</span><br></pre></td></tr></table></figure>
<p>赋值语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">age = <span class="number">20</span>;</span><br></pre></td></tr></table></figure>
<p>自增语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">age ++;</span><br></pre></td></tr></table></figure>
<p>方法调用语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println（<span class="string">&quot;Hello World! &quot;</span>）;</span><br></pre></td></tr></table></figure>
<h2 id="块"><a href="#块" class="headerlink" title="块"></a>块</h2><p>块通常用来将两条或多条语句组合在一起，使其在格式上看更像一条语句。</p>
<p>一堆语句可以放在大括号中，以作为单个块执行。可以为此类语句命名或为其提供执行条件（下一节的条件判断将会讲到）。</p>
<p>下面是将一系列的语句放在一个块中的示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> a + b + c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua-cjson安装及部署</title>
    <url>/54099.html</url>
    <content><![CDATA[<p>在安装lua-cjson时在网上查找了很多文章，关于具体的安装方法众说纷纭，主要原因是因为lua-cjson在安装时需要进行配置的更改，以下是经过实操得到的具体安装步骤。</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://www.kyne.com.au/~mark/software/download/lua-cjson-2.1.0.tar.gz 下载安装包</span><br><span class="line"></span><br><span class="line">tar zxvf lua-cjson-2.1.0.tar.gz</span><br><span class="line"></span><br><span class="line">cd lua-cjson-2.1.0/</span><br></pre></td></tr></table></figure>
<p>修改配置文件</p>
<p>修改lua版本，默认版本为5.1 （我的当前版本为5.3，可以通过lua -v 查看版本信息）<br>注释掉 CJSON_LDFLAGS &#x3D; -shared<br>设置CJSON_LDFLAGS &#x3D; -bundle -undefined dynamic_lookup （这里就是OSX和Unix的区别，bundle是Mac使用的文件格式，如果不使用这些选项，可能引起“multiple lua vms detected”错误）<br>保存配置文件然后退出</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">make</span><br><span class="line"></span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<p>检查 &#x2F;usr&#x2F;local&#x2F;lib&#x2F;lua&#x2F;5.3文件夹下是否存在cjson.so文件</p>
<p>如果存在则代表安装成功</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua中“.”和“:”区别</title>
    <url>/3247.html</url>
    <content><![CDATA[<p>初学lua，可能会对<code>.</code>和<code>:</code>这两个符号的用法产生疑问，很多时候都会因为这个出错，这里笔者简单介绍下笔者在使用cocos2dx游戏开发中对这两者的认识</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>冒号的作用：定义函数时，给函数添加隐藏的第一个参数<code>self</code>，调用函数时，默认把当前调用者作为第一个参数传递进去。<br>使用冒号后，就相当于我们使用了点号，只是我们不再需要显示的定义<code>self</code>参数以及主动低传递参数。</p>
<p>在cocos2dx 开发过程中，大部分时候都是使用的冒号</p>
<p>一般我们在定义函数时会用下面写法</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MainScene:onCreate</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>
<p>等同于下面写法</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MainScene.onCreate</span><span class="params">(self)</span></span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>笔者个人看法，欢迎大家更正</p>
</blockquote>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>Java运算符</title>
    <url>/778179f.html</url>
    <content><![CDATA[<h1 id="Java-运算符"><a href="#Java-运算符" class="headerlink" title="Java 运算符"></a>Java 运算符</h1><p>运算符是一些特殊的符号，它们对一个，两个或多个操作数执行特定的运算，然后返回一个结果。这里的操作数指的就是运算符操作的实体。</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p><code>Java</code>提供了一组丰富的运算符来操作变量。 我们可以将所有Java运算符分为以下几类：</p>
<ul>
<li>算术运算符</li>
<li>关系运算符</li>
<li>位运算符</li>
<li>逻辑运算符</li>
<li>赋值运算符</li>
<li>其他运算符</li>
</ul>
<h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Java 语言提供了执行加减乘除四则运算的运算符。 算数运算符被用在数学表达式中，可以使用任意嵌套的小括号，其作用与数学中相同。下表列出了算术运算符：</p>
<p>（在例子中，初始化两个整型变量a、b：<code>int a = 2; int b = 4;</code>）<br><img data-src="https://s1.ax1x.com/2023/02/24/pSzbdl6.jpg" style="width:400px;height:300px" alt=""/></p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>以下是算数运算符的实例程序。</p>
<p>加法运算符使用实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArithmeticOperators1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 声明两个整型变量 num1,num2 分别赋值为 2, 3</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">2</span>, num2 = <span class="number">3</span>;</span><br><span class="line">        <span class="comment">// 使用加法运算符，对num1和num2执行相加操作，并将返回结果赋值给result</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> num1 + num2;</span><br><span class="line">        System.out.println( num1 + <span class="string">&quot; + &quot;</span> + num2 + <span class="string">&quot; = &quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2 + 3 = 5</span><br></pre></td></tr></table></figure>
<p>减法运算符使用实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArithmeticOperators2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 声明两个整型变量 num1, num2 分别赋值为 5, 3</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">5</span>, num2 = <span class="number">3</span>;</span><br><span class="line">        <span class="comment">// 使用减法运算符，让 num1 加上 num2，并将返回结果赋值给result</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> num1 + num2;</span><br><span class="line">        System.out.println( num1 + <span class="string">&quot; + &quot;</span> + num2 + <span class="string">&quot; = &quot;</span> + result);</span><br><span class="line">        <span class="comment">// 计算 num2 - num1 的结果</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result1</span> <span class="operator">=</span> num2 - num1;</span><br><span class="line">        System.out.println( num2 + <span class="string">&quot; - &quot;</span> + num1 + <span class="string">&quot; = &quot;</span> + result1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 + 3 = 8</span><br><span class="line">3 - 5 = -2</span><br></pre></td></tr></table></figure>
<p>乘法运算符使用实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArithmeticOperators3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 声明两个整型变量 num1, num2 分别赋值为 2, 5</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">2</span>, num2 = <span class="number">5</span>;</span><br><span class="line">        <span class="comment">// 使用乘法运算符，让 num1 与 num2 相乘，并将返回结果赋值给result</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> num1 * num2;</span><br><span class="line">        System.out.println( num1 + <span class="string">&quot; * &quot;</span> + num2 + <span class="string">&quot; = &quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2 x 5 = 10</span><br></pre></td></tr></table></figure>
<p>除法运算符使用实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArithmeticOperators4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 声明两个整型变量 num1, num2 分别赋值为 10, 2</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">10</span>, num2 = <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 使用除法运算符，让 num1 除以 num2，并将返回结果赋值给result</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> num1 / num2;</span><br><span class="line">        System.out.println( num1 + <span class="string">&quot; / &quot;</span> + num2 + <span class="string">&quot; = &quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10 / 2 = 5</span><br></pre></td></tr></table></figure>
<p>取余运算符使用实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArithmeticOperators5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 声明两个整型变量 num1, num2 分别赋值为 5, 2</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">5</span>, num2 = <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 使用取余运算符，让 num1 对 num2 取余，并将返回结果赋值给result</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> num1 % num2;</span><br><span class="line">        System.out.println( num1 + <span class="string">&quot; % &quot;</span> + num2 + <span class="string">&quot; = &quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译执行代码，屏幕上将会打印：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 % 2 = 1</span><br></pre></td></tr></table></figure>
<p>自增、自减运算符使用实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArithmeticOperators6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 声明两个整型变量 num1, num2 分别赋值为 5, 2</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">5</span>, num2 = <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 打印 num1 和 num2</span></span><br><span class="line">        System.out.println(<span class="string">&quot;num1=&quot;</span> + num1);</span><br><span class="line">        System.out.println(<span class="string">&quot;num2=&quot;</span> + num2);</span><br><span class="line">        num1 ++;</span><br><span class="line">        num2 --;</span><br><span class="line">        System.out.println(<span class="string">&quot;num1自增后：&quot;</span> + num1);</span><br><span class="line">        System.out.println(<span class="string">&quot;num2自减后：&quot;</span> + num2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">num1=5</span><br><span class="line">num2=2</span><br><span class="line">num1自增后：6</span><br><span class="line">num2自减后：1</span><br></pre></td></tr></table></figure>
<p>另外，整型之间的除法运算是整除，这也就意味着<code>2 / 4</code>的结果为<code>0</code>，如果我们想像数学一样得到一个小数，可以使用浮点类型的操作数。例如:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperatorDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 分组初始化两个整型变量i1、i2，值分别为2、4</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">2</span>, i2 = <span class="number">4</span>;</span><br><span class="line">        <span class="comment">// 使i1除以i2，并将返回结果赋值给i3</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> i1 / i2;</span><br><span class="line">        System.out.println(<span class="string">&quot;整型2除以整型4的结果为：&quot;</span> + i3);</span><br><span class="line">        <span class="comment">// 分组初始化两个浮点型变量f1、f2，值分别为2、4</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="number">2f</span>, f2 = <span class="number">4f</span>;</span><br><span class="line">        <span class="comment">// 使f1除以f2，并将返回结果赋值给f3</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">f3</span> <span class="operator">=</span> f1 / f2;</span><br><span class="line">        System.out.println(<span class="string">&quot;浮点型2除以浮点型4的结果为：&quot;</span> + f3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">整型2除以整型4的结果为：0</span><br><span class="line">浮点型2除以浮点型4的结果为：0.5</span><br></pre></td></tr></table></figure>
<p>要特别注意，在 Java 语言中，算数运算符不能作用于不同类型的操作数。我们来看一个反例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperatorDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化布尔类型的变量b，值为true</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 初始化整型变量i，值为20</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="comment">// 使用加法运算符，让i与b相加</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译代码，将会报错：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javac OperatorDemo1.java</span><br><span class="line">OperatorDemo1.java:<span class="number">7</span>: 错误: 二元运算符 <span class="string">&#x27;+&#x27;</span> 的操作数类型错误</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i + b;</span><br><span class="line">                       ^</span><br><span class="line">  第一个类型:  <span class="type">int</span></span><br><span class="line">  第二个类型: <span class="type">boolean</span></span><br><span class="line"><span class="number">1</span> 个错误</span><br></pre></td></tr></table></figure>
<p>编译器给出明确提示：加法运算符的操作数类型错误。这是因为 Java 是强类型的语言，不同类型的操作数的算数运算是违规的，这个原理同样适用于其他算数运算符，此处不再一一列举。</p>
<p>还有一点，自增自减运算符是有前后之分的，++i表示先加1再引用i，i++表示先引用i再加1。将在下一小节举例介绍。</p>
<h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>关系运算符又称为比较运算符，比较的结果是一个布尔类型的值（<code>true</code>或<code>false</code>）。</p>
<p>Java 语言有几个可用于比较变量的运算符，如下表所示：</p>
<p>（在例子中，初始化两个整型变量a、b：<code>int a = 2</code>; <code>int b = 4</code>;）</p>
<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>下面是一个比较运算符的实例程序：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperateDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化一个双精度浮点型变量d1，值为10</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="comment">// 初始化一个整型变量i1，值也为10</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;id == i1的结果为：&quot;</span> + (d1 == i1));</span><br><span class="line">        System.out.println(<span class="string">&quot;id != i1的结果为：&quot;</span> + (d1 != i1));</span><br><span class="line">        System.out.println(<span class="string">&quot;id &gt; i1的结果为：&quot;</span> + (d1 &gt; i1));</span><br><span class="line">        System.out.println(<span class="string">&quot;id &lt; i1的结果为：&quot;</span> + (d1 &lt; i1));</span><br><span class="line">        System.out.println(<span class="string">&quot;id &gt;= i1的结果为：&quot;</span> + (d1 &gt;= i1));</span><br><span class="line">        System.out.println(<span class="string">&quot;id &lt;= i1的结果为：&quot;</span> + (d1 &lt;= i1));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id == i1的结果为：true</span><br><span class="line">id != i1的结果为：false</span><br><span class="line">id &gt; i1的结果为：false</span><br><span class="line">id &lt; i1的结果为：false</span><br><span class="line">id &gt;= i1的结果为：true</span><br><span class="line">id &lt;= i1的结果为：true</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>Tips</strong>：<code>&gt;</code>、<code>&lt;</code>、<code>&gt;=</code>、<code>&lt;=</code> 这几个运算符左右两边的操作数必须是<code>byte</code>，<code>short</code>，<code>int</code>，<code>long</code>，<code>double</code>，<code>float</code>，<code>char</code>这几种数据类型；而&#x3D;&#x3D;和!&#x3D;运算符的操作数既可以是基本数据类型，又可以是引用数据类型。</p>
</blockquote>
<h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p>Java 语言还提供了对整数类型执行按位和移位操作的运算符，称作位运算符。<br>它在实际的编码中并不常用，这部分内容了解即可。<br>假设<code>a = 60，b = 13</code>;它们的二进制格式表示将如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a = <span class="number">0011</span> <span class="number">1100</span></span><br><span class="line">b = <span class="number">0000</span> <span class="number">1101</span></span><br><span class="line">-----------------</span><br><span class="line">a &amp; b = <span class="number">0000</span> <span class="number">1100</span></span><br><span class="line">a | b = <span class="number">0011</span> <span class="number">1101</span></span><br><span class="line">a ^ b = <span class="number">0011</span> <span class="number">0001</span></span><br><span class="line">~a = <span class="number">1100</span> <span class="number">0011</span></span><br></pre></td></tr></table></figure>
<p>下表列出了位运算符的基本运算，假设整数变量 a 的值为 60 和变量 b 的值为 13：<br><img data-src="https://s1.ax1x.com/2023/02/24/pSzOSY9.jpg" style="width:400px;height:400px" alt=""/></p>
<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p>逻辑运算符可以在表达式中生成组合条件，例如在执行特定语句块之前必须满足的两个或多个条件。使用逻辑运算符，可以描述这些组合条件。逻辑运算的返回结果只能为真或假。</p>
<p>Java 语言中的逻辑运算符，如下表所示：</p>
<p>（在例子中，初始化两个整型变量a、b：<code>int a = 0</code>; <code>int b = 1</code>;）<br><img data-src="https://s1.ax1x.com/2023/02/24/pSzOEwD.jpg" style="width:400px;height:300px" alt=""/></p>
<h3 id="短路运算"><a href="#短路运算" class="headerlink" title="短路运算"></a>短路运算</h3><p><code>&amp;&amp;</code>和<code>||</code>运算符存在短路行为。短路的意思是：只有在需要的时候才会判断第二个操作数的真假。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LogicOperators</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>, b = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>((a == <span class="number">2</span>) &amp;&amp; (b == <span class="number">2</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;a和b都等于2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>((a == <span class="number">1</span>) || (b == <span class="number">1</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;a等于1或b等于1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a等于<span class="number">1</span>或b等于<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>程序解析：有两个整型变量<code>a</code>和<code>b</code>，值分别为<code>1</code>和<code>2</code>。第一个<code>if</code>语句的条件为逻辑与运算，其第一个操作数<code>a == 2</code>为假，所以无论第二个操作数是真是假，都不去判断，条件直接被判定为假；第二个<code>if</code>语句的条件为逻辑或运算， 其第一个操作数<code>a == 1</code>为真，所以无论第二个操作数是真是假，都不会去判断，条件直接被判定为真。这就是所谓的短路。</p>
<h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><h3 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h3><p>赋值运算符是为指定变量分配值的符号。下标列出了常用 Java 中常用的赋值运算符：<br><img data-src="https://s1.ax1x.com/2023/02/24/pSzOdlq.jpg" style="width:400px;height:300px" alt=""/></p>
<h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>我们来看一个赋值运算符的实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperateDemo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 分组初始化三个变量 num1、num2、result，值分别为 20、10、0</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">20</span>, num2 = <span class="number">10</span>,  result = <span class="number">0</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始值：&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;num1=&quot;</span> + num1 + <span class="string">&#x27;\t&#x27;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;num2=&quot;</span> + num2 + <span class="string">&#x27;\t&#x27;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;result=&quot;</span> + result + <span class="string">&quot;\t\n&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;开始赋值运算：&quot;</span>);</span><br><span class="line">        result += num1;</span><br><span class="line">        System.out.println(<span class="string">&quot;result += num1 结果为：&quot;</span> + result);</span><br><span class="line">        result -= num2;</span><br><span class="line">        System.out.println(<span class="string">&quot;result -= num2 结果为：&quot;</span> + result);</span><br><span class="line">        result *= num1;</span><br><span class="line">        System.out.println(<span class="string">&quot;result *= num1 结果为：&quot;</span> + result);</span><br><span class="line">        result /= num2;</span><br><span class="line">        System.out.println(<span class="string">&quot;result /= num2 结果为：&quot;</span> + result);</span><br><span class="line">        result %= <span class="number">15</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;result %= 15 结果为：&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">初始值：</span><br><span class="line">num1=20	num2=10	result=0	</span><br><span class="line">开始赋值运算：</span><br><span class="line">result += num1 结果为：20</span><br><span class="line">result -= num2 结果为：10</span><br><span class="line">result *= num1 结果为：200</span><br><span class="line">result /= num2 结果为：20</span><br><span class="line">result %= 15 结果为：5</span><br></pre></td></tr></table></figure>
<h2 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符"></a>其他运算符</h2><h3 id="条件运算符（-）"><a href="#条件运算符（-）" class="headerlink" title="条件运算符（? :）"></a>条件运算符（? :）</h3><p>条件运算符也称为三元运算符。我们会在条件语句小节中再次对其介绍。</p>
<p>该运算符由三个操作数组成，用于判断<strong>布尔表达式</strong>。它的目的是确定应将哪个值分配给变量。条件运算符的语法为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConditionalOperators</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">15</span>;</span><br><span class="line">        System.out.println(age &gt;= <span class="number">18</span> ? <span class="string">&quot;在中国你已经成年&quot;</span> :  <span class="string">&quot;在中国你还未成年&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于<code>age</code>变量值为<code>15</code>，小于<code>18</code>，<code>age &gt;= 18</code>返回结果为假，因此编译执行后，屏幕将打印：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在中国你还未成年</span><br></pre></td></tr></table></figure>
<h3 id="instanceof-运算符"><a href="#instanceof-运算符" class="headerlink" title="instanceof 运算符"></a>instanceof 运算符</h3><blockquote>
<p><strong>Tips</strong>：了解 <code>instanceof</code> 运算符需要一些面向对象的前置知识。目前你可以选择性学习。</p>
</blockquote>
<p><code>instanceof</code>运算符将对象与指定类型进行比较，检查对象是否是一个特定类型（类类型或接口类型）。</p>
<p><code>instanceof</code> 运算符的语法为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">( Object reference variable ) <span class="keyword">instanceof</span>  (class/<span class="keyword">interface</span> <span class="title class_">type</span>)</span><br></pre></td></tr></table></figure>
<p>如果<code>instanceof</code>左侧的变量所指向的对象，是<code>instanceof</code>右侧类或接口的一个对象，结果为真，否则结果为假。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InstanceOfOperators1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;imooc&quot;</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> name <span class="keyword">instanceof</span> String; </span><br><span class="line">     	  System.out.println(<span class="string">&quot;结果为：&quot;</span> + b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于字符串变量<code>name</code>是<code>String</code>类型，所以执行代码，屏幕会打印：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">结果为：true</span><br></pre></td></tr></table></figure>
<p>注意，<code>instanceof</code>运算符不能用于操作基本数据类型，如果将字符串类型<code>name</code>变量改为一个<code>char</code>类型的变量，编译代码将会报错:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">InstanceOfOperators1.java:4: 错误: 意外的类型</span><br><span class="line">        boolean b = name instanceof String;</span><br><span class="line">                    ^</span><br><span class="line">  需要: 引用</span><br><span class="line">  找到:    char</span><br><span class="line">1 个错误</span><br></pre></td></tr></table></figure>
<h2 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h2><p>当多种运算符在一同使用的时候，会有一个执行先后顺序的问题。</p>
<p>下表中的运算符按优先顺序排序。运算符越靠近表格顶部，其优先级越高。具有较高优先级的运算符将在具有相对较低优先级的运算符之前计算。同一行上的运算符具有相同的优先级。<br>|—|—|<br>|类别	|操作符	|关联性|<br>后缀	|() [] . (点操作符)|	左到右<br>一元	|+ + - ！〜	|从右到左<br>乘性	|* &#x2F;％	|左到右<br>加性	|+ -	|左到右<br>移位	|&gt;&gt; &gt;&gt;&gt; &lt;&lt;	|左到右<br>关系	|&gt;&gt; &#x3D; &lt;&lt; &#x3D;	|左到右<br>相等	|&#x3D;&#x3D; !&#x3D;	|左到右<br>按位与	|＆	|左到右<br>按位异或	|^	左到右<br>按位或	|||	左到右<br>逻辑与	|&amp;&amp;	|左到右<br>逻辑或	|| ||	左到右<br>条件	|？：	|从右到左<br>赋值	|&#x3D; + &#x3D; - &#x3D; * &#x3D; &#x2F; &#x3D;％&#x3D; &gt;&gt; &#x3D; &lt;&lt; &#x3D;＆&#x3D; ^ &#x3D; | &#x3D;	|从右到左<br>逗号|	，	|左到右<br>当<strong>相同优先级</strong>的运算符出现在同一表达式中时，如何控制它们计算的先后呢。我们来看一个实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperateorsPriority</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      	<span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">      	<span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">      	<span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">      	<span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> a + b - c + a;</span><br><span class="line">     	System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在计算<code>result</code>的语句的右侧，<code>+ 、-</code>两个运算符优先级相同，如果我们不加以控制，将按照从左到右顺序计算，打印结果为<code>result = 2</code>；但是如果我们想先计算<code>a + b</code>和<code>c + a</code>的值，再计算两者之差，我们可以使用括号()将其顺序进行控制：<code>(a + b) - (c + a)</code>，再执行代码将打印我们想要的结果：<code>result = -2</code>。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua中函数的使用</title>
    <url>/36819.html</url>
    <content><![CDATA[<p>在Lua语言中，函数是对语句和表达式进行抽象的主要方式。函数既可以用于完成某种特定任务，也可以只是进行一些计算然后返回计算结果。在前一种情况下，我们将一句函数调用视为一条语句；而在后一种情况下，我们则将函数调用视为表达式：</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">8</span>*<span class="number">9</span> , <span class="number">9</span>/<span class="number">8</span>)</span><br><span class="line">a = <span class="built_in">math</span>.<span class="built_in">sin</span>(<span class="number">3</span>) + <span class="built_in">math</span>.<span class="built_in">cos</span>(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">date</span>())</span><br></pre></td></tr></table></figure>
<p>无论哪种情况，函数调用时都需要使用一对圆括号把参数列表括起来。即使被调用的函数不需要参数，也需要一对空括号()。对于这个规则，唯一的例外就是，当函数只有一个参数且该参数是字符串常量或表构造器时:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> <span class="string">&quot;Hello World&quot;</span>    &lt;<span class="comment">--&gt; print(&quot;Hello World&quot;)</span></span><br><span class="line"><span class="built_in">dofile</span> <span class="string">&quot;a.lua&quot;</span>		   &lt;<span class="comment">--&gt; dofile(&#x27;a.lua&#x27;)</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">[[a multi-line message]]</span> &lt;<span class="comment">--&gt; print([[a multi-line message]])</span></span><br><span class="line">f&#123;x = <span class="number">10</span> , y = <span class="number">20</span>&#125;		&lt;<span class="comment">--&gt; f(&#123;x = 10 , y = 20&#125;)</span></span><br><span class="line"><span class="built_in">type</span>&#123;&#125;	</span><br></pre></td></tr></table></figure>
<p>Lua语言也为面向对象风格的调用提供了一种特殊的语法，即冒号操作符。形如x:foo(x)的表达式意味为调用对象o的foo方法。<br>一个Lua程序既可以调用Lua语言编写的函数，也可以调用C语言编写的函数。一般来说，我们选择使用C语言编写的函数来实现对性能要求更高，或不容易直接通过Lua语言进行操作的操作系统机制等。例如，Lua语言标准库中所有的函数就都是使用C语言编写的。不过，无论一个函数是用Lua语言编写的还是用C语言编写的，在调用它们时都没有任何区别。<br>正如我们已经在其他示例中所看到的，Lua语言中的函数定义的常见语法格式形如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">( a )</span></span></span><br><span class="line">	<span class="keyword">local</span> sum = <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i = <span class="number">1</span>, #a <span class="keyword">do</span></span><br><span class="line">		sum = sum + a[i]</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">return</span> sum</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>这种语法中，一个函数定义具有一个函数名、一个参数组成的列表和由一组语句组成的函数体。参数的行为与局部变量的行为完全一致，相当于一个用函数调用时转入的值进行初始化的局部变量。<br>调用函数时使用的参数个数可以与定义函数时使用的参数个数不一致。Lua语言会通过抛弃多余参数和将不足的参数设为nil的方式来调整参数的个数。例如，考虑如下的函数：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span> <span class="params">(a,b)</span></span> <span class="built_in">print</span>(a , b) <span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>其形为如下：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">f()				<span class="comment">-- nil  nil</span></span><br><span class="line">f(<span class="number">3</span>)			<span class="comment">-- 3  nil</span></span><br><span class="line">f(<span class="number">3</span>,<span class="number">4</span>)			<span class="comment">-- 3  4</span></span><br><span class="line">f(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)		<span class="comment">-- 3  4  (5被丢弃)</span></span><br></pre></td></tr></table></figure>
<p>虽然这种行为可能导致编程错误，但同样又是有用的，尤其是对于默认参数的情况。例如，考虑如下递增全局计数器的函数：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">incCount</span><span class="params">( n )</span></span></span><br><span class="line">	n = n <span class="keyword">or</span> <span class="number">1</span></span><br><span class="line">	globalCounter = globalCounter + n</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>该函数以1作为默认实参，当调用无参数的incCount()时，将globalCounter加1。在调用incCount()时，Lua语言首先把参数n初始化为nil，接下来or表达式又返回了其第二个操作数，最终把n赋成了默认值1。</p>
<h2 id="多返回值"><a href="#多返回值" class="headerlink" title="多返回值"></a>多返回值</h2><p>Lua语言中一种与众不同但又非常有用的特性是允许一个函数返回多个结果。Lua语言中几个预定义函数就会返回多个值。我们已经接触过函数string.find，该函数用于在字符串中定位模式。当找到了对应的模式时，该函数会返回两个索引值：所匹配模式在字符串中初始字符和结尾字符的索引。使用多重赋值可以同时获取到这两个结果：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">s, e = <span class="built_in">string</span>.<span class="built_in">find</span>(<span class="string">&quot;hello lua users&quot;</span> , <span class="string">&quot;Lua&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(s, e) 		<span class="comment">-- 7 	9</span></span><br></pre></td></tr></table></figure>
<p>请记住，字符串的第一个字符的索引值为1。<br>Lua语言编写的函数同样可以返回多个结果，只需在return关键字后列出所有要返回的值即可。例如，一个用于查找序列中最大元素的函数可以同时返回最大值及该元素的位置：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">maximum</span><span class="params">(a)</span></span></span><br><span class="line">	<span class="keyword">local</span> mi = <span class="number">1</span></span><br><span class="line">	<span class="keyword">local</span> m = a[mi]</span><br><span class="line">	<span class="keyword">for</span> i = <span class="number">1</span>, #a <span class="keyword">do</span></span><br><span class="line">		<span class="keyword">if</span> a[i] &gt; m <span class="keyword">then</span></span><br><span class="line">			mi = i ; m = a[i]</span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">return</span> m, mi</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(maximum(&#123;<span class="number">8</span>,<span class="number">10</span>,<span class="number">23</span>,<span class="number">12</span>,<span class="number">5</span>&#125;))  <span class="comment">--23 3</span></span><br></pre></td></tr></table></figure>
<p>Lua语言根据函数的被调用情况调整返回值的数量。当函数被作为一条单独语句调用时，其所有返回值都会被丢弃；当函数被作为表达式调用时，将只保留函数的第一个返回值。只有当函数调用是一系列表达式中的最后一个表达式时，其所有的返回值才能被获取到。这里所谓的“一系列表达式”在Lua中表现为4种情况：多重赋值、函数调用时传入的实参列表、表构造器和return语句。为了分别展示这几种情况，接下来举几个例子：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo0</span><span class="params">()</span></span> <span class="keyword">end</span>			<span class="comment">-- 不返回结果</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo1</span><span class="params">()</span></span> <span class="keyword">return</span> <span class="string">&quot;a&quot;</span> <span class="keyword">end</span> 		<span class="comment">-- 返回1个结果</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo2</span><span class="params">()</span></span> <span class="keyword">return</span> <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span> <span class="keyword">end</span> 	<span class="comment">-- 返回2个结果</span></span><br></pre></td></tr></table></figure>
<p>在多重赋值中，如果一个函数调用是一系列表达式中的最后一个表达式，则该函数调用将产生尽可能多的返回值以匹配待赋值变量：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">x,y = foo2()			<span class="comment">-- x = &quot;a&quot;, y = &quot;b&quot;</span></span><br><span class="line">x = foo2()				<span class="comment">-- x = &quot;a&quot;, &quot;b&quot;被丢弃</span></span><br><span class="line">x,y,z = <span class="number">10</span>, foo2()		<span class="comment">-- x = 10, y = &quot;a&quot;, z = &quot;b&quot;</span></span><br></pre></td></tr></table></figure>
<p>在多重赋值中，如果一个函数没有返回值或者返回值个数不够多，那么Lua语言会用nil来补充缺失的值：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">x,y = foo0()		<span class="comment">-- x = nil , y = nil</span></span><br><span class="line">x,y = foo1()		<span class="comment">-- x = &quot;a&quot; , y = nil</span></span><br><span class="line">x,y,z = foo2()		<span class="comment">-- x = &quot;a&quot; , y = &quot;b&quot; , z = nil</span></span><br></pre></td></tr></table></figure>
<p>请注意，只有当函数调用一系列表达式中的最后一个表达式时才能返回多值结果，否则只能返回一个结果：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">x,y = foo2(), <span class="number">20</span> 			<span class="comment">-- x = &quot;a&quot;, y = 20  (&#x27;b&#x27;被丢弃)</span></span><br><span class="line">x,y = foo0(), <span class="number">20</span>, <span class="number">30</span> 		<span class="comment">-- x = nil, y = 20  (30被丢弃)</span></span><br></pre></td></tr></table></figure>
<p>当一个调用是另一个函数调用的最后一个实参时，第一个函数的所有返回值都会被作为实参传给第二个函数。我们已经见到过很多这样的代码结构，例如函数print。由于函数print能够接收可变数量的参数，所以print(g())会打印出g返回的所有结果。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(foo0())			<span class="comment">-- 没有结果</span></span><br><span class="line"><span class="built_in">print</span>(foo1())			<span class="comment">-- a</span></span><br><span class="line"><span class="built_in">print</span>(foo2())			<span class="comment">-- a   b</span></span><br><span class="line"><span class="built_in">print</span>(foo2(),<span class="number">1</span>)			<span class="comment">-- a   1</span></span><br><span class="line"><span class="built_in">print</span>(foo2() .. <span class="string">&quot;x&quot;</span>)	<span class="comment">-- ax</span></span><br></pre></td></tr></table></figure>
<p>当在表达式中调用foo2时，Lua语言会把其返回值的个数调整为1.因此，在上例的最后一行，只有第一个返回值”a”参与了字符串连接操作。<br>当我们调用f(g())时，如果f的参数是固定的，那么Lua语言会把g返回值的个数调整成与f的参数个数一致。<br>表构造器会完整地接收函数调用的所有返回值，而不会调整返回值的个数：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">t = &#123;foo0()&#125;		<span class="comment">-- t = &#123;&#125;</span></span><br><span class="line">t = &#123;foo1()&#125;		<span class="comment">-- t = &#123;&quot;a&quot;&#125;</span></span><br><span class="line">t = &#123;foo2()&#125;		<span class="comment">-- t = &#123;&quot;a&quot;,&quot;b&quot;&#125;</span></span><br></pre></td></tr></table></figure>
<p>不过，这种行为只有当函数调用是表达式列表中的最后一个时才有效，在其他位置上的函数总是只返回一个结果：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">t = &#123;foo0(),foo2(),<span class="number">4</span>&#125;  <span class="comment">-- t[1] = nil, t[2] = &quot;a&quot;, t[3] = 4</span></span><br></pre></td></tr></table></figure>
<p>最后，形如return f()的语句会返回f返回的所有结果：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">(i)</span></span></span><br><span class="line">	<span class="keyword">if</span> i == <span class="number">0</span> <span class="keyword">then</span> <span class="keyword">return</span> foo0()</span><br><span class="line">	<span class="keyword">elseif</span> i == <span class="number">1</span> <span class="keyword">then</span> <span class="keyword">return</span> foo1()</span><br><span class="line">	<span class="keyword">elseif</span> i == <span class="number">2</span> <span class="keyword">then</span> <span class="keyword">return</span> foo2()</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(foo(<span class="number">1</span>))		<span class="comment">-- a</span></span><br><span class="line"><span class="built_in">print</span>(foo(<span class="number">2</span>))		<span class="comment">-- a b</span></span><br><span class="line"><span class="built_in">print</span>(foo(<span class="number">0</span>))		<span class="comment">-- 无结果</span></span><br><span class="line"><span class="built_in">print</span>(foo(<span class="number">3</span>))		<span class="comment">-- 无结果</span></span><br></pre></td></tr></table></figure>
<p>将函数调用用一对圆括号括起来可以强制其只返回一个结果：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(foo0())		<span class="comment">-- nil</span></span><br><span class="line"><span class="built_in">print</span>(foo1())		<span class="comment">-- a</span></span><br><span class="line"><span class="built_in">print</span>(foo2())		<span class="comment">-- a</span></span><br></pre></td></tr></table></figure>
<p>应该意识到，return语句后面的内容是不需要加括号的，如果加了括号会导致程序出现额外的行为。因此，无论f究竟返回几个值，形如return(f(x))的语句只返回一个值。又是这可能是我们所希望出现的情况，但有时又可能不是。</p>
<h2 id="可变长参数函数"><a href="#可变长参数函数" class="headerlink" title="可变长参数函数"></a>可变长参数函数</h2><p>Lua语言中的函数可以是可变长参数函数，即可以支持数量可变的参数。例如，我们已经使用一个、两个或多个参数调用过函数print。虽然函数print是在C语言中定义的，但也可以在Lua语言中定义可变长参数函数。<br>下面是一个简答的示例，该函数返回所有参数的总和：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> <span class="params">(...)</span></span></span><br><span class="line">	<span class="keyword">local</span> s = <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> _, v <span class="keyword">in</span> <span class="built_in">ipairs</span>&#123;...&#125; <span class="keyword">do</span></span><br><span class="line">		s = s + v</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">return</span> s </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">3</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">25</span>,<span class="number">12</span>)) 	<span class="comment">-- 54</span></span><br></pre></td></tr></table></figure>
<p>参数列表中的三个点(…)表示该函数的参数是可变长的。当这个函数被调用时，Lua内部会把它所有参数收集起来，我们把这些被收集起来的参数称为函数的额外参数。当函数要访问这些参数时仍需用到三个点，但不同的是此时这三个点是作为一个表达式来使用的。在上例中，表达式{…}的结果是一个由所有可变长参数组成的列表，该函数会遍历该列表来累加其中的元素。<br>我们将三个点组成的表达式称为可变长参数表达式，其行为类似于一个具有多个返回值的函数，返回的是当前函数的所有可变长参数。<br>实际上，可以通过变长参数来模拟Lua中普遍的参数传递机制，例如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">funtion foo (a,b,c)</span><br></pre></td></tr></table></figure>
<p>可以写成</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">(...)</span></span></span><br><span class="line">	<span class="keyword">local</span> a,b,c = ...</span><br></pre></td></tr></table></figure>
<p>喜欢Perl参数传递机制的人可能会更喜欢第二种形式。<br>形如下列的函数只是将调用它时所传入的所有参数简单地返回：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">id</span> <span class="params">(...)</span></span> <span class="keyword">return</span> ... <span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>该函数是一个多值恒等式函数。下列函数的行为则类似于直接调用函数foo，唯一不同之处是在调用函数foo之前会先打印出传递函数foo的所有参数：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo1</span><span class="params">( ... )</span></span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;calling foo:&quot;</span>,...)</span><br><span class="line">	<span class="keyword">return</span> foo(...)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>当跟踪对某个特定的函数调用时，这个技巧很有用。<br>接下来再让我们看另外一个很有用的示例。Lua语言提供了专门用于格式化输出的函数string.format和输出文本的函数io.write。我们会很自然地想到把这两个函数合并为一个具有可变长参数的函数：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fwirte</span><span class="params">(fmt, ...)</span></span></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">io</span>.wirte(<span class="built_in">string</span>.<span class="built_in">format</span>(fmt, ...))</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>注意，在三个点前游一个固定的参数fmt。具有可变长参数的函数也可以具有任意数量的固定参数，但固定参数必须放在变长参数之前。Lua语言会先将前面的参数赋给固定参数，然后将剩余的参数作为可变长参数。<br>要遍历可变长参数，函数可以使用表达式{…}将可变长参数放在一个表中，就像add示例中所作的那样。不过，在某些罕见的情况下，如果可变长参数中包含无效的nil，那么{…}获得的表可能不再是一个有效的序列。此时，就没有办法在表中判断原始参数究竟是不是以nil结尾的。对于这种情况，Lua语言提供了函数table.pack。该函数像表达式{…}一样保存所有的参数，然后将其放在一个表中返回，但是这个表还有一个保存了参数个数的额外字段”n”。例如，下面的函数使用了函数table.pack来检测参数中是否有nil：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nonils</span><span class="params">(...)</span></span></span><br><span class="line">	<span class="keyword">local</span> <span class="built_in">arg</span> = <span class="built_in">table</span>.pack(...)</span><br><span class="line">	<span class="keyword">for</span> i = <span class="number">1</span>  , <span class="built_in">arg</span>.n <span class="keyword">do</span></span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">arg</span>[i] == <span class="literal">nil</span> <span class="keyword">then</span> <span class="keyword">return</span> <span class="literal">false</span> <span class="keyword">end</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(nonils(<span class="number">2</span>,<span class="number">3</span>,<span class="literal">nil</span>))			<span class="comment">-- false</span></span><br><span class="line"><span class="built_in">print</span>(nonils(<span class="number">2</span>,<span class="number">3</span>))				<span class="comment">-- true</span></span><br><span class="line"><span class="built_in">print</span>(nonils())					<span class="comment">-- true</span></span><br><span class="line"><span class="built_in">print</span>(nonils(<span class="literal">nil</span>))				<span class="comment">-- false</span></span><br></pre></td></tr></table></figure>
<p>另一种遍历函数的可变长参数的方法是使用函数select。函数select总是具有一个固定的参数select，以及数量可变的参数。如果select是数值n，那么函数select则返回第n个参数后的所有参数；否则，select应该是字符串”#”，以便函数select返回额外参数的总数。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">select</span>(<span class="number">1</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>))			<span class="comment">-- a	b	c</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">select</span>(<span class="number">2</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>))			<span class="comment">-- b	c</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">select</span>(<span class="number">3</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>))			<span class="comment">-- c</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">select</span>(<span class="string">&quot;#&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>))			<span class="comment">-- 3</span></span><br></pre></td></tr></table></figure>
<p>通常，我们在需要把返回值个数调整为1的地方使用函数select，因此可以把select(n,…)认为是返回第n个额外参数的表达式。<br>来看一个使用函数select的典型示例，下面是使用该函数的add函数：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(...)</span></span></span><br><span class="line">	<span class="keyword">local</span> s = <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i = <span class="number">1</span>, <span class="built_in">select</span>(<span class="string">&quot;#&quot;</span>,...) <span class="keyword">do</span></span><br><span class="line">		s = s + <span class="built_in">select</span>(i , ...)</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">return</span> s</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>对于参数较少的情况，第二个版本的add更快，因为该版本避免了每次调用时创建一个新表。不过，对于参数较多的情况，多次带有很多参数调用函数select会超过创建表的开销，因此第一个版本会更好。</p>
<h2 id="函数table-unpack"><a href="#函数table-unpack" class="headerlink" title="函数table.unpack"></a>函数table.unpack</h2><p>多重返回值还涉及一个特殊的函数table.unpack。该函数的参数是一个数组，返回值为数组内的所有元素：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">table</span>.<span class="built_in">unpack</span>&#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>&#125;)		<span class="comment">-- 10	20	30</span></span><br><span class="line">a,b = <span class="built_in">table</span>.<span class="built_in">unpack</span>&#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>&#125;		<span class="comment">-- a = 10, b = 20 , 30被丢弃</span></span><br></pre></td></tr></table></figure>
<p>顾名思义，函数table.unpack与函数table.pack的功能相反。pack把参数列表转换成Lua语言中一个真实的列表，而unpack则把Lua语言中的真实的列表转换成一组返回值，进而可以作为另一个函数的参数被使用。<br>unpack函数的重要用途之一体现在泛型调用机制中。泛型调用机制允许我们动态地调用具有任意参数的函数。例如，在IOS C中，我们无法编写泛型调用的代码，只能声明可变长参数的函数或使用函数指针来调用不同的函数。但是，我们仍然不能调用具有可变量参数的函数，因为C语言中的每一个函数调用的实参个数是固定的，并且每个实参的类型也是固定的。而在Lua语言中，却可以做到这一点。如果我们想通过数组a传入可变的参数来调用函数f，那么可以写成：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">f(<span class="built_in">table</span>.<span class="built_in">unpack</span>(a))</span><br></pre></td></tr></table></figure>
<p>unpack会返回a中所有的元素，而这些元素又被用作f的参数。例如，考虑如下的代码：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">find</span>(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;ll&quot;</span>))</span><br></pre></td></tr></table></figure>
<p>可以使用如下的代码动态地构造一个等价的调用：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">string</span>.<span class="built_in">find</span></span><br><span class="line">a = &#123;<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;ll&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f(<span class="built_in">table</span>.<span class="built_in">unpack</span>(a)))</span><br></pre></td></tr></table></figure>
<p>通常，函数table.unpack使用长度操作符获取返回值的个数，因而该函数只能用于序列。不过，如果有需要，也可以显示地限制返回元素的范围：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">table</span>.<span class="built_in">unpack</span>(&#123;<span class="string">&quot;Sun&quot;</span>,<span class="string">&quot;Mon&quot;</span>,<span class="string">&quot;Tue&quot;</span>,<span class="string">&quot;Wed&quot;</span>&#125;,<span class="number">2</span>,<span class="number">3</span>))		<span class="comment">-- Mon	Tue</span></span><br></pre></td></tr></table></figure>
<p>虽然预定义的函数unpack是用C语言编写的，但是也可以利用递归在Lua语言中实现：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unpack</span><span class="params">(t,i,n)</span></span></span><br><span class="line">	i = i <span class="keyword">or</span> <span class="number">1</span></span><br><span class="line">	n = n <span class="keyword">or</span> #t</span><br><span class="line">	<span class="keyword">if</span> i &lt;= n <span class="keyword">then</span></span><br><span class="line">		<span class="keyword">return</span> t[i],<span class="built_in">unpack</span>(t,i+<span class="number">1</span>,n)</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>在第一次调用该函数时，只传入一个参数，此时i为1，n为序列长度；然后，函数返回t[1]及unpack(t,2,n)返回的所有结果，而unpack(t,2,n)又会返回t[2]及unpack(t,3,n)返回的所有结果，一次类推，直到处理完n个元素为止。</p>
<h2 id="正确的尾调用"><a href="#正确的尾调用" class="headerlink" title="正确的尾调用"></a>正确的尾调用</h2><p>Lua语言中有关函数的另一个有趣的特性是，Lua语言是支持尾调用消除的。这意味着Lua语言可以正确地尾递归，虽然尾调用消除的概念并没有直接涉及递归。<br>尾调用是被当作函数调用使用的跳转。当一个函数的最后一个动作是调用另一个函数而没有再进行其他工作时，就行程了尾调用。例如，下例代码中对函数g的调用就是尾调用：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span><span class="params">(x)</span></span> x = x + <span class="number">1</span>;<span class="keyword">return</span> g(x) <span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>当函数f调用完函数g之后，f不再需要进行其他的工作。这样，当被调用的函数执行结束后，程序就不再需要返回最初的调用者。因此，在尾调用后，程序也就不需要在调用栈中保存有关调用函数的任何信息。当g返回时，程序的执行路径会直接返回到调用f的位置。在一些语言的实现中，例如Lua语言解释器，就利用了这个特点，是的进行尾调用时不使用任何额外的栈空间。我们就将这种实现称为尾调用消除。<br>由于尾调用不会使用栈空间，所以一个程序中能够嵌套的尾调用的数量是无限的。例如，下例函数支持任意的数字作为参数：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> <span class="params">(n)</span></span></span><br><span class="line">	<span class="keyword">if</span> n &gt; <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">		<span class="keyword">return</span> foo(n - <span class="number">1</span>)</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>该函数永远不会发生栈溢出。<br>关于尾调用消除的一个重点就是如何判断一个调用是尾调用。很多函数之所有不是尾调用，是由于这些函数在调用之后还进行了其他工作。例如，下例中调用g就不是尾调用：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span><span class="params">(x)</span></span></span><br><span class="line">	g(x)</span><br><span class="line"><span class="keyword">end</span>	</span><br></pre></td></tr></table></figure>
<p>这个示例的问题在于，当调用完g后，f在返回前还不得不丢弃g返回的所有结果。类似的，以下的所有调用也都不符合尾调用的定义:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> g(x) + <span class="number">1</span>				<span class="comment">-- 必须进行加法</span></span><br><span class="line"><span class="keyword">return</span> x <span class="keyword">or</span> g(x)			<span class="comment">-- 必须把返回值限制为1个</span></span><br><span class="line"><span class="keyword">return</span> (g(x))				<span class="comment">-- 必须把返回值限制为1个</span></span><br></pre></td></tr></table></figure>
<p>在lua语言中，只有形如return func(args)的调用才是尾调用。不过，由于Lua语言会在调用钱对func及其参数求值，所以func及其参数都可以是复杂的表达式。例如，下面的例子就是尾调用：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> x[i].foo(x[j] + a * b, i + j)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua中模块和包</title>
    <url>/15834.html</url>
    <content><![CDATA[<p>通常，Lua语言不会设置规则。相反，Lua语言提供的是足够强大的机制供不同的开发者实现最适合自己的规则。然而，这种方法对于模块而言并不是特别适用。模块系统的主要目标之一就是允许不同的人共享代码，缺乏公共规则就无法实现这样的分享。</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>Lua语言从5.1版本开始为模块和包定义了一系列的规则。这些规则不需要从语言中引入额外的功能，程序猿可以使用目前为止我们学习到的机制实现这些规则。程序员也可以自由地使用不同的策略。当然，不同的实现可能会导致程序不能使用外部模块，或者模块不能被外部程序使用。<br>从用户观点来看，一个模块就是一些代码，这些代码可以通过函数require加载，然后创建和返回一个表。这个表就像是某种命名空间，其中定义的内容是模块中导出的东西，比如函数和常量。<br>例如，所有的标准库都是模块。我们可以按照如下的方式使用数学库：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> m = <span class="built_in">require</span> <span class="string">&quot;math&quot;</span></span><br><span class="line"><span class="built_in">print</span>(m.<span class="built_in">sin</span>(<span class="number">3.14</span>))				<span class="comment">-- 0.0015926529164868</span></span><br></pre></td></tr></table></figure>
<p>独立解释器会使用跟如下代码等价的方式提前加载所有标准库：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">math</span> = <span class="built_in">require</span> <span class="string">&quot;math&quot;</span></span><br><span class="line"><span class="built_in">string</span> = <span class="built_in">require</span> <span class="string">&quot;string&quot;</span></span><br></pre></td></tr></table></figure>
<p>这种提前加载使得我们可以不用费劲地编写代码来加载模块math就可以直接使用函数math.sin。<br>使用表来实现模块的显著优点之一是，让我们可以像操作普通表那样操作模块，并且能利用Lua语言的所有功能实现额外的功能。在大多数语言中，模块不是第一类值（即它们不能被保存在变量中，也不能被当作参数传递给函数等），所以那些语言需要为模块实现一套专门的机制。而在Lua语言中，我们则可以轻易地实现这些功能。<br>例如，用户调用模块中的函数就有几种方法。其中常见的方法是：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="built_in">mod</span> = <span class="built_in">require</span> <span class="string">&quot;mod&quot;</span></span><br><span class="line"><span class="built_in">mod</span>.foo()</span><br></pre></td></tr></table></figure>
<p>用户可以为模块设置一个局部名称：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> m = <span class="built_in">require</span> <span class="string">&quot;mod&quot;</span></span><br><span class="line">m.foo()</span><br></pre></td></tr></table></figure>
<p>也可以为个别函数提供不同的名称：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> m = <span class="built_in">require</span> <span class="string">&quot;mod&quot;</span></span><br><span class="line"><span class="keyword">local</span> f = m.foo</span><br><span class="line">f()</span><br></pre></td></tr></table></figure>
<p>还可以只引入特定的函数：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> f = <span class="built_in">require</span> <span class="string">&quot;mod&quot;</span>.foo 			<span class="comment">-- (require(&quot;mod&quot;)).foo</span></span><br><span class="line">f()</span><br></pre></td></tr></table></figure>
<p>上述这些方法的好处是无须语言的特别支持，它们使用的都是语言已经提供的功能。</p>
<h2 id="函数-require"><a href="#函数-require" class="headerlink" title="函数 require"></a>函数 require</h2><p>尽管函数require也只是一个没什么特殊之处的普通函数，但在Lua语言的模块实现中扮演者核心角色。要加载模块时，只需要简单地调用这个函数，然后传入模块作为参数。请记住，当函数的参数只有一个字符串常量时括号是可以省略的，而且一般在使用require时按照惯例也会省括号。不过尽管如此，下面这些用法也是正确的：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> m = <span class="built_in">require</span>(<span class="string">&#x27;math&#x27;</span>)</span><br><span class="line"><span class="keyword">local</span> modname = <span class="string">&#x27;math&#x27;</span></span><br><span class="line"><span class="keyword">local</span> m = <span class="built_in">require</span>(modname)</span><br></pre></td></tr></table></figure>
<p>函数require尝试对模块的定义做最小的假设。对于函数来说，一个模块可以是定义了一些变量的代码。典型地，这些代码返回一个由模块中函数组成的表。不过，由于这个动作是由模块代码而不是由函数require完成的，所以某些模块可能会选择返回其他的值或者甚至引发副作用。<br>首先，函数require在表package.loaded中检查模块是否已被加载。如果模块已经被加载，函数require就返回相应的值。因此，一旦一个模块被加载过，后续的对于同一模块的所有require调用都将返回同一个值，而不会再运行任何代码。<br>如果模块尚未加载，那么函数require则搜索具有指定模块名的Lua文件（搜索路径有变量package.path指定）。如果函数require找到了相应的文件，那么就用函数loadfile将其进行加载，结果是一个我们称之为加载器的函数。<br>如果函数require找不到指定模块名的Lua文件，那么它就搜索相应名称的C标准库。如果找到了一个C标准库，则使用底层函数package.loadlib进行加载，这个底层函数会查找名为luaopen_modname的函数。在这种情况下，加载函数就是loadlib的执行结果，也就是一个被表示为Lua函数的C语言函数luaopen_modname。<br>不管模块是Lua文件还是C标准库中找到的，函数require此时都具有了用于加载它的加载函数。为了最终加载模块，函数require带着两个参数调用加载函数：模块名和加载函数所在文件名称。如果加载函数有返回值，那么函数require会返回这个值，然后将其保存在表package.loaded中，以便于将来在加载同一个模块时返回相同的值。如果加载函数么有返回值且表中的package.loaded【@rep{modname}]为空，函数require就假设模块的返回值是true。如果没有这种补偿，那么后续调用函数require时将会重复加载模块。<br>要强制函数require加载同一模块两次，可以先将模块从package.loaded中删除：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">package</span>.<span class="built_in">loaded</span>.modname = <span class="literal">nil</span></span><br></pre></td></tr></table></figure>
<p>下一次在加载这个模块时，函数require就会重新加载模块。<br>对于函数require来说，一个常见的抱怨是它不能给待加载的模块传递参数。例如，数学模块可以对角度和弧度的选择增加一个选项：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 错误的代码</span></span><br><span class="line"><span class="keyword">local</span> <span class="built_in">math</span> = <span class="built_in">require</span>(<span class="string">&quot;math&quot;</span>,<span class="string">&quot;degree&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>这里的问题在于，函数require的主要目的之一就是避免重复加载模块，一旦一个模块被加载，该模块就会在后续所有调用require的程序部分被复用。这样，不同参数的同名模块之间就会产生冲突。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="built_in">mod</span> = <span class="built_in">require</span> <span class="string">&quot;mod&quot;</span></span><br><span class="line"><span class="built_in">mod</span>.init(<span class="number">0</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>如果加载函数返回的是模块本身，那么还可以写成：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="built_in">mod</span> = <span class="built_in">require</span> <span class="string">&quot;mod&quot;</span>.init(<span class="number">0</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>请记住，模块在任何情况下只加载一次；至于如何处理冲突的加载，取决于模块自己。</p>
<h3 id="模块重命名"><a href="#模块重命名" class="headerlink" title="模块重命名"></a>模块重命名</h3><p>通常，我们通过模块本来的名称来使用它们，但有时，我们也需要将一个模块改名以避免命名冲突。一点典型的情况就是，处于测试的目的而需要加载同一模块的不同版本。对于一个Lua语言模块来说，其内部的名称并不要求是固定的，因此通常修改.lua文件的文件名就够了。不过，我们却无法修改C标准库的二进制目标代码中<code>luaopen_*</code>函数的名称。为了进行这种重命名，函数require运用了一个连字符的技巧：如果一个模块名中包含连字符，那么函数require就会用连字符之前的内容创建<code>luaopen_*</code>函数的名称。例如，如果一个模块的名称为mod-v3.4，那么函数require会认为该模块的加载函数应该是<code>luaopen_mod</code>而不是luaopen_mod-v3.4（这也不是有效的C语言函数名）。因此，如果需要使用两个名称均为mod的模块（或相同模块的两个不同版本），那么可以对其中的一个进行重命名，如mod-v1.当调用m1&#x3D;require “mod-v1”时，函数require会找到改名后的文件mod-v1并将其中原名为luaopen_mod的函数作为加载函数。</p>
<h3 id="搜索路径"><a href="#搜索路径" class="headerlink" title="搜索路径"></a>搜索路径</h3><p>在搜索一个Lua文件时，函数require使用的路径与典型的路径略有不同。典型的路径是很多目录组成的列表，并在其中搜索指定的文件。不过，IOS C（Lua语言依赖的抽象平台）并没有目录的概念。所以，函数require使用的路径是一组模块，其中的每项都指定了蒋模块名(函数require的参数)转换为文件名的方式。更准确地说，这种路径中的每一个模块都是一个包含可选问号的文件名。对于每个模板，函数require会用模块名来替换每一个问号，然后检查结果是否存在对应的文件；如果不存在，则尝试下一个模板。路径中模板以在大所述操作系统中很少被用于文件名的分号隔开。例如，考虑如下路径：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">?;?.lua;c:\windows\?;/usr/<span class="keyword">local</span>/lua/?/?.lua</span><br></pre></td></tr></table></figure>
<p>在使用这个路径时，调用require “sql”将尝试打开如下的Lua文件：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">sql</span><br><span class="line">sql.lua</span><br><span class="line">c:\windows\sql</span><br><span class="line">/usr/<span class="keyword">local</span>/lua/sql/sql.lua</span><br></pre></td></tr></table></figure>
<p>函数require只处理分号（作为分隔号）和问号，所有其他的部分（包括目录分隔符合文件扩展名）则由路径自有定义。<br>函数require用于搜索Lua文件的路径是变量package.path的当前值。当package模块被初始化后，它就把变量package.path设置成环境变量LUA_PATH_5_3的值。如果这个环境变量没有被定义，那么Lua语言则尝试另一个环境变量LUA_PATH。如果这两个环境变量都没有被定义，那么Lua语言则使用一个编译是定义的默认路径。在使用一个环境变量的值时，Lua语言会将其中所有的”;;”替换成默认路径。例如，如果LUA_PATH_5_3设为”mydir&#x2F;r.lua;;”,那么最终路径就会是模板”mydir&#x2F;?.lua”后跟默认路径。<br>搜索C标准库的路径的逻辑与此相同，只不过C标准库的路径来自变量package.cpath而不是package.path。类似地，这个变量的初始值也来自环境变量LUA_CPATH_5_3或LUA_CPATH。在POSIX系统中这个路径的典型值形如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">./?.so;/usr/<span class="keyword">local</span>/lib/lua/<span class="number">5.2</span>/?.so</span><br></pre></td></tr></table></figure>
<p>请注意定义文件扩展名的路径。在上例中，所有模块使用的都是.so，而在Windows操作系统中此典型路径通常形如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">.\&gt;.dll;C:\Program Files\Lua502\dll\?.dll</span><br></pre></td></tr></table></figure>
<p>函数package.searchpath中实现了搜索库的所有规则，该函数的参数包括模块名和路径，然后遵循上述规则来搜索文件。函数package.searchpath要么返回第一个存在的文件的文件名，要么返回nil外加描述所有文件都无法成功打开的错误信息，如下：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">path</span> = <span class="string">&quot;.\\?.dll;C:\\Programe Files\\Lua502\\dll\\?.dll&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">package</span>.searchpath(<span class="string">&quot;X&quot;</span>,<span class="built_in">path</span>))</span><br><span class="line"><span class="literal">nil</span></span><br><span class="line">			no file <span class="string">&#x27;.\X.dll&#x27;</span></span><br><span class="line">			no file <span class="string">&#x27;C:\Program Files\Lua502\dll\X.dll&#x27;</span></span><br></pre></td></tr></table></figure>
<p>作为一个有趣的练习，我们在示例中实现了与函数package.searchpath类似的函数。</p>
<blockquote>
<p>示例，实验班的package.searchpath</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">search</span><span class="params">(modname,path)</span></span></span><br><span class="line">	modname = <span class="built_in">string</span>.<span class="built_in">gsub</span>(modname,<span class="string">&quot;%.&quot;</span>,<span class="string">&quot;/&quot;</span>)</span><br><span class="line">	<span class="keyword">local</span> msg = &#123;&#125;</span><br><span class="line">	<span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">string</span>.<span class="built_in">gmatch</span>(<span class="built_in">path</span>, <span class="string">&quot;[^;]+&quot;</span>) <span class="keyword">do</span></span><br><span class="line">		<span class="keyword">local</span> fname = <span class="built_in">string</span>.<span class="built_in">gsub</span>(c,<span class="string">&quot;?&quot;</span>,modname)</span><br><span class="line">		<span class="keyword">local</span> f = <span class="built_in">io</span>.<span class="built_in">open</span>(fname)</span><br><span class="line">		<span class="keyword">if</span> f <span class="keyword">then</span></span><br><span class="line">			f:<span class="built_in">close</span>()</span><br><span class="line">			<span class="keyword">return</span> fname</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			msg[#msg + <span class="number">1</span>] = <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;\n\tno file &#x27;%s&#x27;&quot;</span>,fname);</span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span> , <span class="built_in">table</span>.<span class="built_in">concat</span>(msg)			<span class="comment">-- 没找到</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>上述函数首先替换目录分隔符，在本例中即把所有的点换成斜杠。之后，该函数遍历路径中的所有组成部分，也就是每一个不含分号的最长匹配。对于每一个组成部分，该函数使用模块名来替换问号得到最终的文件名，然后检查相应的文件是否存在。如果存在，该函数关闭这个文件，然后返回文件的名称；否则，该函数保存失败的文件名用于可能的错误提示（请注意字符串缓冲区在避免创建无用的长字符串时的作用）。如果一个文件都找不到，该函数则返回nil及最终的错误信息。</p>
<h3 id="搜索器"><a href="#搜索器" class="headerlink" title="搜索器"></a>搜索器</h3><p>在现实中，函数require比此前描述过的稍微复杂一点。搜索Lua文件和C标准库的方式只是更加通用的搜索器的两个实例。一个搜索器是一个以模块名为参数，以对应模块的加载器或nil为返回值的简单函数。<br>数组package.searchers列出了函数require使用的所有搜索器。在寻找模块时，函数require传入模块名并调用列表中的每一个搜索器知道它们其中的一个找到了指定模块的加载器。如果所有所搜器都被调用完后还找不到，那么函数require就抛出一个异常。<br>用一个列表来驱动对一个模块的搜索给函数require提供了极大的灵活性。例如，如果想保存被压缩在zip文件中的模块，只需要提供一个合适的搜索器，然后把它增加到该列表中。在默认配置中，我们此前学习过的用于搜索Lua文件和C标准库的搜索器排在列表的第二、三位，在它们之前是预加载搜索器。<br>预加载搜索器使得我们能够为要记载的模块定义任意的加载函数。预加载搜索器使用一个名为package.preload的表来映射模块名称和加载函数。当搜索指定的模块名时，该搜索器只是简单地在表中搜索指定的名称。如果它找到了对应的函数，那么就将该函数作为相应模块的加载函数返回；否则，则返回nil。预加载搜索器为处理非标场景提供了一种通用的方式。例如，一个静态链接到Lua中的C标准库可以将其luaopen_函数注册到表preload中，这样luaopen_函数只有当用户加载这个模块时才会被调用。用这种方式，程序不会为没有用到的模块浪费资源。</p>
<h2 id="Lua语言中编写模块的基本方法"><a href="#Lua语言中编写模块的基本方法" class="headerlink" title="Lua语言中编写模块的基本方法"></a>Lua语言中编写模块的基本方法</h2><p>在lua语言中创建模块的最简单方法是，创建一个表并将所有需要导出的函数放入其中，最后返回个表。示例就是这个方法：</p>
<blockquote>
<p>一个用于复数的简单模块</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> M = &#123;&#125;   <span class="comment">-- 模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建一个新的复数</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">new</span><span class="params">(r,i)</span></span></span><br><span class="line">	<span class="keyword">return</span>&#123;r = r , i = i&#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">M.new = new 		<span class="comment">-- 把&#x27;new&#x27;加到模块中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- constant &#x27;i&#x27;</span></span><br><span class="line">M.i = new(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">M.add</span><span class="params">(c1,c2)</span></span></span><br><span class="line">	<span class="keyword">return</span> new(c1.r + c2.r,c1.i + c2.i)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">M.sub</span><span class="params">(c1,c2)</span></span></span><br><span class="line">	<span class="keyword">return</span> new(c1.r - c2.r,c1.i - c2.i)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">M.mul</span><span class="params">(c1,c2)</span></span></span><br><span class="line">	<span class="keyword">return</span> new(c1.r*c2.r - c1.i*c2.i,c1.r*c2.i + c1.i*c2.r)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">inv</span><span class="params">(c)</span></span></span><br><span class="line">	<span class="keyword">local</span> n = c.r^<span class="number">2</span> + c.i^<span class="number">2</span></span><br><span class="line">	<span class="keyword">return</span> new(c.r/n,-c.i/n)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">M.div</span><span class="params">(c1,c2)</span></span></span><br><span class="line">	<span class="keyword">return</span> M.mul(c1,inv(c2))</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">M.tostring</span><span class="params">(c)</span></span></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;(%g,%g)&quot;</span>,c.r,c.i)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> M</span><br></pre></td></tr></table></figure>
<p>请注意我们是如何通过简单地把new和inv声明为局部变量而使它们称为代码段的私有函数的。<br>有些人不喜欢最后的返回语句。一种将其省略的方式是直接把模块对应的表放在package.loaded中：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> M = &#123;&#125;</span><br><span class="line"><span class="built_in">package</span>.<span class="built_in">loaded</span>[...] = M</span><br></pre></td></tr></table></figure>
<p>请注意，函数require会把模块的名称作为第一个参数传给加载函数。因此，表索引中的可变长参数表达式…其实就是模块名。在这一赋值语句后，我们就不再需要在模块的最后返回M了：如果一个模块没有返回值，那么函数require会返回package.loaded[modname]的当前值。不过，笔者认为在模块的最后加上return语句更清晰。如果我们忘了return语句，那么在测试模块的时候就很容易就会发现问题。<br>另一种编写模块的方法是把所有的函数定义为局部变量，然后在最后构造返回的表，参考示例</p>
<blockquote>
<p>示例：使用导出表的模块</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">new</span><span class="params">(r,i)</span></span> <span class="keyword">return</span> &#123;r = r, i = i&#125; <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> i = complex.new(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">	new  = new,</span><br><span class="line">	i    = i,</span><br><span class="line">	add  = add,</span><br><span class="line">	<span class="built_in">sub</span>  = <span class="built_in">sub</span>,</span><br><span class="line">	mul  = mul,</span><br><span class="line">	div  = div,</span><br><span class="line">	<span class="built_in">tostring</span> = <span class="built_in">tostring</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种方式的有点在于，无须在每一个标识符前增加前缀M.或类似的东西。通过显式的导出表，我们能够以与在模块中相同的方式定义和使用导出和内部函数。这种方式的缺点在于，导出表位于最后不是最前面（把前面的话当作简略文档的话更有用），而且由于必须把每个名字都写两遍，所以导出表有点冗余（这一点其实可能会变成优点，因为这允许函数在模块内和模块外具有不同的名称，不过程序很少会用到）。<br>不管怎样，无论怎样定义模块，用户都能用标准的方法使用模块：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> cpx = <span class="built_in">require</span> <span class="string">&quot;complex&quot;</span></span><br><span class="line"><span class="built_in">print</span>(cpx.<span class="built_in">tostring</span>(cpx.add(cpx.new(<span class="number">3</span>,<span class="number">4</span>),cpx.i)))				<span class="comment">-- (3,5)</span></span><br></pre></td></tr></table></figure>
<p>后续，我们会看到如何使用诸如元表和环境之类的高级Lua语言功能来编写模块。 不过，除了发现由于失误而定义的全局变量时又一个技巧外，笔者编写模块时都是用基本功能。</p>
<h2 id="子模块和包"><a href="#子模块和包" class="headerlink" title="子模块和包"></a>子模块和包</h2><p>Lua支持具有层次结构的模块名，通过点来分隔名称中的层次。例如，一个名为mod.sub的模块是模块魔的一个子模块。一个包是一棵由模块组成的完整的树，它是Lua语言中用于发行程序的单位。<br>当加载一个名为mod.sub的模块时，函数require一次使用原始的模块名”mod.sub”作为键来查询表package.loaded和表package.preload。这里，模块名中的点像模块名中的其他字符一样，没有特殊含义。<br>然而，当搜索一个定义子模块的文件时，函数require会将点转换为另一个字符，通常就是操作系统的目录分隔符（例如，POSIX操作系统的斜杠或Windows操作系统的反斜杠）。转换之后，函数require会像搜索其他名称一样搜索这个名称。例如，假设目录分隔符是斜杠并且有如下路径：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">./?.lua;/usr/<span class="keyword">local</span>/lua/?.lua;/usr/<span class="keyword">local</span>/lua/?/init.lua</span><br></pre></td></tr></table></figure>
<p>调用require “a.b”会尝试打开以下文件：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">./a/b.lua</span><br><span class="line">/usr/<span class="keyword">local</span>/lua/a/b.lua</span><br><span class="line">/usr/<span class="keyword">local</span>/lua/a/b/init.lua </span><br></pre></td></tr></table></figure>
<p>这种行为使得一个包中的所有模块能够放到一个目录中。例如，一个具有模块p、p.a和p.b的包对应的文件可以分贝是p&#x2F;init.lua、p&#x2F;a.lua和p&#x2F;b.lua，目录p又位于其他合适的目录中。<br>Lua语言使用的目录分隔符是编译时配置的，可以是任意的字符串（请记住，Lua并不知道目录的存在）。例如，没有目录层次的系统可以使用下画线作为”目录分隔符“，因此调用require “a,b”会搜索文件a_b.lua。<br>作为一种额外的机制，函数require在加载C语言编写的子模块时还有另外一个搜索器。当该函数找不到子模块对应的Lua文件或C文件时，它会再次搜索C文件所在的路径，不过这次将搜索包的名称。例如，如果一个程序要加载子模块a.b.c，搜索器会搜索文件a。如果找到了C标准库a，那么函数require就会在该库中搜索对应的加载函数luaopen_a_b_c。这种机制允许一个发行包将几个子模块组织为一个C标准库，每个子模块有各自的加载函数。<br>从Lua语言的视角看，同一个包中的子模块没有显式的关联。加载一个模块并不会自动加载它的任何子模块。同样，加载子模块也不会自动地加载其父模块。当然，只要包的实现者愿意，也可以创造这种关联。例如，一个特定的模块可能一开始就显式地加载它的一个或全部子模块。</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua连续教程之Lua中的数值</title>
    <url>/63692.html</url>
    <content><![CDATA[<p>我们可以使用科学计数法（一个可选的十进制部分外加一个可选的十进制指数部分）书写数值常量，例如：</p>
<span id="more"></span>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt; <span class="number">4</span>             <span class="comment">--4</span></span><br><span class="line">&gt; <span class="number">0.4</span>			<span class="comment">--0.4</span></span><br><span class="line">&gt; <span class="number">4.57e-3</span>		<span class="comment">--0.00457</span></span><br><span class="line">&gt; <span class="number">0.3e12</span>		<span class="comment">--3.0000000000.0</span></span><br><span class="line">&gt; <span class="number">5E+20</span>			<span class="comment">--5e+20</span></span><br></pre></td></tr></table></figure>
<p>具有十进制小数或者指数的数值会被当做浮点型值，否则会被当做整数值。<br>整型数和浮点数的类型都是<code>number</code>：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt;<span class="built_in">type</span>(<span class="number">3</span>)			<span class="comment">--number</span></span><br><span class="line">&gt;<span class="built_in">type</span>(<span class="number">3.5</span>)			<span class="comment">--number</span></span><br><span class="line">&gt;<span class="built_in">type</span>(<span class="number">3.0</span>)			<span class="comment">--number</span></span><br></pre></td></tr></table></figure>
<p>由于整型值和浮点型值的类型都是”number”，所以它们是可以互相转换的。同时，具有相同算术值的整型值和浮点值在Lua语言中是相等的：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt;<span class="number">1</span> == <span class="number">1.0</span> 			<span class="comment">--true</span></span><br><span class="line">&gt;<span class="number">-3</span> == <span class="number">-3.0</span> 		<span class="comment">--ture</span></span><br><span class="line">&gt;<span class="number">0.2e3</span>	== <span class="number">200</span> 		<span class="comment">--ture</span></span><br></pre></td></tr></table></figure>
<p>在少数情况下，当需要区分整型值和浮点型值时，可以使用函数math.type:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt;<span class="built_in">math</span>.<span class="built_in">type</span>(<span class="number">3</span>)			<span class="comment">--integer</span></span><br><span class="line">&gt;<span class="built_in">math</span>.<span class="built_in">type</span>(<span class="number">3.0</span>)			<span class="comment">--float</span></span><br></pre></td></tr></table></figure>
<p>在Lua5.3中：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt;<span class="number">3</span>			<span class="comment">--3</span></span><br><span class="line">&gt;<span class="number">3.0</span>		<span class="comment">--3.0</span></span><br><span class="line">&gt;<span class="number">1000</span>		<span class="comment">--1000</span></span><br><span class="line">&gt;<span class="number">1e3</span>		<span class="comment">--1000.0</span></span><br></pre></td></tr></table></figure>
<p>Lua语言还像其他语言一样也支持0x开头的十六进制常量。与其他很多变成语言不通，Lua语言还支持十六进制的浮点数，这种十六进制浮点数部分由小数部分和以p或P开头的指数部分组成。例如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt;<span class="number">0xff</span>		<span class="comment">--255</span></span><br><span class="line">&gt;<span class="number">0x1A3</span>		<span class="comment">--419</span></span><br><span class="line">&gt;<span class="number">0x0</span><span class="number">.2</span>		<span class="comment">--0.125</span></span><br><span class="line">&gt;<span class="number">0x1</span>p<span class="number">-1</span>		<span class="comment">--0.5</span></span><br><span class="line">&gt;<span class="number">0</span>x.bp2		<span class="comment">--42.75</span></span><br></pre></td></tr></table></figure>
<p>可以使用参数%a参数，通过函数string.format对这种格式进行格式化输出：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt;<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%a&quot;</span>,<span class="number">419</span>)		<span class="comment">--0x1.a3p+8</span></span><br><span class="line">&gt;<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%a&quot;</span>,<span class="number">0.1</span>)		<span class="comment">--0x1.999999999999ap-4</span></span><br></pre></td></tr></table></figure>
<p>虽然这种格式很难阅读，但是这种格式可以保留所有浮点数的精度，并且比十进制的转换速度更快。</p>
<h2 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h2><p>除了加减乘除、取负数等常见的算术运算外，Lua语言还支持取整除法、取模和指数运算。<br>两个整数型值进行加减乘除和取负操作的结果仍然是整型值。对于这些算术运算而言，操作数是用整型还暗示浮点型表示的整数都没有区别：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt;<span class="number">13</span> + <span class="number">15</span> 		<span class="comment">--28</span></span><br><span class="line">&gt;<span class="number">13.0</span> + <span class="number">15.0</span> 	<span class="comment">--28.0</span></span><br></pre></td></tr></table></figure>
<p>如果两个操作数都是整型值，那么结果也是整型值；否则，结果就是浮点型值。当操作数一个是整型值一个是浮点型值时，Lua语言会在进行算术运算前将整型值转换为浮点型值：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt;<span class="number">13.0</span> + <span class="number">25</span> 		<span class="comment">--38.0</span></span><br><span class="line">&gt;-(<span class="number">3</span> * <span class="number">6.0</span>)		<span class="comment">--18.0</span></span><br></pre></td></tr></table></figure>
<p>由于两个整数相除的结果并不一定是整数，因此除法不遵循上述规则。为了避免两个整型值相除和两个浮点型值相除导致不一样的结果，除法运算操作永远是浮点数且产生浮点型值的结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;3.0 / 2.0				--1.5</span><br><span class="line">&gt;3 / 2					--1.5</span><br></pre></td></tr></table></figure>
<p>Lua5.3针对整数除法引入了一个称为floor除法的新算术运算符&#x2F;&#x2F;。顾名思义，floor除法会对得到的商向负无穷取整，从而保证结果是一个整数。这样，floor除法就可以与其他算术运算一样遵循同样的规则：如果操作数都是整型值，那么结果就是整型值，否则就是浮点型值</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt;<span class="number">3</span> // <span class="number">2</span>			<span class="comment">--1</span></span><br><span class="line">&gt;<span class="number">3.0</span> // <span class="number">2</span>		<span class="comment">--1.0</span></span><br><span class="line">&gt;<span class="number">6</span> // <span class="number">2</span>			<span class="comment">--3</span></span><br><span class="line">&gt;<span class="number">6.0</span> // <span class="number">2.0</span> 	<span class="comment">--3.0</span></span><br><span class="line">&gt;<span class="number">-9</span> // <span class="number">2</span>		<span class="comment">--5</span></span><br><span class="line">&gt;<span class="number">1.5</span> // <span class="number">0.5</span>		<span class="comment">--3.0</span></span><br></pre></td></tr></table></figure>
<p>下面公式是取模运算的定义：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a % b == a - ((a // b ) * b )</span><br></pre></td></tr></table></figure>
<p>如果操作数是整数，那么取模运算的结果也是整数。因此，取模运算也遵从与算术运算相同的规律，即如果两个操作数均是整型值，则结果为整型，否则为浮点型。<br>对于整型操作数而言，取模运算的含义没有什么特别的，其结果的符号永远与第二个操作数的符号保持一致。特别地，对于任意指定的正常数K，即使x是负数，表达式x%K的结果也永远在[0,K-1]之间。例如，对于任意整数值i，表达式i%2的结果均是0或1。<br>对于实数类型的操作数而言，取模运算有一些不同。例如，x-x%0.01恰好是x保留两位小数的结果，x-x%0.001恰好是x保留三位小数的结果：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt;x = <span class="built_in">math</span>.<span class="built_in">pi</span></span><br><span class="line">&gt;x - x%<span class="number">0.01</span>			<span class="comment">--3.14</span></span><br><span class="line">&gt;x - x%<span class="number">0.001</span>		<span class="comment">--3.141</span></span><br></pre></td></tr></table></figure>
<p>再比如，我们可以使用取模运算检查某辆车在拐过了指定的角度后是否能够原路返回。假设使用度作为角度的单位，那么我们可以使用如下的公式:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> tolerance = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isturnback</span><span class="params">( angle)</span></span></span><br><span class="line">	angle = angle % <span class="number">360</span></span><br><span class="line">	<span class="keyword">return</span> (<span class="built_in">math</span>.<span class="built_in">abs</span>(angle - <span class="number">180</span>) &lt; tolerance)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>该函数对负的角度而言也同样适用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(istrunback(-180))			--turn</span><br></pre></td></tr></table></figure>
<p>假设使用弧度作为角度的单位，那么我们只需要简单地修改常量的定义即可：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> tolerance = <span class="number">0.17</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isturnback</span><span class="params">( angle)</span></span></span><br><span class="line">	angle = angle % (<span class="number">2</span> * <span class="built_in">math</span>.<span class="built_in">pi</span>)</span><br><span class="line">	<span class="keyword">return</span> (<span class="built_in">math</span>.<span class="built_in">abs</span>(angle - <span class="number">180</span>) &lt; tolerance)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>表达式angle%(2*math.pi)实现了将任意范围的角度归一化到[0,2pi]之间。</p>
<p>Lua表达式同意支持幂运算，使用符号<code>^</code>表示，像除法一样，幂运算的操作数也永远是浮点类型（整型值在幂运算时不能整除，例如，$2^{-2}$的结果不是整型数）。我们可以使用$x^{0.5}$来计算x的平方根，使用$x^{1&#x2F;3}$来计算x的立方根。</p>
<h2 id="关系运算"><a href="#关系运算" class="headerlink" title="关系运算"></a>关系运算</h2><p>Lua语言提供了下列关系运算：<br><code>&lt;</code>,<code>&gt;</code>,<code>&lt;=</code>,<code>&gt;=</code>,<code>==</code>,<code>~=</code><br>这些关系运算的结果都是Boolean类型。<br><code>==</code>用于相等性测试，<code>~=</code>用于不等性测试。这两个运算符可以应用于任意两个值，当这两个值的类型不同时，Lua语言认为它们是不相等的；否则，会根据它们的类型再对两者进行比较。<br>比较数值时应用户忽略数值的子类型，数值究竟是以整型还是浮点型类型表示并无区别，只娱算术有关。</p>
<h2 id="数学库"><a href="#数学库" class="headerlink" title="数学库"></a>数学库</h2><p>Lua语言提供了标准数学库math。标准数学库由一组标准的数学函数组成，包括三角函数、指数函数、取证函数、最大和最小函数、用于生成伪随机数函数(random)以及常量pi和huge。<br>详情可见链接：<a href="https://blog.csdn.net/Silent_F/article/details/86547290">https://blog.csdn.net/Silent_F/article/details/86547290</a><br>所有的三角函数都以弧度为单位，并通过函数deg和rad进行角度和弧度的转换。</p>
<h3 id="随机数发生器"><a href="#随机数发生器" class="headerlink" title="随机数发生器"></a>随机数发生器</h3><p>函数math.random用于生成随机数，共有三种调用方式。当不带参数调用时，该函数将返回一个在[0,1)范围内均匀分布的随机实数。当使用带有一个整型值n的参数调用时，该函数将返回一个在[1,n]范围内的随机整数。例如，我们可以通过调用random(6)来模拟掷骰子的结果。当使用带有两个整数值l和u的参数调用时，该函数返回在[l,u]范围内的随机整数。<br>函数randomseed用于设置随机数发生器的种子，该函数的唯一参数就是数值类型的种子。在一个程序启动时，系统固定使用1为种子初始化随机数发生器。如果不设置其他的种子，那么每次程序运行时都会生成相同的随机数序列。从调试的角度看，这是一个不错的特行，然而，对于一个游戏来说却会导致相同的场景重复地出现。为了解决这个问题，通常调用<code>math.randomsee(os.time())</code>来使当前系统时间作为种子初始化随机数发生器。</p>
<h3 id="取证函数"><a href="#取证函数" class="headerlink" title="取证函数"></a>取证函数</h3><p>数学库提供了三个取证函数:floor、ceil和modf。其中，floor向负无穷取整，ceil向正无穷取整，modf向零取整。当取整结果能够用整型表示时，返回结果为整型值，否则返回浮点型值。处理返回取整后的值义务外，函数modf还会返回小数部分作为第二个结果。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt;<span class="built_in">math</span>.<span class="built_in">floor</span>(<span class="number">3.3</span>)		<span class="comment">--3</span></span><br><span class="line">&gt;<span class="built_in">math</span>.<span class="built_in">floor</span>(<span class="number">-3.3</span>)		<span class="comment">-- -4</span></span><br><span class="line">&gt;<span class="built_in">math</span>.<span class="built_in">ceil</span>(<span class="number">3.3</span>)			<span class="comment">-- 4</span></span><br><span class="line">&gt;<span class="built_in">math</span>.<span class="built_in">ceil</span>(<span class="number">-3.3</span>)		<span class="comment">-- -3</span></span><br><span class="line">&gt;<span class="built_in">math</span>.<span class="built_in">modf</span>(<span class="number">3.3</span>)			<span class="comment">-- 3 	0.3</span></span><br><span class="line">&gt;<span class="built_in">math</span>.<span class="built_in">modf</span>(<span class="number">-3.3</span>)		<span class="comment">-- -3 	-0.3</span></span><br><span class="line">&gt;<span class="built_in">math</span>.<span class="built_in">floor</span>(<span class="number">2</span>^<span class="number">70</span>)		<span class="comment">--1.1805916207174e+21</span></span><br></pre></td></tr></table></figure>
<p>如果参数本身就是一个整型值，那么它将被原样返回。<br>如果想将数值x向最近的整数取整，可以对x+0.5调用floor函数。不过，当参数是一个很大的整数时，简单的加法可能会导致错误。例如，考虑如下代码：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">x = x^<span class="number">52</span> + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%d %d&quot;</span> , x , <span class="built_in">math</span>.<span class="built_in">floor</span>(x + <span class="number">0.5</span>)))</span><br><span class="line">	<span class="comment">-- 4503599627370497   4503599627370498</span></span><br></pre></td></tr></table></figure>
<p>$2^{52}$ + 1.5的浮点值表示是不精确的，因此内部会以我们不可控制的方式取整。为了避免这个问题，我们可以单独地处理整数值：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">round</span><span class="params">(x)</span></span></span><br><span class="line">	<span class="keyword">local</span> f = <span class="built_in">math</span>.<span class="built_in">floor</span>(x)</span><br><span class="line">	<span class="keyword">if</span> x == f <span class="keyword">then</span></span><br><span class="line">		<span class="keyword">return</span> f</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">math</span>.<span class="built_in">floor</span>(x + <span class="number">0.5</span>)</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>上例中的函数总是会向上取整半个整数。如果想进行无偏取整，即向距离最近的偶数取整半个整数，上述公式在x + 0.5是奇数的情况下产生不正确的结果：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt;<span class="built_in">math</span>.<span class="built_in">floor</span>(<span class="number">3.5</span> + <span class="number">0.5</span>) 		<span class="comment">--4 (ok)</span></span><br><span class="line">&gt;<span class="built_in">math</span>.<span class="built_in">floor</span>(<span class="number">2.5</span> + <span class="number">0.5</span>)		<span class="comment">--3 (wrong)</span></span><br></pre></td></tr></table></figure>
<p>这时，还是可以利用取整操作来解决上面的问题：表达式<code>(x%2.0 == 0.5)</code>只有在x + 0.5为奇数时为真。基于这些情况，定义一个无偏取整函数就很简单了：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">round</span><span class="params">(x)</span></span></span><br><span class="line">	<span class="keyword">local</span> f = <span class="built_in">math</span>.<span class="built_in">floor</span>(x)</span><br><span class="line">	<span class="keyword">if</span> (x == f) <span class="keyword">or</span> (x % <span class="number">2.0</span> == <span class="number">0.5</span>) <span class="keyword">then</span></span><br><span class="line">		<span class="keyword">return</span> f</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">math</span>.<span class="built_in">floor</span>(x + <span class="number">0.5</span>)</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(round(<span class="number">2.5</span>))		<span class="comment">-- 2</span></span><br><span class="line"><span class="built_in">print</span>(round(<span class="number">3.5</span>))		<span class="comment">-- 4</span></span><br><span class="line"><span class="built_in">print</span>(round(<span class="number">-2.5</span>))		<span class="comment">-- -2</span></span><br><span class="line"><span class="built_in">print</span>(round(<span class="number">-1.5</span>))		<span class="comment">-- -2</span></span><br></pre></td></tr></table></figure>

<h2 id="表示范围"><a href="#表示范围" class="headerlink" title="表示范围"></a>表示范围</h2><p>大多数编程语言使用某些固定长度的比特位来表达数值。因此，数值的表示在范围和精度上都是有限制的。<br>标准Lua使用64个比特位来存储整型值，其最大值为$2^{63}-1$，约等于$10^{19}$；精简Lua使用32个比特位存储整型值，其最大值约为20亿。数学库中的常量定义了整型值的最大值(math.maxinteger)和最小值(math.mininteger)。<br>64位整型值中的最大值是一个很大的数值：全球财富总和（按美分计算）的数千倍和全球人口总数的数十亿倍。尽管这个数值很大，但是仍然有可能发生溢出。当我们在整型数操作时出现比mininteger更小或者比maxinteger更大的数值时，结果就会回环。<br>在数学领域，回环的意思是结果只能在mininteger和maxinteger之间，也就是对$2^{64}$取模的算术结果。在计算机领域，回环的意思是丢弃最高进位。假设最高进位存在，其将是第65个比特位，代表$2^{64}$。因此，忽略第65个比特位不会改变值对$2^{64}$取模的结果。在Lua语言中，这种行为对所有涉及整型值的算术运算都是一致且可预测的：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt;<span class="built_in">math</span>.maxinteger + <span class="number">1</span> == <span class="built_in">math</span>.mininteger			<span class="comment">--ture</span></span><br><span class="line">&gt;<span class="built_in">math</span>.mininteger - <span class="number">1</span> == <span class="built_in">math</span>.maxinteger			<span class="comment">--true</span></span><br><span class="line">&gt;-<span class="built_in">math</span>.mininteger == <span class="built_in">math</span>.mininteger			<span class="comment">--true</span></span><br><span class="line">&gt;<span class="built_in">math</span>.mininteger // <span class="number">-1</span> == <span class="built_in">math</span>.mininteger		<span class="comment">--true</span></span><br></pre></td></tr></table></figure>
<p>最大可以表示的证书是0x7ff…fff，即除最高位（符号位，零为非负整数）外其余比特位均为1.当我们对0x7ff…fff加1时，其结果变为0x800…000，即最小可表示的整数。最小整数比最大整数的表示幅度大1：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt;<span class="built_in">math</span>.maxinteger		<span class="comment">--9223372036854775807</span></span><br><span class="line">&gt;<span class="number">0x7fffffffffffffff</span>		<span class="comment">--9223372036854775807</span></span><br><span class="line">&gt;<span class="built_in">math</span>.maxinteger		<span class="comment">--9223372036854775808</span></span><br><span class="line">&gt;<span class="number">0x8000000000000000</span>		<span class="comment">--9223372036854775808</span></span><br></pre></td></tr></table></figure>
<p>对于浮点数而言，标准Lua使用双精度。标准Lua使用64个比特位表示所有数值，其中11位为指数。双精度浮点数可以表示具有大致16个有效十进制位的数，范围从$-10^{308}$到$10^{308}$。精简Lua使用32个比特位表示的单精度浮点数，大致具有7个有效十进制位，范围从$-10^{38}$到$10^{38}$。<br>双精度浮点数对于大多数实际应用而言是足够大的，但是我们必须了解精度的限制。如果我们使用十位表示一个数，那么1&#x2F;7会被取整到0.142857142。如果我们使用十位计算1&#x2F;7 * 7，结果会是0.999999994而不是1。此外，用十进制表示的有限小数在用二进制表示时可能是无线小数。例如，12.7 -20 + 7.3即便是用双精度表示也不是0，这是由于12.7和7.3的二进制表示不是有限小数。<br>由于整型值和浮点型值的表示范围不同，因此当超过它们的表示范围时，整型值和浮点型值的算术运算会产生不同的结果：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt;<span class="built_in">math</span>.maxinteger + <span class="number">2</span>		<span class="comment">-- -9223372036854775807</span></span><br><span class="line">&gt;<span class="built_in">math</span>.maxinteger + <span class="number">2.0</span>      <span class="comment">-- 9.2233720368548e + 18</span></span><br></pre></td></tr></table></figure>
<p>在上例中，两个结果从数学的角度看都是错误的，而且它们错误的方式不同。第一行对最大可表示整数进行了整型求和，结果发生了回环。第二行对最大可表示整数进行了浮点型求和，结果被取整成了一个近似值，这可以通过如下的比较运算证明：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt;<span class="built_in">math</span>.maxinteger + <span class="number">2.0</span> == <span class="built_in">math</span>.maxinteger + <span class="number">1.0</span>   <span class="comment">-- true</span></span><br></pre></td></tr></table></figure>
<p>尽管每一种表示方法都有其优势，但是只有浮点型才能表示小数。浮点数的值可以表示很大的范围，但是浮点型能够表示的整数范围被精确地限制[$-2^{53}$,$2^{53}$]之间。在这个范围内，我们基本可以忽略整型和浮点型的区别；超出这个范围后，我们则应该谨慎地思考所使用的表示方式。</p>
<h2 id="惯例"><a href="#惯例" class="headerlink" title="惯例"></a>惯例</h2><p>我们可以简单地通过增加0.0的方法将整型值强制转换为浮点型值，一个整型值总是可以被转换成浮点型值：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt; <span class="number">-3</span> + <span class="number">0.0</span> 				<span class="comment">-- -3.0</span></span><br></pre></td></tr></table></figure>
<p>小于$2^{53}$的所有整型值的表示与双精度浮点型值的表示一样，对于绝对值超过了这个值的整型值而言，在将其强制转换为浮点型值时可能导致精度损失：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt; <span class="number">9007199254740991</span> + <span class="number">0.0</span> == <span class="number">90071992547440991</span>		<span class="comment">--true</span></span><br><span class="line">&gt; <span class="number">9007199254740992</span> + <span class="number">0.0</span> == <span class="number">90071992547440992</span>		<span class="comment">--true</span></span><br><span class="line">&gt; <span class="number">9007199254740993</span> + <span class="number">0.0</span> == <span class="number">90071992547440993</span>		<span class="comment">--false</span></span><br></pre></td></tr></table></figure>
<p>在最后一行中，$2^{53} + 1$的结果被取整为$2^{53}$，打破了等式，表达式结果为false。<br>通过与零进行按位或运算，可以把浮点型值强制转换为整型值:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt; <span class="number">2</span>^<span class="number">53</span>				<span class="comment">-- 9.007199254741e+15 (浮点型值)</span></span><br><span class="line">&gt; <span class="number">2</span>^<span class="number">53</span>|<span class="number">0</span>			<span class="comment">-- 9007199254730992	  (整型值)</span></span><br></pre></td></tr></table></figure>
<p>在将浮点型值强制转换为整型值时，Lua语言会检查数值是否与整型值表示完全一致，即没有小数部分且其值在整型值的表示范围内，如果不满足条件则会抛出异常：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt; <span class="number">3.2</span>|<span class="number">0</span>             <span class="comment">--小数部分</span></span><br><span class="line"><span class="built_in">stdin</span>:<span class="number">1</span>: number has no integer representation</span><br><span class="line">&gt; <span class="number">2</span>^<span class="number">64</span>|<span class="number">0</span>            <span class="comment">--超出范围</span></span><br><span class="line"><span class="built_in">stdin</span>:<span class="number">1</span>: number has no integer representation</span><br><span class="line">&gt;<span class="built_in">math</span>.<span class="built_in">random</span>(<span class="number">1</span>,<span class="number">3.5</span>)</span><br><span class="line"><span class="built_in">stdin</span>:<span class="number">1</span>: bad argument #<span class="number">2</span> to <span class="string">&#x27;random&#x27;</span>（数值没有用整型表示）</span><br></pre></td></tr></table></figure>
<p>对小数进行取整必须显示地调用取整函数。<br>另一种把数值强制转换为整型值的方式是使用函数math.tointeger，该函数会在输入参数无法转换为整型值时返回nil:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt;<span class="built_in">math</span>.tointeger(<span class="number">-258.0</span>)			<span class="comment">-- -258</span></span><br><span class="line">&gt;<span class="built_in">math</span>.tointeger(<span class="number">2</span>^<span class="number">30</span>)			<span class="comment">-- 1073741824</span></span><br><span class="line">&gt;<span class="built_in">math</span>.tointeger(<span class="number">5.01</span>)			<span class="comment">-- nil   (不是整数)</span></span><br><span class="line">&gt;<span class="built_in">math</span>.tointeger(<span class="number">2</span>^<span class="number">64</span>)			<span class="comment">-- nil	 (超出范围)</span></span><br></pre></td></tr></table></figure>
<p>这个函数在需要检查一个数字能否被转换为整型值时尤为有用。例如，以下函数在可能时会将输入参数转换为整型值，否则将保持原来的值不变：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cond2int</span><span class="params">(x)</span></span></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">math</span>.tointerger(x) <span class="keyword">or</span> x</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><p>Lua语言中的运算符优先级如下（从高到低）</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">^</span><br><span class="line">一元运算符（-  #  ~  <span class="keyword">not</span> )</span><br><span class="line">*    /    //    %</span><br><span class="line">+    -</span><br><span class="line">..(连续)</span><br><span class="line">&lt;&lt;    &gt;&gt; （按位移位）</span><br><span class="line">&amp;（按位与）</span><br><span class="line">~（按位异或）</span><br><span class="line">|（按位或）</span><br><span class="line">&lt;    &gt;    &lt;=    &gt;=    ~=    ==</span><br><span class="line"><span class="keyword">and</span></span><br><span class="line"><span class="keyword">or</span></span><br></pre></td></tr></table></figure>
<p>在二元运算符中，除了幂运算和链接操作符是右结合的外，其他运算符都是左结合的。因此，以下表达式的左右两边等价：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a + i &lt; b/<span class="number">2</span> + <span class="number">1</span>     &lt;<span class="comment">--&gt; (a + i) &lt; ((b/2) + 1)</span></span><br><span class="line"><span class="number">5</span> + x^<span class="number">2</span>*<span class="number">8</span>			&lt;<span class="comment">--&gt; 5 + ((x^2) * 8)</span></span><br><span class="line">a &lt; y <span class="keyword">and</span> y &lt;= z    &lt;<span class="comment">--&gt; (a &lt; y) and (y &lt;= z)</span></span><br><span class="line">-x^<span class="number">2</span>				&lt;<span class="comment">--&gt; -(x^2)</span></span><br><span class="line">x^y^z				&lt;<span class="comment">--&gt; x^(y^z)</span></span><br></pre></td></tr></table></figure>
<p>当不能确定某些表达式的运算符优先级时，应该显示地用括号来指定所希望的运算次序。</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua中的环境(Environment)</title>
    <url>/64510.html</url>
    <content><![CDATA[<p>全局变量在大多数变成语言中是让人爱恨交织又不可或缺的。一方面，使用管全局变量会明显地使无关的代码部分纠缠在一起，容易导致代码复杂。</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>另一方面，谨慎地使用全局变量又能更好地表达程序中真正的全局概念；此外，虽然全局常量看似无害，但像Lua语言这样的动态语言是无法区分常量和变量的。像Lua这样的嵌入式语言更复杂：虽然全局变量时再整个程序中均可见的变量，但由于Lua语言是由宿主应用调用代码段的，因此“程序”的概念不明确。<br>Lua语言通过不使用全局变量的方法来解决这个难题，但又不遗余力地在Lua语言汇总对全局变量进行模拟。在第一种近似的模拟中，我们可以认为Lua语言把所有的全局变量保存在一个称为全局环境的普通表中。<br>由于不需要再为全局变量创造一种新的数据结构，因此使用一个表来保存全局变量的一个优点是简化了Lua 语言的内部实现。另一个优点是，可以像操作其他表一样操作这个表。为了便于实现这种操作方式，Lua语言将全局环境自身保存在全局变量_G中。例如，如下代码输出了全局环境中所有全局变量的名称：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">pairs</span>(<span class="built_in">_G</span>) <span class="keyword">do</span> <span class="built_in">print</span>(n) <span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h2 id="具有动态名称的全局变量"><a href="#具有动态名称的全局变量" class="headerlink" title="具有动态名称的全局变量"></a>具有动态名称的全局变量</h2><p>通常，赋值操作对于访问和设置全局变量已经足够了。<br>通常，赋值操作对于访问和设置全局变量已经足够了。然而，有时我们也需要某些形式的元变成。例如，我们需要操作一个全局变量，而这个全局变量的名称却存储在另一个变量中或者经由运行时计算得到。为了获取这个变量的值，许多程序员会写出下面的代码：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">value = <span class="built_in">load</span>(<span class="string">&quot;return &quot;</span> .. varname)()</span><br></pre></td></tr></table></figure>
<p>例如，如果varname是x，那么字符串连接的结果就是”return x”，当执行时就能得到期望的结果。然而，在这段代码中涉及一个新代码段的创建和编译，在一定程度上开销昂贵。我们可以使用下面的代码来实现相同的效果，但效率却比之前的高出一个数量级：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">value  = <span class="built_in">_G</span>[varname]</span><br></pre></td></tr></table></figure>
<p>由于全局环境是一个普通的表，因此可以简单地使用个对应的键直接进行索引。<br>类似地，我们可以通过编写_G[varname] &#x3D; value给一个名称为动态计算出的全局变量赋值。不过，请注意，有些程序员对于这种机制的使用可能有些过度而写出诸如_G[“a”] &#x3D; _G[“b”]这样的代码，而这仅仅是a &#x3D; b 的一种复杂写法。<br>上述问题的一般化形式是，允许字段使用诸如”io.read”或”a.b.c.d”这样的动态名称。如果直接使用_G[“io.read”]，显然是不能从表io中得到字段read的。但我们可以编写一个函数getfield让getfield(“io.read”)返回想要的结果。这个函数主要是一个循环，从_G开始逐个字段地进行求值：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getfield</span><span class="params">(f)</span></span></span><br><span class="line">	<span class="keyword">local</span> v = <span class="built_in">_G</span></span><br><span class="line">	<span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">string</span>.<span class="built_in">gmatch</span>(f,<span class="string">&quot;[%a_][%w_]*&quot;</span>) <span class="keyword">do</span></span><br><span class="line">		v = v[w]</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">return</span> v</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>我们使用函数gmatch来遍历f中的所有标识符。<br>与之对应的设置字段的函数稍显复杂。像a.b.c.d &#x3D; v这样的赋值等价于一下的代码：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> temp = a.b.c</span><br><span class="line">temp.d = v</span><br></pre></td></tr></table></figure>
<p>也就是说，我们必须一直取到最后一个名称，然后再单独处理最后的这个名称。</p>
<blockquote>
<p>示例 函数setfield</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setfield</span><span class="params">(f,v)</span></span></span><br><span class="line">	<span class="keyword">local</span> t = <span class="built_in">_G</span></span><br><span class="line">	<span class="keyword">for</span> w, d <span class="keyword">in</span> <span class="built_in">string</span>.<span class="built_in">gmatch</span>(f, <span class="string">&quot;([%a_][%w_]*)(%.?)&quot;</span>) <span class="keyword">do</span></span><br><span class="line">		<span class="keyword">if</span> d == <span class="string">&quot;.&quot;</span> <span class="keyword">then</span></span><br><span class="line">			t[w] = t[w] <span class="keyword">or</span> &#123;&#125;</span><br><span class="line">			t = t[w]</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			t[w] = v</span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>上例中使用的模式将捕获字段名称保存在变量w中，并将其后可选的点保存在变量d中。如果字段名后没有点，那么该字段就是最后一个名称。<br>下面的代码通过上例中的函数创建了全局表t和t.x，并将10赋值给了t.x.y:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">setfield(<span class="string">&quot;t.x.y&quot;</span>, <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(t.x.y)</span><br><span class="line"><span class="built_in">print</span>(getfield(<span class="string">&quot;t.x.y&quot;</span>))</span><br></pre></td></tr></table></figure>

<h2 id="全局变量的声明"><a href="#全局变量的声明" class="headerlink" title="全局变量的声明"></a>全局变量的声明</h2><p>Lua语言中的全局变量不需要声明就可以使用。虽然这种行为对于小型程序来说较为方便，但在大型程序中一个简单的手误可能造成难以发现的bug。不过，如果我们乐意的话，也可以改变这种行为。由于Lua语言将全局变量存放在一个普通的表中，所以可以通过元表来访问不存在全局变量的情况。<br>一种方法是简单地检测所有对全局表中不存在键的访问：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setmetatable</span>(<span class="built_in">_G</span>,&#123;</span><br><span class="line">	<span class="built_in">__newindex</span> = funciton (_,n)</span><br><span class="line">	<span class="built_in">error</span>(<span class="string">&quot;attempt to write to undeclared variable&quot;</span> .. n, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">end</span>,</span><br><span class="line"><span class="built_in">__index</span> = <span class="function"><span class="keyword">function</span><span class="params">(_,n)</span></span></span><br><span class="line">	<span class="built_in">error</span>(<span class="string">&quot;attempt to read undeclared variable &quot;</span> .. n , <span class="number">2</span>)</span><br><span class="line"><span class="keyword">end</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>这段代码执行后，所有试图对不存在全局变量的访问都将引发一个错误：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">stdin</span>:<span class="number">1</span>:attempt to <span class="built_in">read</span> undeclared variable a </span><br></pre></td></tr></table></figure>
<p>但是，我们应该如何声明一个新的变量呢？方法之一是使用函数rawset,它可以绕过元方法：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">declare</span> <span class="params">(name initval)</span></span></span><br><span class="line">	<span class="built_in">rawset</span>(<span class="built_in">_G</span>,name,initval <span class="keyword">or</span> <span class="literal">false</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>其中，or 和false保证新变量一定会得到一个不为nil的值。<br>另外一种更简单的方法是把对新全局变量的赋值限制在仅能在函数内进行，而代码段外层的代码则被允许自有赋值。<br>要检查赋值是否在主代码段中必须用到调试库。调用函数debug.getinfo(2,”S”)将返回一个表。其中的字段what表示调用元方法的函数是主代码段还是普通的Lua函数还是C函数。使用该函数，可以将__newindex元方法重写：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">__newindex</span> = funciton (t,n,v)</span><br><span class="line">	<span class="keyword">local</span> w = <span class="built_in">debug</span>.<span class="built_in">getinfo</span>(<span class="number">2</span>,<span class="string">&quot;S&quot;</span>).wath</span><br><span class="line">	<span class="keyword">if</span> w ~= <span class="string">&quot;main&quot;</span> <span class="keyword">and</span> w ~= <span class="string">&quot;C&quot;</span> <span class="keyword">then</span></span><br><span class="line">		<span class="built_in">error</span> (<span class="string">&quot;attempt to write to undeclared variable&quot;</span> .. n , <span class="number">2</span>)</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	rewset(t,n,v)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>这个新版本还可以接受来自C代码的赋值，因为一般C代码都知道自己究竟在做什么。<br>如果要测试一个变量是否存在，并不能简单地将它与nil比较。因为如果它为nil，那么访问就回引发一个错误。这是，应该使用rawget来绕过元方法：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">rawset</span>(<span class="built_in">_G</span>, var) == <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">	...</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>正如前面所提到的，我们不允许值为nil的全局变量，因为值为nil的全局变量都会被自动地认为未声明。但是，要允许值为nil的全局变量也不难，只需要引入一个辅助表来保存已声明变量的名称即可。一旦调用了元方法，元方法就会检查该表，看变量是否是未声明过的。</p>
<blockquote>
<p>示例 检查全局变量的声明</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> declareNames = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setmetatable</span>(<span class="built_in">_G</span>,&#123;</span><br><span class="line">	<span class="built_in">__newindex</span> = funciton(t,n,v)</span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">not</span> declareNames[n] <span class="keyword">then</span></span><br><span class="line">		<span class="keyword">local</span> w = <span class="built_in">debug</span>.<span class="built_in">getinfo</span>(<span class="number">2</span>,<span class="string">&quot;S&quot;</span>).wath </span><br><span class="line">		<span class="keyword">if</span> w ~= <span class="string">&quot;main&quot;</span> <span class="keyword">and</span> w ~= <span class="string">&quot;C&quot;</span> <span class="keyword">then</span></span><br><span class="line">			<span class="built_in">error</span>(<span class="string">&quot;attempt to write to undeclared variable &quot;</span> .. n, <span class="number">2</span>)</span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">		declareNames[n] = <span class="literal">true</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	<span class="built_in">rawset</span>(t,n,v)</span><br><span class="line"><span class="keyword">end</span>,</span><br><span class="line"></span><br><span class="line"><span class="built_in">__index</span> = <span class="function"><span class="keyword">function</span> <span class="params">(_,v)</span></span></span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">not</span> declareNames[n] <span class="keyword">then</span></span><br><span class="line">		<span class="built_in">error</span>(<span class="string">&quot;attempt to read undeclared variable &quot;</span> .. n , <span class="number">2</span>)</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>现在，即使像 x &#x3D; nil这样的赋值也能够声明全局变量了。<br>上述两种方法所导致的开销都基本可以忽略不计。在第一种方法中，在普通操作期间元方法不会被调用。在第二种方法中，元方法只有当程序访问一个值为nil的变量时才会被调用。</p>
<h2 id="非全局环境"><a href="#非全局环境" class="headerlink" title="非全局环境"></a>非全局环境</h2><p>在Lua语言中，全局变量并一定非得是真正全局的。正如笔者此前所提到的，Lua语言甚至根本没有全局变量。Lua语言竭尽全力地让程序员有全局变量存在的幻觉。现在，让我们看看Lua语言是如何构建这种幻觉的。<br>首先，让我们忘掉全局变量而从自由名称的概念开始讨论。一个自由名称是指没有关联到显示声明上的名称，即它不出现在对应局部变量的范围内。例如，在下面的代码段中，x和y是自由名称，而z不是：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> z = <span class="number">10</span></span><br><span class="line">x = y + z</span><br></pre></td></tr></table></figure>
<p>接下来就到了关键的部分：Lua语言编译器将代码段中的所有自由名称x转换为_ENV.x。因此，此前的代码段完全等价于：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> z = <span class="number">10</span></span><br><span class="line"><span class="built_in">_ENV</span>.x = <span class="built_in">_ENV</span>.y + z</span><br></pre></td></tr></table></figure>
<p>但是这里新出现的_ENV变量又究竟是什么呢？</p>
<p>我们刚才说过，Lua语言中没有全局变量。因此，_ENV不可能是全局变量。在这里，编译器实际上又进行了一次巧妙的工作。笔者已经提到过，Lua语言包所有代码段都当做匿名函数。所以，Lua语言编译器实际上将原来的代码段编译为如下形式：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="built_in">_ENV</span> = some value</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(...)</span></span></span><br><span class="line">	<span class="keyword">local</span> z = <span class="number">10</span></span><br><span class="line">	<span class="built_in">_ENV</span>.x = <span class="built_in">_ENV</span>.y + z</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>也就是说，Lua语言是在一个名为_ENV的预定义上值（一个外部的局部变量，upvalue）存在的情况下编译所有的代码段的。因此，所有的变量要么是绑定到了一个名称的局部变量，要么是_ENV中的一个字段，而_ENV本身是一个局部变量。<br>_ENV的初始值可以是任意的表。任何一个这样的表都被称为一个环境。为了维持全局变量存在的幻觉，Lua语言在内部维护了一个表来用作全局变量。通过，当加载一个代码段时，函数load会使用预定义上的值来初始化全局环境。因此，原始的代码段等价于：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="built_in">_ENV</span> = the global environment</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(...)</span></span></span><br><span class="line">	<span class="keyword">local</span> z = <span class="number">10</span></span><br><span class="line">	<span class="built_in">_ENV</span>.x = <span class="built_in">_ENV</span>.y + z</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>上述赋值的结果是，全局环境中的字段x得到全局环境中字段y加10的结果。<br>乍一看，这可能像是操作全局变量的一种相当拐弯抹角的方式。笔者也不会去争辩说这是最简单的方式，但是，这种方式比那些更简单的实现方法具有更多的灵活性。<br>在继续学习前，让我们总结一下Lua语言中处理全局变量的方式：</p>
<ul>
<li>编译器在编译所有代码段前，在外层创建局部变量_ENV；</li>
<li>编译器将所有自由名称var变换为_ENV.var；</li>
<li>函数load使用全局环境初始化代码段的第一个上值，即Lua语言内部维护的一个普通的表。<br>实际上，这也不是太复杂。<br>有些人由于试图从这些规则中引申出额外的“魔法”而感到困惑；其实，这些规则并没有额外的含义。尤其是，前两条规则完全是由编译器进行的。除了是由编译器预定的，_ENV只是一个单纯的普通变量。抛开编译器，名称_ENV对于Lua语言来说根本没有特殊含义。类似地，从x到_ENV.x的转换时纯粹的语法转换，没有隐藏的含义。尤其是，在转换后，按照标准的可见性规则，_ENV引用的是所在位置所有可见的额_ENV变量。</li>
</ul>
<h2 id="使用-ENV"><a href="#使用-ENV" class="headerlink" title="使用_ENV"></a>使用_ENV</h2><p>由于_ENV只是一个普通的变量，因此可以对其赋值或像访问其他变量一样访问它。赋值语句_ENV &#x3D; nil会使得后续代码不能直接访问全局变量。这可以赢来控制代码使用哪种变量：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="built_in">print</span>, <span class="built_in">sin</span> = <span class="built_in">print</span>,<span class="built_in">math</span>.<span class="built_in">sin</span></span><br><span class="line"><span class="built_in">_ENV</span> = <span class="literal">nil</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">13</span>) 		<span class="comment">-- 13</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sin</span>(<span class="number">13</span>))  <span class="comment">-- 0.42016703682664</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">math</span>.<span class="built_in">cos</span>(<span class="number">13</span>))  <span class="comment">-- error</span></span><br></pre></td></tr></table></figure>
<p>任何对自由名称的赋值都会引发类似的错误。<br>我们可以显式地使用_ENV来绕过局部声明：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = <span class="number">13</span>     <span class="comment">-- 全局的</span></span><br><span class="line"><span class="keyword">local</span> a = <span class="number">12</span> </span><br><span class="line"><span class="built_in">print</span>(a)		<span class="comment">-- 12(局部的)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">_ENV</span>.a)   <span class="comment">-- 13(全局的)</span></span><br></pre></td></tr></table></figure>
<p>用_G也可以：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = <span class="number">13</span>    <span class="comment">-- 全局的</span></span><br><span class="line"><span class="keyword">local</span> a = <span class="number">12</span> </span><br><span class="line"><span class="built_in">print</span>(a)   <span class="comment">-- 12 局部的</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">_G</span>.a) <span class="comment">-- 13 局部的</span></span><br></pre></td></tr></table></figure>
<p>通常，_G和_ENV指向的是同一个表。但是，尽管如此，它们是很不一样的实体。_ENV是一个局部变量，所有对“全局变量”的访问实际上访问的都是_ENV。_G则是一个在任何情况下都没有任何特殊状态的全局变量。按照定义，_ENV永远指向的是当前的环境；而假设在可见且无人改变过其值的前提下，_G通常指向的是全局变量。<br>_ENV的主要用途是用来改变代码段使用的环境。一旦改变了环境，所有的全局访问就都将使用新表：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--将当前的环境改为一个新的空表</span></span><br><span class="line"><span class="built_in">_ENV</span> = &#123;&#125;</span><br><span class="line">a = <span class="number">1</span>	<span class="comment">-- 在_ENV中创建字段</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment">-- stdin:4:attempt to call global &#x27;print&#x27; (a nil value)</span></span><br></pre></td></tr></table></figure>
<p>如果新环境是空的，就会丢失所有的全局变量，包括函数print。因此，应该首先把一些有用的值放入新环境，比如全局环境：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = <span class="number">15</span>		<span class="comment">-- 创建一个全局变量</span></span><br><span class="line"><span class="built_in">_ENV</span> = &#123;g = <span class="built_in">_G</span>&#125;		<span class="comment">-- 改变当前环境</span></span><br><span class="line">a = <span class="number">1</span>		<span class="comment">-- 在_ENV中创建字段</span></span><br><span class="line">g.<span class="built_in">print</span>(<span class="built_in">_ENV</span>.a,g.a)		<span class="comment">-- 1, 15</span></span><br></pre></td></tr></table></figure>
<p>这时，当访问“全局”的g（位于_ENV而不是全局环境中）时，我们使用的是全局环境，在其中能够找到函数print。<br>我们可以使用_G代替g，从而重写前面的例子：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = <span class="number">15</span>					<span class="comment">-- 创建一个全局变量</span></span><br><span class="line"><span class="built_in">_ENV</span> = &#123;<span class="built_in">_G</span> = <span class="built_in">_G</span>&#125;		<span class="comment">-- 改变的当前环境</span></span><br><span class="line">a = <span class="number">1</span>					<span class="comment">-- 在_ENV中创建字段</span></span><br><span class="line"><span class="built_in">_G</span>.<span class="built_in">print</span>(<span class="built_in">_ENV</span>.a,_g.a)	<span class="comment">-- 1	15</span></span><br></pre></td></tr></table></figure>
<p>_G只有在Lua语言创建初始化的全局表并让字段_G指向它自己的时候，才会出现特殊状态。Lua语言并不关心该变量的当前值。不过尽管如此，就像我们在上面重写的示例中所看到的那样，将指向全局环境的变量命名为同一个名字(_G)是一个惯例。<br>另一种把旧环境装入新环境的方式是使用继承：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="keyword">local</span> newgt = &#123;&#125;		<span class="comment">-- 创建新环境</span></span><br><span class="line"><span class="built_in">setmetatable</span>(newgt,&#123;<span class="built_in">__index</span> = <span class="built_in">_G</span>&#125;)</span><br><span class="line"><span class="built_in">_ENV</span> = newgt			<span class="comment">-- 设置新环境</span></span><br><span class="line"><span class="built_in">print</span>(a)		<span class="comment">--1 </span></span><br></pre></td></tr></table></figure>
<p>在这段代码中，新环境从全局环境中继承了函数print和a。不过，任何赋值都会发生在新表中，虽然我们仍然能通过_G来修改全局环境中的变量，但如果误改全局环境中的变量也不会有什么影响。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 接此前的代码</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(a,<span class="built_in">_G</span>.a)			<span class="comment">-- 10 	1</span></span><br><span class="line"><span class="built_in">_G</span>.a  = <span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">_G</span>.a)				<span class="comment">-- 20</span></span><br></pre></td></tr></table></figure>
<p>作为一个普通的变量，_ENV遵循通常的定界规则。特别地，在一段代码中定义的函数可以按照访问其他外部变量一样的规则访问_ENV:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">_ENV</span> = &#123;<span class="built_in">_G</span> = <span class="built_in">_G</span>&#125;</span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line">	<span class="built_in">_G</span>.<span class="built_in">print</span>(a)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">foo()			<span class="comment">-- 10</span></span><br><span class="line"><span class="built_in">_ENV</span> = &#123;<span class="built_in">_G</span> = <span class="built_in">_G</span>, a = <span class="number">20</span>&#125;</span><br><span class="line">foo()		<span class="comment">-- 20</span></span><br></pre></td></tr></table></figure>
<p>如果定义一个名为_ENV的局部变量，那么对自由名称的引用将会绑定绑定到这个新变量上：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = <span class="number">2</span></span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">	<span class="keyword">local</span> <span class="built_in">_ENV</span> - &#123;<span class="built_in">print</span> = <span class="built_in">print</span>,a = <span class="number">14</span>&#125;</span><br><span class="line">	<span class="built_in">print</span>(a)			<span class="comment">-- 14</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(a)			<span class="comment">-- 2</span></span><br></pre></td></tr></table></figure>
<p>因此，，可以跟很容易地使用私有环境定义一个函数：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factory</span><span class="params">(_ENV)</span></span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">()</span></span> <span class="keyword">return</span> a <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">f1 = factory&#123;a = <span class="number">6</span>&#125;</span><br><span class="line">f2 = factory&#123;a = <span class="number">7</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(f1())			<span class="comment">-- 6</span></span><br><span class="line"><span class="built_in">print</span>(f2())			<span class="comment">-- 7</span></span><br></pre></td></tr></table></figure>
<p>factory函数创建了一个简单的闭包，这个闭包返回了其中“全局”的a。每当闭包被创建时，闭包可见的变量_ENV就成了外部factory函数的参数_ENV。因此，每个闭包都会使用自己的外部变量来访问其自由名称。<br>使用普遍的定界规则，我们可以有几种方式操作环境。例如，可以让多个函数共享一个公共环境，或者让一个函数改变它与其他函数共享的环境。</p>
<h2 id="环境和模块"><a href="#环境和模块" class="headerlink" title="环境和模块"></a>环境和模块</h2><p>模块的缺点之一在于很容易污染全局空间，例如在私有声明中忘记local关键字。环境为解决这个问题提供了一种有趣的方式。一旦模块的主程序有一个独占的环境，则不仅该模块所有的函数共享了这个环境，该模块的全局变量也进入到了这个环境中。我们可以将所有的公有函数声明为全局变量，这样它们就会自动地进入分开的环境中。模块索要做的就是将这个环境赋值给变量_ENV。之后，当我们声明函数add时，它会变成M.add:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> M = &#123;&#125;</span><br><span class="line"><span class="built_in">_ENV</span> = M</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(c1,c2)</span></span></span><br><span class="line">	<span class="keyword">return</span> new(c1.r + c2.r, c1.i + c2.i)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>此外，我们在调用同一模块中的其他函数时不需要任何前缀。在此前的代码中，add会从其环境中得到new，也就是M.new。<br>这种方法为模块提供了一种良好的支持，只需要程序员多做一点额外的工作。使用这种方法，完全不需要前缀，并且调用一个导出的函数与调用一个私有函数没有什么区别。即使程序员忘记了local关键词，也不会污染全局命名空间。相反，他只是让一个私有函数编程了公有函数而已。<br>不过尽管如此，笔者目前还是倾向于使用原始的基本方法，也许原始的基本方法需要更多的工作，但代码会更加清晰。为了避免错误地创建全局变量，笔者使用把nil赋给_ENV的方式。在把_ENV设为nil后，任何对全局变量的复制都会抛出异常。这种方式的另一个好处是无须修改代码也可以在老版本的Lua语言中运行。<br>为了访问其他模块，我们可以声明一个保存全局环境的局部变量：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> M = &#123;&#125;</span><br><span class="line"><span class="keyword">local</span> <span class="built_in">_G</span> = <span class="built_in">_G</span></span><br><span class="line"><span class="built_in">_ENV</span> = <span class="literal">nil</span></span><br></pre></td></tr></table></figure>
<p>然后在全局名称前加上_G和模块名M即可。<br>另一种更规范的访问其他模块的做法是只把需要的函数或模块声明为局部变量：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 模块初始化</span></span><br><span class="line"><span class="keyword">local</span> M = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导入部分：</span></span><br><span class="line"><span class="comment">-- 声明该模块需要的外部函数或模块等</span></span><br><span class="line"><span class="keyword">local</span> <span class="built_in">sqrt</span> = <span class="built_in">math</span>.<span class="built_in">sqrt</span></span><br><span class="line"><span class="keyword">local</span> <span class="built_in">io</span> = <span class="built_in">io</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 从此以后不能再进行外部访问</span></span><br><span class="line"><span class="built_in">_ENV</span> = <span class="literal">nil</span></span><br></pre></td></tr></table></figure>
<p>这种方式需要做更多的工作，但是它能清晰地列出模块的依赖。</p>
<h2 id="ENV-和load"><a href="#ENV-和load" class="headerlink" title="_ENV 和load"></a>_ENV 和load</h2><p>正如笔者此前提到的，函数load通常把被加载代码段上的值_ENV初始化为全局环境。不过，函数load还有一个可选的第四个参数来让我们为_ENV指定一个不同的初始值。<br>例如，假设我们有一个典型的配置文件，该配置文件定义了程序要使用的几个常量和函数，如下：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 文件&#x27;config.lua&#x27;</span></span><br><span class="line">width = <span class="number">200</span></span><br><span class="line">height = <span class="number">300</span></span><br></pre></td></tr></table></figure>
<p>可以使用如下的代码加载该文件：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">env = &#123;&#125;</span><br><span class="line"><span class="built_in">loadfile</span>(<span class="string">&quot;config.lua&quot;</span>,<span class="string">&quot;t&quot;</span>,env)()</span><br></pre></td></tr></table></figure>
<p>配置文件中的所有代码会运行在空的环境env中，类似于某种沙盒。特别地，所有的定义都会进入这个环境中。即使出错，配置文件也无法影响任何别的东西，甚至是恶意的代码也不能对其他东西造成任何破坏。除了通过消耗CPU时间和内存来制造拒绝服务攻击，恶意代码也做不了什么其他的事。<br>有时，我们可能想重复运行一段代码数次，每一次使用一个不同的环境。在这种情况下，函数load可选的参数就没用了。此时，我们有另外两种选择。<br>第一种选择是使用调试库中的函数debug.setupvalue。顾名思义，函数setupvalue允许改变任何指定函数的上值，例如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">load</span>(<span class="string">&quot;b = 10; return a&quot;</span>)</span><br><span class="line">env = &#123;a = <span class="number">20</span>&#125;</span><br><span class="line"><span class="built_in">debug</span>.<span class="built_in">setupvalue</span>(f,<span class="number">1</span>,env)</span><br><span class="line"><span class="built_in">print</span>(f())			<span class="comment">-- 20</span></span><br><span class="line"><span class="built_in">print</span>(env.b)		<span class="comment">-- 10</span></span><br></pre></td></tr></table></figure>
<p>setupvalue的第一个参数是指定的函数，第二个参数是上值的索引，第三个参数是新的上值。对于这种用法，第二个参数永远是1：当函数表示的是一段代码时，Lua语言可以保证它只有一个上值且上值就是_ENV。<br>这种方式的一个小缺点在于依赖调试库。调试库打破了有关程序的一些常见假设。例如，debug.setupvalue打破了Lua语言的可见性规则，而可见性规则可以保证我们不能从词法定界的范围外访问局部变量。<br>另一种在几个不同环境中运行代码段的方式是每次加载代码时稍微对其进行一下修改。假设我们在要加载的代码段钱加入一行：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">_ENV</span> = ...;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>请注意，由于Lua语言把所有的代码段都当做可变长参数函数进行编译，因此，多出的这一行代码会把传给代码段的第一个参数赋值_ENV，从而把参数设为环境。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">prefix = <span class="string">&quot;_ENV = ...;&quot;</span></span><br><span class="line">f = loadwithprefix(prefix,<span class="built_in">io</span>.<span class="built_in">lines</span>(filename,<span class="string">&quot;*L&quot;</span>))</span><br><span class="line">...</span><br><span class="line">env1 = &#123;&#125;</span><br><span class="line">f(env1)</span><br><span class="line">env2 = &#123;&#125;</span><br><span class="line">f(env2)</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua连续教程之Lua中表的使用</title>
    <url>/36871.html</url>
    <content><![CDATA[<p>表是Lua中最主要和强大的数据结果。使用表，Lua语言可以以一种简单、统一且高效的方式表示数组、集合、记录和其他很多数据结果。Lua语言也使用表来表示包和其他对象。当调用函数math.sin时，我们可能认为是“调用了math库中函数sin”；而对于Lua语言来说，其实际含义是“以字符串sin”为键检索表math。</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>Lua语言中的表本质上是一种辅助数组。这种数组不仅可以使用数值作为索引，也可以使用字符串或其他任意类型的值作为索引（nil除外）。<br>我们使用构造器表达式创建表，其最简单的形式是{}:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt; a = &#123;&#125;			<span class="comment">--创建一个表然后用表的引用赋值</span></span><br><span class="line">&gt; k = <span class="string">&quot;x&quot;</span></span><br><span class="line">&gt; a[k] = <span class="number">10</span> 		<span class="comment">-- 新元素，键是&quot;x&quot;,值是10</span></span><br><span class="line">&gt; a[<span class="number">20</span>] = <span class="string">&quot;great&quot;</span>	<span class="comment">-- 新元素，键是20，值是&quot;great&quot;</span></span><br><span class="line">&gt; a[<span class="string">&quot;x&quot;</span>]			<span class="comment">-- 10</span></span><br><span class="line">&gt; k = <span class="number">20</span></span><br><span class="line">&gt; a[k]				<span class="comment">-- &quot;great&quot;</span></span><br><span class="line">&gt; a[<span class="string">&quot;x&quot;</span>] = a[<span class="string">&quot;x&quot;</span>] + <span class="number">1</span> <span class="comment">-- 增加元素&quot;x&quot;的值</span></span><br><span class="line">&gt; a[<span class="string">&quot;x&quot;</span>]</span><br></pre></td></tr></table></figure>
<p>表永远是匿名的，表本身和保存表的变量之间没有固定的关系：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt; a = &#123;&#125;</span><br><span class="line">&gt; a[<span class="string">&quot;x&quot;</span>] = <span class="number">10</span></span><br><span class="line">&gt; b = a					<span class="comment">-- &#x27;b&#x27;和&#x27;a&#x27;引用同一张表</span></span><br><span class="line">&gt; b[<span class="string">&quot;x&quot;</span>] = <span class="number">20</span></span><br><span class="line">&gt; a[<span class="string">&quot;x&quot;</span>]				<span class="comment">-- 20</span></span><br><span class="line">&gt; a = <span class="literal">nil</span> 				<span class="comment">-- 只有&#x27;b&#x27;仍然指向表</span></span><br><span class="line">&gt; b = <span class="literal">nil</span>				<span class="comment">-- 没有指向表的引用了</span></span><br></pre></td></tr></table></figure>
<p>对于一个表而言，当程序中不再有指向它的引用时，垃圾收集器会最终删除这个表并重用其占用的内存。</p>
<h2 id="表索引"><a href="#表索引" class="headerlink" title="表索引"></a>表索引</h2><p>同一个表中存储的值可以具有不同的类型索引，并可以按需增长以容纳新的元素：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt; a = &#123;&#125;		<span class="comment">-- 空的表</span></span><br><span class="line">&gt; <span class="comment">-- 创建1000个新元素</span></span><br><span class="line">&gt; <span class="keyword">for</span> i = <span class="number">1</span> , <span class="number">1000</span> <span class="keyword">do</span> a[i] = <span class="number">1</span> * <span class="number">2</span> <span class="keyword">end</span></span><br><span class="line">&gt; a[<span class="number">9</span>]			<span class="comment">-- 18</span></span><br><span class="line">&gt; a[<span class="string">&quot;x&quot;</span>] = <span class="number">10</span> 	</span><br><span class="line">&gt; a[<span class="string">&quot;x&quot;</span>]		<span class="comment">-- 10</span></span><br><span class="line">&gt; a[<span class="string">&quot;y&quot;</span>]		<span class="comment">-- nil</span></span><br></pre></td></tr></table></figure>
<p>请注意上述代码的最后一行：如同全局变量一样，未经初始化的表元素为nil，将nil赋值给表元素可以将其删除。<br>当把表当做结构体使用时，可以把索引当作成员名称使用。因此，可以使用这种更加易读的方式改写前述示例的最后几行：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt; a = &#123;&#125;</span><br><span class="line">&gt; x = <span class="string">&quot;y&quot;</span></span><br><span class="line">&gt; a[x] = <span class="number">10</span> 		<span class="comment">-- 把10放在字段&quot;y&quot;中</span></span><br><span class="line">&gt; a[x]				<span class="comment">-- 10  字段&quot;y&quot;的值</span></span><br><span class="line">&gt; a.x 				<span class="comment">-- nil  字段&quot;x&quot;的值（未定义）</span></span><br><span class="line">&gt; a.y				<span class="comment">-- 10 字段&quot;y&quot;的值</span></span><br></pre></td></tr></table></figure>
<p>由于可以使用任意类型索引表，所以在索引表时会遇到相等性比较方面的微妙问题。虽然确实都能使用数字0和字符串”0”对同一个表进行索引，但这两个索引的值及其所对应的元素是不同的。同样，字符串”+1”、”01”和”1”指向的也是不同的元素。当不能确定表索引的真实数据类型时，可以使用显式的类型转换：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt; i = <span class="number">10</span>; j = <span class="string">&quot;10&quot;</span>; k = <span class="string">&quot;+10&quot;</span></span><br><span class="line">&gt; a = &#123;&#125;</span><br><span class="line">&gt; a[i] = <span class="string">&quot;nubmer key&quot;</span></span><br><span class="line">&gt; a[j] = <span class="string">&quot;string key&quot;</span></span><br><span class="line">&gt; a[k] = <span class="string">&quot;another string key&quot;</span></span><br><span class="line">&gt; a[i]			<span class="comment">-- 数值类型的键</span></span><br><span class="line">&gt; a[j]			<span class="comment">-- 字符串类型的键</span></span><br><span class="line">&gt; a[k]			<span class="comment">-- 另一个字符串类型的键</span></span><br><span class="line">&gt; a[<span class="built_in">tonumber</span>(j)] <span class="comment">-- 数值类型的键</span></span><br><span class="line">&gt; a[<span class="built_in">tonumber</span>(k)] <span class="comment">-- 数值类型的键</span></span><br></pre></td></tr></table></figure>
<p>如果不注意这一点，就会很容易在程序中引入诡异的Bug。<br>整型和浮点型类型的表索引则不存在上述问题。由于2和2.0的值相等，所以当它们被当作表索引使用时指向的是同一个表元素：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt; a = &#123;&#125;</span><br><span class="line">&gt; a[<span class="number">2.0</span>] = <span class="number">10</span></span><br><span class="line">&gt; a[<span class="number">2.1</span>] = <span class="number">20</span></span><br><span class="line">&gt; a[<span class="number">2</span>]		<span class="comment">-- 10 </span></span><br><span class="line">&gt; a[<span class="number">2.1</span>]	<span class="comment">-- 20 </span></span><br></pre></td></tr></table></figure>
<p>更准确地说，当被用作表索引时，任何能够被转换为整型的浮点数都会被转换为整型数。</p>
<h2 id="表构造器"><a href="#表构造器" class="headerlink" title="表构造器"></a>表构造器</h2><p>表构造器是用来创建和初始化表的表达式，也是Lua语言中独有的也是最有用、最灵活的机制之一。<br>正如我们此前已经提到的，最简单的构造器是空构造器{}。表构造器也可以被用来初始化列表，例如，下例中使用字符串”Sunday”初始化了day[1]、使用字符串”Monday”初始化了day[2]，依次类推：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">days = &#123;<span class="string">&quot;Sunday&quot;</span>,<span class="string">&quot;Monday&quot;</span>,<span class="string">&quot;Tuesday&quot;</span>,<span class="string">&quot;Wndnesday&quot;</span>,<span class="string">&quot;Thursday&quot;</span>,<span class="string">&quot;Friday&quot;</span>,<span class="string">&quot;Saturday&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(days[<span class="number">4</span>])			<span class="comment">-- Wednesday</span></span><br></pre></td></tr></table></figure>
<p>Lua语言还提供一种初始化记录式表的特殊语法：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = &#123;x = <span class="number">10</span>, y = <span class="number">20</span> &#125;</span><br></pre></td></tr></table></figure>
<p>上述代码等价于：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = &#123;&#125;;</span><br><span class="line">a.x = <span class="number">10</span>;</span><br><span class="line">a.y = <span class="number">20</span>;</span><br></pre></td></tr></table></figure>
<p>不过在第一种写法中，由于能够提前判断表的大小，所以运行速度更快。<br>无论哪种方式创建，都可以随时增加或删除元素：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">w = &#123;x = <span class="number">0</span> ,y = <span class="number">0</span>, label = <span class="string">&quot;console&quot;</span>&#125;</span><br><span class="line">x = &#123;<span class="built_in">math</span>.<span class="built_in">sin</span>(<span class="number">0</span>),<span class="built_in">math</span>.<span class="built_in">sin</span>(<span class="number">1</span>),<span class="built_in">math</span>.<span class="built_in">sin</span>(<span class="number">2</span>)&#125;</span><br><span class="line">w[<span class="number">1</span>] = <span class="string">&quot;another field&quot;</span>			<span class="comment">-- 把键1增加到表&quot;w&quot;中</span></span><br><span class="line">x.f = w							<span class="comment">-- 把键&quot;f&quot;增加到表&quot;w&quot;中</span></span><br><span class="line"><span class="built_in">print</span>(w[<span class="string">&quot;x&quot;</span>])					<span class="comment">-- 0</span></span><br><span class="line"><span class="built_in">print</span>(w[<span class="number">1</span>])						<span class="comment">-- another field</span></span><br><span class="line"><span class="built_in">print</span>(x.f[<span class="number">1</span>])					<span class="comment">-- another field</span></span><br><span class="line">w.x = <span class="literal">nil</span> 						<span class="comment">-- 删除字段&quot;x&quot;</span></span><br></pre></td></tr></table></figure>
<p>不过，正如此前所提到的，使用合适的构造器来创建表会更加高效和易读。<br>在同一个构造器中，可以混用记录式和列表式写法：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">polyline = &#123;color = <span class="string">&quot;blue&quot;</span>,</span><br><span class="line">			thickness = <span class="number">2</span>,</span><br><span class="line">			npoints   = <span class="number">4</span>,</span><br><span class="line">			&#123;x = <span class="number">0</span> ,y = <span class="number">0</span> &#125;,		<span class="comment">-- polyline[1]</span></span><br><span class="line">			&#123;x = <span class="number">-10</span>, y = <span class="number">0</span>&#125;,		<span class="comment">-- polyline[2]</span></span><br><span class="line">			&#123;x = <span class="number">-10</span>, y = <span class="number">1</span>&#125;,		<span class="comment">-- polyline[3]</span></span><br><span class="line">			&#123;x = <span class="number">0</span> , y = <span class="number">1</span>&#125;			<span class="comment">-- polyline[4]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述的示例也同时展示了如何创建嵌套表以表达更加复杂的数据结构。每一个元素polyline[i]都是代表一条记录的表：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(polyline[<span class="number">2</span>].x)			<span class="comment">-- -10</span></span><br><span class="line"><span class="built_in">print</span>(polyline[<span class="number">4</span>].y)			<span class="comment">-- 1</span></span><br></pre></td></tr></table></figure>
<p>不过，这两种构造器都有各自的局限。例如，使用这两种构造器时，不能使用负数索引舒适化表元素，不能使用不符合规范的标识符作为索引。对于这类需求，可以使用另一种更加通用的构造器，即通过方括号括起来的表达式显式地指定每一个索引：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">opnames = &#123;[<span class="string">&quot;+&quot;</span>] = <span class="string">&quot;add&quot;</span>, [<span class="string">&quot;-&quot;</span>] = <span class="string">&quot;sub&quot;</span> ,</span><br><span class="line">		   [<span class="string">&quot;*&quot;</span>] = <span class="string">&quot;mul&quot;</span>, [<span class="string">&quot;/&quot;</span>] = <span class="string">&quot;div&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">i = <span class="number">20</span></span><br><span class="line">s = <span class="string">&quot;-&quot;</span></span><br><span class="line">a = &#123;[i + <span class="number">0</span>] = s, [i + <span class="number">1</span>] = s..s, [i + <span class="number">2</span>] = s..s..s&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(opnames[s])		<span class="comment">-- sub</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">22</span>])			<span class="comment">-- ---</span></span><br></pre></td></tr></table></figure>
<p>这种构造器虽然冗长，但非常灵活，不管是记录式构造器还是列表式构造器军师其特殊形选的。例如，下面的几种表达式就相互等价：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&#123;x = <span class="number">0</span>, y = <span class="number">0</span>&#125;			<span class="comment">-- &#123;[&quot;x”] = 0, [&quot;y&quot;] = 0&#125;</span></span><br><span class="line">&#123;<span class="string">&quot;r&quot;</span>, <span class="string">&quot;g&quot;</span>, <span class="string">&quot;b&quot;</span>&#125;			<span class="comment">-- &#123;[1] = &quot;r&quot;, [2] = &quot;g&quot;, [3] = &quot;b&quot;&#125;</span></span><br></pre></td></tr></table></figure>
<p>在最后一个元素后总是可以紧跟一个逗号。虽然总是有效，但是否加最后一个逗号是可选的。<br>这种灵活性使得开发人员在编写表构造器时不需要对最后一个元素进行特殊处理。<br>最后，表构造器中的逗号也可以使用分号代替，这主要是为了兼容Lua语言的旧版本。</p>
<h2 id="数组、列表和序列"><a href="#数组、列表和序列" class="headerlink" title="数组、列表和序列"></a>数组、列表和序列</h2><p>如果想表示常见的数组或列表，那么只需要使用整型作为索引的表即可。同时，也不需要预先声明表的大小，只需要直接初始化我们需要的元素即可：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a  = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">10</span> <span class="keyword">do</span> </span><br><span class="line">	a [i] = <span class="built_in">io</span>.<span class="built_in">read</span>()</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>鉴于能够使用任意值对表进行索引，我们也可以使用任意数字作为第一个元素的索引。不过，在Lua语言中，数组索引按照惯例是从1开始的（不像C语言从0开始），Lua语言中的其他很多机制也遵循这个惯例。<br>在操作表时，往往必须事先获取列表的长度。列表的长度可以存放在常量中，也可以存放在其他变量或数据结构中。通常，我们把列表的长度保持在表中某个非数值类型的字段中。当然，列表的长度经常也是隐形的。请注意，由于为初始化的元素均为nil，所以可以利用nil值来标记列表的结束。例如，当向一个列表中写入了10行数据后，由于该列表的数值类型的索引为1,2,…,10，所以可以很容易地知道列表的长度就是10.这种技巧只有在列表中不存在空洞时才有效，此时我们把这种所有元素都不为nil的数组称为序列。<br>Lua语言提供了获取序列长度的操作符#。正如我们之前所看到的，对于字符串而言，该操作符返回字符串的字节数；对于表而言，该操作符返回表对应序列的长度。例如，可以使用如下代码输出上例中读入的内容：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i = <span class="number">1</span> ,<span class="number">10</span> <span class="keyword">do</span></span><br><span class="line">	<span class="built_in">print</span>(a[i])</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>长度操作符也操作序列提供了几种有用的写法：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(a[#a])			<span class="comment">-- 输出序列&#x27;a&#x27;的最后一个值</span></span><br><span class="line">a[#a] = <span class="literal">nil</span>				<span class="comment">-- 移除最后一个值</span></span><br><span class="line">a[#a + <span class="number">1</span>] = v			<span class="comment">-- 把&#x27;v&#x27;加到序列的最后</span></span><br></pre></td></tr></table></figure>
<p>对于中间存在空洞的列表而言，序列长度操作符是不可靠的，它只能用于序列。更准确地说，序列是由指定的n个正数数值类型的键所组成集合[1,…,n]形成的表。特别地，不包含数值类型键的表就是长度为零的序列。<br>将长度操作符用于存在空洞的列表的行为是Lua语言中具有争议的内容之一。在过去几年中，很多人建议在操作存在空洞的列表时直接抛出异常，也有人建议扩展长度操作符的语义。然而，这些建议都是说起来容易做起来难。其根源在于列表实际上是一个表，而对于表来说，“长度”的概念在一定程度上是不容易理解的。例如，考虑如下的代码：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = &#123;&#125;</span><br><span class="line">a[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">a[<span class="number">2</span>] = <span class="literal">nil</span>    <span class="comment">--什么也没有做</span></span><br><span class="line">a[<span class="number">3</span>] = <span class="number">1</span></span><br><span class="line">a[<span class="number">4</span>] = <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>我们这里可以很容易确定这是一个长度为4、在索引2的位置上存在空洞的列表。不过，对于下面这个类似的示例是否也如此呢？</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = &#123;&#125;</span><br><span class="line">a[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">a[<span class="number">1000</span>] = <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>是否应该认为a 是一个具有10000个元素，9998个空洞的列表？如果代码进行了如下的操作：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a[<span class="number">10000</span>] = <span class="literal">nil</span></span><br></pre></td></tr></table></figure>
<p>那么该列表的长度会变成多少？由于代码删除了最后一个元素，该列表的长度是不是变成了9999？或者由于代码只是将最后一个元素变成了nil，该列表的长度仍然是10000？又或者该列表的长度缩成了1？<br>另一种常见的建议是让#操作符返回表中全部元素的数量。虽然这种语义听起来清晰且定义明确，但并非特别有用和符合直觉。请考虑下我们在此讨论过的所有例子，然后思考一下这些例子而言，为什么让#操作符返回表中全部元素的数量并非特备有用。<br>更复杂的列表是以nil结尾的情况。请问如下的列表的长度是多少：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="literal">nil</span>,<span class="literal">nil</span>&#125;</span><br></pre></td></tr></table></figure>
<p>请注意，对于Lua语言而言，一个为nil的字段和一个不存在的元素没有区别。因此，上述列表与{10,20,30}是等价的，其长度为3，而不是5.<br>可以将以nil结尾的列表当作一种非常特殊的情况。不过，很多列表时通过逐个添加各个元素创建出来的。任何按照这种方式构造出来的带有空洞的列表，其最后一定存在为nil的值。<br>尽管讨论了这么多，程序中的大多数列表其实都是序列。正因如此，在多数情况下使用长度操作符是安全的。在确实需要处理存在空洞的列表时，应该将列表的长度显式地保存起来。</p>
<h2 id="遍历表"><a href="#遍历表" class="headerlink" title="遍历表"></a>遍历表</h2><p>我们可以用是pairs迭代器遍历表中的键值对：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">t = &#123;<span class="number">10</span>, <span class="built_in">print</span>, x = <span class="number">12</span>, k = <span class="string">&quot;hi&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k ,v <span class="keyword">in</span> <span class="built_in">pairs</span>(t) <span class="keyword">do</span></span><br><span class="line">	<span class="built_in">print</span>(k,v)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1	10</span></span><br><span class="line"><span class="comment">-- k	hi</span></span><br><span class="line"><span class="comment">-- 2	function:0x420610</span></span><br><span class="line"><span class="comment">-- x 	12</span></span><br></pre></td></tr></table></figure>
<p>受限于表在Lua中的底层实现机制，遍历过程中元素的出现顺序可能是随机的，相同的程序在每次运行时也可能产生不同的顺序。唯一可以确定的是，在遍历的过程中每个元素会且只会出现一次。<br>对于列表而言，可以使用ipairs迭代器：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">t = &#123;<span class="number">10</span>, <span class="built_in">print</span>, x = <span class="number">12</span>, k = <span class="string">&quot;hi&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k ,v <span class="keyword">in</span> <span class="built_in">pairs</span>(t) <span class="keyword">do</span></span><br><span class="line">	<span class="built_in">print</span>(k,v)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1	10</span></span><br><span class="line"><span class="comment">-- 2	hi</span></span><br><span class="line"><span class="comment">-- 3	function:0x420610</span></span><br><span class="line"><span class="comment">-- 4 	12</span></span><br></pre></td></tr></table></figure>
<p>此时，Lua会确保遍历是按照顺序进行的。<br>另一种遍历序列的方法是使用数值型for循环：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">t = &#123;<span class="number">10</span>, <span class="built_in">print</span>, x = <span class="number">12</span>, k = <span class="string">&quot;hi&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k = <span class="number">1</span> , #t <span class="keyword">do</span></span><br><span class="line">	<span class="built_in">print</span>(k , t[k])</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1	10</span></span><br><span class="line"><span class="comment">-- 2	hi</span></span><br><span class="line"><span class="comment">-- 3	function:0x420610</span></span><br><span class="line"><span class="comment">-- 4 	12</span></span><br></pre></td></tr></table></figure>
<h2 id="安全访问"><a href="#安全访问" class="headerlink" title="安全访问"></a>安全访问</h2><p>考虑如下的情景：我们想确认在指定的库中是否存在某个函数。如果我们确定这个库确实存在，那么可以直接使用<code>if lib.foo then ...;</code>否则，就得使用形如<code>if lib and lib.foo then ...</code>的表达式。<br>当表的嵌套深度变得比较深时，这种写法就会很容易出错，例如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">zip = company <span class="keyword">and</span> company.director <span class="keyword">and</span> company.director.address <span class="keyword">and</span> company.director.address.zipcode</span><br></pre></td></tr></table></figure>
<p>这种写法不仅冗长而且低效，该写法在一次成功的访问中对表进行了6次访问而非3词访问。<br>对于这种情景，诸如C#的一些编程语言提供了一种安全访问操作符。在C#中，这种安全访问操作符被记为<code>?.</code>。例如，对于表达式<code>a?.b</code>，当a为nil时，其结果是nil而不会产生异常。使用这种操作符，可以将上例改为：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">zip = company?.director?.address?.zipcode</span><br></pre></td></tr></table></figure>
<p>如果上述的成员访问过程中出现nil，安全访问操作符会正确地处理nil并最终返回nil。<br>Lua语言并没有提供安全访问操作符，并且认为也不应该提供这种操作符。一方面，Lua语言在设计上力求简单；另一方面，这种操作符也是非常有争议的，很多人就无理由认为该操作符容易导致无意的编程错误。不过，我们可以使用其他语句在Lua语言中模拟安全访问操作符。<br>对于表达式 <code>a or &#123;&#125;</code>，当a为nil时其结果是一个空表。因此，对于表达式<code>(a or &#123;&#125;).b</code>，当a为nil时其结果也同样是nil。这样，我们就可以将之前的例子重写为：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">zip = (((company <span class="keyword">or</span> &#123;&#125;).director <span class="keyword">or</span> &#123;&#125;).address <span class="keyword">or</span> &#123;&#125;).zipcode</span><br></pre></td></tr></table></figure>
<p>再进一步，我们还可以写得更短更高效：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">E = &#123;&#125;</span><br><span class="line">...</span><br><span class="line">zip = (((company <span class="keyword">or</span> E).director <span class="keyword">or</span> E).address <span class="keyword">or</span> E).zipcode</span><br></pre></td></tr></table></figure>
<p>确实，上述的语法比安全访问操作符更加复杂。不过尽管如此，表中的每一个字段名都只被使用了一次，从而保证了尽可能少地对表进行访问；同时，还避免了向语言中引入新的操作符。</p>
<h2 id="表标准库"><a href="#表标准库" class="headerlink" title="表标准库"></a>表标准库</h2><p>表标准库提供了操作列表和序列的一些常用函数。<br>函数<code>table.insert</code>向序列的指定位置插入一个元素，其他元素依次后移。例如，对于列表t &#x3D; {10,20,30}，在调用table.insert(t,1,15)后它会变成{15,10,20,30}，另一种特殊但常见的情况是调用insert时不指定位置，此时函数会在序列的最后插入指定的元素，不会移动任何元素。例如，下述代码从标准输入中安行读入内容并将其保存到一个序列中：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">t = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">io</span>.<span class="built_in">lines</span>() <span class="keyword">do</span> </span><br><span class="line">	<span class="built_in">table</span>.<span class="built_in">insert</span>(t,line)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(#t)</span><br></pre></td></tr></table></figure>
<p>函数<code>table.remove</code>删除后并返回序列指定位置的元素，然后将其后的元素向前移动填充删除元素后造成的空洞。如果在调用该函数时不指定位置，该函数会删除序列的最后一个元素。<br>借助这个函数，可以很容易地实现栈、队列和双端队列。以栈的实现为例，我们可以使用t &#x3D; {}来表示栈，Push操作可以使用table.insert(t,x)实现，Pop操作可以使用table.remove(t)实现，调用table.insert(t,1,x)可以实现在栈的顶部进行插入，调用table.remove(t,1)可以从栈的顶部移除。由于后两个函数设计表中其他元素的移动，所以其运行效率并不是特别的高。当然，由于table标准库中的这些函数是使用C语言实现的，所以移动元素所涉及循环的性能开销也并不是太昂贵。因而，对于几百个元素组成的小数组来说这种实现已经够了。</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua连续教程之Lua位和字节</title>
    <url>/43504.html</url>
    <content><![CDATA[<p>Lua语言处理二进制数据的方式与处理文本的方式类似。Lua语言中的字符串可以包含热议字节，并且几乎所有能够处理字符串的库函数也能处理任意字节。我们甚至可以对二进制数据进行模式匹配。以此为基础，Lua5.3中引入了用于操作二进制数据的额外机制：除了整型数外，该版本还引入了位操作及用于打包&#x2F;解包二进制数据的函数。</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>Lua语言从5.3版本开始提供了针对数值类型的一组标准位运算符与算术运算符不同的是，位运算符只能用于整型数。位运算符包括<code>&amp;</code>(按位与)、<code>|</code>(按位或)、<code>~</code>(按位异或)、<code>&gt;&gt;</code>(逻辑右移)、<code>&lt;&lt;</code>(逻辑左移)和一元运算符<code>~</code>(按位取反)。<br>所有的位运算都针对构成一个整型数的所有位。在标准Lua中，也就是64位。这对于用32位整型数的算法可能会成问题。不过，要操作32位整型数也不难。除了右移操作外，只要忽略高32位，那么所有针对64位整型数的操作与针对32位整型数的操作都一样。这对于加法、减法和乘法都有效。因此，在操作32位整型数时，只需要在进行右移前抹去高32位即可。<br>两个移位操作都会用0填充空出的位，这种行为通常被称为逻辑移位。Lua语言没有提供算术右移，即使用符号位填充空出的位。我们可以通过向下取整除法，除以合适的2的整数次幂实现算术右移。<br>移位数是负数表示向相反的方向移位，即a&gt;&gt;n与a&lt;&lt;-n等价：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%x&quot;</span>,<span class="number">0xff</span> &lt;&lt; <span class="number">12</span>) 			<span class="comment">-- ff000</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%x&quot;</span>,<span class="number">0xff</span> &gt;&gt; <span class="number">-12</span>)			<span class="comment">-- ff000</span></span><br></pre></td></tr></table></figure>
<p>如果移位数等于或大于整型表示的位数，由于所有的位都被从结果中移出了，所有结果是0：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%x&quot;</span>,<span class="number">-1</span> &lt;&lt; <span class="number">80</span>)		<span class="comment">-- 0</span></span><br></pre></td></tr></table></figure>

<h2 id="无符号整型数"><a href="#无符号整型数" class="headerlink" title="无符号整型数"></a>无符号整型数</h2><p>整型表示中使用一个比特来存储符号位。因此，64位整型数最大可以表示2^63^ - 1 而不是2^64^ -1。通常，这点区别是无关紧要的。因为2^63^ - 1 已经相当大了。不过，由于我们可能需要处理使用无符号整型表示的外部数据或实现一些需要64位整型数的算法，因而有时也不能浪费这个符号位。因此，在精简Lua中，这种区别可能会很重要。例如，如果用一个32位有符号整型数表示文件中的位置，那么能够操作的最大文件大小就是2GB；而一个无符号整型数能操作的最大文件大小则是有符号整型数的2倍，即4GB。<br>Lua语言不显示支持无符号整型数。不过尽管如此，只要稍加注意，在Lua语言中处理无符号整型数并不难。<br>虽然看上去不太友好，但可以直接写出比2^63^-1大的常量：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">x = <span class="number">13835058055282163712</span>		<span class="comment">-- 3 &lt;&lt; 62</span></span><br><span class="line">x 	<span class="comment">-- -4611686018427387904</span></span><br></pre></td></tr></table></figure>
<p>这里的问题并不在于常量本身，而在于Lua语言输出常量的方式：默认情况下，打印数值时是将其作为有符号整型数进行处理的。我们可以使用选项%u或%x在函数string.format中指定以无符号整型数进行输出：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%u&quot;</span>,x)			<span class="comment">-- 1383505855282163712</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;0x%X&quot;</span>,x)			<span class="comment">-- 0xC000000000000000</span></span><br></pre></td></tr></table></figure>
<p>根据有符号整型数的表示方式，加法、减法和乘法操作对于有符号整型数和无符号整型数是一样的：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%u&quot;</span>,x)			<span class="comment">-- 1383505855282163712</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%u&quot;</span>,x+<span class="number">1</span>)			<span class="comment">-- 1383505855282163713</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%u&quot;</span>,x<span class="number">-1</span>)			<span class="comment">-- 1383505855282163711</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>对于这么大的数，即便x乘以2也会溢出，所以示例中没有演示乘法</p>
</blockquote>
<p>关系运算对于有符号整型数和无符号整型数是不一样的，当比较具有不同符号位的整型数时就会出现问题。对于有符号整型数而言，符号位被置位的整数更小，因为它代表的是负数：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="number">0x7fffffffffffffff</span> &lt; <span class="number">0x8000000000000000</span>  <span class="comment">-- false</span></span><br></pre></td></tr></table></figure>
<p>如果把两个整型数当作无符号的，那么结果显然是不正确的。因此，我们需要使用一种不同的操作来比较无符号整型数。Lua5.3提供了函数math.ult来完成这个需求：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">math</span>.ult(<span class="number">0x7fffffffffffffff</span>,<span class="number">0x8000000000000000</span>)  <span class="comment">-- true</span></span><br></pre></td></tr></table></figure>
<p>另一种方法是在进行有符号比较前先用掩码掩去两个操作数的符号位：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">mask = <span class="number">0x8000000000000000</span></span><br><span class="line">(<span class="number">0x7fffffffffffffff</span> ~mask)&lt;(<span class="number">0x8000000000000000</span> ~mask)		<span class="comment">--true</span></span><br></pre></td></tr></table></figure>
<p>无符号除法和有符号除法也不一样</p>
<blockquote>
<p>无符号除法</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">udiv</span><span class="params">(n,d)</span></span></span><br><span class="line">	<span class="keyword">if</span> d &lt; <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">math</span>.ult(n,d) <span class="keyword">then</span> <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">local</span> q = ((n &gt;&gt; <span class="number">1</span>)//d) &lt;&lt; <span class="number">1</span></span><br><span class="line">	<span class="keyword">local</span> r = n - q * d</span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">math</span>.ult(r,d) <span class="keyword">then</span> q = q + <span class="number">1</span> <span class="keyword">end</span></span><br><span class="line">	<span class="keyword">return</span> q</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>第一个比较（d&lt;0）等价于比较d是否大于2^63^。如果大于，那么商只能是1（如果n等于或大于d）或0。否则，我们使被除数除以2，然后除以除数，再把结果乘以2。右移1位等价于除以2的无符号除法，其结果是一个非负的有符号整型数。后续的左移纠正了商，还原了之前的除法。<br>总体上说，floor(floor(n&#x2F;2)&#x2F;d)*2(算法进行的计算)与floor(((n&#x2F;2)&#x2F;d)*2)(正确的结果）并不等价，不过，要证明它们之间最多相差1并不困难。因此，算计计算了余数（变量r），然后判断余数是否比除数大，如果余数比除数大则纠正商即可。<br>无符号整型数和浮点型数之间的转换需要进行一些调整。要把一个无符号整型数转换为浮点型数，可以先将其转换成有符号整型数，然后通过取模运算纠正救过：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">u = <span class="number">11529215046068469760</span></span><br><span class="line">f = (u + <span class="number">0.0</span>) % <span class="number">2</span>^<span class="number">64</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%.0f&quot;</span>,f)			<span class="comment">-- 11529215046068469760</span></span><br></pre></td></tr></table></figure>
<p>由于标准转换把u当做有符号整型数，因此表达式u+0.0的值是-6917529027641081856，而之后的取模操作会把这个值限制在有符号整型数的表示范围内。<br>要把一个浮点型数转换为无符号整型数，可以使用如下代码：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">f = <span class="number">0xA000000000000000</span><span class="number">.0</span>		</span><br><span class="line">u = <span class="built_in">math</span>.tointerger(((f + <span class="number">2</span>^<span class="number">63</span>)%<span class="number">2</span>^<span class="number">64</span>) - <span class="number">2</span>^<span class="number">63</span>)</span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%x&quot;</span>,u)			<span class="comment">-- a000000000000000</span></span><br></pre></td></tr></table></figure>
<p>加法把一个大于2^63^的数转换为一个大于2^64^的数，取模运算把这个数限制到[0,2^63^)范围内，然后通过减法把结果变成一个“负”值。对于小于2^63^的值，加法结果小于2^64^，所以取模运算没有任何效果，之后的减法则把它恢复到了之前的值。</p>
<h2 id="打包和解包二进制数据"><a href="#打包和解包二进制数据" class="headerlink" title="打包和解包二进制数据"></a>打包和解包二进制数据</h2><p>Lua5.3还引入了一个在二进制数和基本类型值之间进行转换的函数。函数string.pack会把值“打包”为二进制字符串，而函数string.unpack则从字符串中提取这些值。<br>函数string.pack和函数string.unpack的第1个参数是格式化字符串，用于描述如何打包数据。格式化字符串中的每个字母都描述了如何打包&#x2F;解包一个值，例如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">s = <span class="built_in">string</span>.pack(<span class="string">&quot;iii&quot;</span>,<span class="number">3</span>,<span class="number">-27</span>,<span class="number">450</span>)</span><br><span class="line">#s</span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">unpack</span>(<span class="string">&quot;iii&quot;</span>,s)		<span class="comment">-- 3	-27	450	13</span></span><br></pre></td></tr></table></figure>
<p>调用函数string.pack将创建一个字符串，其中为3个整型数的二进制代码。每一个”i”编码对与之对应的参数进行了编码，而字符串的长度则是一个整型数本身大小的3倍。调用函数string.unpack对给定字符串中的3个整型数进行了解码并返回解码后的结果。<br>为了便于迭代，函数string.unpack还会返回最后一个读取的元素在字符串中的位置。相应地，该函数还有一个可选的第3个参数，这个参数用于指定开始读取的位置。例如，下例输出了一个指定字符串中所有被打包的字符串：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&quot;hello\0Lua\0world\0&quot;</span></span><br><span class="line"><span class="keyword">local</span> i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= #s <span class="keyword">do</span></span><br><span class="line">	<span class="keyword">local</span> res</span><br><span class="line">	res, i = <span class="built_in">string</span>.<span class="built_in">unpack</span>(<span class="string">&quot;z&quot;</span>,s,i)</span><br><span class="line">	<span class="built_in">print</span>(res)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- hello</span></span><br><span class="line"><span class="comment">-- Lua</span></span><br><span class="line"><span class="comment">-- world</span></span><br></pre></td></tr></table></figure>
<p>对于编码一个整型数而言有几种选项，每一种对应了一种整型大小：b(char)、h(short)、i(int)、l(long)和j(代表Lua语言中整型数的大小)。要是使用固定的、与机器无关的大小，可以在选项i后加上一个1~16的数。例如，i7会产生7个字节的整型数。所有的大小都会被检查是否存在一处的情况：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">x = <span class="built_in">string</span>.pack(<span class="string">&quot;i7&quot;</span>, i &lt;&lt; <span class="number">54</span>)</span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">unpack</span>(<span class="string">&quot;i7&quot;</span>,x)				<span class="comment">-- 18014398509481984	8</span></span><br><span class="line">x = <span class="built_in">string</span>.pack(<span class="string">&quot;i7&quot;</span>,-(<span class="number">1</span> &lt;&lt; <span class="number">54</span>))</span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">unpack</span>(<span class="string">&quot;i7&quot;</span>,x)				<span class="comment">-- -1801439850948		8</span></span><br><span class="line">x = <span class="built_in">string</span>.pack(<span class="string">&quot;i7&quot;</span>,<span class="number">1</span> &lt;&lt; <span class="number">55</span>)</span><br><span class="line"><span class="built_in">stdin</span>:<span class="number">1</span>:bad argument #<span class="number">2</span> to <span class="string">&#x27;pack&#x27;</span>(interger overflow)</span><br></pre></td></tr></table></figure>
<p>我们可以打包和解包比Lua语言原生整型数更大的整型数，但是在解包的时候它们的实际值必须能够被Lua语言的整型数容纳：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">x = <span class="built_in">string</span>.pack(<span class="string">&quot;i12&quot;</span>,<span class="number">2</span>^<span class="number">61</span>)</span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">unpack</span>(<span class="string">&quot;i12&quot;</span>,x)				<span class="comment">-- 23058443009213693952		13</span></span><br><span class="line">x = <span class="string">&quot;aaaaaaaaaaaa&quot;</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">unpack</span>(<span class="string">&quot;i12&quot;</span>,x)</span><br><span class="line"><span class="built_in">stdin</span>:<span class="number">1</span>: <span class="number">12</span>-<span class="built_in">byte</span> integer does <span class="keyword">not</span> fit into Lua integer</span><br></pre></td></tr></table></figure>
<p>每一个针对整型数的选项都有一个对应的大写版本，对应相应大小的无符号整型数：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">x = <span class="string">&quot;\xFF&quot;</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">unpack</span>(<span class="string">&quot;b&quot;</span>,s)		<span class="comment">-- -1 2</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">unpack</span>(<span class="string">&quot;B&quot;</span>,s)		<span class="comment">-- 255 2</span></span><br></pre></td></tr></table></figure>
<p>同时，无符号整型数对于size_t而言还有一个额外的选项T。<br>我们可以用3中表示形式打包自付出：\0结尾的字符串、定长字符串和使用显示长度的字符串。\0结尾的字符串使用选项z；定长字符串使用选项cn，其中n是被打包字符串的字节数。显示长度的字符串在存储时会在字符串前加上该字符串的长度。在这种情况下，选项格式形如sn，其中n是用于保存字符串长度的无符号整型数的大小。例如，选项s1表示把字符串长度保存在一个字节中：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">s = <span class="built_in">string</span>.pack(<span class="string">&quot;s1&quot;</span>,<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, #s <span class="keyword">do</span> <span class="built_in">print</span>((<span class="built_in">string</span>.<span class="built_in">unpack</span>(<span class="string">&quot;B&quot;</span>,s,i))) <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 5	(length)</span></span><br><span class="line"><span class="comment">-- 104	(&#x27;h&#x27;)</span></span><br><span class="line"><span class="comment">-- 101	(&#x27;e&#x27;)</span></span><br><span class="line"><span class="comment">-- 108	(&#x27;l&#x27;)</span></span><br><span class="line"><span class="comment">-- 108	(&#x27;l&#x27;)</span></span><br><span class="line"><span class="comment">-- 111	(&#x27;o&#x27;)</span></span><br></pre></td></tr></table></figure>
<p>如果用于保存长度的字节容纳不了字符串长度，那么Lua语言会抛出异常。我们也可以单纯使用选项s，在这种情况下，字符串长度会被以足够容纳任何字符串长度的size_t类型保存。<br>对于浮点型数，有3中选项：f用于单精度浮点数、d用于双精度浮点数、n用于Lua语言浮点数。<br>格式字符串也有用来控制大小端模式和二进制数据对齐的选项。在默认情况下，格式使用的是机器原生的大小端模式。选项&gt;把所有后续的编码转换改为大端模式或网络字节序：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">s = <span class="built_in">string</span>.pack(<span class="string">&quot;&gt;i4&quot;</span>,<span class="number">1000000</span>)</span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, #s <span class="keyword">do</span> <span class="built_in">print</span>((<span class="built_in">string</span>.<span class="built_in">unpack</span>(<span class="string">&quot;B&quot;</span>,s,i))) <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 00</span></span><br><span class="line"><span class="comment">-- 15</span></span><br><span class="line"><span class="comment">-- 66</span></span><br><span class="line"><span class="comment">-- 64</span></span><br></pre></td></tr></table></figure>
<p>选项&lt;则改为小端模式：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">s = <span class="built_in">string</span>.pack(<span class="string">&quot;&lt;i2 i2&quot;</span>,<span class="number">500</span>,<span class="number">24</span>)</span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, #s <span class="keyword">do</span> <span class="built_in">print</span>((<span class="built_in">string</span>.<span class="built_in">unpack</span>(<span class="string">&quot;B&quot;</span>,s,i))) <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 244</span></span><br><span class="line"><span class="comment">-- 1</span></span><br><span class="line"><span class="comment">-- 24</span></span><br><span class="line"><span class="comment">-- 0</span></span><br></pre></td></tr></table></figure>
<p>最后，选项&#x3D;改回机器默认的原生大小端模式。<br> 对于对齐而言，选项!n强制数据对齐到以n为倍数的索引上。更准确地说，如果数据比n小，那么对齐到其自身大小上；否则，对齐到n上。例如，假设格式化字符串为!4，那么1字节整型数会被写入以1为倍数的索引位置上，2字节的整型数会被写入以2为倍数的索引位置上，而4字节或更大的整型数则会被写入以4为倍数的索引位置上，而选项!(不带数字)则把对齐设为机器默认的对齐方式。<br> 函数string.pack通过在结果字符串到达合适索引值前增加0的方式实现对齐，函数string.unpack在读取字符串时会简单地跳过这些补位。对齐只对2的整数次幂有效，如果把对齐设为4但视图操作3字节的整型数，那么Lua语言会抛出异常。<br> 所有的格式化字符串默认带有前缀”&#x3D;!1”，即表示使用默认大小端模式且不对齐。我们可以在程序执行过程中的任意时点改变大小端模式和对齐方式。<br> 如果需要，可以手工添加补位。选项x代表1字节的补位，函数string.pack会在结果字符串中增加一个0字节，而函数string.unpack则从目标字符串中跳过1字节。</p>
<h2 id="二进制文件"><a href="#二进制文件" class="headerlink" title="二进制文件"></a>二进制文件</h2><p>函数io.input和io.output总是以文本方式打开文件。在POSIX操作系统中，二进制文件和文本文件是没有差别的。然后，在其他一些像Windows之类的操作系统中，必须用特殊方式打开二进制文件，即在io.open的模式字符串中使用字母b。<br>通常，在读取二进制数据时，要么使用模式”a”开读取整个文件，要么使用模式n来读取n个字节。下面是一个简单的示例，它会把Windows格式的文本文件转换为POSIX格式，即把\r\n转换为\n:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> inp = <span class="built_in">assert</span>(<span class="built_in">io</span>.<span class="built_in">open</span>(<span class="built_in">arg</span>[<span class="number">1</span>],<span class="string">&quot;rb&quot;</span>))</span><br><span class="line"><span class="keyword">local</span> out = <span class="built_in">assert</span>(<span class="built_in">io</span>.<span class="built_in">open</span>(<span class="built_in">arg</span>[<span class="number">2</span>],<span class="string">&quot;wb&quot;</span>))</span><br><span class="line"><span class="keyword">local</span> data = inp:<span class="built_in">read</span>(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">data = <span class="built_in">string</span>.<span class="built_in">gsub</span>(data,<span class="string">&quot;\r\n&quot;</span>,<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">out:<span class="built_in">write</span>(data)</span><br><span class="line"><span class="built_in">assert</span>(out:<span class="built_in">close</span>())</span><br></pre></td></tr></table></figure>
<p>由于标准I&#x2F;O流是以文本模式打开的，所以上例不能使用标准I&#x2F;O流。相反，该程序假设输入和输出文件的名称是由程序的参数指定的。可以使用如下的命令调用该程序：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">lua prog.lua file.dos file.unix</span><br></pre></td></tr></table></figure>
<p>再举一个例子，一下的程序输出了一个二进制文件中的所有字符：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> f = <span class="built_in">assert</span>(<span class="built_in">io</span>.<span class="built_in">open</span>[<span class="number">1</span>],<span class="string">&quot;rb&quot;</span>))</span><br><span class="line"><span class="keyword">local</span> data = f:<span class="built_in">read</span>(<span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="keyword">local</span> validchars = <span class="string">&quot;[%g%s]&quot;</span></span><br><span class="line"><span class="keyword">local</span> pattern = <span class="string">&quot;(&quot;</span> .. <span class="built_in">string</span>.<span class="built_in">rep</span>(validchars,<span class="number">6</span>) .. <span class="string">&quot;+)\0&quot;</span></span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">string</span>.<span class="built_in">gmatch</span>(data,pattern) <span class="keyword">do</span></span><br><span class="line">	<span class="built_in">print</span>(w)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>这个程序假定字符串是一个以\0结尾的、包含6个或6个以上有效字符的序列，其中有效字符是指能与模式validchars匹配的任意字符。在这个示例中，这个模式由可打印字符组成。我们使用函数string.rep和字符串连接创建用于捕获以\0结尾的、包含6个或6个以上有效字符validchars的模式，这个模式中的括号用于捕获不带\0的字符串。</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua使用协程实现多线程</title>
    <url>/11143.html</url>
    <content><![CDATA[<p>协程能够实现一种协作式多线程。每个协程都等价于一个线程。一对yield-resume可以将执行权在不同线程之间切换。</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>不过，与普通的多线程的不同，协程是非抢占的。当一个协程正在运作时，是无法从外部停止它的。只有当协程显式地要求时它才会挂起执行。对于有些应用而言，这并没有问题，而对于另外一些应用则不行。当不存在抢占时，编程简单得多。由于在程序中所有的线程间同步都是显式的，所以我们无须为线程同步问题抓狂，只需要确保一个协程只在它的临界区之外调用yield即可。</p>
<p>不过，对于非抢占式多线程来说，只要有一个线程调用了阻塞操作，整个程序在该操作完成前都会阻塞。对于很多应用来说，这种行为是无法接受的，而这也正是导致许多程序员不把协程看作传统多线程的一种实现的原因。<br>让我们假设一个典型的多线程的场景：我们希望通过HTTP下载多个远程文件。为了下载多个远程文件，我们必须先知道如何下载一个远程文件。要下载一个文件，必须先打开一个到对应站点的连接，然后发送下载文件的请求，接收文件，最后关闭连接。在Lua语言中，可以按以下步骤来完成这项任务。首先，加载LuaSocket库：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> socket = <span class="built_in">require</span> <span class="string">&quot;socket&quot;</span></span><br></pre></td></tr></table></figure>
<p>然后，定义主机和要下载的文件。在本例中，我们从Lua语言官网下载Lua5.3手册：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">host = <span class="string">&quot;www.lua.org&quot;</span></span><br><span class="line">file = <span class="string">&quot;/manual/5.3/manual.html&quot;</span></span><br></pre></td></tr></table></figure>
<p>接下来，打开一个TCP连接，连接到站点的80端口：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">c = <span class="built_in">assert</span>(socket.connect(host,<span class="number">80</span>))</span><br></pre></td></tr></table></figure>
<p>这步操作返回一个连接对象，可以用它来发送下载文件的请求：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> request = <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;GET %s HTTP/1.0\r\nhost: %s\r\n\r\n&quot;</span>,file,host)</span><br><span class="line">c:send(request)</span><br></pre></td></tr></table></figure>
<p>接下来，以1KB为一块读取文件，并将每块写入到标准输出中：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">repeat</span></span><br><span class="line">	<span class="keyword">local</span> s ,<span class="built_in">status</span>,partial = c:receive(<span class="number">2</span>^<span class="number">10</span>)</span><br><span class="line">	<span class="built_in">io</span>.<span class="built_in">write</span>(s <span class="keyword">or</span> partial)</span><br><span class="line"><span class="keyword">until</span> <span class="built_in">status</span> == <span class="string">&quot;closed&quot;</span></span><br></pre></td></tr></table></figure>
<p>函数receive要么返回它读取到的字符串，要么在发生错误时返回nil外加错误码及出错前读取到的内容。当主机关闭连接时，把输入流中剩余的内容打印出来，然后退出接收循环。<br>下载完文件后，关闭连接：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">c:<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure>
<p>既然我们知道了如何下载一个文件，那么再回到下载多个文件的问题上。最简单的做法是逐个地下载文件。不过，这种串行的做法太慢了，它只能在下载完一个文件后再下载一个文件。当读取一个远程文件时，程序把大部分的时间耗费在了等待数据到达上。更确切地说，程序将时间耗费在了对receive的阻塞调用上。因此，如果一个程序能够同时并行下载所有文件的话，就会快很多。当一个连接没有可用数据时，程序便可以从其他连接读取数据。很明显，协程为构造这种并发下载的代码结构提供了一种简单的方式。我们可以为每个下载任务创建一个新线程，当一个线程无可用数据时，它就可以将控制权传递给一个简单的调度器，这个调度器再去调用其他的线程。<br>在用协程重写程序前，我们先把之前下载的代码重写成一个函数。</p>
<blockquote>
<p>示例 下载Web页面的数据</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">download</span> <span class="params">(host,file)</span></span></span><br><span class="line">	<span class="keyword">local</span> c = <span class="built_in">assert</span>(socket.connect(host,<span class="number">80</span>))</span><br><span class="line">	<span class="keyword">local</span> count = <span class="number">0</span></span><br><span class="line">	<span class="keyword">local</span> request = <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;GET %s HTTP/1.0\r\nhost:%s\r\n\r\n&quot;</span>,file,host)</span><br><span class="line">	c:send(request)</span><br><span class="line">	<span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line">		<span class="keyword">local</span> s ,<span class="built_in">status</span> = receive(c)</span><br><span class="line">		count = count + #s</span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">status</span> == <span class="string">&quot;closed&quot;</span> <span class="keyword">then</span> <span class="keyword">break</span> <span class="keyword">end</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	c:<span class="built_in">close</span>()</span><br><span class="line">	<span class="built_in">print</span>(file,count)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>由于我们对远程文件的内容并不感兴趣，所以不需要将文件内容写入到标准输出中，只要计算并输出文件大小即可。<br>在新版本中，我们使用一个辅助函数receiver从连接接收数据。在串行的下载方式中，receive的代码如下：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">receive</span><span class="params">(connection)</span></span></span><br><span class="line">	<span class="keyword">local</span> s,<span class="built_in">status</span>,partial = connection:receive(<span class="number">2</span>^<span class="number">10</span>)</span><br><span class="line">	<span class="keyword">return</span> s <span class="keyword">or</span> partial,<span class="built_in">status</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>在并行的实现中，这个函数在接收数据时不能阻塞。因此，在没有足够的可用数据时，该函数会挂起，如下：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">receive</span><span class="params">(connection)</span></span></span><br><span class="line">	connection:settimeout(<span class="number">0</span>) <span class="comment">--不阻塞 </span></span><br><span class="line">	<span class="keyword">local</span> s ,<span class="built_in">status</span>,partial = connection:receive(<span class="number">2</span>^<span class="number">10</span>)</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">status</span> == <span class="string">&quot;timeout&quot;</span> <span class="keyword">then</span></span><br><span class="line">		<span class="built_in">coroutine</span>.<span class="built_in">yield</span>(connection)</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">return</span> s <span class="keyword">or</span> partial,<span class="built_in">status</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>调用settimeout(0)是的后续所有对连接进行的操作不会则塞。如果返回状态为”timeout”，就表示该操作在返回时还未完成。此时，线程就会挂起。传递给yield的非假参数通知调度器线程仍在执行任务中。请注意，即使在超时的情况下，连接也会返回超时前已读取到的内容，也就是变量partial中的内容。</p>
<blockquote>
<p>示例 调度器</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">tasks = &#123;&#125;			<span class="comment">-- 所有活跃任务的列表</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span> <span class="params">(host,file)</span></span></span><br><span class="line">	<span class="keyword">local</span> co = <span class="built_in">coroutine</span>.<span class="built_in">wrap</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">		download(host,file)</span><br><span class="line">	<span class="keyword">end</span>)</span><br><span class="line">	<span class="built_in">table</span>.<span class="built_in">insert</span>(tasks,co)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dispatch</span> <span class="params">()</span></span></span><br><span class="line">	<span class="keyword">local</span> i = <span class="number">1</span></span><br><span class="line">	<span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line">		<span class="keyword">if</span> tasks[i] == <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">			<span class="keyword">if</span> tasks[<span class="number">1</span>] == <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line">			<span class="keyword">end</span></span><br><span class="line">			i = <span class="number">1</span></span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">		<span class="keyword">local</span> res = tasks[i]()</span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> res <span class="keyword">then</span></span><br><span class="line">			<span class="built_in">table</span>.<span class="built_in">remove</span>(tasks,i)</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			i = i + <span class="number">1</span></span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>在tasks为调度器保存着所有正在运行中的线程的列表。函数get保证每个下载任务运行在一个独立的线程中。调度器本身主要就是一个循环，它遍历所有的线程，逐个唤醒它们。调度器还必须在线程完成任务后，将该线程从列表中删除。在所有线程都完成运行后，调度器停止循环。<br>最后，主程序创建所有需要的线程并调起调度器。例如，如果要从Lua官网下载几个发行包，主程序可能如下：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">get(<span class="string">&quot;www.lua.org&quot;</span>,<span class="string">&quot;/ftp/lua-5.3.2.tar.gz&quot;</span>)</span><br><span class="line">get(<span class="string">&quot;www.lua.org&quot;</span>,<span class="string">&quot;/ftp/lua-5.3.1.tar.gz&quot;</span>)</span><br><span class="line">get(<span class="string">&quot;www.lua.org&quot;</span>,<span class="string">&quot;/ftp/lua-5.3.0.tar.gz&quot;</span>)</span><br><span class="line">get(<span class="string">&quot;www.lua.org&quot;</span>,<span class="string">&quot;/ftp/lua-5.2.4.tar.gz&quot;</span>)</span><br><span class="line">get(<span class="string">&quot;www.lua.org&quot;</span>,<span class="string">&quot;/ftp/lua-5.2.3.tar.gz&quot;</span>)</span><br><span class="line">dispatch()</span><br></pre></td></tr></table></figure>
<p>在笔者的机器上，串行实现花了15秒下载到这些文件，而协程实现比串行实现快了三倍多。<br>尽管速度提高了，但最后一种实现还有很大的优化空间。当至少由一个线程有数据可读取时不会有问题；然而，如果所有的线程都没有数据可读，调度程序就会陷入忙等待，不断地从一个线程切换到另一个线程来检查是否有数据可读。这样，会导致协程版的实现比串行版实现耗费多达3倍的CPU时间。<br>为了避免这样的情况，可以使用LuaSocket中的函数select，该函数允许程序阻塞直到一组套接字的状态发生改变。要实现这种改动，只需要修改调度器即可。</p>
<blockquote>
<p>示例 使用select的调度器</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dispatch</span><span class="params">()</span></span></span><br><span class="line">	<span class="keyword">local</span> i = <span class="number">1</span></span><br><span class="line">	<span class="keyword">local</span> timedout = &#123;&#125;</span><br><span class="line">	<span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line">		<span class="keyword">if</span> tasks[i] == <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">			<span class="keyword">if</span> tasks[<span class="number">1</span>] == <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line">			<span class="keyword">end</span></span><br><span class="line">			i = <span class="number">1</span></span><br><span class="line">			timedout =&#123;&#125;</span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">		<span class="keyword">local</span> res = tasks[i]()</span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> res <span class="keyword">then</span></span><br><span class="line">			<span class="built_in">table</span>.<span class="built_in">remove</span>(tasks,i)</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			i = i + <span class="number">1</span></span><br><span class="line">			timeout[#timedout + <span class="number">1</span>] = res</span><br><span class="line">			<span class="keyword">if</span> #timedout == #tasks <span class="keyword">then</span></span><br><span class="line">				socket.<span class="built_in">select</span>(timedout)</span><br><span class="line">			<span class="keyword">end</span></span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>在循环中，新的调度器将所有超时的连接收集到表timedout中。请记住，函数receive将这种超时的连接传递给yield，然后由resume返回。如果所有的连接均超时，那么调度器调用select等待这些连接的状态就会发生改变。这个最终的实现与上一个使用协程的实现一样快。另外，由于它不会有忙等待，所以与串行实现耗费的CPU资源一样多。</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua协程</title>
    <url>/28748.html</url>
    <content><![CDATA[<p>协程可以颠倒调用者和被调用者的关系，而且这种灵活性解决了软件架构中被称为“谁是老大”或者”谁拥有主循环“的问题。这正是对诸如事件驱动编程、通过构造器构建迭代器和协作式多线程等几个看上去并不相关的问题的泛化，而协程以简单和高效的方式解决了这些问题。</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>从多线程的角度看，协程与线程类似：协程是一系列的可执行语句，拥有自己的栈、局部变量和指令指针，同时协程又与其他协程共享了全局变量和其他几乎一切资源。线程与协程的主要区别在于，一个多线程程序可以并行运行多个线程，而协程却需要彼此协作地运行，即在任意指定的时刻只能有一个协程运行。且只有当正在运行的协程显式地要求被挂起时其执行才会暂停。</p>
<h2 id="协程基础"><a href="#协程基础" class="headerlink" title="协程基础"></a>协程基础</h2><p>Lua语言中协程相关的所有函数都被放在表coroutine中。函数create用于创建新协程，该函数只有一个参数，即协程要执行的代码的函数。函数create返回一个”thread”类型的值，即新协程。通常，函数create的参数是一个匿名函数，例如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">co = <span class="built_in">coroutine</span>.<span class="built_in">create</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span></span><span class="built_in">print</span>(<span class="string">&quot;hi&quot;</span>)<span class="keyword">end</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(co))			<span class="comment">-- thread</span></span><br></pre></td></tr></table></figure>
<p>一个协程有以下四种状态，即挂起、运行、正常和死亡。我们可以通过函数coroutine.status来检查协程的状态：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">coroutine</span>.statye(co))		<span class="comment">-- suspended</span></span><br></pre></td></tr></table></figure>
<p>如果在交互模式下运行上述代码，最好在最后一行加上一个分号来阻止输出函数resume的返回值。在上例中，协程体只是简单地打印了”hi”后便终止了，然后协程就编程了死亡状态：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">coroutine</span>.<span class="built_in">status</span>(co)) <span class="comment">-- end</span></span><br></pre></td></tr></table></figure>
<p>到目前为止，协程看上去也就是一种复杂的调用函数的方式。协程的真正强大之处在于函数yield，函数可以让一个运行中的协程挂起自己，然后在后续恢复运行。例如下面这个简单示例：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">co = <span class="built_in">coroutine</span>.<span class="built_in">create</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">	<span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">10</span> <span class="keyword">do</span></span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;co&quot;</span>,i)</span><br><span class="line">		<span class="built_in">coroutine</span>.<span class="built_in">yield</span>()</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span>)</span><br></pre></td></tr></table></figure>
<p>其中，协程进行了一个循环，在循环中输出数字并在每次打印后挂起。当唤醒协程后，它就会开始执行直到遇见第一个yield:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co)	<span class="comment">-- co 	1</span></span><br></pre></td></tr></table></figure>
<p>此时，如果我们查看协程状态，会发现协程处于挂起状态，因此可以再次恢复运行：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">coroutine</span>.<span class="built_in">status</span>(co))			<span class="comment">-- suspended</span></span><br></pre></td></tr></table></figure>
<p>从协程的角度看，在挂起期间发生的活动都发生协程调用yield期间。当我们唤醒协程时，函数yield才会最终返回，然后协程会继续执行直到遇到下一个yield或执行结束：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co)	<span class="comment">-- co 2</span></span><br><span class="line"><span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co)	<span class="comment">-- co 3</span></span><br><span class="line">...</span><br><span class="line"><span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co)	<span class="comment">-- co 10</span></span><br><span class="line"><span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co)	<span class="comment">-- 不输出任何数据</span></span><br></pre></td></tr></table></figure>
<p>在最后一次调用resume时，协程体执行完毕并返回，比输出任何数据。如果我们试图再次唤醒它，函数resume将返回false及一条错误信息：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co))</span><br><span class="line"><span class="comment">-- false cannot resume dead coroutine</span></span><br></pre></td></tr></table></figure>
<p>请注意，像函数pcall一样，函数resume也运行在保护模式中。因此，如果协程在执行中出错，Lua语言不会显示错误信息，而是将错误信息返回给函数resume。<br>当协程A唤醒协程B时，协程A既不是挂起状态，也不是运行状态。所以，协程A此时的状态就被称为正常状态。<br>Lua语言中一个非常有用的机制是通过一对resume-yield来交换数据。第一个resume函数会把所有的额外参数传递给协程的主函数：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">co = <span class="built_in">coroutine</span>.<span class="built_in">create</span>(<span class="function"><span class="keyword">function</span><span class="params">(a,b,c)</span></span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;co&quot;</span>,a,b,c+<span class="number">2</span>)</span><br><span class="line"><span class="keyword">end</span>)</span><br><span class="line"><span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)		<span class="comment">-- co  1 2 5</span></span><br></pre></td></tr></table></figure>
<p>在函数coroutine.resume的返回值中，第一个返回值为true时表示没有错误，之后的返回值对应函数yield的参数：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">co = <span class="built_in">coroutine</span>.<span class="built_in">create</span>(<span class="function"><span class="keyword">function</span><span class="params">(a,b)</span></span></span><br><span class="line">	<span class="built_in">coroutine</span>.<span class="built_in">yield</span>(a+b,a-b)</span><br><span class="line"><span class="keyword">end</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co,<span class="number">20</span>,<span class="number">10</span>))		<span class="comment">-- true 30 10</span></span><br></pre></td></tr></table></figure>
<p>与之对应的是，函数 coroutine.yield的返回值是对应的resume的参数：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">co = <span class="built_in">coroutine</span>.<span class="built_in">create</span>(<span class="function"><span class="keyword">function</span><span class="params">(x)</span></span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;co1&quot;</span>,x)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;co2&quot;</span>,<span class="built_in">coroutine</span>.<span class="built_in">yield</span>())</span><br><span class="line"><span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co,<span class="string">&quot;hi&quot;</span>)		<span class="comment">-- co1 hi</span></span><br><span class="line"><span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co,<span class="number">4</span>,<span class="number">5</span>)		<span class="comment">-- co2 4 5</span></span><br></pre></td></tr></table></figure>
<p>最后，当一个协程运行结束时，主函数所返回的值都将变成对应函数resume的返回值：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">co = <span class="built_in">coroutine</span>.<span class="built_in">create</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">6</span>,<span class="number">7</span></span><br><span class="line"><span class="keyword">end</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co))		<span class="comment">-- true 6,7</span></span><br></pre></td></tr></table></figure>
<p>我们很少在同一个协程中用到所有这些机制，但每种机制都有各自的用处。<br>虽然协程的概念很容易理解，但涉及的细节其实有很多。因此，对于那些已经对协程有一定了解的读者来首，有必要再进行进一步学习前先理清一些细节。Lua语言提供的是所谓的非对称协程，也就是说需要两个函数来控制协程的执行，一个用于挂起协程的执行，另外一个用于恢复协程的执行。而其他一些语言提供的是对称协程，只提供一个函数用于在一个协程和另一个协程之间切换控制权。<br>一些人将非对称协程称为semi-coroutines。然而，其他人则用相同的术语半协程表示协程的一种受限制版实现。在这种实现中，一个协程只能在它没有调用其他函数时才可以挂起，即在调用栈中没有挂起的调用时。换句话说，只有这种半协程的主函数才能让出执行权。</p>
<h2 id="哪个协程占据主循环"><a href="#哪个协程占据主循环" class="headerlink" title="哪个协程占据主循环"></a>哪个协程占据主循环</h2><p>有关协程的最经典实例之一就是生产者-消费者问题。在生产者-消费者问题中设计两个函数，一个函数不断产生值，另一个函数不断地消费这些值。这两个函数可能形式如下：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">producer</span><span class="params">()</span></span></span><br><span class="line">	<span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line">		<span class="keyword">local</span> x = <span class="built_in">io</span>.<span class="built_in">read</span>()		<span class="comment">-- 产生新值</span></span><br><span class="line">		send(x)					<span class="comment">-- 发给消费者</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">consumer</span><span class="params">(  )</span></span></span><br><span class="line">	<span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line">		<span class="keyword">local</span> x = receive()		<span class="comment">-- 接收来自生产者的值</span></span><br><span class="line">		<span class="built_in">io</span>.<span class="built_in">write</span>(x,<span class="string">&quot;\n&quot;</span>)		<span class="comment">-- 消费 </span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>为了简化这个示例，生产者和消费者都是无限循环的；不过，可以很容易地将其修改为没有数据需要处理时退出循环。这里的问题在于如何将send与receive匹配起来，也就是”谁占据主循环“问题的典型示例。其中，生产者和消费者都处于活跃状态，它们各自具有自己的循环，并且都将对方视为一个可调用的服务。对于这个特定的示例，可以很容易地修改其中一个函数的结构，展开它的循环使其成为一个被动的代理。不过，在其他的真实场景下，这样的代码结构改动可能会很不容易。<br>由于成对的resume-yield可以颠倒调用者与被调用者之间的关系，因此协程提供了一种无须修改生产者和消费者的代码结构就能匹配它们执行顺序的理想工具。当一个协程调用函数yield时，它不是进入了一个新函数，而是返回一个挂起的调用。同样地，对函数resume的调用也不会启动一个新函数，而是返回一个对函数yield的调用。这种特性正好可以用于匹配send和receive,使得双方都认为自己是主动方而对方是被动方。因此，receive唤醒生产者的执行使其能生成一个新值，然后send则让出执行权，将生成的值传递给消费者：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">receive</span><span class="params">()</span></span></span><br><span class="line">	<span class="keyword">local</span> <span class="built_in">status</span>, value = <span class="built_in">coroutine</span>.<span class="built_in">resume</span>(producer)</span><br><span class="line">	<span class="keyword">return</span> value</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">(x)</span></span></span><br><span class="line">	<span class="built_in">coroutine</span>.<span class="built_in">yield</span>(x)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>当然，生产者现在必须运行在一个协程里：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">producer - <span class="built_in">coroutine</span>.<span class="built_in">create</span>(producer)</span><br></pre></td></tr></table></figure>
<p>在这种设计中，程序通过调用消费者启动。当消费者需要新值时就唤醒生产者，生产者向消费者返回新值后挂起，直到消费者再次将其唤醒。因此，我们将这种设计称为消费者驱动式的设计。另一种方式则是使用生产者驱动式的设计，其中消费者是协程。虽然上述两种设计思路看上去是相反的，但实际上它们的整体思路相同。<br>我们可以使用过滤器来扩展上述设计。过滤器位于生产者和消费者之间，用于完成一些对数据进行某种变换的任务。过滤器即是一个消费者又是一个生产者，它通过唤醒一个生产者来获得新值，然后又将变换后的值传递给消费者。例如，我们可以在前面代码中添加一个过滤器以实现在每行的起始处插入行号：</p>
<blockquote>
<p>示例  使用过滤器的生产者和消费者</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">receive</span><span class="params">(prod)</span></span></span><br><span class="line">	<span class="keyword">local</span> <span class="built_in">status</span>, value = <span class="built_in">coroutine</span>.<span class="built_in">resume</span>(prod)</span><br><span class="line">	<span class="keyword">return</span> value</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">(x)</span></span></span><br><span class="line">	<span class="built_in">coroutine</span>.<span class="built_in">yield</span>(x)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">producer</span><span class="params">()</span></span></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">coroutine</span>.<span class="built_in">create</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">		<span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line">			<span class="keyword">local</span>  x = <span class="built_in">io</span>.<span class="built_in">read</span>()</span><br><span class="line">			send(x)</span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">end</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">(prod)</span></span></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">coroutine</span>.<span class="built_in">create</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">		<span class="keyword">for</span> line = <span class="number">1</span>,<span class="built_in">math</span>.<span class="built_in">huge</span> <span class="keyword">do</span></span><br><span class="line">			<span class="keyword">local</span> x = receive(prod)</span><br><span class="line">			x = <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%5d %s&quot;</span>,line,x)</span><br><span class="line">			send(x)</span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">end</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">consumer</span><span class="params">(prod)</span></span></span><br><span class="line">	<span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line">		<span class="keyword">local</span> x = receive(prod)</span><br><span class="line">		<span class="built_in">io</span>.<span class="built_in">write</span>(x,<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">consumer(filter(producer()))</span><br></pre></td></tr></table></figure>
<p>代码的最后一行只是简单地创建出所需的各个组件，将这些组件连接在一起，然后启动消费者。</p>
<h2 id="将协程用作迭代器"><a href="#将协程用作迭代器" class="headerlink" title="将协程用作迭代器"></a>将协程用作迭代器</h2><p>我们可以讲循环迭代器视为生产者-消费者模式的一种特例：一个迭代器会生产由循环体消费的内容。因此，用协程来实现迭代器看上去就很合适。的确。协程为实现这类任务提供了一种强大的工具。同时，协程最关键的特行是能够颠倒调用者与被调用者之间的关系。有了这种特性，我们在编写迭代器时就无须担心如何保存连续调用之间的状态了。<br>为了说明这类用途，让我们编写一个遍历指定数组所有排列的迭代器。要直接编写这种迭代器并不容易，但如果要编写一个递归函数来产生所有的排列则不是很难。思路很简单，只要依次将每个数组元素放到最后一个位置，然后递归地生成其余元素的所有排列即可。</p>
<blockquote>
<p>示例 一个生成排列的函数</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">permgen</span><span class="params">(a,n)</span></span></span><br><span class="line">	n = n <span class="keyword">or</span> #a</span><br><span class="line">	<span class="keyword">if</span> n &lt;= <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">		printResult(a)</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">for</span> i = <span class="number">1</span>, n <span class="keyword">do</span></span><br><span class="line">			a[n],a[i] = a[i], a[n]</span><br><span class="line">			permgen(a,n<span class="number">-1</span>)</span><br><span class="line">			a[n],a[i] = a[i], a[n]</span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 还需要定义一个合适的函数printResult来输出结果，并使用恰当的参数调用premgen</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printResult</span><span class="params">(a)</span></span></span><br><span class="line">	<span class="keyword">for</span> i = <span class="number">1</span>, #a <span class="keyword">do</span> <span class="built_in">io</span>.<span class="built_in">write</span>(a[i],<span class="string">&quot;&quot;</span>) <span class="keyword">end</span></span><br><span class="line">	<span class="built_in">io</span>.<span class="built_in">write</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">permgen(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;)</span><br><span class="line"><span class="comment">--	2 3 4 1</span></span><br><span class="line"><span class="comment">--  3 2 4 1</span></span><br><span class="line"><span class="comment">--  3 4 2 1</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">--  2 1 3 4</span></span><br><span class="line"><span class="comment">--  1 2 3 4</span></span><br></pre></td></tr></table></figure>
<p>当有了生成器之后，将其转换为迭代器就很容易了。首先，我们把printResult改为yield:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">permgen</span><span class="params">(a,n)</span></span></span><br><span class="line">	n = n <span class="keyword">or</span> #a</span><br><span class="line">	<span class="keyword">if</span> n &lt;= <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">		<span class="built_in">coroutine</span>.<span class="built_in">yield</span>(a)</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		同前</span><br></pre></td></tr></table></figure>
<p>然后，我们定义一个将生成器放入协程运行并创建迭代函数的工厂。迭代器只是简单地唤醒协程，让其生产下一个排列：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">permutations</span><span class="params">(a)</span></span></span><br><span class="line">	<span class="keyword">local</span> co = <span class="built_in">coroutine</span>.<span class="built_in">create</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>permgen(a) <span class="keyword">end</span>)</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">		<span class="keyword">local</span> code ,res = <span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co)</span><br><span class="line">		<span class="keyword">return</span> res</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>有了上面的这些，在for循环中遍历一个数组的所有排列就非常简单了：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> permutations&#123;<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>&#125; <span class="keyword">do</span></span><br><span class="line">	printResult(p)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--	b c a</span></span><br><span class="line"><span class="comment">--	c b a</span></span><br><span class="line"><span class="comment">--	c a b</span></span><br><span class="line"><span class="comment">--	a c b</span></span><br><span class="line"><span class="comment">-- 	b a c </span></span><br><span class="line"><span class="comment">--	a b c</span></span><br></pre></td></tr></table></figure>
<p>函数permutations使用了Lua语言中一种常见的模式，就是唤醒对应协程的调用包装在一个函数中。由于这种模式比较常见，所以Lua语言专门提供了一种特殊的函数coroutine.wrap来完成这个功能。与函数create类似，函数wrap也用来创建一个新的协程。但不同的是，函数wrap返回的不是协程本身而是一个函数，当这个函数被调用时会唤醒协程。与原始的函数resume不同，该函数的第一个返回值不是错误代码，当遇到错误时该函数会抛出异常，我们可以使用函数wrap改写permutations:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">permutations</span><span class="params">(a)</span></span></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">coroutine</span>.<span class="built_in">wrap</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span></span> permgen(a) <span class="keyword">end</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>通常，函数coroutine.wrap比函数coroutine.create更易于使用。它为我们提供了对于操作协程而言所需的功能，即一个唤醒协程的函数。不过，该函数缺乏灵活性。我们无法检查通过函数wrap所创建的协程的状态，也无法检查运行的异常。</p>
<h2 id="事件驱动式编程"><a href="#事件驱动式编程" class="headerlink" title="事件驱动式编程"></a>事件驱动式编程</h2><p>虽然第一眼看上去不是特别明显，但实际上传统的时间驱动编程伴随的典型问题就是衍生自who-is-the-boss问题。<br>在典型的事件驱动平台下，一个外部的实体向我们程序中所谓的事件循环或运行循环生成事件。这里，我们的代码很明显不是主循环。我们的程序变成了事件循环的附属品，使得我们的程序成为了一组无须任何显式关联的、相互独立的事件处理程序的集合。<br>再举一个更加具体的例子，假设有一个与libuv类似的异步I&#x2F;O库，该库中有四个与我们的示例有关的函数：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">lib.runloop();</span><br><span class="line">lib.readline(stream,callback);</span><br><span class="line">lib.writeline(stream,line,callback);</span><br><span class="line">lib.stop();</span><br></pre></td></tr></table></figure>
<p>第一个函数运行事件循环，在其中处理所有发生的事件并调用对应的回调函数。一个典型的事件驱动程序初始化某些机制然后调用这个函数，这个函数就变成了应用的主循环。第二个函数指示库从指定的流中读取一行，并在读取完成后带着读取的结果调用指定的回调函数。第三个函数与第二个函数类似，只是该函数写入一行。最后一个函数打破事件循环，通常用于结束程序。</p>
<blockquote>
<p>示例 异步I&#x2F;O库的简单实现</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> cmdQueue = &#123;&#125;		<span class="comment">-- 挂起操作的队列</span></span><br><span class="line"><span class="keyword">local</span> lib = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lib.readline</span> <span class="params">(stream,callback)</span></span></span><br><span class="line">	<span class="keyword">local</span> nextCmd = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">		callback(stream:<span class="built_in">read</span>())</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	<span class="built_in">table</span>.<span class="built_in">insert</span>(cmdQueue,nextCmd)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lib.writeline</span><span class="params">(stream,line,callback)</span></span></span><br><span class="line">	<span class="keyword">local</span> nextCmd = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">		callback(stream:<span class="built_in">write</span>(line))</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	<span class="built_in">table</span>.<span class="built_in">insert</span>(cmdQueue,nextCmd)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lib.stop</span><span class="params">()</span></span></span><br><span class="line">	<span class="built_in">table</span>.<span class="built_in">insert</span>(cmdQueue,<span class="string">&quot;stop&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lib.runloop</span><span class="params">()</span></span></span><br><span class="line">	<span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line">		<span class="keyword">local</span> nextCmd = <span class="built_in">table</span>.<span class="built_in">remove</span>(cmdQueue,<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">if</span> nextCmd == <span class="string">&quot;stop&quot;</span> <span class="keyword">then</span></span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			nextCmd()</span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">return</span> lib</span><br></pre></td></tr></table></figure>
<p>上述代码是一种简单而丑陋的实现。该程序的”事件队列“实际上是一个由挂起操作组成的列表，当这些操作被异步调用时会产生事件。尽管很丑陋，但该程序还是完成了之前我们提到的功能，也使得我们无须使用真实的异步库就可以测试接下来的例子。<br>现在，让我们编写一个使用这个库的简单程序，这个程序把输入流中的所有行读取到一个表中，然后再逆序将其写到输出流中。如果使用同步I&#x2F;O，那么代码可能如下：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> t = &#123;&#125;</span><br><span class="line"><span class="keyword">local</span> inp = <span class="built_in">io</span>.<span class="built_in">input</span>()</span><br><span class="line"><span class="keyword">local</span> out = <span class="built_in">io</span>.<span class="built_in">output</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> inp:<span class="built_in">lines</span>() <span class="keyword">do</span></span><br><span class="line">	t[#t + <span class="number">1</span>] = line </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i = #t, <span class="number">1</span> , <span class="number">-1</span> <span class="keyword">do</span></span><br><span class="line">	out:<span class="built_in">write</span>(t[i],<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>现在，让我们再使用异步I&#x2F;O库按照时间驱动的方式重写这个程序。</p>
<blockquote>
<p>示例  使用事件驱动方式逆序一个文件</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> lib = <span class="built_in">require</span> <span class="string">&quot;async-lib&quot;</span></span><br><span class="line"><span class="keyword">local</span> t = &#123;&#125;</span><br><span class="line"><span class="keyword">local</span> inp = <span class="built_in">io</span>.<span class="built_in">input</span>()</span><br><span class="line"><span class="keyword">local</span> out = <span class="built_in">io</span>.<span class="built_in">output</span>()</span><br><span class="line"><span class="keyword">local</span> i </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 写入行的时间处理函数</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">putline</span><span class="params">()</span></span></span><br><span class="line">	i = i - <span class="number">1</span></span><br><span class="line">	<span class="keyword">if</span> i == <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">		lib.stop()</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		lib.writeline(out,t[i] .. <span class="string">&quot;\n&quot;</span>,putline)</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 读取行的事件处理函数</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">getline</span> <span class="params">(line)</span></span></span><br><span class="line">	<span class="keyword">if</span> line <span class="keyword">then</span></span><br><span class="line">		t[#t + <span class="number">1</span>] = line</span><br><span class="line">		lib.readline(inp,getline)</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		i = #t + <span class="number">1</span></span><br><span class="line">		putline()</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">lib.readline(inp,getline)</span><br><span class="line">lib.runloop()</span><br></pre></td></tr></table></figure>
<p>作为一种典型的事件驱动场景，由于主循环位于库中，因此所有的循环都消失了，这些循环被以事件区分的递归调用所取代。尽管我们可以通过使用闭包以后续传递风格进行改进，但仍然不能编写我们自己的循环。如果要这么做，那么必须通过递归来重写。<br>协程可以让我们使用事件循环来简化循环的代码，其核心思想是使用协程运行主要代码，即在每次调用库时将回调函数设置为唤醒协程的函数然后让出执行权。</p>
<blockquote>
<p>示例  是用异步库运行同步代码</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> lib = <span class="built_in">require</span> <span class="string">&quot;async-lib&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">(code)</span></span></span><br><span class="line">	<span class="keyword">local</span> co = <span class="built_in">coroutine</span>.<span class="built_in">wrap</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">		code()</span><br><span class="line">		lib.stop()</span><br><span class="line">	<span class="keyword">end</span>)</span><br><span class="line">	co()</span><br><span class="line">	lib.runloop()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">putline</span> <span class="params">(stream,line)</span></span></span><br><span class="line">	<span class="keyword">local</span> co = <span class="built_in">coroutine</span>.<span class="built_in">running</span>()</span><br><span class="line">	<span class="keyword">local</span> callback = (<span class="function"><span class="keyword">function</span><span class="params">()</span></span> <span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co) <span class="keyword">end</span>)</span><br><span class="line">	lib.writeline(stream,line,callback)</span><br><span class="line">	<span class="built_in">coroutine</span>.<span class="built_in">yield</span>()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getline</span><span class="params">(stream,line)</span></span></span><br><span class="line">	<span class="keyword">local</span> co = <span class="built_in">coroutine</span>.<span class="built_in">running</span>()</span><br><span class="line">	<span class="keyword">local</span> callback = (<span class="function"><span class="keyword">function</span><span class="params">(l)</span></span> <span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co,l) <span class="keyword">end</span>)</span><br><span class="line">	lib.readline(stream,callback)</span><br><span class="line">	<span class="keyword">local</span> line = <span class="built_in">coroutine</span>.<span class="built_in">yield</span>()</span><br><span class="line">	<span class="keyword">return</span> line </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>顾名思义，run函数运行通过参数传入的同步代码。该函数首先创建一个协程来运行指定的代码，并在完成后停止事件循环。然后，该函数唤醒协程，进入事件循环。<br>函数getline和putline模拟了同步I&#x2F;O。正如之前强调的，这两个函数都调用了恰当的异步函数，这些异步函数被当做唤醒调用协程的回调函数传入。之后，异步函数挂起，然后将控制权返回给事件循环。一旦异步操作完成，事件循环就会调用函数来唤醒触发异步函数的协程。<br>使用这个库，我们可以在异步库上运行同步代码了。如下示例再次实现了逆序行的例子：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">run(<span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">	<span class="keyword">local</span> t = &#123;&#125;</span><br><span class="line">	<span class="keyword">local</span> inp = <span class="built_in">io</span>.<span class="built_in">input</span>()</span><br><span class="line">	<span class="keyword">local</span> out = <span class="built_in">io</span>.<span class="built_in">output</span>()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line">		<span class="keyword">local</span> line = getline(inp)</span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> line <span class="keyword">then</span> <span class="keyword">break</span> <span class="keyword">end</span></span><br><span class="line">		t[#t + <span class="number">1</span>] = line</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i = #t, <span class="number">1</span> ,<span class="number">-1</span> <span class="keyword">do</span></span><br><span class="line">		putline(out,t[i] .. <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span>)</span><br></pre></td></tr></table></figure>
<p>除了使用get&#x2F;putline来进行I&#x2F;O操作和运行在run以内，上述代码与之前的同步示例等价。在同步代码结构的外表之下，程序其实是以事件驱动模式运行的。</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua连续教程之Lua反射</title>
    <url>/52447.html</url>
    <content><![CDATA[<p>反射是程序用来检查和修改其自身某些部分的能力。像Lua语言这样的动态语言支持几种反射机制：环境允许运行时观察全局变量；</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>诸如type和pairs这样的函数允许运行时检查和遍历未知数据结构；诸如load和require这样的函数允许程序在自身中追加代码或更新代码。不过，还有很多方面仍然是缺失的：程序不能检查局部变量，开发人员不能跟踪代码的执行，函数也不知道是被谁调用的，等等。调试库填补了上述缺陷。<br>调试库是由两类函数组成：自省函数和钩子。自省函数允许我们检查一个正在运行中的程序的几个方面，例如活动函数的额栈、当前正在执行的代码行、局部变量的名称和值。钩子则允许我们跟踪一个程序的执行。<br>虽然名字里带有”调试“的字眼，但调试库提供的并不是Lua语言的调试器。不过，调试库提供了编写我们自己的调试器所需要的不同层次的所有底层机制。<br>调试库与其他库不同，必须被慎重地使用。首先，调试库中的某些功能的性能不高。其次，调试库会打破语言的一些固有规则，例如不能从一个局部变量的词法定界范围外访问这个局部变量。虽然调试库作为标准库直接可用，但笔者建议在使用调试库的代码段中显示地加载调试库。</p>
<h2 id="自省机制"><a href="#自省机制" class="headerlink" title="自省机制"></a>自省机制</h2><p>调试库中主要的自省函数是getinfo，该函数的第一个参数可以是一个函数或一个栈层次。当为某个函数foo调用debug.getinfo(foo)时，该函数会返回一个包含与该函数有关的一些数据的表。这个表可能具有以下字段：<br>  <strong>source:</strong>  该字段用于说明函数定义的位置。如果函数定义在一个字符串中（通过调用load），那么source就是这个字符串；如果函数定义在一个文件中，那么source就是使用@作为前缀的文件名。<br> <strong>short_src:</strong> 该字段是source的精简版本，对于错误信息十分有用。<br> <strong>linedefined:</strong> 该字段是该函数定义在源代码中第一行的行号。<br>  <strong>lastlinedefined:</strong> 该字段是该函数定义在源代码中最后一行的行号。<br> <strong>what:</strong> 该字段用于说明函数的类型。如果foo是一个普通的Lua函数，则为“Lua”；如果是一个C函数，则为“C”;如果是一个Lua语言代码段的主要部分，则为“main”。<br> <strong>name:</strong> 该字段是该函数的一个适当的名称，例如保存该函数的全局变量的名称。<br> <strong>namewhat:</strong> 该字段用于说明上一个子弹的含义，可能是”global”、”local”、”method”、”filed”或””(空字符串)。空字符串表示Lua原因找不到该函数的名称。<br> <strong>nups:</strong> 该字段是该函数的上值的个数。<br> <strong>nparams:</strong> 该字段是该函数的参数个数。<br> <strong>isvararg:</strong> 该字段表明该函数是否为可变长参数函数。<br> <strong>activelines:</strong> 该字段是一个包含该函数所有活跃行的集合。活跃行时指除空行和只包含注释的外行的其他行。<br> <strong>func:</strong> 该字段是该函数本身。<br> 当foo是一个C函数时，Lua语言没有多少关于该函数的信息。对于这种函数，只有字段what、name、namewhat、nups和func是有意义的。<br>当使用给一个数字n作为参数调用函数debug.getinfo(n)时，可以得到有关相应栈层次上活跃函数的数据。栈层次是一个数字，代表某个时刻上活跃的特定函数。调用getinfo的函数A的层次是1，而调用A的函数的层次是2，以此类推。如果n大于栈中活跃函数的数量，那么函数debug.getinfo返回nil。当通过带有栈层次的debug.getinfo查询一个活跃函数时，返回的表中海油两个额外字段：currentline，表示当前该函数正在执行的代码所在的行；istailcall，如果为真则表示函数是被尾调用所调起。<br>字段name有些特殊。请注意，由于函数在Lua语言中是第一类值，因此函数既可以没有名称也可以有多个名称。Lua语言会通过检查调用该函数的代码来看函数是如何被调用的，进而尝试找到该函数的名称。这种方法只有在以一个数字为参数调用getinfo时才会起作用，即我们只能获取关于某一具体调用的信息。<br>函数getinfo的效率不高。Lua语言以一种不影响程序执行的形式来保存调试信息，至于获取这些调试信息的效率则是次要的。为了实现更好的性能，函数getinfo有一个可选的第二参数，该参数用于指定希望获取哪些信息。通过这个参数，函数getinfo就不会浪费时间去收集用户不需要的数据。这个参数是一个字符串，其中每个字母代表选择一组字段，如下表所示：</p>
<hr>
<p>n 选择name和namewhat<br>f 选择func<br>S 选择source、short_src、what、linedefined和lastlinedefined<br>l 选择currentline<br>L 选择activelines<br>u 选择nup、nparams和isvararg</p>
<hr>
<p>下面这个函数演示了函数debug.getinfo的用法，它打印出了活跃栈的栈回溯：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">funciton <span class="built_in">traceback</span>()</span><br><span class="line">	<span class="keyword">for</span> level = <span class="number">1</span>, <span class="built_in">math</span>.<span class="built_in">huge</span> <span class="keyword">do</span></span><br><span class="line">		<span class="keyword">local</span> info = <span class="built_in">debug</span>.<span class="built_in">getinfo</span>(level,<span class="string">&quot;Sl&quot;</span>)</span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> info <span class="keyword">then</span> back <span class="keyword">end</span></span><br><span class="line">		<span class="keyword">if</span> info.what == <span class="string">&quot;C&quot;</span> <span class="keyword">then</span></span><br><span class="line">			<span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%d\tC function&quot;</span>,level))</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%d\t[%s]:%d&quot;</span>,level,</span><br><span class="line">				info.short_src, info.currentline))</span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>要改进这个函数并不难，只需要让函数getinfo返回更多数据即可。实事上，调试库也提供了这样一个改进版本，即函数traceback。与我们的版本不同的是，函数debug.traceback不会打印结果，而是返回一个包含栈回溯的字符串：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">print</span>(<span class="built_in">debug</span>.<span class="built_in">traceback</span>())</span><br><span class="line">stack <span class="built_in">traceback</span>:</span><br><span class="line">	<span class="built_in">stdin</span>:<span class="number">1</span>:<span class="keyword">in</span> main chunk</span><br><span class="line">	[C]:<span class="keyword">in</span> ?</span><br></pre></td></tr></table></figure>
<h3 id="访问局部变量"><a href="#访问局部变量" class="headerlink" title="访问局部变量"></a>访问局部变量</h3><p>我们可以通过函数debug.getlocal来检查任意活跃函数的局部变量。该函数有两个参数，一个是要查询函数的栈层次，另一个是变量的索引。该函数返回两个值，变量名和变量的当前值。如果变量索引大于活跃变量的数量，那么函数getlocal返回nil。如果栈层次无效，则会抛出异常。<br>Lua语言按局部变量在函数中的出现顺序对它们进行编号，但编号只限于在函数当前作用域中活跃的变量。例如，考虑如下的代码：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">(a,b)</span></span></span><br><span class="line">	<span class="keyword">local</span> x </span><br><span class="line">	<span class="keyword">do</span> <span class="keyword">local</span> c = a - b <span class="keyword">end</span></span><br><span class="line">	<span class="keyword">local</span> a = <span class="number">1</span></span><br><span class="line">	<span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line">		<span class="keyword">local</span> name ,value = <span class="built_in">debug</span>.<span class="built_in">getlocal</span>(<span class="number">1</span>,a)</span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> name <span class="keyword">then</span> <span class="keyword">break</span> <span class="keyword">end</span></span><br><span class="line">		<span class="built_in">print</span>(name , value)</span><br><span class="line">		a = a + <span class="number">1</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>调用foo(10,20)会输出：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a	<span class="number">10</span></span><br><span class="line">b 	<span class="number">20</span></span><br><span class="line">x 	<span class="literal">nil</span></span><br><span class="line">a 	<span class="number">4</span></span><br></pre></td></tr></table></figure>
<p>索引为1的变量a，索引为2的变量b，索引为3的变量是x，索引为4的变量时内层的a。在getlocal被调用的时候，c已经完成了作用域，而name和value还未出现于作用域。<br>从Lua5.2开始，值为负的索引获取可变长参数函数的额外参数，索引-1指向第一个额外参数。此时，变量的名称永远是”(*vararg)”。<br>我们还可以通过函数debug.setlocal改变局部变量的值，该函数的前两个参数与getlocal相同，分别是栈层次和变量索引，而第三个参数是该局部变量的新值。该函数的返回值是变量名，如果变量索引超出了范围则返回nil。</p>
<h3 id="访问非局部变量"><a href="#访问非局部变量" class="headerlink" title="访问非局部变量"></a>访问非局部变量</h3><p>测试库还提供了函数getupvalue，该函数允许我们访问一个被Lua函数所使用的非局部变量。与局部变量不同，被一个函数所引用的非局部变量即使在引用它的函数已经不活跃的情况下也会一直存在。因此，函数getupvalue的第一个参数不是栈层次，而是一个函数。函数getupvalue的第二个参数是变量索引，Lua语言按照函数引用非局部变量的顺序对它们编号，但由于一个函数不能用同一个名称访问两个非局部变量，所以这个顺序是无关紧要的。<br>我们还可以通过函数debug.setupvalue更新非局部变量的值。就像读者可能预想的一样，该函数有三个参数：一个闭包、一个变量索引和一个新值。与函数setlocal一样，该函数返回变量名，如果索引超出范围则返回nil。</p>
<blockquote>
<p>示例 获取变量的值</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getvarvalue</span><span class="params">(name,level,isenv)</span></span></span><br><span class="line">	<span class="keyword">local</span> value</span><br><span class="line">	<span class="keyword">local</span> found = <span class="literal">false</span></span><br><span class="line">	level = (level <span class="keyword">or</span> <span class="number">1</span>) + <span class="number">1</span></span><br><span class="line">	<span class="comment">--尝试局部变量</span></span><br><span class="line">	<span class="keyword">for</span> i = <span class="number">1</span> , <span class="built_in">math</span>.<span class="built_in">huge</span> <span class="keyword">do</span></span><br><span class="line">		lcoal n, v = <span class="built_in">debug</span>,<span class="built_in">getlocal</span> (level,i)</span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> n <span class="keyword">then</span> <span class="keyword">break</span> <span class="keyword">end</span></span><br><span class="line">		<span class="keyword">if</span> n == name <span class="keyword">then</span></span><br><span class="line">			value = v</span><br><span class="line">			found = <span class="literal">true</span></span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">if</span> found <span class="keyword">then</span> <span class="keyword">return</span> <span class="string">&quot;local&quot;</span>, value <span class="keyword">end</span></span><br><span class="line">	<span class="comment">--尝试非局部变量</span></span><br><span class="line">	<span class="keyword">local</span> fun = <span class="built_in">debug</span>.<span class="built_in">getinfo</span>(level,<span class="string">&quot;f&quot;</span>).func</span><br><span class="line">	<span class="keyword">for</span> i = <span class="number">1</span>, <span class="built_in">math</span>.<span class="built_in">huge</span> <span class="keyword">do</span></span><br><span class="line">		<span class="keyword">local</span> n,v = <span class="built_in">debug</span>.<span class="built_in">getupvalue</span>(func,i)</span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> n <span class="keyword">then</span> <span class="keyword">break</span> <span class="keyword">end</span></span><br><span class="line">		<span class="keyword">if</span> n == name <span class="keyword">then</span> <span class="keyword">return</span> <span class="string">&quot;upvalue&quot;</span>, v <span class="keyword">end</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">if</span> isenv <span class="keyword">then</span> <span class="keyword">return</span> <span class="string">&quot;noenv&quot;</span> <span class="keyword">end</span>	<span class="comment">--避免循环</span></span><br><span class="line">	<span class="comment">--没找到；从环境中获取值</span></span><br><span class="line">	<span class="keyword">local</span> _, env = getvarvalue(<span class="string">&quot;_ENV&quot;</span>,level,<span class="literal">true</span>)</span><br><span class="line">	<span class="keyword">if</span> env <span class="keyword">then</span></span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;global&quot;</span> , env[name]</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;noenv&quot;</span></span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>用法如下：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt; <span class="keyword">local</span> a = <span class="number">4</span>; <span class="built_in">print</span>(getvarvalue(<span class="string">&quot;a&quot;</span>))		<span class="comment">-- local 4</span></span><br><span class="line">&gt; a = <span class="string">&quot;xx&quot;</span>;<span class="built_in">print</span>(getvarvalue(<span class="string">&quot;a&quot;</span>))			<span class="comment">-- global xx</span></span><br></pre></td></tr></table></figure>
<p>参数level指明在那个栈层次中寻找函数，1意味着直接的调用者。代码中多加1将层次纠正为包括getvarvalue自己。<br>该函数首先查找局部变量。如果有多个局部变量的名称与给定的名称相同，则获取具有最大索引的那个局部变量。因此，函数必须执行完整个循环。如果找不到指定名称的局部变量，那么就查找非局部变量。为了遍历非局部变量，该函数使用debug.getinfo函数获取调用闭包，然后遍历非局部变量。最后，如果还是找不到指定名字的非局部变量，就检索全局变量：该函数递归地调用自己来访问合适的_ENV变量并在相应环境中查找指定的名字。<br>参数isenv避免了一个诡异的问题。该参数用于说明我们是否处于一个从_ENV变量中查询全局名称的递归调用中。一个不使用全局变量的函数可能没有上值_ENV。在这种情况下，如果我们试图把_ENV当做全局变量来查询，那么由于我们需要_ENV来得到其自身的值，所以可能会陷入无限递归循环。因此，当isenv为真且函数getvarvalue找不到局部变量或上值时，getvarvalue就不应该再尝试全局变量。</p>
<h3 id="访问其他协程"><a href="#访问其他协程" class="headerlink" title="访问其他协程"></a>访问其他协程</h3><p>调试库中的所有自省函数都能够接受一个可选的协程作为第一个参数，这样就可以从外部来检查这个协程。例如，考虑使用如下的示例：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">co = <span class="built_in">coroutine</span>.<span class="built_in">create</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">	<span class="keyword">local</span> x = <span class="number">10</span></span><br><span class="line">	<span class="built_in">coroutine</span>.<span class="built_in">yield</span>()</span><br><span class="line">	<span class="built_in">error</span>(<span class="string">&quot;some error&quot;</span>)</span><br><span class="line"><span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">debug</span>.<span class="built_in">traceback</span>(co))</span><br></pre></td></tr></table></figure>
<p>对函数traceback的调用作用在协程co上，结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stack traceback:</span><br><span class="line">	[C]:in function &#x27;yield&#x27;</span><br><span class="line">	temp:3:in function &lt;temp:1&gt;</span><br></pre></td></tr></table></figure>
<p>由于协程和主程序运行在不同的栈上，所以回溯没有跟踪到对函数resume的调用。<br>当协程引发错误时并不会进行栈展开，这就意味着可以在错误发生后检查错误。继续上面的示例，如果再次唤醒协程，它会提示引起了一个错误：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co))		<span class="comment">-- false temp:4:some error</span></span><br></pre></td></tr></table></figure>
<p>现在，如果输出栈回溯，会得到这样的结果：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">stack <span class="built_in">traceback</span>:</span><br><span class="line">	[C]:<span class="keyword">in</span> <span class="function"><span class="keyword">function</span> &#x27;<span class="title">error</span>&#x27;</span></span><br><span class="line"><span class="function">	<span class="title">temp</span>:4:<span class="title">in</span> <span class="title">function</span> &lt;<span class="title">temp</span>:1&gt;</span></span><br></pre></td></tr></table></figure>
<p>即使在错误发生后，也可以检查协程中的局部变量：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">debug</span>.<span class="built_in">getlocal</span>(co,<span class="number">1</span>,<span class="number">1</span>))		<span class="comment">-- x 10</span></span><br></pre></td></tr></table></figure>

<h2 id="钩子"><a href="#钩子" class="headerlink" title="钩子"></a>钩子</h2><p>调试库中的钩子机制允许用户注册一个钩子函数，这个钩子函数会在程序运行中某个特定事件发生时被调用。有四种时间能够触发一个钩子：</p>
<ul>
<li>每当调用一个函数时产生的call事件；</li>
<li>每当函数返回时产生的return事件；</li>
<li>每当开始执行一行新代码时产生的line事件；</li>
<li>执行完制定数量的指令后产生的count事件。<br>Lua语言用给一个描述导致钩子函数被调用的事件的字符串为参数来调用钩子函数，包括”call”、”return”、”line”或”count”。对于line事件来说，还有第二个参数，即新行号。我们可以在钩子函数内部调用函数debug.getinfo来获取更多的信息。<br>要注册一个钩子，需要用两个或三个参数来调用函数debug.sethook:第一个参数是钩子函数，第二个参数是描述要监控事件的掩码字符串，第三个参数是一个用于描述以何种频度获取count事件的可选数字。如果要监控call、return和line事件，那么需要把这几个事件的首字母放入掩码字符串。如果要监控count事件，则只需要在第三个参数中指定一个计数器。如果要关闭钩子，只需不带任何参数第调用函数sethook即可。<br>作为一个简单的示例，以下代码安装了一个简单的跟踪器，它会输出解释器执行的每一行代码：<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">debug</span>.<span class="built_in">sethook</span>(<span class="built_in">print</span>,<span class="string">&quot;l&quot;</span>)</span><br></pre></td></tr></table></figure>
这句调用只是简单地把函数print安装为一个钩子函数，并告诉Lua语言在line事件发生时调用它。一个更精巧的跟踪器可以使用函数getinfo获取当前文件名并添加到输出中：<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trace</span><span class="params">(event,line)</span></span></span><br><span class="line">	<span class="keyword">local</span> s = <span class="built_in">debug</span>.<span class="built_in">getinfo</span>(<span class="number">2</span>).short_src</span><br><span class="line">	<span class="built_in">print</span>(s .. <span class="string">&quot;:&quot;</span> .. line)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">debug</span>.<span class="built_in">sethook</span>(trace,<span class="string">&quot;l&quot;</span>)</span><br></pre></td></tr></table></figure>
与钩子一起被使用的一个很有用的函数debug.debug。这个简单的函数可以提供一个能够执行任意Lua语言命令的提示符，其等价于如下的代码：<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debug1</span><span class="params">()</span></span></span><br><span class="line">	<span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line">		<span class="built_in">io</span>.<span class="built_in">write</span>(<span class="string">&quot;debug&gt; &quot;</span>)</span><br><span class="line">		<span class="keyword">local</span> line = <span class="built_in">io</span>.<span class="built_in">read</span>()</span><br><span class="line">		<span class="keyword">if</span> line == <span class="string">&quot;cont&quot;</span> <span class="keyword">then</span> <span class="keyword">break</span> <span class="keyword">end</span></span><br><span class="line">		<span class="built_in">assert</span>(<span class="built_in">load</span>(line))()</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
当用户输入”命令“cont时，函数返回。这种标准的实现十分简单，并且在全局环境中运行命令，位于正在被调试代码的定界范围之外。</li>
</ul>
<h2 id="调优"><a href="#调优" class="headerlink" title="调优"></a>调优</h2><p>除了调试，反射的另外一个常见用法是用于调优，即程序使用资源的行为分析。对于时间相关的调优，最好使用C接口，因为每次钩子调用函数开销太大从而可能导致测试结果无效。不过，对于计数性质的调优，Lua代码就可以做得很好。<br>性能调优工具的主要数据结构是两个表，其中一个表将函数和它们的调用计数关联起来，另一个表关联函数和函数名。这两个表的索引都是函数自身：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> Counters = &#123;&#125;</span><br><span class="line"><span class="keyword">local</span> Names = &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>我们可以在性能分析完成后再获取函数的名称，但是如果能在一个函数F处于活动状态时获取其名称可能会得到更好的结果。这是因为，在函数F处于活动状态时，Lua语言可以通过分析正在调用函数F的代码来找出函数F的名称。<br>现在，我们定义一个钩子函数，该钩子函数的任务是获取当前正在被调用的函数，并递增相应的计数器，再收集函数名。</p>
<blockquote>
<p>示例 用于计算调用次数的钩子</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">hook</span><span class="params">()</span></span></span><br><span class="line">	<span class="keyword">local</span> f = <span class="built_in">debug</span>.<span class="built_in">getinfo</span>(<span class="number">2</span>,<span class="string">&quot;f&quot;</span>).func </span><br><span class="line">	<span class="keyword">local</span> count = Counters[f]</span><br><span class="line">	<span class="keyword">if</span> count == <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">		Counters[f] = <span class="number">1</span></span><br><span class="line">		Names[f] = <span class="built_in">debug</span>.<span class="built_in">getinfo</span>(<span class="number">2</span>,<span class="string">&quot;Sn&quot;</span>)</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		Counters[f] = count + <span class="number">1</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>接下来，运行带有钩子的程序。假设我们要分析的程序位于一个文件中，且用户通过参数把该文件名传递个性能分析器，如下：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">% lua profile main-prog</span><br></pre></td></tr></table></figure>
<p>这样，性能分析器就可以从arg[1]中得到文件名、设置钩子并运行文件：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> f = <span class="built_in">assert</span>(<span class="built_in">loadfile</span>(<span class="built_in">arg</span>[<span class="number">1</span>]))</span><br><span class="line"><span class="built_in">debug</span>.<span class="built_in">sethook</span>(hook,<span class="string">&quot;c&quot;</span>)</span><br><span class="line">f()</span><br><span class="line"><span class="built_in">debug</span>.<span class="built_in">sethook</span>()</span><br></pre></td></tr></table></figure>
<p>最后一步是显示结果。</p>
<blockquote>
<p>示例  获取一个函数的函数名</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getname</span> <span class="params">(func)</span></span></span><br><span class="line">	<span class="keyword">local</span> n = Names[func]</span><br><span class="line">	<span class="keyword">if</span> n.what == <span class="string">&quot;C&quot;</span> <span class="keyword">then</span></span><br><span class="line">		<span class="keyword">return</span> n.name </span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">local</span> lc = <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;[%s]:%d&quot;</span>,n.short_src, n.linedefined)</span><br><span class="line">	<span class="keyword">if</span> n.what ~= <span class="string">&quot;main&quot;</span> <span class="keyword">and</span> n.namewhat ~= <span class="string">&quot;&quot;</span> <span class="keyword">then</span></span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%s (%s)&quot;</span>,lc, n.name)</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> lc</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>有Lua语言中的函数名不是特别确定，所以我们给每个函数再加上位置信息，以file:file这样的形式给出。如果一个函数没有名称，那么就只使用它的位置。如果函数是C函数，那么就只使用它的名称（因为没有位置）。在上述函数定义后，我们输出每个函数及其计数器的值：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> func,count <span class="keyword">in</span> <span class="built_in">pairs</span>(Counters) <span class="keyword">do</span></span><br><span class="line">	<span class="built_in">print</span>(getname(func),count)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h2 id="沙盒"><a href="#沙盒" class="headerlink" title="沙盒"></a>沙盒</h2><p>由于Lua语言通过库函数完成所有与外部世界的通信，因此一旦移除了这些函数也就排除了一个脚本能够影响外部环境的可能。不过尽管如此，我们仍然可能会被消耗大量CPU时间或内存的脚本进行拒绝服务Dos攻击。反射，以调试钩子的形式，提供了一种避免这种攻击的有趣方式。<br>首先，我们使用count时间钩子来限制一段代码能够执行的指令数。</p>
<blockquote>
<p>示例  一个使用钩子的简单沙盒</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="built_in">debug</span> = <span class="built_in">require</span> <span class="string">&quot;debug&quot;</span></span><br><span class="line"><span class="keyword">local</span> steplimit = <span class="number">1000</span></span><br><span class="line"><span class="keyword">local</span> count = <span class="number">0</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">setp</span><span class="params">()</span></span></span><br><span class="line">	count = count + <span class="number">1</span></span><br><span class="line">	<span class="keyword">if</span> count &gt; steplimit <span class="keyword">then</span></span><br><span class="line">		<span class="built_in">error</span>(<span class="string">&quot;script uses too much CPU&quot;</span>)</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> f = <span class="built_in">assert</span>(<span class="built_in">loadfile</span>(<span class="built_in">arg</span>[<span class="number">1</span>],<span class="string">&quot;t&quot;</span>,&#123;&#125;))</span><br><span class="line"></span><br><span class="line"><span class="built_in">debug</span>.<span class="built_in">sethook</span>(step,<span class="string">&quot;&quot;</span>,<span class="number">100</span>)</span><br><span class="line">f()</span><br></pre></td></tr></table></figure>
<p>这个程序加载了指定的文件，设置了钩子，然后运行文件。该程序把钩子设置为监听count事件，使得Lua语言每执行100条执行就调用一次钩子函数。钩子只是递增一个计数器，然后检查其是否超过了某个固定的限制。这样做之后还会有问题么？<br>当然有问题。我们还必须限制所加载的代码段的大小：一段很长的代码只要被加载就可能消耗尽内存。另一个问题是，程序可以通过少量指令消耗大量的内存。例如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> s = <span class="string">&quot;123456789012345&quot;</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>,<span class="number">36</span> <span class="keyword">do</span> s = s .. s <span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>上述的几行代码用不到150行的指令就试图创建一个1字节的字符串。显然，单纯限制指令数量和程序大小是不够的。<br>一种改进是检查和限制函数step使用的内存。</p>
<blockquote>
<p>示例  控制内存使用</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 最大能够使用的内存（单位 KB）</span></span><br><span class="line"><span class="keyword">local</span> memlimit = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 最大能够执行的&quot;steps&quot;</span></span><br><span class="line"><span class="keyword">local</span> steplimit = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">checkmem</span><span class="params">()</span></span></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">collectgarbage</span>(<span class="string">&quot;count&quot;</span>) &gt; memlimit <span class="keyword">then</span></span><br><span class="line">		<span class="built_in">error</span>(<span class="string">&quot;script uses too much memory&quot;</span>)</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> count = <span class="number">0</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">step</span><span class="params">()</span></span></span><br><span class="line">	checkmem()</span><br><span class="line">	count = count + <span class="number">1</span></span><br><span class="line">	<span class="keyword">if</span> count &gt; steplimit <span class="keyword">then</span></span><br><span class="line">		<span class="built_in">error</span>(<span class="string">&quot;script uses too much CPU&quot;</span>)</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>由于通过少量指令就可以消耗很多内存，所以我们应该设置一个很低的限制或以很小的步进来调用钩子函数。更具体地说，一个程序用40行以内的指令就能把一个字符串的大小增加上千倍。因此，我们要么以比40条指令更高的频率调用钩子，要么把内存限制设为我们能够承受的最大值的一千分之一。<br>一个微妙的问题是字符串标准库。我们可以对字符串调用该库中的所有函数。因此，即使环境中没有这些函数，我们也可以调用它们：字符串常量把它们“走私”到了我们的沙盒中。字符串标准库中没有函数能够影响外部世界，但是它们绕过了我们的指令计数器。字符串标准库中的有些函数对于DoS攻击而言可能会非常危险。</p>
<blockquote>
<p>示例 使用钩子阻止对未授权函数的访问</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="built_in">debug</span> = <span class="built_in">require</span> <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> steplimit = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> validfunc = &#123;</span><br><span class="line">	[<span class="built_in">string</span>.<span class="built_in">upper</span>] = <span class="literal">true</span>,</span><br><span class="line">	[<span class="built_in">string</span>.<span class="built_in">lower</span>] = <span class="literal">true</span>,</span><br><span class="line">	... <span class="comment">-- 其他授权的函数</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">hook</span><span class="params">(event)</span></span></span><br><span class="line"> 	<span class="keyword">if</span> event == <span class="string">&quot;call&quot;</span> <span class="keyword">then</span></span><br><span class="line"> 		<span class="keyword">local</span> info = <span class="built_in">debug</span>.<span class="built_in">getinfo</span>(<span class="number">2</span>,<span class="string">&quot;fn&quot;</span>)</span><br><span class="line"> 		<span class="keyword">if</span> <span class="keyword">not</span> validfunc[info.func] <span class="keyword">then</span></span><br><span class="line"> 			<span class="built_in">error</span>(<span class="string">&quot;calling bad function :&quot;</span> .. (info.name <span class="keyword">or</span> <span class="string">&quot;?&quot;</span>))</span><br><span class="line"> 		<span class="keyword">end</span></span><br><span class="line"> 	<span class="keyword">end</span></span><br><span class="line"> 	count = count + <span class="number">1</span></span><br><span class="line"> 	<span class="keyword">if</span> count &gt; steplimit <span class="keyword">then</span></span><br><span class="line"> 		<span class="built_in">error</span>(<span class="string">&quot;script uses too much CPU&quot;</span>)</span><br><span class="line"> 	<span class="keyword">end</span></span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">-- 加载代码段</span></span><br><span class="line"> <span class="keyword">local</span> f = <span class="built_in">assert</span>(<span class="built_in">loadfile</span>(<span class="built_in">arg</span>[<span class="number">1</span>],<span class="string">&quot;t&quot;</span>,&#123;&#125;))</span><br><span class="line"> <span class="built_in">debug</span>.<span class="built_in">sethook</span>(hook,<span class="string">&quot;&quot;</span>,<span class="number">100</span>)</span><br><span class="line"> f()</span><br></pre></td></tr></table></figure>
<p>在上述代码中，表validfunc表示一个包含程序所能够调用的函数的集合。函数hook使用调试库来访问正在被调用的函数，然后检查函数是否在集合validfunc中。<br>对于任何一种沙盒的实现而言，很重要的一点是沙盒内允许使用哪些函数。用于数据描述的沙盒可以限制所有或大部分函数；其他的沙盒则需要更加宽容，也许应该对某些函数提供它们自己带限制的实现。</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua连续教程之Lua垃圾收集</title>
    <url>/3472.html</url>
    <content><![CDATA[<p>Lua语言使用自动内存管理。程序可以创建对象，但却没有函数来删除对象。Lua语言通过垃圾收集自动删除称为垃圾的对象，从而将程序员从内存管理的绝大部分负担中解放出来。</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>更重要的是，将程序员从与内存管理相关的大多数Bug中解放出来。例如无效指针和内存泄露等问题。<br>在一个理想的环境中，垃圾收集器对程序员来说是不可见的，就像一个好的清洁工不会和其他工人打交道一样。不过，有时即使是智能的垃圾收集器也会需要我们的辅助。在某些关键的性能阶段，我们可能需要将其停止，或者让只在特定的时间运行。另外，一个垃圾收集器只能收集它确定是垃圾的内容，而不能猜测我们把什么当作垃圾。没有垃圾收集器能够做到让我们完全不用操心资源管理的问题，比如驻留内存和外部资源。<br>弱引用表、析构器和函数collectgarbage是在Lua语言中用来辅助垃圾收集器的主要机制。弱引用表允许收集Lua语言中还可以被程序访问的对象；析构器允许收集不在垃圾收集器直接控制下的外部对象；函数collectgarbage则允许我们控制垃圾收集器的步长。</p>
<h2 id="弱引用表"><a href="#弱引用表" class="headerlink" title="弱引用表"></a>弱引用表</h2><p>我们知道，数组的有效部分总是向顶部扩展的，但Lua语言却不知道。如果弹出一个元素时只是简单地递减顶部索引，那么这个仍然留在数组中的对象对于Lua语言来说并不是垃圾。同理，即使是程序不会再用到的、存储在全局变量中的对象，对于Lua语言来说也不是垃圾。在这两种情况下，都需要我们将这些对象所在的位置赋值为nil，以便这些位置不会锁定可释放的对象。<br>不过，简单地清除引用可能还不够。在有些情况下，还需要程序和垃圾收集器之间的协作。一个典型的例子是，当我们要保存某些类型的活跃对象的列表时。这个需要看上去简单，我们只需要把每个新对象插入数组即可；但是，一旦一个对象成为了数组的一部分，它就再也无法被回收！虽然已经没有其他任何地方在引用它，但数组依然在引用它。除非我们告诉Lua语言数组对该对象的引用不应该阻碍对此对象的回收，否则Lua语言本身是无从知晓的。<br>弱引用表就是这样一个用来告知Lua语言一个引用不应阻止一个对象回收的机制。所谓所引用是一种不在垃圾收集器考虑范围内的对象引用。如果一个对象的所有引用都是弱引用，弱引用表就是元素均为弱引用的表，这意味着如果一个对象只被一个弱引用持有，那么Lua语言最终会回收这个对象。<br>表由键值对组成，其两者都可以容纳任何类型的对象。在正常情况下，垃圾收集器不会回收一个在可访问的表中作为键或值的对象。也就是说，键和值都是强引用，它们会阻止对其所指向对象的回收。在一个弱引用表中，键和值都可以是弱引用的。这就意味着有三种类型的弱引用表，即具有弱引用键的表、具有弱引用值的表及同时具有弱引用键和值的表。不论是哪种类型的弱引用表，只要有一个键或值被回收了，那么对应的整个键值对都会被从表中删除。<br>一个表是否为弱引用表是由其元表中的__mode字段决定的。当这个字段存在时，其值应为一个字符串：如果这个字符串是”k”，那么这个表的键是弱引用的；如果这个字符串是”v”，那么这个表的值是弱引用的；如果这个字符串是”kv”，那么这个表的键和值都是弱引用的。下面的示例虽然有些可以，但演示了弱引用表的基本行为：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = &#123;&#125;</span><br><span class="line">mt = &#123;<span class="built_in">__mode</span> = <span class="string">&quot;k&quot;</span>&#125;</span><br><span class="line"><span class="built_in">setmetatable</span>(a,mt)		<span class="comment">-- 现在&#x27;a&#x27;的键是弱引用的了</span></span><br><span class="line">key = &#123;&#125;</span><br><span class="line">a[key] = <span class="number">1</span>				<span class="comment">-- 创建第一个键</span></span><br><span class="line">key = &#123;&#125;</span><br><span class="line">a[key] = <span class="number">2</span>				<span class="comment">-- 创建第二个键</span></span><br><span class="line"><span class="built_in">collectgarbage</span>()		<span class="comment">-- 强制进行垃圾回收</span></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(a) <span class="keyword">do</span> <span class="built_in">print</span>(v) <span class="keyword">end</span>		<span class="comment">-- 2</span></span><br></pre></td></tr></table></figure>
<p>在本例中，第二句赋值key &#x3D; {}覆盖了指向第一个键的索引。调用collectgarbage强制垃圾收集器进行一次完整的垃圾手机。由于已经没有指向第一个键的其他引用个，因此Lua语言会回收这个键并从表中删除对应的元素。然而，由于第二个键仍然被变量key所引用，因此Lua不会回收它。<br>请注意，只有对象可以从弱引用表中被移除，而像数字和布尔这样的“值”是不可回收的。例如，如果我们在表a中插入一个数值类型的键，那么垃圾收集器永远不会回收它。当然，如果在一个值为弱引用的弱引用表中，一个数值类型键相关联的值被回收了，那么整个元素都会从这个弱引用表中被删除。<br>字符串在这里表现了一些细微的差别，虽然从实现的角度看字符串是可回收的，但字符串又与其他的可回收对象不同。其他的对象，例如表和闭包，都是被显式创建的。例如，当Lua语言对表达式{}求值时会创建一个新表。</p>
<h2 id="记忆函数"><a href="#记忆函数" class="headerlink" title="记忆函数"></a>记忆函数</h2><p>空间换时间是一种常见的编程技巧。我们可以通过记忆函数的执行结果，在后续使用相同参数再次调用该函数时直接返回之前记忆的结果，来加快函数的运行速度。<br>假设有一个通用的服务器，该服务器接收的请求是以字符串形式表示的Lua语言代码。每当服务器接收到一个请求时，它就对字符串运行load函数，然后再调用编译后的函数。不过，函数load的开销很昂贵，而且发送给服务器的某些命令的出现频率可能很高。这样，与其每次收到一条诸如”closeconnection()”这样的常见命令就重复地调用函数load，还不如让服务器用一个辅助表记忆所有函数load的执行结果。在调用函数load前，服务器先在表中检查指定的字符串是否已经被处理过。如果没有，就调用函数load并将返回值保存到表中。我们可以将这种行为封装为一个新的函数：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> results = &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mem_loadstring</span><span class="params">(s)</span></span></span><br><span class="line">	<span class="keyword">local</span> res = results[s]</span><br><span class="line">	<span class="keyword">if</span> res == nli <span class="keyword">then</span></span><br><span class="line">		res = <span class="built_in">assert</span>(laod(s))</span><br><span class="line">		results[s] = res</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">return</span> res</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>这种模式节省的开销非常可观。但是，它也可能导致不易察觉的资源浪费。虽然有些命令会重复出现，但也有很多命令可能就出现一次。渐渐地，表results会堆积上服务器收到的所有命令及编译结果；在运行一段足够长的时间后，这种行为会耗尽服务器的内存。<br>弱引用表为解决这个问题提供了一种简单的方案，如果表results具有弱引用的值，那么每个垃圾收集周期都会删除所有那个时刻未使用的编译结果：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> results = &#123;&#125;</span><br><span class="line"><span class="built_in">setmetatable</span>(results,&#123;<span class="built_in">__mode</span> = <span class="string">&quot;v&quot;</span>&#125;)		<span class="comment">-- 让值称为弱引用</span></span><br><span class="line">funciton mem_loadstring(s)</span><br><span class="line"><span class="comment">--下面内容同前</span></span><br></pre></td></tr></table></figure>
<p>实际上，因为索引永远是字符串，所以如果愿意的话，我们可以让这个表变成完全弱引用的：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setmetatable</span>(results,&#123;<span class="built_in">__mode</span> = <span class="string">&quot;kv&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>
<p>最终达到的效果是完全一样的。<br>记忆技术还可以用来确保某类对象的唯一性。例如，假设一个系统用具有三个相同取值范围的字段red、green和blue的表来表示颜色，一个简单的颜色工厂函数每被调用一次就生成一个颜色：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createRGB</span><span class="params">(r,g,b)</span></span></span><br><span class="line">	<span class="keyword">return</span> &#123;red = r, green = g ,blue = b&#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>使用记忆技术，我们就可以为相同的颜色复用相同的表。要为每一种颜色创建一个唯一的键，只需要使用分隔符把颜色的索引连接起来即可：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> results = &#123;&#125;</span><br><span class="line"><span class="built_in">setmetatable</span>(results,&#123;<span class="built_in">__mode</span> = <span class="string">&quot;v&quot;</span>&#125;)		<span class="comment">-- 让值称为弱引用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createRGB</span><span class="params">( r,g,b )</span></span></span><br><span class="line">	<span class="keyword">local</span> key = <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%d-%d-%d&quot;</span>,r,g,b)</span><br><span class="line">	<span class="keyword">local</span> color = results[key]</span><br><span class="line">	<span class="keyword">if</span> color == <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">		color = &#123;red = r, green = g, blue = b&#125;</span><br><span class="line">		results[key] = color</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">return</span> color</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>这种实现的一个有趣结果是，由于两种颜色存在的颜色必定是由同一个表来表示，所以用户可以使用基本的相等运算符比较两种颜色。因为随着时间的迁移垃圾收集器会清理表results，所以一种指定的颜色在不同的时间内可能由不同的表来表示。不过，只要一种颜色正在被使用，它就不会从results中被移除。因此，一种颜色与一种新颜色相比已经存在了多长时间，这种颜色对应的表也存在了对应长度的时间，也可以被新颜色复用。</p>
<h2 id="对象属性"><a href="#对象属性" class="headerlink" title="对象属性"></a>对象属性</h2><p>弱引用表的另外一种重要应用是将属性与对象关联起来。在各种各样的情况下，我们都需要把某种属性绑定到某个对象，例如函数名、表的默认值及数组的大小等。<br>当对象是一个表时，可以通过适当的唯一键把属性存储在这个表自身中。不过，如果对象不是一个表，那么它就不能保存它自己的属性。另外，即使是表，有时我们也不想把属性保存在原始的对象。例如，当想保持属性的私有性时，或不想让属性干扰表的遍历时，就需要用其他办法来关联对象和属性。<br>当然，外部表为对象和属性的映射提供了一种理性的方法，即对偶表示，其中将对象用作键、将对象的属性用作值。由于Lua语言允许使用任意类型的对象作为键，因此一个外部表可以保存任意类型对象的属性。此外，存储在外部表中的属性不会干扰其他对象，并且可以像表本身一样是私有的。<br>不过，这个看似完美的方案有一个重大缺陷：一旦我们把一个对象当作表中的一个键，那么就是引用了它。Lua语言无法回收一个正在被用作键的对象。例如，如果使用一个普通的表来映射函数和函数名，那么这些函数就永远无法被回收。</p>
<h2 id="回顾具有默认值的表"><a href="#回顾具有默认值的表" class="headerlink" title="回顾具有默认值的表"></a>回顾具有默认值的表</h2><p>在第一种解决方案中，我们使用了一个弱引用表来映射每一个表和它的默认值：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> defaults = &#123;&#125;</span><br><span class="line"><span class="built_in">setmetatable</span>(defaults,&#123;<span class="built_in">__mode</span> = <span class="string">&quot;k&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">local</span> mt = &#123;<span class="built_in">__index</span> = <span class="function"><span class="keyword">function</span><span class="params">(t)</span></span> <span class="keyword">return</span> defaults[t] <span class="keyword">end</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setDefault</span> <span class="params">(t,d)</span></span></span><br><span class="line">	defaults[t] = d</span><br><span class="line">	<span class="built_in">setmetatable</span>(t,mt)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>这是对偶表示的一种典型应用，其中使用了defaults[t]来表示t.defaults。如果表defaults没有弱引用的键，那么所有具有默认值的表就会永远存在下去。<br>在第二种解决方案中，我们对不同的默认值使用了不同的元素，在遇到重复的默认值时会复用相同的元表。这是记忆技术的一种典型应用：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> metas = &#123;&#125;</span><br><span class="line"><span class="built_in">setmetatable</span>(metas,&#123;<span class="built_in">__mode</span> = <span class="string">&quot;v&quot;</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setDefault</span><span class="params">(t,d)</span></span></span><br><span class="line">	<span class="keyword">local</span> mt = metas[d]</span><br><span class="line">	<span class="keyword">if</span> mt == <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">		mt = &#123;<span class="built_in">__index</span> = <span class="function"><span class="keyword">function</span><span class="params">()</span></span> <span class="keyword">return</span> d <span class="keyword">end</span>&#125;</span><br><span class="line">		metas[d] = mt</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	<span class="built_in">setmetatable</span>(t,mt)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>在这种情况下，我们使用弱引用的值使得不再被使用的元表能够回收。<br>这两种实现哪种更好取决于具体的情况。这两种实现具有类似的复杂度和性能表现，第一种实现需要为每个具有默认值的表分配几个字节的内存，而第二种实现则需要为每个不同的默认值分配若干内存。因此，如果应用中有上千个具有少量不同默认值的表，那么第二种实现明显更好。不过，如果只有少量共享默认值的表，那么就应该选择第一种实现。</p>
<h2 id="瞬表"><a href="#瞬表" class="headerlink" title="瞬表"></a>瞬表</h2><p>一种棘手的情况是，一个具有弱引用键的表中的值又引用了对应的键。<br>这种情况看上去更加常见。一个典型的示例是常量函数工厂。这种工厂的参数是一个对象，返回值是一个被调用时返回传入对象的函数：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factory</span><span class="params">(o)</span></span></span><br><span class="line">	<span class="keyword">return</span> (<span class="function"><span class="keyword">function</span><span class="params">()</span></span> <span class="keyword">return</span> o <span class="keyword">end</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>这种工厂时实现记忆的一种很好的手段，可以避免在闭包已经存在时又创建新的闭包。</p>
<blockquote>
<p>示例  使用记忆技术的常量函数工厂</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> </span><br><span class="line">	<span class="keyword">local</span> mem = &#123;&#125;</span><br><span class="line">	<span class="built_in">setmetatable</span>(mem, &#123;<span class="built_in">__mode</span> = <span class="string">&quot;k&quot;</span>&#125;)</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">factory</span><span class="params">(o)</span></span></span><br><span class="line">		<span class="keyword">local</span> res = mem[o]</span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> res <span class="keyword">then</span></span><br><span class="line">			res = (<span class="function"><span class="keyword">function</span><span class="params">()</span></span> <span class="keyword">return</span> o <span class="keyword">end</span>)</span><br><span class="line">			mem[o] = res</span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">		<span class="keyword">return</span> res</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>不过，这里另有玄机。请注意，表mem中与一个对象关联的值回指了它自己的键。虽然表中的键是弱引用的，但是表中的值却不是弱引用的。从一个弱引用表的标准理解看，记忆表中没有任何东西会被移除。由于值不是弱引用的，所以对于每一个函数来说都存在一个强引用。每一个函数都指向其对应的对象，因而对于每一个键来说都存在一个强应用。因此，即使有弱引用的键，这些对象也不会被回收。<br>不过，这种严格的理解不是特别有用。大多数人希望一个表中的值只能通过对应的键来访问。我们可以认为之前的情况是某种环，其中闭包引用了指回闭包的对象。<br>Lua语言通过瞬表的概念来解决上述问题。在Lua语言中，一个具有弱引用键和强引用值的表是一个瞬表。在一个顺表中，一个键的可访问性控制着对应值的可访问性。更确切地说，考虑瞬表中的一个元素，指向的v的引用只有当存在某些指向k的其他外部引用存在时才是强引用，否则，即使v引用了k，垃圾收集器最终会收集k并把元素从表中移除。</p>
<h2 id="析构器"><a href="#析构器" class="headerlink" title="析构器"></a>析构器</h2><p>虽然垃圾收集器的目标是回收对象，但是它可以帮助程序员来释放外部资源。处于这种目的，几种编程语言提供了析构器。析构器是一个与对象关联的函数，当该对象即将被回收时该函数会被调用。<br>Lua语言通过元方法__gc实现析构器，如下例所示：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">o = &#123;x = <span class="string">&quot;hi&quot;</span>&#125;</span><br><span class="line"><span class="built_in">setmetatable</span>(o,&#123;<span class="built_in">__gc</span> = <span class="function"><span class="keyword">function</span><span class="params">(o)</span></span> <span class="built_in">print</span>(o.x) <span class="keyword">end</span>&#125;)</span><br><span class="line">o = <span class="literal">nil</span></span><br><span class="line"><span class="built_in">collectgarbage</span>()		<span class="comment">-- nil</span></span><br></pre></td></tr></table></figure>
<p>在本例中，我们首先创建一个带有__gc元方法元表的表。然后，抹去与这个表的唯一联系，再强制进行一次完整的垃圾回收。在垃圾回收期间，Lua语言发现表已经不再是可访问的了，因此调用表的析构器，也就是元方法__gc。<br>Lua语言中，析构器的一个微妙之处在于“将一个对象标记为需要析构”的概念。通过给对象设置一个具有非空__gc元方法的元表，就可以把一个对象标记为需要进行析构处理。如果不标记对象，那么对象就不会被析构。我们编写的大多数代码会正常运行，但会发生某些奇怪的行为，比如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">o = &#123;x = <span class="string">&quot;hi&quot;</span>&#125;</span><br><span class="line">mt = &#123;&#125;</span><br><span class="line"><span class="built_in">setmetatable</span>(o,mt)</span><br><span class="line">mt.<span class="built_in">__gc</span> = <span class="function"><span class="keyword">function</span><span class="params">(o)</span></span> <span class="built_in">print</span>(o.x) <span class="keyword">end</span></span><br><span class="line">o = <span class="literal">nil</span></span><br><span class="line"><span class="built_in">collectgarbage</span>()		<span class="comment">-- (print nothing)</span></span><br></pre></td></tr></table></figure>
<p>这里，我们确实要给对象o设置了元表，但是这个元表没有__gc方法，因此对象没有被标记为需要进行析构处理。即使我们后续给元表增加了元方法__gc，Lua语言也发现不了这种赋值的特殊之处，因此不会把对象标记为需要进行析构处理。<br>正如我们所提到的，这很少会有问题。在设置元表后，很少会改变元方法。如果真的需要在后续设置元方法，那么可以给字段__gc先赋一个任意值作为占位符：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">o = &#123;x = <span class="string">&quot;hi&quot;</span>&#125;</span><br><span class="line">mt = &#123;<span class="built_in">__gc</span> = <span class="literal">true</span>&#125;</span><br><span class="line"><span class="built_in">setmetatable</span>(o,mt)</span><br><span class="line">mt.<span class="built_in">__gc</span> = <span class="function"><span class="keyword">function</span><span class="params">(o)</span></span> <span class="built_in">print</span>(o.x) <span class="keyword">end</span></span><br><span class="line">o = <span class="literal">nil</span></span><br><span class="line"><span class="built_in">collectgarbage</span>()		<span class="comment">-- nil</span></span><br></pre></td></tr></table></figure>
<p>现在，由于元表有了__gc字段，因此对象会被正确地标记为需要析构处理。如果后续再设置元方法也不会有问题，只要元方法时一个正确的函数，Lua语言就能够调用它。<br>当垃圾收集器在同一个周期中析构多个对象时，它会按照对象被标记为需要析构处理的顺序逆序调用这些对象的析构器。请考虑如下的示例，该示例创建了一个由带有析构器的对象所组成的链表：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">mt = &#123;<span class="built_in">__gc</span> = <span class="function"><span class="keyword">function</span><span class="params">(o)</span></span> <span class="built_in">print</span>(o[<span class="number">1</span>]) <span class="keyword">end</span>&#125;</span><br><span class="line">list = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span> , <span class="number">3</span> <span class="keyword">do</span></span><br><span class="line">	list = <span class="built_in">setmetatable</span>(&#123;i,link = list&#125;,mt)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">list = <span class="literal">nil</span></span><br><span class="line"><span class="built_in">collectgarbage</span>()</span><br></pre></td></tr></table></figure>
<p>第一个被析构的对象是3，也就是最后一个被标记的对象。<br>一种常见的误解是认为正在被回收的对象之间的关联会影响对象析构的顺序。例如，有些人可能认为上例中的对象2必须在对象1之前被析构，因为存在从2到1的关联。但是，关联会行程环。所以，关联并不会影响析构器执行的顺序。<br>有关析构器的另个一微妙之处是复苏。当一个析构器被调用时，它的参数是正在被析构的对象。因此，这个对象会至少在析构期间重新编程活跃的。笔者把这称为临时复苏。在析构器执行期间，我们无法阻止析构器把该对象存储在全局变量中，使得该对象在析构器返回后仍然可以访问，笔者把这称为永久复苏。</p>
<p>复苏必须是可传递的。考虑如下代码：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">A = &#123;x = <span class="string">&quot;this is A&quot;</span>&#125;</span><br><span class="line">B = &#123;f = A&#125;</span><br><span class="line"><span class="built_in">setmetatable</span>(B,&#123;<span class="built_in">__gc</span> = <span class="function"><span class="keyword">function</span><span class="params">(o)</span></span> <span class="built_in">print</span>(o.f.x) <span class="keyword">end</span>&#125;)</span><br><span class="line">A,B = <span class="literal">nil</span></span><br><span class="line"><span class="built_in">collectgarbage</span>() 		<span class="comment">-- this is A</span></span><br></pre></td></tr></table></figure>
<p>B的析构器访问了A，因此A在B析构前不能被回收，Lua语言在运行析构器之前必须同时复苏B和A。<br>由于复苏的存在，Lua语言会在两个阶段中回收具有析构器的对象。当垃圾收集器首次发生某个具有析构器的对象不可达时，垃圾收集器就把这个对象复苏并将其放入等待被析构的队列中。一旦析构器开始执行，Lua语言就将对该对象标记为已被析构。当下一次垃圾收集器又发现这个对象不可达时，它就将这个对象删除。如果想保证我们程序中的所有垃圾都被真正地释放了的话，那么必须调用collectgarbage两次，第二次调用才会删除第一次调用中被析构的对象。<br>由于Lua语言在析构对象上设置了标记，每一个对象的析构器都会精确地运行一次。如果一个对象直到程序运行结束还没有被回收，那么Lua语言就会在整个Lua虚拟机关闭后调用它的析构器。这种特行在Lua语言中实现了某种形式的atexit函数，即在程序终结前立即运行的函数。我们所要做的就是创建一个带有析构器的表，然后把它锚定在某处，例如锚定到全局表中：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> t = &#123;<span class="built_in">__gc</span> = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;finishing Lua program&quot;</span>)</span><br><span class="line">	<span class="keyword">end</span>&#125;</span><br><span class="line"><span class="built_in">setmetatable</span>(t,t)</span><br><span class="line"><span class="built_in">_G</span>[<span class="string">&quot;*AA*&quot;</span>] = t</span><br></pre></td></tr></table></figure>
<p>另外一个有趣的技巧会允许程序在每次完成垃圾回收后调用指定的函数。由于析构器只运行一次，所以这种技巧是让每个析构器创建一个用来运行下一个析构器的新对象，参考示例：</p>
<blockquote>
<p>示例 在每次GC后运行一个函数</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="keyword">local</span> mt = &#123;<span class="built_in">__gc</span> = <span class="function"><span class="keyword">function</span><span class="params">(o)</span></span></span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;new cycle&quot;</span>)</span><br><span class="line">		<span class="built_in">setmetatable</span>(&#123;&#125;,<span class="built_in">getmetatable</span>(o))</span><br><span class="line">	<span class="keyword">end</span>&#125;</span><br><span class="line">	<span class="built_in">setmetatable</span>(&#123;&#125;,mt)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">collectgarbage</span>()		<span class="comment">-- 一次垃圾收集</span></span><br><span class="line"><span class="built_in">collectgarbage</span>()		<span class="comment">-- 一次垃圾收集</span></span><br><span class="line"><span class="built_in">collectgarbage</span>()		<span class="comment">-- 一次垃圾收集</span></span><br></pre></td></tr></table></figure>
<p>具有析构器的对象和弱引用表之间的交互也有些微妙。在每个垃圾收集周期内，垃圾收集器会在调用析构器前清理弱应用表中的值，在调用析构器之后再清理键。这种行为的原理在于我们经常使用带有弱引用键的表来保存对象的属性，因此，析构器可能需要访问那些属性。不过，我们也会使用具有弱引用值的表来重用活跃的对象，在这种情况下，正在被析构的对象就不再有用了。</p>
<h2 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><p>一直到Lua5.0，Lua语言使用的都是一个简单的标记-清除式垃圾收集器。这种收集器又被称为“stop-the-world（全局暂停）”式的收集器，意味着Lua语言会时不时地停止主程序的运行来执行一次完整的垃圾收集周期。每一个垃圾收集周期由四个阶段组成：标记、清理、清除和析构。<br>标记阶段把根节点集合标记为活跃，根结点集合由Lua语言可以直接访问的对象组成。在Lua语言中，这个集合只包括C注册表。<br>保存在一个活跃对象中的对象是程序可达的，因此也会被标记活跃。当所有可达对象都被标记为活跃后，标记阶段完成。<br>在开始清除阶段前，Lua语言先执行清理阶段，在这个阶段中处理析构器和弱引用表。首先，Lua语言遍历所有被标记为需要进行析构、但又没有被标记为活跃状态的对象。这些没有标记为活跃状态的对象会被标记为活跃，并被放在一个单独的列表中，这个列表会在析构阶段用到。然后，Lua语言遍历弱引用表并从中移除键或值未被标记的元素。<br>清理阶段遍历所有对象。如果一个对象没有被标记为活跃，Lua语言就将其回收，否则，Lua语言清理标记，然后准备进行下一个清理周期。<br>最后，在析构阶段，Lua语言调用清理阶段被分离出的对象的析构器。<br>使用真正的垃圾收集器意味着Lua语言能够处理对象引用之间的环。在使用环形数据结构时，我们不需要花费外的精力，它们会像其他数据一样被回收。<br>Lua5.1使用了增量式垃圾收集器。这种垃圾收集器像老版的垃圾收集器一样执行相同的步骤，但是不需要在垃圾收集期间停止主程序的运行。相反，它与解释器一起交替运行。每当解释器分配了一定数量的内存时，垃圾收集器也执行一小步（这意味着，在垃圾收集器工作期间，解释器可能会改变一个对象的可达性。为了保证垃圾收集器的正确性，垃圾收集器中的有些操作具有发现危险改动和纠正所涉及对象标记的内存屏障）。<br>Lua5.2引入了紧急垃圾收集。当内存分配失败时，Lua语言会强制进行一次完整的垃圾收集，然后再次尝试分配。这些紧急情况可以发生在Lua语言进行内存分配的任意时刻，包括Lua语言处于不一致的代码执行状态时，因此，这些收集动作不能运行析构器。</p>
<h2 id="控制垃圾收集的步长"><a href="#控制垃圾收集的步长" class="headerlink" title="控制垃圾收集的步长"></a>控制垃圾收集的步长</h2><p>通过函数collectgarbage可以对垃圾收集器进行一些额外的控制，该函数实际上是几个函数的集合体：第一个参数是一个可选的字符串，用来说明进行何种操作；有些选项使用一个整型作为第二个参数，称为data。<br>第一个参数的选项包括如下七个。<br>“stop”:停止垃圾收集器，知道使用选项”restart”再次调用collectgarbage。<br>“restart”:重启垃圾收集器。<br>“collect”:执行一次完整的垃圾收集，回收和析构所有不可达的对象。这是默认的选项。<br>“step”:执行某些垃圾收集工作，第二个参数data指明工作量，即在分配了data字节后垃圾收集器应该做什么。<br>“count”:以KB为单位返回当前自己已用内存数，该结果是一个浮点数，乘以1024得到的就是精确的字节数。该值包括了尚未被回收的死对象。<br>“setpause”:设置收集器的stepmul参数。参数data给出新值，也是以百分比为单位。<br>两个参数pause和stepmul控制着垃圾收集器的角色。任何垃圾收集器都是使用CPU时间换内存空间。在极端情况下，垃圾收集器可能根本不会运行。但是，不耗费CPU时间是以巨大的内存消耗为代价的。在另外一种极端的情况下，收集器可能每进行一次赋值就得运行一次完整的垃圾收集。程序能够使用尽可能少的内存，但是是以巨大的CPU消耗为代价的。pause和stepmul的默认值正式试图在这两个极端之间找到的对大多数应用来说足够好的平衡点。不过，在某些情况下，还是值得试着对它们进行优化。<br>参数pause用于控制垃圾收集器在一次手机完成后等待多久再开始新的一次手机。当值为零时，表示Lua语言在上一次垃圾回收结束后立即开始一次新的收集。当值为200%时表示在重启垃圾收集器前等待内存使用翻番。如果想消耗更多的CPU时间换取更低的内存消耗，那么可以把这个值设置得小一点。通常，我们应该把这个值设在0到200%之间。<br>参数stepmul控制对于每分配1KB内存，垃圾收集器应该进行多少工作。这个值越高，垃圾收集器使用的增量越小。一个像10000000%一样巨大的值会让收集器表现得像一个非增量的垃圾收集器。默认值是200%，地于100%的值会让收集器运行得很慢，以至于可能一次收集也完不成。<br>函数collectgarbage的另外一些参数用来在垃圾收集器运行时控制它的行为。同样，对于大多数程序员来说，默认值已经足够好了，但是对于一些特殊的应用，用手工控制可能会更好，游戏就经常需要这种类型的控制。例如，如果我们不想让垃圾收集在某些阶段运行，那么可以通过调用函数collectgarbage(“stop”)停止垃圾收集器，然后再调用collectgarbage(“restart”)重新启动垃圾收集器。在一些具有周期性休眠阶段的代码中，可以让垃圾收集器停止，然后在程序休眠期间调用collectgarbage(“step”,n)。要设置在每一个休眠期间进行多少工作，要么为n实验性地选择一个恰当的值，要么把n设成零，然后在一个循环中调用函数collectgarbage直到休眠结束。</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua局部变量和代码块</title>
    <url>/3083.html</url>
    <content><![CDATA[<p>Lua语言中的变量在默认情况下是全局变量，所有的局部变量在使用前必须声明。与全局变量不同，局部变量的生效范围仅限于声明它的代码块。一个代码块是一个控制结构的主体，或是一个函数的主体，或是一个代码段：</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">x = <span class="number">10</span> </span><br><span class="line"><span class="keyword">local</span> i = <span class="number">1</span>		<span class="comment">-- 对于代码段来说是局部的</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= x <span class="keyword">do</span></span><br><span class="line">	<span class="keyword">local</span> x = i * <span class="number">2</span>	<span class="comment">--对于循环来说是局部的</span></span><br><span class="line">	<span class="built_in">print</span>(x)		<span class="comment">-- 2,4,6...</span></span><br><span class="line">	i = i + <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">if</span> i &gt; <span class="number">20</span> <span class="keyword">then</span></span><br><span class="line">	<span class="keyword">local</span> x 			<span class="comment">-- 对于&quot;zhen&quot;来说是局部的</span></span><br><span class="line">	x = <span class="number">20</span></span><br><span class="line">	<span class="built_in">print</span>(x + <span class="number">2</span>)		<span class="comment">-- 如果测试成功会输出22</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	<span class="built_in">print</span>(x)		<span class="comment">-- 10(全局的)</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>
<p>请注意，上述示例在交互模式中不能正常运行。因为在交互模式中，每一行代码就是一个代码段。一旦输入示例的第二行，Lua语言解释器就会直接运行它并在下一行开始一个新的代码段。这样，局部的声明就超出了原来的作用范围。解决这个问题的一种方式是显示地声明整个代码块，即将它放入一对do-end中。一旦输入了do，命令就只会在遇到匹配的end时才结束，这样Lua语言解释器就不会单独执行每一行的命令。<br>当需要更好地控制某些局部变量的生效范围时，do程序块也同样有用：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> x1 , x2</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="keyword">local</span> a2 = <span class="number">2</span> * a2</span><br><span class="line">	<span class="keyword">local</span> d = (b^<span class="number">2</span> - <span class="number">4</span>*a*c)^(<span class="number">1</span>/<span class="number">2</span>)</span><br><span class="line">	x1 = (-b + d)/a2</span><br><span class="line">	x2 = (-b - d)/a2</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(x1,x2)</span><br></pre></td></tr></table></figure>
<p>尽可能地使用局部变量是一种良好的编程风格。首先，局部变量可以避免由于不必要的命名而造成全局变量的混乱；其次，局部变量还能避免同一程序中不同代码部分中的命名冲突；再次，访问局部变量比访问全局变量更快；最后，局部变量会随着其作用域的结束儿消失，从而使得垃圾收集器能够将其释放。<br>鉴于局部变量优于全局变量，有些人就认为Lua语言应该把变量默认视为局部的。然而，把变量默认视为局部的也有一些列的问题。一个更好的解决办法并不是把变量默认视为局部变量，而是在使用变量前必须先声明。Lua语言的发型版中有一个用于全局变量检查的模块strict.lua，如果视图在一个函数中对不存在的全局变量赋值或者使用不存在的全局变量，将会抛出异常。<br>局部变量的声明可以包含初始值，其赋值规则与常见的多重赋值一样：多余的值被丢弃，多余的变量被赋值为nil。如果一个声明中没有赋值，则变量会被初始化为nil：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> a , b = <span class="number">1</span> , <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> a &lt; b <span class="keyword">then</span></span><br><span class="line">	<span class="built_in">print</span>(a)			<span class="comment">-- 1</span></span><br><span class="line">	<span class="keyword">local</span> a 			<span class="comment">-- &#x27;= nil&#x27; 是隐式的</span></span><br><span class="line">	<span class="built_in">print</span>(a)			<span class="comment">-- nil</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(a,b)				<span class="comment">-- 1, 10</span></span><br></pre></td></tr></table></figure>
<p>Lua语言中有一种常见的用法：<br><code>local foo = foo</code><br>这段代码声明了一个局部变量foo，然后用全局变量foo对其赋值。这个用法在需要提高对foo的访问速度时很有用。当其他函数改变了全局变量foo的值，而代码段又需要保留foo的原始值时，这个用法也很有用，尤其是在进行运行时动态替换时。即使其他代码把print动态替换成了而其他函数，在<code>local print = print</code>语句之前的所有代码使用的还都是原先的print函数。<br>有些人认为在代码块的中间位置声明变量时一个不好的习惯，实际上恰恰相反，我们很少会在不赋初始值的情况下声明变量，在需要时才声明变量可以避免漏掉初始化这个变量。此外，通过缩小变量的作用域还有助于提高代码的可读性。</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua连续教程之Lua字符串</title>
    <url>/57396.html</url>
    <content><![CDATA[<p>字符串用于文本。Lua语言中的字符串即可以表示单个字符，也可以表示一整本书籍。在Lua语言中，操作100K或者1M个字母组成的字符串的程序也很常见。</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>Lua语言中的字符串是不可变值。我们不能像在C语言中那样直接改变某个字符串中的某个字符，但是我们可以通过创建一个新的字符串的方式来达到修改的目的。例如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&quot;one string&quot;</span></span><br><span class="line">b = <span class="built_in">string</span>.<span class="built_in">gsub</span>(a,<span class="string">&quot;one&quot;</span>,<span class="string">&quot;another&quot;</span>) <span class="comment">--改变字符串中的某些部分</span></span><br><span class="line"><span class="built_in">print</span>(a)				<span class="comment">--one string</span></span><br><span class="line"><span class="built_in">print</span>(b)				<span class="comment">--another string</span></span><br></pre></td></tr></table></figure>
<p>像Lua语言中的其他对象一样，Lua语言中的字符串也是自动内存管理的对象之一。这意味着Lua语言会负责字符串的分配和释放，开发人员无须关注。<br>可以使用长度操作符(#)获取字符串的长度：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="built_in">print</span>(#a)			<span class="comment">--5</span></span><br><span class="line"><span class="built_in">print</span>(#<span class="string">&quot;good bye&quot;</span>)  <span class="comment">--8</span></span><br></pre></td></tr></table></figure>
<p>该操作符返回字符串占用的字节数，在某些编码中，这个值可能与字符串中字符的个数不同。<br>我们可以使用连接操作符<code>..</code>（两个点）来进行字符串连接。如果操作数中存在数值，那么Lua语言会先把数值转换成字符串：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt; <span class="string">&quot;Hello&quot;</span> .. <span class="string">&quot;World&quot;</span> 		<span class="comment">-- Hello World</span></span><br><span class="line">&gt; <span class="string">&quot;result is &quot;</span> .. <span class="number">3</span>			<span class="comment">-- result is 3</span></span><br></pre></td></tr></table></figure>
<p>在某些语言中，字符串连接使用的是加号，但实际上3+5和3..5是不一样的。<br>应该注意，在Lua语言中，字符串是不可变量。字符串连接总是创建一个新字符串，而不会改变原来作为操作数的字符串：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt; a = <span class="string">&quot;Hello&quot;</span></span><br><span class="line">&gt; a .. <span class="string">&quot;World&quot;</span>      <span class="comment">-- Hello World</span></span><br><span class="line">&gt; a 				<span class="comment">-- Hello</span></span><br></pre></td></tr></table></figure>

<h2 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h2><p>我们可以使用一对双引号或单引号来声明字符串常量：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&quot; a line &quot;</span></span><br><span class="line">b = <span class="string">&#x27; another line&#x27;</span></span><br></pre></td></tr></table></figure>
<p>使用双引号和单引号声明字符串是等价的。它们两者唯一的区别在于，使用双引号声明的字符串中出现单引号时，单引号可以不用转义；使用单引号声明的字符串中出现双引号时，双引号可以不用转义。<br>Lua语言中的字符串支持下列C语言风格的转义字符：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">\a			响铃（bell）</span><br><span class="line">\b			退格（back space）</span><br><span class="line">\f			换页（form feed）</span><br><span class="line">\n			换行（newline）</span><br><span class="line">\r			回车（carriage <span class="keyword">return</span>）</span><br><span class="line">\t			水平制表符（horizontal tab）</span><br><span class="line">\v			垂直制表符（vertical tab）</span><br><span class="line">\\			反斜杠（backslash）</span><br><span class="line">\<span class="string">&quot;			双引号（double quote）</span></span><br><span class="line"><span class="string">\&#x27;			单引号（single quote）</span></span><br></pre></td></tr></table></figure>
<p>下述示例展示了转义字符的使用方法：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt;<span class="built_in">print</span>(<span class="string">&quot;one line \n next line \n\&quot;in quotes\&quot;,&#x27;in quotes&#x27; &quot;</span>)</span><br><span class="line">one line</span><br><span class="line"><span class="built_in">next</span> line</span><br><span class="line"><span class="string">&quot;in quotes&quot;</span> , <span class="string">&#x27;in quotes&#x27;</span></span><br><span class="line">&gt;<span class="built_in">print</span>(<span class="string">&#x27;a backslash inside quotes:\&#x27; \\\ &#x27;</span><span class="string">&#x27;)</span></span><br><span class="line"><span class="string">a backslash inside quotes: &#x27;</span>\<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&gt;print(&quot;a simpler way: &#x27;</span>\\<span class="string">&#x27; &quot;)</span></span><br><span class="line"><span class="string">a simpler way: &#x27;</span>\<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>
<p>在字符串中，还可以通过转义\add和\xhh来声明字符。其中，add是由最多3个十进制数字组成的序列，hh是由两个且必须是两个十六进制数字组成的序列。</p>
<h2 id="长字符串-多行字符串"><a href="#长字符串-多行字符串" class="headerlink" title="长字符串&#x2F;多行字符串"></a>长字符串&#x2F;多行字符串</h2><p>像长注释&#x2F;多行注释一样，可以使用一对双括号来声明长度字符串&#x2F;多行字符串常量。被方括号括起来的内容可以包含很多行，并且内容中的转义序列不会被转义。此外，如果多行字符串中的第一个字符是换行符，那么这个换行符会被忽略。多行字符串在声明包含大段代码的字符串时非常方便，例如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">page = <span class="string">[[</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">	&lt;title&gt; An HTML Page&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">	&lt;a href = &quot;http://www.lua.org&quot;&gt;Lua&lt;a&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">]]</span></span><br></pre></td></tr></table></figure>
<p>有时字符串中可能有类似a &#x3D; b[c[i]]这样的内容，或者，字符串中可能有被注释掉的代码。为了应对这些情况，可以在两个左方括号之间加上任意数量的等号，如[&#x3D;&#x3D;&#x3D;[。这样，字符串常量只有在遇到了包含了相同数量等号的两个右括号时才会结束。Lua语言的语法扫描器会忽略所含等号数量不相同的方括号。通过选择恰当数量的等号，就可以在无须修改原字符串的情况下声明任意的字符串常量了。<br>对注释而言，这种机制也同样有效。例如，我们可以使用–[&#x3D;和]&#x3D;]来进行长注释，从而降低了对内部已经包含注释的代码进行注释的难度。<br>当代码中需要使用常量文本时，使用长字符串是一种理想的选择。但是，对于非文本的常量我们不应该滥用长字符串。虽然Lua语言中的字符串常量可以包含任意字节，但是滥用这个特行并不明智。同时，像”\r\n”一样的EOF序列在被读取的时候可能会被归一化成”\n”。作为替代方案，最好就是把这些可能引起歧义的二进制数据用十进制或十六进制的数值转义系列进行表示，例如”\x13\x01\xA1\xBB”。不过，由于这种转义表示行程的字符串往往很长，所以对于长字符串来说仍可能是个问题。针对这种情况，从Lua5.2开始引入了转义序列\z，该转义符会跳过其后的所有空白字符，直到遇到第一个非空白字符。下列中演示了该转义符的使用方法：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">data = <span class="string">&quot;\x00\x01\x02\x03\x04\x05\x06\x07\z</span></span><br><span class="line"><span class="string">		\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F&quot;</span></span><br></pre></td></tr></table></figure>
<p>第一行最后的\z会跳过其后的EOF和第二行的制表符，因此最终得到的字符串中，\x08实际上是紧跟着\x07的。</p>
<h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><p>Lua语言在运行时提供了数值和字符串之间的自动转换。针对字符串的所有算术操作会尝试将字符串转换为数值。Lua语言不仅仅在算术操作时进行这种强制类型转换，还会在任何需要数值的情况下进行，例如函数math.sin的参数。<br>相反，当Lua语言发现在需要字符串的地方出现了数值时，它就会把数值转换为字符串：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">10</span> .. <span class="number">20</span> )  	<span class="comment">--1020</span></span><br></pre></td></tr></table></figure>
<p>当在数值后紧接着使用字符串连接时，必须使用空格将它们分开，否则Lua语言会把第一个点当成小数点。<br>很多人认为自动强制类型转换算不上是Lua语言中的一项好设计。作为原则之一，建议最好不要完全寄希望于自动强制类型转换。虽然在某些场景下这种机制很便利，但同时也给语言和适用这种机制的程序带来了复杂性。<br>作为这种”二类状态”的表现之一，Lua5.3没有实现强制类型转换娱整型的集成，而是采用了另一种更简单和快速的实现方式：算术运算的规则就是只有在两个操作数都是整型值时结果才是整型。因此，由于字符串不是整型值，所以任何有字符串参与的算术运算都会被当做浮点运算处理：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt;<span class="string">&quot;10&quot;</span> + <span class="number">1</span>          <span class="comment">--11.0</span></span><br></pre></td></tr></table></figure>
<p>如果需要显示地将一个字符串转换成数值，那么可以使用函数tonumber。当这个字符串的内容不能表示为有效数字时该函数返回nil；否则，该函数就按照Lua语法扫描器的规则返回对应的整型值或浮点类型值：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt; tounmber(<span class="string">&quot; -3 &quot;</span>)			<span class="comment">-- -3</span></span><br><span class="line">&gt; tounmber(<span class="string">&quot; 10e4 &quot;</span>)		<span class="comment">-- 100000.0</span></span><br><span class="line">&gt; tounmber(<span class="string">&quot; 10e &quot;</span>)         <span class="comment">-- nil (not a valid number)</span></span><br><span class="line">&gt; tounmber(<span class="string">&quot; 0x1.3p - 4&quot;</span>)   <span class="comment">-- 0.07421875</span></span><br></pre></td></tr></table></figure>
<p>默认情况下，函数tonumber使用的是十进制，但是也可以指明使用二进制到三十六进制之间的任意进制：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt; tounmber(<span class="string">&quot;100101&quot;</span>, <span class="number">2</span>)			<span class="comment">-- 37</span></span><br><span class="line">&gt; tounmber(<span class="string">&quot;fff&quot;</span> ,<span class="number">16</span>)			<span class="comment">-- 4095</span></span><br><span class="line">&gt; tounmber(<span class="string">&quot;-ZZ&quot;</span>,<span class="number">36</span>)      	<span class="comment">-- -1295</span></span><br><span class="line">&gt; tounmber(<span class="string">&quot;987&quot;</span>,<span class="number">8</span>)   			<span class="comment">-- nli</span></span><br></pre></td></tr></table></figure>
<p>在最后一行，对于制定的进制而言，传入的字符串是一个无效值，因此函数tonumber返回nil。<br>调用函数tonumber可以将数值转换成字符串：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">tostring</span>(<span class="number">10</span>) == <span class="string">&quot;10&quot;</span>)   <span class="comment">--true</span></span><br></pre></td></tr></table></figure>
<p>上述的这种转换总是有效，但我们需要记住，使用这种转换时并不能控制输出字符串的格式。</p>
<h2 id="字符串标准库"><a href="#字符串标准库" class="headerlink" title="字符串标准库"></a>字符串标准库</h2><p>Lua语言解释器本身处理字符串的功能是十分有限的。一个程序能够创建字符串、连接字符串、比较字符串和获取字符串的长度，但是，它并不能提取字符串的子串或检视字符串的内容。Lua语言处理字符串的完整能力来自其字符串标准库。<br>字符串标准库中的一些函数非常简单：函数string.len(s)返回字符串s的长度，等价于#s。函数string.rep(s,n)返回将字符串s重复n遍的结果。可以通过调用string.rep(“a”,$2^{20}$)创建一个1MB大小的字符串。函数string.reverse用于字符串翻转。函数string.lower(s)返回一份s的副本，其中所有的大写字母都被转换成小写字母，而其他字符则保持不变。函数string.upper与之相反，该函数会将小写字母转换成大写字母。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">string</span>.<span class="built_in">rep</span>(<span class="string">&quot;abc&quot;</span>,<span class="number">3</span>)			<span class="comment">-- 游戏开发abcabc</span></span><br><span class="line">&gt; <span class="built_in">string</span>.<span class="built_in">reverse</span>(<span class="string">&quot;A Long Line!&quot;</span>)	<span class="comment">-- !eniL gnoL A</span></span><br><span class="line">&gt; <span class="built_in">string</span>.<span class="built_in">lower</span>(<span class="string">&quot;A Long Line!&quot;</span>)		<span class="comment">-- a long line!</span></span><br><span class="line">&gt; <span class="built_in">string</span>.<span class="built_in">upper</span>(<span class="string">&quot;A Long Line!&quot;</span>)		<span class="comment">-- A LONG LINE!</span></span><br></pre></td></tr></table></figure>
<p>作为一种典型的应用，我们可以使用如下代码在忽略大小写差异的原则下比较两个字符串：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span>.<span class="built_in">lower</span>(a) &lt; <span class="built_in">string</span>.<span class="built_in">lower</span>(b)</span><br></pre></td></tr></table></figure>
<p>函数string.sub(s,i,j)从字符串s中提取第i个到第j个字符。该函数也支持负数索引，负数索引从字符串的结尾开始计数：索引-1代表字符串的最后一个字符，索引-2代表倒数第二个字符，依此类推。这样，对字符串s调用函数string.sub(s,1,j)得到的是字符串s中长度为j的前缀，调用string.sub(s,j,-1)得到的是字符串s从第j个字符开始的后缀，调用string.sub(s,2,-2)返回的是去掉字符串s中第一个和最后一个字符的结果。<br>请注意，Lua语言中的字符串是不可变的。和Lua语言中的所有其他函数一样，函数string.sub不会改变原有字符串的值，它只会返回一个新字符串。一种常见的误解是以为string.sub(s,2,-2)返回的是修改后的s。如果需要修改原字符串，那么必须把心的值赋值给它：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">s = <span class="built_in">string</span>.<span class="built_in">sub</span>(s,<span class="number">2</span>,<span class="number">-2</span>)</span><br></pre></td></tr></table></figure>
<p>函数string.char 和string.byte用于转换字符串及其内部数值表示。函数string.char接收零个或多个证书作为参数，然后将每个整数转换成对应的字符，最后返回由这些字符连接而成的字符串。函数string.byte(s,i)返回字符串s中第i 个字符的内部数值表示，该函数的第二个参数是可选的。调用string.byte(s)返回字符串s中第一个字符的内部数值表示。在下面例子中，假定字符串是用ASCII表示的：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">char</span>(<span class="number">97</span>))			<span class="comment">-- a</span></span><br><span class="line">i = <span class="number">99</span>; <span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">char</span>(i,i+<span class="number">7</span>,i+<span class="number">2</span>))		<span class="comment">-- cde</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">byte</span>(<span class="string">&quot;abc&quot;</span>))			<span class="comment">-- 97</span></span><br><span class="line">pring(<span class="built_in">string</span>.<span class="built_in">byte</span>(<span class="string">&quot;abc&quot;</span> , <span class="number">2</span>))		<span class="comment">-- 98</span></span><br><span class="line">pring(<span class="built_in">string</span>.<span class="built_in">byte</span>(<span class="string">&quot;abc&quot;</span> , <span class="number">-1</span>))		<span class="comment">-- 99</span></span><br></pre></td></tr></table></figure>
<p>在最后一行中，使用负数索引来访问字符串的最后一个字符。<br>调用string.byte(s,i,j)返回索引i到j之间的所有字符的数字表示：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">byte</span>(<span class="string">&quot;abc&quot;</span>,<span class="number">1</span>,<span class="number">2</span>)     <span class="comment">-- 97 98</span></span><br></pre></td></tr></table></figure>
<p>一种常见的写法是{string.byte(s,1,-1)}，该表达式会创建一个由字符串s中的所有字符代码组成的表。<br>函数string.format是用于进行字符串格式化和将数值输出为字符串的强大工具，该函数会返回一个参数的副本，其中的每一个指示符都会被替换为使用对应格式化后的对应参数。格式化字符串中的指示符与C语言中函数printf的规则类似，一个指示符由一个百分号和一个代表格式化方式的字母组成：d代表一个十进制整数、x代表一个十六进制整数、f代表一个浮点数、s代表字符串等等。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;x = %d y = %d&quot;</span>,<span class="number">10</span> ,<span class="number">20</span>)			<span class="comment">-- x = 10 y = 20</span></span><br><span class="line">&gt; <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;x = %x&quot;</span>, <span class="number">200</span>)					<span class="comment">-- x = c8</span></span><br><span class="line">&gt; <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;x = 0x%x&quot;</span>, <span class="number">200</span>)				<span class="comment">-- x = 0xC8</span></span><br><span class="line">&gt; <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;x = %f&quot;</span>, <span class="number">200</span>)					<span class="comment">-- x = 200.000000</span></span><br><span class="line">&gt; tag, title = <span class="string">&quot;h1&quot;</span>, <span class="string">&quot;a title&quot;</span></span><br><span class="line">&gt; <span class="built_in">string</span>.foramt(<span class="string">&quot;&lt;%s&gt;%s&lt;/%s&gt;&quot;</span>,tag,title,tag)	<span class="comment">-- &lt;h1&gt; a title&lt;/h1&gt;</span></span><br></pre></td></tr></table></figure>
<p>在百分号和字母之间可以包含用于控制格式细节的其他选项。例如，可以指定一个浮点数中小数的位数：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.foramt(<span class="string">&quot;pi = %.4f&quot;</span>, <span class="built_in">math</span>.<span class="built_in">pi</span>))			<span class="comment">-- pi = 3.1416</span></span><br><span class="line">d = <span class="number">5</span>; m = <span class="number">11</span>; y = <span class="number">1990</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%02d/%02d/%04d&quot;</span>, d, m, y))		<span class="comment">-- 05/11/1990</span></span><br></pre></td></tr></table></figure>
<p>在上例中，%.4f表示小数点后保留4位小数；%02d表示一个十进制数至少由两个数字组成，不足两个数字的用0补齐，而%2d则表示用空格来补齐。关于这些指示符的完整描述可以参考C语言printf函数的相关文档。<br>可以使用冒号操作符像调用字符串的一个方法那样调用字符串中标准库中的所有函数。例如，string.sub(s,i,j)可以重写成s:sub(i,j)，string.upper(s)可以重写成s:supper()。<br>字符串标准库还包括了几个基于模式匹配的函数。函数string.find用于在指定的字符串中进行模式搜索：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">string</span>.<span class="built_in">find</span>(<span class="string">&quot;hello world&quot;</span> , <span class="string">&quot;wor&quot;</span>)		<span class="comment">-- 7 9</span></span><br><span class="line">&gt; <span class="built_in">string</span>.<span class="built_in">find</span>(<span class="string">&quot;hello world&quot;</span> , <span class="string">&quot;war&quot;</span>)		<span class="comment">-- nil</span></span><br></pre></td></tr></table></figure>
<p>如果该函数在指定的字符串中找到了匹配的模式，则返回模式的开始和结束位置，否则返回nil。函数string.gsub(Global SUBstitution)则把所有匹配的模式用另一个字符串替换：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">string</span>.<span class="built_in">gsub</span>(<span class="string">&quot;hello world&quot;</span>, <span class="string">&quot;l&quot;</span> , <span class="string">&quot;.&quot;</span>)			<span class="comment">-- he..o wor.d 3</span></span><br><span class="line">&gt; <span class="built_in">string</span>.<span class="built_in">gsub</span>(<span class="string">&quot;hello world&quot;</span>, <span class="string">&quot;ll&quot;</span> , <span class="string">&quot;..&quot;</span>)       <span class="comment">-- he..o world 1</span></span><br><span class="line">&gt; <span class="built_in">string</span>.<span class="built_in">gsub</span>(<span class="string">&quot;hello world&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;.&quot;</span>)			<span class="comment">-- hello world 0</span></span><br></pre></td></tr></table></figure>
<p>该函数还会在第二个返回值中返回发生替换的次数。</p>
<h2 id="Unicode编码"><a href="#Unicode编码" class="headerlink" title="Unicode编码"></a>Unicode编码</h2><p>UTF-8是Web环境中用于Unicode的主要编码之一。由于UTF-8编码娱ASCII编码部分兼容，所以UTF-8对于Lua来说是一种理想的编码方式。这种兼容性保证了用于ASCII字符串的一些字符操作技巧无须修改就可以用于UTF-8字符串。<br>UTF-8使用变长的多个字节来编码一个Unicode字符。例如，UTF-8编码使用一个字节的65来代表A，使用两个字节的215-144代表希伯来语字符Aleph。UTF-8使用一个字节表示所有ASCII范围内的字符（小于128）。对于其他字符，则使用字节序列表示，其中第一个字节的范围时[194,244]，而后续的字节范围时[128,191]。更准确地说，对于两个字节组成的序列，第一个字节的范围是[194,223]；对于三个字节组成的序列来说，第一个字节的范围是[224,239]；对于四个字节组成的序列来说，第一个字节的范围是[240,224]，这些范围互相之间均不重叠。这种特点保证了任意字符对应的字节序列不会在其他字符对应的字节序列中出现。特别地，一个小于128的字节永远不会在多字节序列中，它只会代表与之对应的ASCII字符。<br>Lua语言中的一些机制对UTF-8字符串来说同样“有效”。由于Lua语言使用8个字节来编码字符，所以可以像操作其他字符串一样读写和存储UTF-8字符串。字符串常量也可以包含UTF-8数据。字符串连接UTF-8字符串同样适用。对字符串比较会按照Unicode编码中的字符代码顺序进行。<br>Lua语言的操作系统库和输入输出库是与对应系统之间的主要接口，所以它们是否支持UTF-8取决于对应的操作系统。例如，在Linux操作系统下文件名要使用UTF-8编码，而在Windows操作系统下文件名使用UTF-16编码。因此，如果要在Windows操作系统中处理Unicode文件名，要么使用额外的库，要么就修改Lua语言的标准库。</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua教程之Lua打乱数组排序</title>
    <url>/52859.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">randomTable</span><span class="params">(_table, _num)</span></span> </span><br><span class="line">    <span class="keyword">local</span> _result = &#123;&#125;</span><br><span class="line">    <span class="keyword">local</span> _index = <span class="number">1</span></span><br><span class="line">    <span class="keyword">local</span> _num = _num <span class="keyword">or</span> #_table</span><br><span class="line">    <span class="keyword">while</span> #_table ~= <span class="number">0</span> <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">local</span> ran = <span class="built_in">math</span>.<span class="built_in">random</span>(<span class="number">0</span>, #_table)</span><br><span class="line">        <span class="keyword">if</span> _table[ran] ~= <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">            _result[_index] = _table[ran]</span><br><span class="line">            <span class="built_in">table</span>.<span class="built_in">remove</span>(_table,ran)</span><br><span class="line">            _index = _index + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> _index &gt; _num <span class="keyword">then</span> </span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">end</span> </span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> _result</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua数据文件和序列化</title>
    <url>/7981.html</url>
    <content><![CDATA[<p>在处理数据文件时，写数据通常比读数据简单很多。当向一个文件中写时，我们拥有绝对的控制权；但是，当从一个文件中读时，我们并不知道会读什么东西。一个健壮的程序除了能够处理一个合法文件中所包含的所有类型的数据外，还应该能够优雅地处理错误的文件。因此，编写一个健壮的处理输入的程序总是比较困难的。</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>Lua语言自1993年发布以来，其主要用途之一就是描述数据。在那个年代，主要的文本数据描述语言之一是SGML。对于很多人来说，SGML既臃肿又复杂。在1998年，有些人将其简化成XML，但以我们的眼光看仍然臃肿又复杂。有些人跟我们的观点一直，进而在2001年开发了JSON。JSON基于JavaScript，类似于一种精简过的Lua语言数据文件。一方面，JSON的一大优势在于它是国际标准，包括Lua语言在内的多种语言都具有操作JSON文件的标准库。另一方面，Lua语言数据文件的读取更加容易和灵活。<br>使用一门全功能的编程语言来描述数据确实非常灵活，但也会带来两个问题。问题之一在于安全性，这是因为“数据”文件能够肆意地在我们的程序中运行。我们可以通过沙盒中运行程序来解决这个问题。<br>另一个问题是性能问题。Lua语言不仅运行得快，编译也很快。例如，在笔者的新机器上，Lua5.3可以在4秒以内，占用240MB内存，完成1000万条赋值语句的读取、编译和运行。作为对比，Perl5.18需要21秒、占用6GB内存，Python2.7和Python3.4直接崩溃，Node.js0.10.25在运行8秒后抛出“内存溢出”异常，Rhino1.7在运行6分钟后也抛出了“内存溢出”异常。</p>
<h2 id="数据文件"><a href="#数据文件" class="headerlink" title="数据文件"></a>数据文件</h2><p>对于文件格式来说，表构造器提供了一种有趣的替代方法。只需在写入数据时做一点额外的工作，就能使得读数据变得容易。这种技巧就是将数据文件写成Lua代码，当这些代码运行时，程序也就把数据重建了。使用表构造器时，这些代码段看上去会非常像是一个普通的数据文件。<br>下面通过一个示例来进一步展示处理数据文件的方式。如果数据文件使用的是诸如CSV或XML等预先定义好的格式，那么我们能够选择的方法不多。不过，如果处理的是处于自身需求而创建的数据文件，那么就可以将Lua语言的构造器用于格式定义。此时，我们把每条数据记录表示为一个Lua构造器。这样，原来类似</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">Donald E. Knuth,Literate Programming,CSLI,<span class="number">1992</span></span><br><span class="line">Jon Bentley,More Programming Pearls, Addison-Wesley,<span class="number">1990</span></span><br></pre></td></tr></table></figure>
<p>的数据文件就可以改为：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">Entry&#123;<span class="string">&quot;Donald E. Knuth&quot;</span>,<span class="string">&quot;Literate Programming&quot;</span>,<span class="string">&quot;CSLI&quot;</span>,<span class="number">1992</span>&#125;</span><br><span class="line">Entry&#123;<span class="string">&quot;Jon Bentley&quot;</span>,<span class="string">&quot;More Programming Pearls&quot;</span>,<span class="string">&quot;Addison-Wesley&quot;</span>,<span class="number">1990</span>&#125;</span><br></pre></td></tr></table></figure>
<p>请注意，Entry{code}与Entry({code})是相同的，后者以表作为唯一的参数来调用函数Entry。因此，上面这段数据也是一个Lua程序。当需要读取该文件时，我们只需要定义一个合法的Entry，然后运行这个程序即可。例如，以下代码用于计算某个数据文件中数据条目的个数：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> count = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Entry</span><span class="params">()</span></span> count = count + <span class="number">1</span> <span class="keyword">end</span></span><br><span class="line"><span class="built_in">dofile</span>(<span class="string">&quot;data&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;number of entries:&quot;</span> .. count)</span><br></pre></td></tr></table></figure>
<p>下面的程序获取某个数据文件中所有作者的姓名，然后打印出这些姓名：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> authors = &#123;&#125;		<span class="comment">-- 保存作者姓名的集合</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Entry</span> <span class="params">(b)</span></span> authors[b[<span class="number">1</span>]] = <span class="literal">true</span> <span class="keyword">end</span></span><br><span class="line"><span class="built_in">dofile</span>(<span class="string">&quot;data&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> <span class="built_in">pairs</span>(authors) <span class="keyword">do</span> <span class="built_in">print</span>(name) <span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>请注意，上述的代码段中使用了事件驱动的方式：函数Entry作为一个回调函数会在函数dofile处理数据文件中的每个条目时被调用。<br>当文件的大小并不是太大时，可以使用键值对的表示方法：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">Entry&#123;</span><br><span class="line">	author = <span class="string">&quot;Donald E. Knuth&quot;</span>,</span><br><span class="line">	title = <span class="string">&quot;Literate Programming&quot;</span>,</span><br><span class="line">	publisher = <span class="string">&quot;CSLI&quot;</span>,</span><br><span class="line">	year = <span class="number">1992</span></span><br><span class="line">&#125;</span><br><span class="line">Entry&#123;</span><br><span class="line">	author = <span class="string">&quot;Jon Bentley&quot;</span>,</span><br><span class="line">	title = <span class="string">&quot;More Programming Pearls&quot;</span>,</span><br><span class="line">	year = <span class="number">1990</span>,</span><br><span class="line">	pyblisher = <span class="string">&quot;Addison-Wesley&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种格式是所谓的自描述数据格式，其中数据的每个字段都具有一个对应其含义的简略描述。自描述数据比CSV或其他压缩格式的可读性更好；同时，当需要修改时，自描述数据也已于手工编辑；此外，自描述数据还允许我们在不改变数据文件的情况下对基本数据格式进行细微的修改。例如，当我们想要增加一个新字段时，只需要对读取数据文件的程序稍加修改，使其在新字段不存在时使用默认值。<br>此时，字段的次序就无关紧要了。即使有些记录没有作者字段，我们也只需要修改Entry函数：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Entry</span><span class="params">(b)</span></span></span><br><span class="line">	authors[b.author <span class="keyword">or</span> <span class="string">&quot;unknown&quot;</span>] = <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>我们常常需要将某些数据序列化&#x2F;串行化，即将数据转换为字节流动或字符流，以便将其存储到文件中或者通过网络传输。我们也可以将序列化后的数据表示为Lua代码，当这些代码运行时，被序列化的数据就可以在读取程序中得到重建。<br>通常，如果想要恢复一个全局变量的值，那么可能会使用形如varname &#x3D; exp这样的代码。其中，exp是用于创建这个值的Lua代码，而varname是一个简单的标识符。接下来，让我们学习如何编写创建值的代码。例如，对于一个数值类型而言，可以简单地使用如下代码：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">serialize</span><span class="params">(o)</span></span></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">type</span>(o) == <span class="string">&quot;number&quot;</span> <span class="keyword">then</span></span><br><span class="line">		<span class="built_in">io</span>.<span class="built_in">write</span>(<span class="built_in">tostring</span>(o))</span><br><span class="line">	<span class="keyword">else</span> other cases</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>不过，用十进制格式保存浮点数可能损失精度。此时，可以利用十六进制格式来避免这个问题，使用格式”%a”可以保留被读取浮点型树洞额原始精度。此外，由于从Lua5.3开始就对浮点类型和整数类型进行了区分，因此通过使用正确的子类型就能够恢复它们的值：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> fmt = &#123;integer = <span class="string">&quot;%d&quot;</span>,float = <span class="string">&quot;%a&quot;</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">serialize</span><span class="params">(o)</span></span></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">type</span>(o) == <span class="string">&quot;number&quot;</span> <span class="keyword">then</span></span><br><span class="line">		<span class="built_in">io</span>.<span class="built_in">write</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(fmt[<span class="built_in">math</span>.<span class="built_in">type</span>(o)],o))</span><br><span class="line">	<span class="keyword">else</span> other cases</span><br></pre></td></tr></table></figure>
<p>对于字符串类型的值，最简单的序列化方式形如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">type</span>(o) == <span class="string">&quot;string&quot;</span> <span class="keyword">then</span></span><br><span class="line">	<span class="built_in">io</span>.<span class="built_in">write</span>(<span class="string">&quot;&#x27;&quot;</span>,o,<span class="string">&quot;&#x27;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>不过，字符串包含特殊字符，那么结果就会是错误的。<br>也许有人会告诉读者通过修改引号来解决这个问题：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">type</span>(o) == <span class="string">&quot;string&quot;</span> <span class="keyword">then</span></span><br><span class="line">	<span class="built_in">io</span>.<span class="built_in">write</span>(<span class="string">&quot;[[&quot;</span>,o,<span class="string">&quot;]]&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>这里，要当心代码诸如！如果某个恶意用户设法使读者的程序保存了形如<code>&quot;]]..os.execute(&#39;rm *&#39;)..[[&quot;</code>这样的内容，那么最终被保存下来的代码将变成：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">varname = <span class="string">[[]]</span> .. <span class="built_in">os</span>.<span class="built_in">execute</span>(<span class="string">&#x27;rm *&#x27;</span>)..<span class="string">[[]]</span></span><br></pre></td></tr></table></figure>
<p>一旦这样的“数据”被加载，就会导致意想不到的后果。<br>我么可以使用一种安全的方法来括住一个字符串，那就是使用函数string.format的”%q”选项，该选项被设计为一种能够让Lua语言安全地反序列化字符串的方式来序列化字符串，它使用双引号括住字符串并正确地转义其中的双引号和换行符等其他字符。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;a &quot;problematic&quot; \\ string&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%q&quot;</span>,a))		<span class="comment">--&quot;a \&quot;problematic\&quot; \\ string&quot;</span></span><br></pre></td></tr></table></figure>
<p>通过使用这个特行，函数serialize将变为：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">serialize</span><span class="params">(o)</span></span></span><br><span class="line">	it <span class="built_in">type</span>(o) == <span class="string">&quot;number&quot;</span> <span class="keyword">then</span></span><br><span class="line">		<span class="built_in">io</span>.<span class="built_in">write</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(fmt[<span class="built_in">math</span>.<span class="built_in">type</span>(o)],o))</span><br><span class="line">	<span class="keyword">elseif</span> <span class="built_in">type</span>(o) == <span class="string">&quot;string&quot;</span> <span class="keyword">then</span></span><br><span class="line">		<span class="built_in">io</span>.<span class="built_in">write</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%q&quot;</span>,o))</span><br><span class="line">	<span class="keyword">else</span> other cases</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>Lua5.3.3对格式选项”%q”进行了扩展，使其也可以用于数值、nil和Boolean类型，进而使它们能够正确地被序列化和反序列化。因此，从Lua5.3.3开始，我们还能够再对函数serialize进行进一步的简化和发展：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">serialize</span><span class="params">(o)</span></span></span><br><span class="line">	<span class="keyword">local</span> t = <span class="built_in">type</span>(o)</span><br><span class="line">	<span class="keyword">if</span> t == <span class="string">&quot;number&quot;</span> <span class="keyword">or</span> t == <span class="string">&quot;string&quot;</span> <span class="keyword">or</span> t == <span class="string">&quot;boolean&quot;</span> <span class="keyword">or</span> t == <span class="string">&quot;nil&quot;</span> <span class="keyword">then</span></span><br><span class="line">		<span class="built_in">io</span>.<span class="built_in">write</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%q&quot;</span>,o))</span><br><span class="line">	<span class="keyword">else</span> other cases</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>另一种保存字符串的方式是使用主要用于长字符串的<code>[=[...]=]</code>。不过，这种方式主要是为不用改变字符串常量的手写代码提供的。在自动生成的代码中，像函数string.format那样使用”%q”选项来转义有问题的字符更加简单。<br>尽管如此，如果要在自动生成的代码中使用<code>[=[...]=]</code>，那么还必须注意几个细节。首先，我们必须选择恰当数量的等号，这个恰当的数量应比原字符串中出现的最长等号序列的长度大1.由于在字符串中出现长等号序列很常见，因此我们应该把注意力集中在以方括号开头的等号序列上。其次，Lua语言总是会忽略长字符串开头的换行符，要解决这个问题可以通过一种简单方式，即总是在字符串开头多增加一个换行符。</p>
<blockquote>
<p>示例： 引用任意字符串常量</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quote</span><span class="params">(s)</span></span></span><br><span class="line">	<span class="comment">--寻找最长等号序列的长度</span></span><br><span class="line">	<span class="keyword">local</span> n = <span class="number">-1</span></span><br><span class="line">	<span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">string</span>.<span class="built_in">gmatch</span>(s,<span class="string">&quot;]=*&quot;</span>) <span class="keyword">do</span></span><br><span class="line">		n = <span class="built_in">math</span>.<span class="built_in">max</span>(n,#w - <span class="number">1</span>)     <span class="comment">-- -1用于移除&#x27;]&#x27;</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">-- 生成一个具有&#x27;n&#x27;+1个等号的字符串</span></span><br><span class="line">	<span class="keyword">local</span> eq = <span class="built_in">string</span>.<span class="built_in">rep</span>(<span class="string">&quot;=&quot;</span>,n + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">-- 创建被引起来的字符串</span></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot; [%s[\n%s]%s &quot;</span> , eq,s,eq)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>该函数可以接收任意一个字符串，并返回按长字符串对其进行格式化后的结果。函数gmatch创建一个遍历字符串s中所有匹配模式’]&#x3D;*’之处的迭代器（即右方括号后跟零个或多个等号）。在每个匹配的地方，循环会用当前所遇到的最大等号数量更新变量n。循环结束后，使用函数string.rep重复等号n+1次，也就是生成一个比原字符串中出现的最长等号序列的长度大1的等号序列。最后，使用函数strig.format将s放入一对具有正确数量等号的括号中，并在字符串s的开头插入一个换行符。</p>
<h3 id="保存不带循环的表"><a href="#保存不带循环的表" class="headerlink" title="保存不带循环的表"></a>保存不带循环的表</h3><p>接下来，更难一点的需求是保存表。保存表有几种方法，选用哪种方法取决于对具体表结构的假设，但没有一种算法使用与所有的情况。对于简单的表来说，不仅可以使用更简单的算法，而且输出也会更简洁和清晰。</p>
<blockquote>
<p>示例：不使用循环序列化表</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">serialize</span><span class="params">(o)</span></span></span><br><span class="line">	<span class="keyword">local</span> t = <span class="built_in">type</span>(o)</span><br><span class="line">	<span class="keyword">if</span> t == <span class="string">&quot;number&quot;</span> <span class="keyword">or</span> t == <span class="string">&quot;string&quot;</span> <span class="keyword">or</span> t == <span class="string">&quot;boolean&quot;</span> <span class="keyword">or</span> t == <span class="string">&quot;nil&quot;</span> <span class="keyword">then</span></span><br><span class="line">		<span class="built_in">io</span>.<span class="built_in">write</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%q&quot;</span>,o))</span><br><span class="line">	<span class="keyword">elseif</span> t == <span class="string">&quot;table&quot;</span> <span class="keyword">then</span></span><br><span class="line">		<span class="built_in">io</span>.<span class="built_in">write</span>(<span class="string">&quot;&#123;\n&quot;</span>)</span><br><span class="line">			<span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(o) <span class="keyword">do</span></span><br><span class="line">				<span class="built_in">io</span>.<span class="built_in">write</span>(<span class="string">&quot;&quot;</span>,k,<span class="string">&quot; = &quot;</span>)</span><br><span class="line">				serialize(v)</span><br><span class="line">				<span class="built_in">io</span>.<span class="built_in">write</span>(<span class="string">&quot;,\n&quot;</span>)</span><br><span class="line">			<span class="keyword">end</span></span><br><span class="line">		<span class="built_in">io</span>.<span class="built_in">write</span>(<span class="string">&quot;&#125;\n&quot;</span>)</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">error</span>(<span class="string">&quot;cannot serialize a &quot;</span> .. <span class="built_in">type</span>(o))</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>尽管这个函数很简单，但它却可以合理地满足需求。只要表结构是一棵树，那么该函数甚至能处理嵌套的表。<br>上例中的函数假设了表中的所有键都是合法的标识符，如果一个表的键是数字或者不是合法的Lua标识符，那么就会有问题。解决该问题的一种简单方法是像下列代码一样处理每个键：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">io</span>.<span class="built_in">write</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot; [%s] = &quot;</span>,serialize(k)))</span><br></pre></td></tr></table></figure>
<p>经过这样的修改后，我们提高了该函数的健壮性，但却牺牲了结果文件的美观性。考虑如下的调用：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">serialize&#123;a = <span class="number">12</span>, b = <span class="string">&#x27;Lua&#x27;</span>,key = <span class="string">&#x27;another &quot;one&quot;&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>
<p>第1版的函数serialize会输出：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">a = <span class="number">12</span>,</span><br><span class="line">b = <span class="string">&#x27;Lua&#x27;</span></span><br><span class="line">key = <span class="string">&quot;another \&quot;one\&quot;&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>与之对比，第2版的函数serialize则会输出：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">[<span class="string">&quot;a&quot;</span>] = <span class="number">12</span>,</span><br><span class="line">[<span class="string">&quot;b&quot;</span>] = <span class="string">&quot;Lua&quot;</span>,</span><br><span class="line">[<span class="string">&quot;key&quot;</span>] = <span class="string">&quot;another \&quot;one\&quot;&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过测试每个键是否需要方括号，可以在健壮性和美观性之间得到平衡。</p>
<h3 id="保存带有循环的表"><a href="#保存带有循环的表" class="headerlink" title="保存带有循环的表"></a>保存带有循环的表</h3><p>由于表构造器不能创建带循环的或共享子表的表，所以如果要处理表示通过拓扑结构的表，就需要采用不同的方法。我们需要引入名称来表示循环。因此，下面的函数把值外加其名称一起作为参数。另外，还必须使用一个额外的表来存储已保存表的名称，以便在发现循环时对其进行复用。这个额外的表使用此前已被保存的表作为键，以表的名称作为值。</p>
<blockquote>
<p>示例：保存带有循环的表</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">basicSerialize</span><span class="params">(o)</span></span></span><br><span class="line">	<span class="comment">-- 假设&#x27;o&#x27;是一个数字或字符串</span></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">string</span>.<span class="built_in">format</span> (<span class="string">&quot;%q&quot;</span>,o)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">save</span> <span class="params">(name,value,saved)</span></span></span><br><span class="line">	saved = saved <span class="keyword">or</span> &#123;&#125;			<span class="comment">-- 初始值</span></span><br><span class="line">	<span class="built_in">io</span>.<span class="built_in">write</span>(name,<span class="string">&quot; = &quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">type</span>(value) == <span class="string">&quot;number&quot;</span> <span class="keyword">or</span> <span class="built_in">type</span>(value) == <span class="string">&quot;string&quot;</span> <span class="keyword">then</span></span><br><span class="line">		<span class="built_in">io</span>.<span class="built_in">write</span>(basicSerialize(value),<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">	<span class="keyword">elseif</span> <span class="built_in">type</span>(value) == <span class="string">&quot;table&quot;</span> <span class="keyword">then</span></span><br><span class="line">		<span class="keyword">if</span> saved[value] <span class="keyword">then</span>				<span class="comment">-- 值是否被保存？</span></span><br><span class="line">			<span class="built_in">io</span>.<span class="built_in">write</span>(saved[value],<span class="string">&quot;\n&quot;</span>)		<span class="comment">-- 使用之前的名称</span></span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			saved[value] = name		<span class="comment">-- 保存名称供后续使用</span></span><br><span class="line">			<span class="built_in">io</span>.<span class="built_in">write</span>(<span class="string">&quot;&#123;&#125;\n&quot;</span>)		<span class="comment">-- 创建新表</span></span><br><span class="line">			<span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(value) <span class="keyword">do</span> <span class="comment">-- 保存表的字段</span></span><br><span class="line">				k = basicSerialize(k)</span><br><span class="line">				<span class="keyword">local</span> fname = <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%s[%s]&quot;</span>,name,k)</span><br><span class="line">				save(fname,v,saved)</span><br><span class="line">			<span class="keyword">end</span></span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">error</span>(<span class="string">&quot;cannot save a &quot;</span> .. <span class="built_in">type</span>(value))</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>我们将设要序列化只使用字符串或数值作为键。函数basicSerialize用于对这些基本类型进行序列化并返回序列化后的结果，另一个函数save则完成具体的工作，其参数saved就是之前所说的用于存储已保存表的表。例如，假设要创建一个如下所示的表：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = &#123;x = <span class="number">1</span>, y = <span class="number">2</span>;&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;&#125;</span><br><span class="line">a[<span class="number">2</span>] = a <span class="comment">-- 循环</span></span><br><span class="line">a.z = a[<span class="number">1</span>]	<span class="comment">-- 共享子表</span></span><br></pre></td></tr></table></figure>
<p>调用save(“a”,a)会将其保存为：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = &#123;&#125;</span><br><span class="line">a[<span class="number">1</span>] = &#123;&#125;</span><br><span class="line">a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">3</span></span><br><span class="line">a[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">4</span></span><br><span class="line">a[<span class="number">1</span>][<span class="number">3</span>] = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">a[<span class="number">2</span>] = a</span><br><span class="line">a[<span class="string">&quot;y&quot;</span>] = <span class="number">2</span></span><br><span class="line">a[<span class="string">&quot;x&quot;</span>] = <span class="number">1</span></span><br><span class="line">a[<span class="string">&quot;z&quot;</span>] = a[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p>取决于表的遍历情况，这些赋值语句的实际执行顺序可能会有所不同。不过尽管如此，上述算法能够保证任何新定义节点中所用到节点都是已经被定义过的。<br>如果想保存具有共享部分的几个表，那么可以在调用函数save时使用相同的表saved函数，例如，假设有如下两个表：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = &#123;&#123;<span class="string">&quot;one&quot;</span>,<span class="string">&quot;two&quot;</span>&#125;,<span class="number">3</span>&#125;</span><br><span class="line">b = &#123;k = a[<span class="number">1</span>]&#125;</span><br></pre></td></tr></table></figure>
<p>如果以独立的方式保存这些表，那么结果中不会有共同的部分。不过，如果调用save函数时使用同一个表saved，那么结果就会共享共同的部分：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> t = &#123;&#125;</span><br><span class="line">save(<span class="string">&quot;a&quot;</span>,a,t)</span><br><span class="line">save(<span class="string">&quot;b&quot;</span>,b,t)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- a = &#123;&#125;</span></span><br><span class="line"><span class="comment">-- a[1] = &#123;&#125;</span></span><br><span class="line"><span class="comment">-- a[1][1] = &quot;one&quot;</span></span><br><span class="line"><span class="comment">-- a[1][2] = &quot;two&quot;</span></span><br><span class="line"><span class="comment">-- a[2] = 3</span></span><br><span class="line"><span class="comment">-- b = &#123;&#125;</span></span><br><span class="line"><span class="comment">-- b[&quot;k&quot;] = a[1]</span></span><br></pre></td></tr></table></figure>
<p>在Lua语言中，还有其他一些比较常见的方法。例如，我们可以保存一个值时不指定全局名称而是通过一段代码来创建一个局部值并将其返回，也可以在可能的时候使用列表的语法等等。Lua预压给我们提供了构建这些机制的工具。</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua模块引入import和require的区别</title>
    <url>/57048.html</url>
    <content><![CDATA[<p>Lua 中引入一个模块，可以采用两种方式：<code>import </code>和<code>require</code>方式，具体的区别在于：</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h3 id="载入一个模块"><a href="#载入一个模块" class="headerlink" title="载入一个模块"></a>载入一个模块</h3><p><code>import() </code>与 <code>require() </code>功能相同，但具有一定程度的自动化特性。</p>
<p>假设我们有如下的目录结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app/</span><br><span class="line">app/classes/</span><br><span class="line">app/classes/MyClass.lua</span><br><span class="line">app/classes/MyClassBase.lua</span><br><span class="line">app/classes/data/Data1.lua</span><br><span class="line">app/classes/data/Data2.lua</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>MyClass 中需要载入 MyClassBase 和 MyClassData。如果用 require()，MyClass 内的代码如下：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">local</span> MyClassBase = <span class="built_in">require</span>(<span class="string">&quot;app.classes.MyClassBase&quot;</span>)</span><br><span class="line"><span class="keyword">local</span> MyClass = class(<span class="string">&quot;MyClass&quot;</span>, MyClassBase)</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> Data1 = <span class="built_in">require</span>(<span class="string">&quot;app.classes.data.Data1&quot;</span>)</span><br><span class="line"><span class="keyword">local</span> Data2 = <span class="built_in">require</span>(<span class="string">&quot;app.classes.data.Data2&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>假如我们将 MyClass 及其相关文件换一个目录存放，那么就必须修改 MyClass 中的 require() 命令，否则将找不到模块文件。</p>
<p>而使用 import()，我们只需要如下写：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">local</span> MyClassBase = import(<span class="string">&quot;.MyClassBase&quot;</span>)</span><br><span class="line"><span class="keyword">local</span> MyClass = class(<span class="string">&quot;MyClass&quot;</span>, MyClassBase)</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> Data1 = import(<span class="string">&quot;.data.Data1&quot;</span>)</span><br><span class="line"><span class="keyword">local</span> Data2 = import(<span class="string">&quot;.data.Data2&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>当在模块名前面有一个”.” 时，import() 会从当前模块所在目录中查找其他模块。因此 MyClass 及其相关文件不管存放到什么目录里，我们都不再需要修改 MyClass 中的 import() 命令。这在开发一些重复使用的功能组件时，会非常方便。</p>
<p>我们可以在模块名前添加多个”.” ，这样 import() 会从更上层的目录开始查找模块。</p>
<p>不过 import() 只有在模块级别调用（也就是没有将 import() 写在任何函数中）时，才能够自动得到当前模块名。</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua数据结构</title>
    <url>/42473.html</url>
    <content><![CDATA[<p>Lua语言中的表并不是一种数据结构，它们是其他数据结构的基础。我们可以用Lua语言中的表来实现其他语言提供的数据结构，如数组、记录、列表、队列、集合等。而且，用Lua语言中的表实现这些数据结构还很高效。</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>在像C和Pascal这样更加传统的语言中，通常使用数组和列表来实现大多数数据结构。虽然在Lua语言中也可以使用表来实现数组和列表，但表实际上比数组和列表强大很多。使用表时，很多算法可以被简化。例如，由于表本身就支持任意数据类型的直接访问，因此我们很少在Lua语言中编写搜索算法。</p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>在Lua语言中，简单地使用整数来索引表即可实现数组。因此，数组的大小不用非得是固定的，而是可以按需增长的。通常，在初始化数组时就间接地定义了数组的大小。例如，在执行了以下的代码后，任何访问范围1~1000之外的元素都会返回nil而不是0：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> a = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">1000</span> <span class="keyword">do</span> </span><br><span class="line">	a[i] = <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>长度运算符（#）正是基于此来计算数组大小的：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(#a)</span><br></pre></td></tr></table></figure>
<p>可以使用0、1或其他任何值来作为数组的起始索引：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i = <span class="number">-5</span> , <span class="number">5</span> <span class="keyword">do</span></span><br><span class="line">	a[i] = <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>不过，在Lua语言中一般以1作为数组的起始索引，Lua语言的标准库和长度运算符都遵循这个惯例。如果数组的索引不从1开始，那就不能使用这些机制。<br>可以通过表构造器在一句表达式中同时创建和初始化数组：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">squares = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">54</span>,<span class="number">23</span>,<span class="number">23</span>,<span class="number">12</span>&#125;</span><br></pre></td></tr></table></figure>
<p>这种表构造器根据需求要多大就能多大。在Lua语言中，利用数据描述文件创建包含几百万个元素组成的构造器很常见。</p>
<h2 id="矩阵及多维数组"><a href="#矩阵及多维数组" class="headerlink" title="矩阵及多维数组"></a>矩阵及多维数组</h2><p>在Lua语言中，有两种方式来表示矩阵。第一种方式就是使用一个不规则数组，即数组的数组，也就是一个所有元素均是另一个表的表。例如，可以使用如下代码来创建一个全0元素的N*M维矩阵：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> mt = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span> , N <span class="keyword">do</span></span><br><span class="line">	<span class="keyword">local</span> row = &#123;&#125;</span><br><span class="line">	mt[i] = row</span><br><span class="line">	<span class="keyword">for</span> j = <span class="number">1</span>, M <span class="keyword">do</span></span><br><span class="line">		row[j] = <span class="number">0</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>由于表在Lua语言中是一种对象，因此在创建矩阵时必须显示地创建每一行。一方面，这比在C语言中直接声明一个多维数组更加具体；另一方面，这也给我们提供了很多的灵活性。例如，只需将前例中的内层循环改为for j &#x3D; 1,i do … end就可以创建一个三角矩阵。使用这套代码，三角矩阵较原来的矩阵可以节约一半的内存。<br>在Lua中表示矩阵的第二种方式是将两个索引合并为一个。典型情况下，我们通过将第一个索引乘以一个合适的常量再加上第二个索引来实现这种效果。在这种方式下，我们可以使用以下的代码来创建一个全0元素的N*M维矩阵：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> mt = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, N <span class="keyword">do</span></span><br><span class="line">	<span class="keyword">local</span> aux = (i <span class="number">-1</span>) * M </span><br><span class="line">	<span class="keyword">for</span> j = <span class="number">1</span>, M <span class="keyword">do</span></span><br><span class="line">		mt[aux = j] = <span class="number">0</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>应用程序中经常会用到稀疏矩阵，这种矩阵中的大多数元素是0或nil。例如，我们可以使用邻接矩阵来表示图。当矩阵出元素的值为x时，表示图中的节点m和n是相连的，连接的权重为x；若上述的两个节点不相连，那么矩阵的 (m,n)处元素的值为nil。如果要表示一个具有1万个节点的图，那么需要一个包含1亿个元素的矩阵，但是其中大约只有5万个元素不为nil。许多有关数据结构的书籍都会深入地讨论如何实现这种稀疏矩阵而不必浪费800MB内存空间，但在Lua语言中却很少需要用到那些技巧。这是因为，我们使用表实现数组而表本来就是稀疏的。在第一种实现中，需要1万个表，每个表5个元素，总共5万个元素。在第二种实现中，只需要一个表，其中包含5万个元素。无论哪种实现，都是只非nil的元素才占用空间。<br>由于在有效元素之间存在空间，因此不能对稀疏举着使用长度运算符。这没什么大不了的，即使我们能够使用长度运算符，最好也不要那么做。对于大多数针对稀疏矩阵的操作来说，遍历空元素是非常低效的。相反，可以使用pairs来只遍历非nil的元素。例如，考虑如何进行由不规则数组表示的稀疏矩阵的矩阵乘法。<br>假设矩阵a[M,K]乘以矩阵b[K,N]的结果为矩阵c[M,N]，常见的矩阵相乘算法形如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, M <span class="keyword">do</span></span><br><span class="line">	<span class="keyword">for</span> j = <span class="number">1</span>, N <span class="keyword">do</span></span><br><span class="line">		c[i][j] = <span class="number">0</span></span><br><span class="line">		<span class="keyword">for</span> k = <span class="number">1</span>,K <span class="keyword">do</span></span><br><span class="line">			c[i][j] = c[i][j] + a[i][k] * b[k][j]</span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>外层的两个循环遍历了整个结果矩阵，然后使用内层循环计算每一个元素的值。<br>对于使用不规则矩阵实现的稀疏矩阵，内层循环会有问题。由于内层循环遍历的是一列b而不是一行，因此不能再此处使用pairs：这个循环必须遍历每一行来检查对应的行是否在对应列中有元素。除了遍历了少量非0元素以外，这个循环还遍历了所有的0元素。（由于不知道元素的空间位置，所以在其他场景下遍历一列可也能会有问题。）<br>以下的算法与之前的示例非常类似，但是该算法调换了两个内层循环的顺序。通过这个简单的调整，该算法避免了遍历列：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, M <span class="keyword">do</span></span><br><span class="line">	<span class="keyword">for</span> k = <span class="number">1</span> , K <span class="keyword">do</span></span><br><span class="line">		<span class="keyword">for</span> j = <span class="number">1</span>, N <span class="keyword">do</span></span><br><span class="line">			c[i][j] = c[i][j] + a[i][k] * b [k][j]</span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>这样，中间的一层循环遍历行a[i]，而内层循环遍历行b[k]。这两个遍历都可以使用pairs来实现遍历非0元素。由于一个空的稀疏矩阵本身就是使用0填充的，所以对结果矩阵c的初始化没有任何问题。<br>下面代码战士了上述算法的完整实现，其中使用了pairs来处理稀疏矩阵的元素。这种实现只访问非nil元素，同时结果也是稀疏矩阵。此外，下面的代码还删去了结果中偶然为0的元素。</p>
<blockquote>
<p>稀疏矩阵相乘</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mult</span><span class="params">(a,b)</span></span></span><br><span class="line">	<span class="keyword">local</span> c = &#123;&#125;</span><br><span class="line">	<span class="keyword">for</span> i = <span class="number">1</span>, #a <span class="keyword">do</span></span><br><span class="line">		<span class="keyword">local</span> resultline = &#123;&#125;</span><br><span class="line">		<span class="keyword">for</span> k ,va <span class="keyword">in</span> <span class="built_in">pairs</span>(a[i]) <span class="keyword">do</span></span><br><span class="line">			<span class="keyword">for</span> j , vb <span class="keyword">in</span> <span class="built_in">pairs</span>(b[k]) <span class="keyword">do</span></span><br><span class="line">				<span class="keyword">local</span> res = (resultline[j] <span class="keyword">or</span> <span class="number">0</span> ) + va * vb</span><br><span class="line">				resultline[j] = (res ~= <span class="number">0</span>) <span class="keyword">and</span> res  <span class="keyword">or</span> <span class="literal">nil</span></span><br><span class="line">			<span class="keyword">end</span></span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">		c[i] = resultline</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">return</span> c</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>由于表是动态对象，所以在Lua语言中可以很容易地实现链表。我们可以把每个节点用一个表来表示，链接则为一个包含指向其他表的引用的简单表字段。例如，让我们实现一个单链表，其中每个节点具有两个字段value和next。最简单的变量就是根节点：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">list = <span class="literal">nil</span></span><br></pre></td></tr></table></figure>
<p>要在表头插入一个值为v的元素，可以使用如下代码：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">list = &#123;<span class="built_in">next</span> = list, value = v&#125;</span><br></pre></td></tr></table></figure>
<p>可以通过如下的方式遍历链表：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> l = list</span><br><span class="line"><span class="keyword">while</span> l <span class="keyword">do</span></span><br><span class="line">	visit l.value</span><br><span class="line">	l = l.<span class="built_in">next</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>诸如双向链表或环形表等其他类型的链表也很容易实现。不过，由于通常无须链表即可用更简单的方式来表示数据，所以在Lua语言中很少需要用到这些数据结构。例如，我们可以通过一个无界数组来表示栈。</p>
<h2 id="队列及双端队列"><a href="#队列及双端队列" class="headerlink" title="队列及双端队列"></a>队列及双端队列</h2><p>在Lua语言中实现队列的一种简单方法是使用table标准库中的函数insert和remove。</p>
<blockquote>
<p>示例： 一个双端队列</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">listNew</span><span class="params">()</span></span></span><br><span class="line">	<span class="keyword">return</span> &#123;first = <span class="number">0</span> ,last = <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pushFisrt</span><span class="params">(list,value)</span></span></span><br><span class="line">	<span class="keyword">local</span> first = list.first - <span class="number">1</span></span><br><span class="line">	list.first = first</span><br><span class="line">	list[first] = value</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pushLast</span> <span class="params">(list ,value)</span></span></span><br><span class="line">	<span class="keyword">local</span> last = list.last + <span class="number">1</span></span><br><span class="line">	list.last = last</span><br><span class="line">	list[last] = value</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">popFirst</span><span class="params">(list)</span></span></span><br><span class="line">	<span class="keyword">local</span> first = list.first</span><br><span class="line">	<span class="keyword">if</span> first &gt; list.last <span class="keyword">then</span></span><br><span class="line">		<span class="built_in">error</span>(<span class="string">&quot;list is empty&quot;</span>)</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">local</span> value = list[first]</span><br><span class="line">	list[first] = <span class="literal">nil</span></span><br><span class="line">	list.first = first + <span class="number">1</span></span><br><span class="line">	<span class="keyword">return</span> value</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">popLast</span><span class="params">(list)</span></span></span><br><span class="line">	<span class="keyword">local</span> last = list.last</span><br><span class="line">	<span class="keyword">if</span> list.first &gt; last <span class="keyword">then</span></span><br><span class="line">		<span class="built_in">error</span>(<span class="string">&quot;list is empty&quot;</span>)</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">local</span> value = list[last]</span><br><span class="line">	list[last] = <span class="literal">nil</span></span><br><span class="line">	list.last = last  - <span class="number">1</span></span><br><span class="line">	<span class="keyword">return</span> value</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>如果希望严格地遵循队列的规范使用这个结构，那么就只能调用pushLast和popFirst函数，first和last都会不断增长。不过，由于我们在Lua语言中使用表来表示数组，所以我们既可以在1-20的范围内对数组进行索引，也可以在16777201-16777220的范围内索引数组。对于一个64为整型数而言，以每秒1000万次的速度进行插入也需要运行3万年才会发生溢出的问题。</p>
<h2 id="反向表"><a href="#反向表" class="headerlink" title="反向表"></a>反向表</h2><p>我们很少在Lua语言中进行索引操作。但是，我们使用被称为索引表或反向表的数据结构。<br>假设有一个存放了一周每一天名称的表：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">days = &#123;<span class="string">&quot;Sunday&quot;</span>,<span class="string">&quot;Monday&quot;</span>,<span class="string">&quot;Tuesday&quot;</span>,<span class="string">&quot;Wednesday&quot;</span>,<span class="string">&quot;Thursday&quot;</span>,<span class="string">&quot;Friday&quot;</span>,<span class="string">&quot;Saturday&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<p>如果想要将一周每一天的名称转换为其在一周里的位置，那么可以通过索引这表来寻找指定的名称。不过，一种更高效的方式是构造一个方向表，假定为revDays，该表中的索引为一周每一天的名称而值为其在一周里的位置。这个表形如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">revDays = &#123;[<span class="string">&quot;Sunday&quot;</span>] = <span class="number">1</span> ,[<span class="string">&quot;Monday&quot;</span>] = <span class="number">2</span>,[<span class="string">&quot;Tuesday&quot;</span>] = <span class="number">3</span>,[<span class="string">&quot;Wednesday&quot;</span>] = <span class="number">4</span>,[<span class="string">&quot;Thursday&quot;</span>] = <span class="number">5</span>,[<span class="string">&quot;Friday&quot;</span>] = <span class="number">6</span>,[<span class="string">&quot;Saturday&quot;</span>] = <span class="number">7</span>&#125;</span><br></pre></td></tr></table></figure>
<p>然后，只需要直接在反向表中根据名称进行索引就可以了：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">x = <span class="string">&quot;Tuesday&quot;</span></span><br><span class="line"><span class="built_in">print</span>(revDays[x])				<span class="comment">-- 3</span></span><br></pre></td></tr></table></figure>
<p>当然，这个反向表不同手工声明，可以从原始的表中自动地构造出方向标：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">revDays = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(days) <span class="keyword">do</span> </span><br><span class="line">	revDays[v] = k</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>上例中的循环会对每个元素days进行赋值，变量k获取到的是键(1,2,…)而变量v获取到的是值(“Sunday”,”Monday”,…)。</p>
<h2 id="集合与包"><a href="#集合与包" class="headerlink" title="集合与包"></a>集合与包</h2><p> 假设我们想列出一个程序源代码中的所有标识符，同时过滤掉其中的保留字。一些C程序员可能倾向于使用字符串数组来表示保留字集合，然后搜索这个数组来决定某个单词是否属于该集合。为了提高搜索的速度，他们还可能使用二叉树来表示该集合。<br>在Lua语言中，还可以用一中高效且简单的方式来表示这类集合，即集合元素作为索引放入表中。那么，对于指定的元素无须再搜索表，只需要该元素检索表并检查结果是否为nil即可。以上述需求为例，代码形如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">reserved = &#123;[<span class="string">&quot;while&quot;</span>] = <span class="literal">true</span>, [<span class="string">&quot;if&quot;</span>] = <span class="literal">true</span>,[<span class="string">&quot;else&quot;</span>] = <span class="literal">true</span>,[<span class="string">&quot;do&quot;</span>] =<span class="literal">true</span>,&#125;</span><br><span class="line">	<span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">string</span>.<span class="built_in">gmatch</span>(s,<span class="string">&quot;[%a_][%w_]*&quot;</span>) <span class="keyword">do</span></span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> reserved[w] <span class="keyword">then</span></span><br><span class="line">			<span class="keyword">do</span> something with <span class="string">&#x27;w&#x27;</span></span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>我们可以借助一个辅助函数来构造集合，使得初始化过程更清晰：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Set</span><span class="params">(list)</span></span></span><br><span class="line">	<span class="keyword">local</span> set = &#123;&#125;</span><br><span class="line">	<span class="keyword">for</span> _, l <span class="keyword">in</span> <span class="built_in">ipairs</span>(list) <span class="keyword">do</span></span><br><span class="line">		set[l] = <span class="literal">true</span> </span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">return</span> set</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">reserved = Set&#123;<span class="string">&quot;while&quot;</span>,<span class="string">&quot;end&quot;</span>,<span class="string">&quot;function&quot;</span>,<span class="string">&quot;local&quot;</span>,&#125;</span><br></pre></td></tr></table></figure>
<p>我们还可以使用另一个集合来保存标识符：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> ids = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">string</span>.<span class="built_in">gmatch</span>(s,<span class="string">&quot;[%a_][%w_]*&quot;</span>) <span class="keyword">do</span></span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">not</span> reserved[w] <span class="keyword">then</span></span><br><span class="line">		ids[w] = <span class="literal">true</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 输出每一个标识符</span></span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">pairs</span>(ids) <span class="keyword">do</span> </span><br><span class="line">	<span class="built_in">print</span>(w)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>包(bag)，也被称为多重集合，与普通集合的不同之处在于其中的元素可以出现多次。在Lua语言中，包的简单表示类似于此前集合的表示，只不过其中的每一个键都有一个对应的计数器。如果要插入一个元素，可以递增其计数器：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insert</span> <span class="params">(bag,element)</span></span></span><br><span class="line">	bag[element] = (bag[element] <span class="keyword">or</span> <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>如果要删除一个元素，可以递减其计数器：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">remove</span> <span class="params">(bag,element)</span></span></span><br><span class="line">	<span class="keyword">local</span> count = bag[element]</span><br><span class="line">	bag[element] = (count <span class="keyword">and</span> count &gt; <span class="number">1</span>) <span class="keyword">and</span> count - <span class="number">1</span> <span class="keyword">or</span> <span class="literal">nil</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>只有当计数器存在且大于0时我们才会保留计数器。</p>
<h2 id="字符串缓冲区"><a href="#字符串缓冲区" class="headerlink" title="字符串缓冲区"></a>字符串缓冲区</h2><p>假设我们正在开发一段处理字符串的程序，比如逐行地读取一个文件。典型的代码可能形如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> buff = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">io</span>.<span class="built_in">lines</span>() <span class="keyword">do</span></span><br><span class="line">	buff = buff .. line .. <span class="string">&quot;\n&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>虽然这段Lua语言代码看似能够正常工作，但实际上在处理大文件时却可能导致巨大的性能开销。<br>这是为什么呢？为了搞清楚到底发生了什么，让我们想象一下读取循环中发生了什么。假设每行有20字节，当我们读取了大概2500行后，buff就会变成一个50KB大小的字符串。在Lua语言中进行字符串连接<code>buff..line..&quot;\n&quot;</code>时，会创建一个50020字节的新字符串，然后从buff中复制50000字节中到这个新字符串中。这样，对于后续的每一行，Lua语言都需要移动大概50KB且还在不断增长的内存。因此，该算法的时间复杂度是二次方的。在读取了100行以后，Lua语言就已经移动了至少5MB内存。当Lua语言完成了350KB的读取后，它已经至少移动了50GB的数据。<br>对于较小的字符串，上述循环并没什么问题。当读取整个文件时，Lua语言提供了带有参数的函数io.read(“a”)来一次性读取整个文件。不过，有时候我们必须面对这个问题。Java提供了StringBuffer类还解决这个问题；而在Lua语言中，我们可以把一个表当做字符串缓冲区，其关键是使用函数table.concat，这个函数会将指定列表中的所有字符串连接起来并返回连接后的结果。使用函数concat可以这样重写上述循环：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> t = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">io</span>.<span class="built_in">lines</span>() <span class="keyword">do</span></span><br><span class="line">	t[#t + <span class="number">1</span>] = line .. <span class="string">&quot;\n&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">local</span> s = <span class="built_in">table</span>.<span class="built_in">concat</span>(t)</span><br></pre></td></tr></table></figure>
<p>之前的代码读取同样的文件需要超过半分钟，而上述实现则只需要不到0.05秒。我们还可以做得更好。函数concat还有第2个可选参数，用于指定插在字符串间的分隔符。有了这个分隔符，我们就不必在每行后插入换行符了。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> t = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">io</span>.<span class="built_in">lines</span>() <span class="keyword">do</span></span><br><span class="line">	t[#t + <span class="number">1</span>] = line</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">s = <span class="built_in">table</span>.<span class="built_in">concat</span>(t,<span class="string">&quot;\n&quot;</span>) .. <span class="string">&quot;\n&quot;</span></span><br></pre></td></tr></table></figure>
<p>虽然函数concat能够在字符串之间插入分隔符，但我们还需要增阿基最后一个换行符。最后一次字符串连接创建了结果字符串的一个副本，这个副本可能已经相当长了。虽然没有直接的选项能够让函数concat插入这个额外的分隔符，但我们可以想办法绕过，只需在字符串t后面添加一个空字符串就行了：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">t[#t + <span class="number">1</span>] = <span class="string">&quot;&quot;</span></span><br><span class="line">s = <span class="built_in">table</span>.<span class="built_in">concat</span>(t,<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>现在，正如我们所期望的那样，函数concat会在结果字符串的额最后添加一个换行符。</p>
<h2 id="图形"><a href="#图形" class="headerlink" title="图形"></a>图形</h2><p>像其他现代编程语言一眼个，Lua语言也允许开发人员使用多种实现表示图，每种实现都有其所使用的特定算法。<br>我们使用一个由两个字段组成的表来表示每个节点，即name(节点名称)和adj(与此节点邻接的节点和集合)。由于我们会从一个文本文件中加载图对应的数据，所以需要能够根据节点的名称来寻找指定节点的方法。因此，我们使用了一个额外的表来建立节点和节点名称之间的映射。函数name2node可以根据指定节点的名称返回对应的节点：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">name2node</span><span class="params">(graph,name)</span></span></span><br><span class="line">	<span class="keyword">local</span> node = graph[name]</span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">not</span> node <span class="keyword">then</span></span><br><span class="line">		node = &#123;name = name ,adj = &#123;&#125;&#125;</span><br><span class="line">		graph[name] = node </span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">return</span> node </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>示例：从文件中加载图</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readgraph</span><span class="params">()</span></span></span><br><span class="line">	<span class="keyword">local</span> graph = &#123;&#125;</span><br><span class="line">	<span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">io</span>.<span class="built_in">lines</span>() <span class="keyword">do</span></span><br><span class="line">		<span class="comment">-- 把一行分割为两个名字</span></span><br><span class="line">		<span class="keyword">local</span> namefrom, nameto = <span class="built_in">string</span>.<span class="built_in">match</span>(line,<span class="string">&quot;(%S+)%s+(%S+)&quot;</span>)</span><br><span class="line">		<span class="comment">-- 找到对应的节点</span></span><br><span class="line">		<span class="keyword">local</span> from = name2node(graph,namefrom)</span><br><span class="line">		<span class="keyword">local</span> to = name2node(graph,nameto)</span><br><span class="line">		<span class="comment">-- 把‘to’增加到邻接集合&#x27;from&#x27;中</span></span><br><span class="line">		from.adj[to] = <span class="literal">true</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">return</span> graph</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>该函数逐行地读取一个文件，文件的每一行中有两个节点的名称，表示从第1个节点到第2个节点有一条边。对于每一行，调用函数string.match将一行中的两个节点的名称分开，然后根据名称找到对应的节点，最后将这些节点连接在一起。</p>
<blockquote>
<p>示例：寻找两个节点之间的路径</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findpath</span><span class="params">(curr,to,path,visited)</span></span></span><br><span class="line">	<span class="built_in">path</span> = <span class="built_in">path</span> <span class="keyword">or</span> &#123;&#125;</span><br><span class="line">	visited = visited <span class="keyword">or</span> &#123;&#125;</span><br><span class="line">	<span class="keyword">if</span> visited[curr] <span class="keyword">then</span>   <span class="comment">-- 是否节点已被访问</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>			<span class="comment">-- 不存在路径</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	visited[curr] = <span class="literal">true</span>    <span class="comment">-- 标记节点为已被访问</span></span><br><span class="line">	<span class="built_in">path</span>[#<span class="built_in">path</span> + <span class="number">1</span>] = curr	<span class="comment">-- 增加到路径中</span></span><br><span class="line">	<span class="keyword">if</span> curr == to <span class="keyword">then</span>		<span class="comment">-- 是否是最后一个节点</span></span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">path</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> node <span class="keyword">in</span> <span class="built_in">pairs</span>(curr.adj) <span class="keyword">do</span></span><br><span class="line">		<span class="keyword">local</span> p = findpath(node,to ,<span class="built_in">path</span>,visited)</span><br><span class="line">		<span class="keyword">if</span> p <span class="keyword">then</span></span><br><span class="line">			<span class="keyword">return</span> p</span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	<span class="built_in">table</span>.<span class="built_in">remove</span>(<span class="built_in">path</span>)		<span class="comment">-- 从路径中删除节点</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>函数findpath使用深度优先遍历搜索两个节点之间的路径。该函数的第1个参数是当前节点，第2个参数是目标节点，第3个参数用于保存从起点到当前节点的路径，最后一个参数为所有已被访问节点的几何。<br>为了测试上述代码，我们编写一个打印一条路径的函数，再编写一些代码让上述所有代码跑起来：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printpath</span><span class="params">(path)</span></span></span><br><span class="line">	<span class="keyword">for</span> i = <span class="number">1</span>, #<span class="built_in">path</span> <span class="keyword">do</span> </span><br><span class="line">		<span class="built_in">print</span>(<span class="built_in">path</span>[i].name)</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">g = readgraph()</span><br><span class="line">a = name2node(g,<span class="string">&quot;a&quot;</span>)</span><br><span class="line">b = name2node(g,<span class="string">&quot;b&quot;</span>)</span><br><span class="line">p = findpath(a,b)</span><br><span class="line"><span class="keyword">if</span> p <span class="keyword">then</span> printpath(p) <span class="keyword">end</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua日期和时间</title>
    <url>/11458.html</url>
    <content><![CDATA[<p>Lua语言的标准库提供了两个用于操作日期和时间的函数，这两个函数在C语言标准库中也存在，提供的是同样的功能。虽然这两个函数看上去很简单，但依旧可以基于这些简单的功能完成很多复杂的工作。</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>Lua语言针对日期和时间使用两种表示方式。第1中表示方式是一个数字，这个数字通常是一个整型数。尽管并非IOS C所必需的，但在大多数系统中这个数字时自一个被称为纪元的固定日期后至今的秒数。特别地，在POSIX和Windows系统中国这个固定日期均是Jan 01,1970,0:00 UTC。<br>Lua语言针对日期和时间提供的第2中表示方式是一个表。日期表具有以下几个重要的字段：year、month、day、hour、min、sec、wday、yady和isdst，除isdst以外的所有字段均为整型值。前6个字段的含义非常明显，而wday字段表示本周中的第几天（第1天为星期天）；yday表示当年中的第几天（第1天是1月1日）；isdst字段表示布尔类型，如果使用夏时令则为真。例如，Sep 16,1998,23:48:10（星期三）对应的表是：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&#123;year = <span class="number">1998</span>,month = <span class="number">9</span>,day = <span class="number">16</span>,yday = <span class="number">259</span>,wday = <span class="number">4</span>,hour = <span class="number">23</span>,<span class="built_in">min</span> = <span class="number">48.</span>sec = <span class="number">10</span>,isdst = <span class="literal">false</span>&#125;</span><br></pre></td></tr></table></figure>
<p>日期表中不包括时区，程序需要负责结合相应的时区对其正确解析。</p>
<h2 id="函数os-time"><a href="#函数os-time" class="headerlink" title="函数os.time"></a>函数os.time</h2><p>不带任何参数调用函数os.time,会以数字形式返回当前的日期和时间：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">os</span>.<span class="built_in">time</span>()	   <span class="comment">-- 1587123725</span></span><br></pre></td></tr></table></figure>
<p>对应的时间是April 17,2020,19:42:05。在一个POSIX系统中，可以使用一些基本的数字运算分离这个数字：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="built_in">date</span> = <span class="number">1587123725</span></span><br><span class="line"><span class="keyword">local</span> day2year = <span class="number">265.242</span>			 一年的天数</span><br><span class="line"><span class="keyword">local</span> sec2hour = <span class="number">60</span> * <span class="number">60</span>			 一小时的秒数</span><br><span class="line"><span class="keyword">local</span> sec2day  = sec2hour * <span class="number">24</span>       一天的秒数</span><br><span class="line"><span class="keyword">local</span> sec2year = sec2day * day2year  一年的秒数</span><br><span class="line"></span><br><span class="line"> 年</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">date</span> // sec2year + <span class="number">1970</span>)</span><br><span class="line"></span><br><span class="line"> 小时</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">date</span> % sec2day // sec2hour)</span><br><span class="line"></span><br><span class="line"> 分钟</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">date</span> % sec2hour // <span class="number">60</span>)</span><br><span class="line"></span><br><span class="line"> 秒</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">date</span> % <span class="number">60</span>)</span><br></pre></td></tr></table></figure>
<p>如果以一个日期表作为参数调用os.time，那么改函数会返回该表中所描述日期和时间对应的数字。year、month和day字段是必需的，hour、min和sec字段如果没有提供的话则默认为12:00:00，其余字段则会被忽略。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">os</span>.<span class="built_in">time</span>(&#123;year = <span class="number">2020</span>,month = <span class="number">4</span>,day = <span class="number">17</span>,hour = <span class="number">19</span>,<span class="built_in">min</span> = <span class="number">42</span>,sec = <span class="number">5</span>&#125;)		 <span class="number">1587123725</span></span><br><span class="line"><span class="built_in">os</span>.<span class="built_in">time</span>(&#123;year = <span class="number">1970</span>,month = <span class="number">1</span>,day = <span class="number">1</span>, hour = <span class="number">0</span>&#125;)							 <span class="number">10800</span></span><br><span class="line"><span class="built_in">os</span>.<span class="built_in">time</span>(&#123;year = <span class="number">1970</span>,month = <span class="number">1</span>,day = <span class="number">1</span>, hour = <span class="number">0</span>,sec = <span class="number">1</span>&#125;)					 <span class="number">10801</span></span><br><span class="line"><span class="built_in">os</span>.<span class="built_in">time</span>(&#123;year = <span class="number">1970</span>,month = <span class="number">1</span>,day = <span class="number">1</span>&#125;)									 <span class="number">54000</span></span><br></pre></td></tr></table></figure>
<p>请注意，10800是3个小时的秒数，54000则是10800加上12个小时的秒数。</p>
<h2 id="函数os-date"><a href="#函数os-date" class="headerlink" title="函数os.date"></a>函数os.date</h2><p>函数os.date在一定程度上是函数os.time的反函数，它可以将一个表示日期和时间的数字转换为某些高级的表示形式，要么是日期表要么是字符串。该函数的第1个参数是描述期望表示形式的格式化字符串，第2个参数是数字形式的日期和时间。<br>要生成一个日期表，可以使用格式化字符串”*t”。例如，调用函数os.date(“*t”,1587123725)会返回下列表：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&#123;year = <span class="number">2020</span>,month = <span class="number">9</span>,day = <span class="number">16</span>,yday = <span class="number">108</span>,wday = <span class="number">6</span>,hour = <span class="number">19</span>,<span class="built_in">min</span> = <span class="number">42</span>,sec = <span class="number">5</span>,isdst = <span class="literal">false</span>&#125;</span><br></pre></td></tr></table></figure>
<p>大致上，对于任何有效的时间t，os.time(os.date(“*t”,t)) &#x3D;&#x3D; t均成立。<br>除了isdst,结果中的其余字段均为整型数且范围分别是：</p>
<hr>
<p>year   一整年<br>month  1<del>12<br>day    1</del>31<br>hour   0<del>23<br>min    0</del>59<br>sec    0<del>60<br>wday   1</del>7<br>yday   1~366</p>
<hr>
<p>对于其他格式化字符串，函数os.date会将日期格式化为一个字符串，该字符串是根据指定的时间和日期信息对特定的指示符进行了替换的结果。所有的指示符都以百分号开头紧跟一个字母，例如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">date</span>(<span class="string">&quot;a %A in %B&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">date</span>(<span class="string">&quot;%d/%m/%Y&quot;</span>,<span class="number">1587123725</span>))      <span class="number">17</span>/<span class="number">4</span>/<span class="number">2020</span></span><br></pre></td></tr></table></figure>
<p>所有的表现形式取决于当前的区域设置。<br>下表列出了主要的指示符。</p>
<hr>
<p>%a星期几的简写<br>%A星期几的全名<br>%b月份的简写<br>%B月份的全名<br>%c日期和时间<br>%d一个月中的第几天[01<del>31]<br>%H24小时制中的小时数[00</del>23]<br>%I12小时制中的小时数[01<del>12]<br>%j一年中的第几天[001</del>365]<br>%m月份[1<del>12]<br>%M分钟[0</del>59]<br>%p”am”或”pm”<br>%S秒数[0<del>60]<br>%w星期[0</del>6 &#x3D; Sunday ~ Saturday]<br>%W一年中的第几周[0<del>53]<br>%x日期<br>%X时间<br>%y两位数的年份[0</del>99]<br>%Y完整的年份<br>%z时区<br>%%百分号</p>
<hr>
<p>对于数值，表中也给出了它们的有效范围。以下是一些演示如何创建IOS 8601格式日期和时间的示例：<br>用函数os.date(“*t”,1587123725)会返回下列表：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&#123;year = <span class="number">2020</span>,month = <span class="number">9</span>,day = <span class="number">16</span>,yday = <span class="number">108</span>,wday = <span class="number">6</span>,hour = <span class="number">19</span>,<span class="built_in">min</span> = <span class="number">42</span>,sec = <span class="number">5</span>,isdst = <span class="literal">false</span>&#125;</span><br><span class="line">```lua</span><br><span class="line">t = <span class="number">1587123725</span>	<span class="comment">-- IOS 8601格式的日期</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">date</span>(<span class="string">&quot;%Y-%m-%d&quot;</span>,t))	 <span class="number">2020</span><span class="number">-04</span><span class="number">-17</span></span><br><span class="line"> IOS <span class="number">8601</span>格式的日期和时间</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">date</span>(<span class="string">&quot;%Y-%m-%dT%H:%M:%S&quot;</span>,t))	 <span class="number">2020</span><span class="number">-04</span><span class="number">-17</span>T19:<span class="number">42</span>:<span class="number">05</span></span><br><span class="line"> IOS <span class="number">8601</span>格式的序数日期</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">date</span>(<span class="string">&quot;%Y-%j&quot;</span>,t))			</span><br></pre></td></tr></table></figure>
<p>如果格式化字符串以叹号开头，那么函数os.date会以UTC格式对其进行解析：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"> 纪元</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">date</span>(<span class="string">&quot;!%c&quot;</span>,<span class="number">0</span>))		 Zhu Jan <span class="number">1</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="number">1970</span></span><br></pre></td></tr></table></figure>
<p>如果不带任何参数调用函数os.date，那么该函数会使用格式%c，即以一种合理的格式表示日期和时间信息。请注意，%x、%X和%c会根据不同的区域和系统而发生变化。如果需要诸如dd&#x2F;mm&#x2F;yyyy这样的固定表示形式，那么就必须显示地使用诸如”%d&#x2F;%m&#x2F;%Y”这样的格式化字符串。</p>
<h2 id="日期和时间处理"><a href="#日期和时间处理" class="headerlink" title="日期和时间处理"></a>日期和时间处理</h2><p>当函数os.date创建日期表时，该表的所有字段均在有效的范围内。当我们给函数os.time传入一个日期表时，其中的字段并不需要归一化。这个特行对于日期和时间处理非常重要。<br>举一个简单的例子，假设想知道从当前向后数40天的日期，那么可以使用如下的代码进行计算：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">t = <span class="built_in">os</span>.<span class="built_in">date</span>(<span class="string">&quot;*t&quot;</span>)		</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">date</span>(<span class="string">&quot;%Y/%m/%d&quot;</span>,<span class="built_in">os</span>.<span class="built_in">time</span>(t)))		 <span class="number">2020</span>/<span class="number">04</span>/<span class="number">17</span></span><br><span class="line">t.day = t.day + <span class="number">40</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">date</span>(<span class="string">&quot;%Y/%m/%d&quot;</span>,<span class="built_in">os</span>.<span class="built_in">time</span>(t)))		 <span class="number">2020</span>/<span class="number">05</span>/<span class="number">27</span></span><br></pre></td></tr></table></figure>
<p>如果我们把数字表示的时间转换成日期表，那么就能得到日期和时间的归一化形式：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">t = <span class="built_in">os</span>.<span class="built_in">date</span>(<span class="string">&quot;*t&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(t.day,t.month)		 <span class="number">26</span> <span class="number">2</span></span><br><span class="line">t.day = t.day - <span class="number">40</span> 	</span><br><span class="line"><span class="built_in">print</span>(t.day,t.month)		 <span class="number">-14</span> <span class="number">2</span></span><br><span class="line">t = <span class="built_in">os</span>.<span class="built_in">date</span>(<span class="string">&quot;*t&quot;</span>,<span class="built_in">os</span>.<span class="built_in">time</span>(t))</span><br><span class="line"><span class="built_in">print</span>(t.day,t.month)		 <span class="number">17</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>在大多数系统中，也可以对数字形式的时间增加或减少34356000（40天对应的秒数）。不过，由于标准C并不要求数值表示的时间是从纪元开始的，因此标准C并不保证这种操作的正确性。此外，如果我们想增加的是月份而非天数，由于不同的月份具有不同的天数，那么直接操作秒数就会有问题。而以归一化的方式处理则没有这些问题：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">t = <span class="built_in">os</span>.<span class="built_in">date</span>(<span class="string">&quot;*t&quot;</span>)	<span class="comment">-- 获取当前时间</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">date</span>(<span class="string">&quot;%Y/%m/%d&quot;</span>.<span class="built_in">os</span>.<span class="built_in">time</span>(t)))		 <span class="number">2020</span>/<span class="number">04</span>/<span class="number">17</span></span><br><span class="line">t.month = t.month + <span class="number">6</span>		 从当天开始往后<span class="number">6</span>个月</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">date</span>(<span class="string">&quot;%Y/%m/%d&quot;</span>.<span class="built_in">os</span>.<span class="built_in">time</span>(t)))		 <span class="number">2020</span>/<span class="number">10</span>/<span class="number">17</span></span><br></pre></td></tr></table></figure>
<p>在操作日期时，我们必须要小心。虽然归一化是显而易见的方式进行的，但是也可能会有一些不明显的后果。例如，如果计算March 31之后的一个月，将会得到April 31，而实际上应该被归一化为May 1。尽管这听上去很自然，但实际上如果从结果（May 1）中减去一个月，得到的确实April 1而不是原来的March 31。请注意，这种不一致是日历机制导致的结果，与Lua语言无关。<br>函数os.difftime用来计算两个时间之间的差值，该函数以秒为单位返回两个指定数字形式表示的时间的差值。对于大多数系统而言，这个差值就是一个时间相对于另一个时间的减法结果。但是，与减法不同，函数os.difftime的行为在任何系统中都是确定的。以下示例计算了Lua5.2和Lua5.3发布时间之间间隔的天数：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> t5_3 = <span class="built_in">os</span>.<span class="built_in">time</span>(&#123;year = <span class="number">2015</span>,month = <span class="number">1</span>,day = <span class="number">12</span>&#125;)</span><br><span class="line"><span class="keyword">local</span> t5_2 = <span class="built_in">os</span>.<span class="built_in">time</span>(&#123;year = <span class="number">2011</span>,month = <span class="number">12</span>,day = <span class="number">16</span>&#125;)</span><br><span class="line"><span class="keyword">local</span> d = <span class="built_in">os</span>.<span class="built_in">difftime</span>(t5_3,t5_2)</span><br><span class="line"><span class="built_in">print</span>(d//(<span class="number">24</span> * <span class="number">3600</span>))     <span class="number">1123.0</span></span><br></pre></td></tr></table></figure>
<p>使用函数difftime可以获取指定日期和相对任意时刻的秒数：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">myepoch = <span class="built_in">os</span>.<span class="built_in">time</span>&#123;year = <span class="number">2000</span>,month = <span class="number">1</span>,day = <span class="number">1</span>,hour = <span class="number">0</span>&#125;</span><br><span class="line">now = <span class="built_in">os</span>.<span class="built_in">time</span>&#123;year = <span class="number">2015</span>,month = <span class="number">11</span>,day = <span class="number">20</span>&#125;</span><br><span class="line"><span class="built_in">os</span>.<span class="built_in">difftime</span>(now,myepoch)			 <span class="number">501336000.0</span></span><br></pre></td></tr></table></figure>
<p>通过归一化，可以很容易地将用秒表示的时间转换为合法的数字形式表示的时间，即我们以创建一个带有开始时刻的日期表并将日期表中的秒数设置为想要转换的数字。例如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">T = &#123;year = <span class="number">2000</span>,month = <span class="number">1</span>,day = <span class="number">1</span>,hour = <span class="number">0</span>&#125;</span><br><span class="line">t.sec = <span class="number">501336000</span></span><br><span class="line"><span class="built_in">os</span>.<span class="built_in">date</span>(<span class="string">&quot;%d/%m/%Y&quot;</span>,<span class="built_in">os</span>.<span class="built_in">time</span>(T))		 <span class="number">20</span>/<span class="number">11</span>/<span class="number">2015</span></span><br></pre></td></tr></table></figure>
<p>我们还可以使用函数os.difftime来计算一段代码的执行时间。不过，对于这个需求更好的方式是使用函数os.clock，该函数会返回程序消耗的CPU时间（单位是秒）。函数os.clock在性能测试中的典型用法如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> x = <span class="built_in">os</span>.<span class="built_in">clock</span>()</span><br><span class="line"><span class="keyword">local</span> s = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>,<span class="number">100000</span> <span class="keyword">do</span> s = s + i <span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;elapsed time: %.2f\n&quot;</span>,<span class="built_in">os</span>.<span class="built_in">clock</span>() - x))</span><br></pre></td></tr></table></figure>
<p>与函数os.time不同，函数os.clock通常具有比秒更高的精度，因此返回值为一个浮点数。具体的精度与平台相关，在POSIX系统中通常是1毫秒。</p>
<p>@[toc]<br>Lua语言的标准库提供了两个用于操作日期和时间的函数，这两个函数在C语言标准库中也存在，提供的是同样的功能。虽然这两个函数看上去很简单，但依旧可以基于这些简单的功能完成很多复杂的工作。<br>Lua语言针对日期和时间使用两种表示方式。第1中表示方式是一个数字，这个数字通常是一个整型数。尽管并非IOS C所必需的，但在大多数系统中这个数字时自一个被称为纪元的固定日期后至今的秒数。特别地，在POSIX和Windows系统中国这个固定日期均是Jan 01,1970,0:00 UTC。<br>Lua语言针对日期和时间提供的第2中表示方式是一个表。日期表具有以下几个重要的字段：year、month、day、hour、min、sec、wday、yady和isdst，除isdst以外的所有字段均为整型值。前6个字段的含义非常明显，而wday字段表示本周中的第几天（第1天为星期天）；yday表示当年中的第几天（第1天是1月1日）；isdst字段表示布尔类型，如果使用夏时令则为真。例如，Sep 16,1998,23:48:10（星期三）对应的表是：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&#123;year = <span class="number">1998</span>,month = <span class="number">9</span>,day = <span class="number">16</span>,yday = <span class="number">259</span>,wday = <span class="number">4</span>,hour = <span class="number">23</span>,<span class="built_in">min</span> = <span class="number">48.</span>sec = <span class="number">10</span>,isdst = <span class="literal">false</span>&#125;</span><br></pre></td></tr></table></figure>
<p>日期表中不包括时区，程序需要负责结合相应的时区对其正确解析。</p>
<h2 id="函数os-time-1"><a href="#函数os-time-1" class="headerlink" title="函数os.time"></a>函数os.time</h2><p>不带任何参数调用函数os.time,会以数字形式返回当前的日期和时间：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">os</span>.<span class="built_in">time</span>()	    <span class="number">1587123725</span></span><br></pre></td></tr></table></figure>
<p>对应的时间是April 17,2020,19:42:05。在一个POSIX系统中，可以使用一些基本的数字运算分离这个数字：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="built_in">date</span> = <span class="number">1587123725</span></span><br><span class="line"><span class="keyword">local</span> day2year = <span class="number">265.242</span>			 一年的天数</span><br><span class="line"><span class="keyword">local</span> sec2hour = <span class="number">60</span> * <span class="number">60</span>			 一小时的秒数</span><br><span class="line"><span class="keyword">local</span> sec2day  = sec2hour * <span class="number">24</span>       一天的秒数</span><br><span class="line"><span class="keyword">local</span> sec2year = sec2day * day2year  一年的秒数</span><br><span class="line"></span><br><span class="line"> 年</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">date</span> // sec2year + <span class="number">1970</span>)</span><br><span class="line"></span><br><span class="line"> 小时</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">date</span> % sec2day // sec2hour)</span><br><span class="line"></span><br><span class="line"> 分钟</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">date</span> % sec2hour // <span class="number">60</span>)</span><br><span class="line"></span><br><span class="line"> 秒</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">date</span> % <span class="number">60</span>)</span><br></pre></td></tr></table></figure>
<p>如果以一个日期表作为参数调用os.time，那么改函数会返回该表中所描述日期和时间对应的数字。year、month和day字段是必需的，hour、min和sec字段如果没有提供的话则默认为12:00:00，其余字段则会被忽略。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">os</span>.<span class="built_in">time</span>(&#123;year = <span class="number">2020</span>,month = <span class="number">4</span>,day = <span class="number">17</span>,hour = <span class="number">19</span>,<span class="built_in">min</span> = <span class="number">42</span>,sec = <span class="number">5</span>&#125;)		 <span class="number">1587123725</span></span><br><span class="line"><span class="built_in">os</span>.<span class="built_in">time</span>(&#123;year = <span class="number">1970</span>,month = <span class="number">1</span>,day = <span class="number">1</span>, hour = <span class="number">0</span>&#125;)							 <span class="number">10800</span></span><br><span class="line"><span class="built_in">os</span>.<span class="built_in">time</span>(&#123;year = <span class="number">1970</span>,month = <span class="number">1</span>,day = <span class="number">1</span>, hour = <span class="number">0</span>,sec = <span class="number">1</span>&#125;)					 <span class="number">10801</span></span><br><span class="line"><span class="built_in">os</span>.<span class="built_in">time</span>(&#123;year = <span class="number">1970</span>,month = <span class="number">1</span>,day = <span class="number">1</span>&#125;)									 <span class="number">54000</span></span><br></pre></td></tr></table></figure>
<p>请注意，10800是3个小时的秒数，54000则是10800加上12个小时的秒数。</p>
<h2 id="函数os-date-1"><a href="#函数os-date-1" class="headerlink" title="函数os.date"></a>函数os.date</h2><p>函数os.date在一定程度上是函数os.time的反函数，它可以将一个表示日期和时间的数字转换为某些高级的表示形式，要么是日期表要么是字符串。该函数的第1个参数是描述期望表示形式的格式化字符串，第2个参数是数字形式的日期和时间。<br>要生成一个日期表，可以使用格式化字符串”*t”。例如，调用函数os.date(“*t”,1587123725)会返回下列表：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&#123;year = <span class="number">2020</span>,month = <span class="number">9</span>,day = <span class="number">16</span>,yday = <span class="number">108</span>,wday = <span class="number">6</span>,hour = <span class="number">19</span>,<span class="built_in">min</span> = <span class="number">42</span>,sec = <span class="number">5</span>,isdst = <span class="literal">false</span>&#125;</span><br></pre></td></tr></table></figure>
<p>大致上，对于任何有效的时间t，os.time(os.date(“*t”,t)) &#x3D;&#x3D; t均成立。<br>除了isdst,结果中的其余字段均为整型数且范围分别是：</p>
<hr>
<p>year    一整年<br>month   1<del>12<br>day     1</del>31<br>hour    0<del>23<br>min     0</del>59<br>sec     0<del>60<br>wday    1</del>7<br>yday    1~366</p>
<hr>
<p>对于其他格式化字符串，函数os.date会将日期格式化为一个字符串，该字符串是根据指定的时间和日期信息对特定的指示符进行了替换的结果。所有的指示符都以百分号开头紧跟一个字母，例如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">date</span>(<span class="string">&quot;a %A in %B&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">date</span>(<span class="string">&quot;%d/%m/%Y&quot;</span>,<span class="number">1587123725</span>))     <span class="number">17</span>/<span class="number">4</span>/<span class="number">2020</span></span><br></pre></td></tr></table></figure>
<p>所有的表现形式取决于当前的区域设置。<br>下表列出了主要的指示符。</p>
<hr>
<p>%a星期几的简写<br>%A星期几的全名<br>%b月份的简写<br>%B月份的全名<br>%c日期和时间<br>%d一个月中的第几天[01<del>31]<br>%H24小时制中的小时数[00</del>23]<br>%I12小时制中的小时数[01<del>12]<br>%j一年中的第几天[001</del>365]<br>%m月份[1<del>12]<br>%M分钟[0</del>59]<br>%p”am”或”pm”<br>%S秒数[0<del>60]<br>%w星期[0</del>6 &#x3D; Sunday ~ Saturday]<br>%W一年中的第几周[0<del>53]<br>%x日期<br>%X时间<br>%y两位数的年份[0</del>99]<br>%Y完整的年份<br>%z时区<br>%%百分号</p>
<hr>
<p>对于数值，表中也给出了它们的有效范围。以下是一些演示如何创建IOS 8601格式日期和时间的示例：<br>用函数os.date(“*t”,1587123725)会返回下列表：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&#123;year = <span class="number">2020</span>,month = <span class="number">9</span>,day = <span class="number">16</span>,yday = <span class="number">108</span>,wday = <span class="number">6</span>,hour = <span class="number">19</span>,<span class="built_in">min</span> = <span class="number">42</span>,sec = <span class="number">5</span>,isdst = <span class="literal">false</span>&#125;</span><br><span class="line">```lua</span><br><span class="line">t = <span class="number">1587123725</span>	 IOS <span class="number">8601</span>格式的日期</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">date</span>(<span class="string">&quot;%Y-%m-%d&quot;</span>,t))	 <span class="number">2020</span><span class="number">-04</span><span class="number">-17</span></span><br><span class="line"> IOS <span class="number">8601</span>格式的日期和时间</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">date</span>(<span class="string">&quot;%Y-%m-%dT%H:%M:%S&quot;</span>,t))	 <span class="number">2020</span><span class="number">-04</span><span class="number">-17</span>T19:<span class="number">42</span>:<span class="number">05</span></span><br><span class="line"> IOS <span class="number">8601</span>格式的序数日期</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">date</span>(<span class="string">&quot;%Y-%j&quot;</span>,t))			</span><br></pre></td></tr></table></figure>
<p>如果格式化字符串以叹号开头，那么函数os.date会以UTC格式对其进行解析：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"> 纪元</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">date</span>(<span class="string">&quot;!%c&quot;</span>,<span class="number">0</span>))		 Zhu Jan <span class="number">1</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="number">1970</span></span><br></pre></td></tr></table></figure>
<p>如果不带任何参数调用函数os.date，那么该函数会使用格式%c，即以一种合理的格式表示日期和时间信息。请注意，%x、%X和%c会根据不同的区域和系统而发生变化。如果需要诸如dd&#x2F;mm&#x2F;yyyy这样的固定表示形式，那么就必须显示地使用诸如”%d&#x2F;%m&#x2F;%Y”这样的格式化字符串。</p>
<h2 id="日期和时间处理-1"><a href="#日期和时间处理-1" class="headerlink" title="日期和时间处理"></a>日期和时间处理</h2><p>当函数os.date创建日期表时，该表的所有字段均在有效的范围内。当我们给函数os.time传入一个日期表时，其中的字段并不需要归一化。这个特行对于日期和时间处理非常重要。<br>举一个简单的例子，假设想知道从当前向后数40天的日期，那么可以使用如下的代码进行计算：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">t = <span class="built_in">os</span>.<span class="built_in">date</span>(<span class="string">&quot;*t&quot;</span>)		</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">date</span>(<span class="string">&quot;%Y/%m/%d&quot;</span>,<span class="built_in">os</span>.<span class="built_in">time</span>(t)))		 <span class="number">2020</span>/<span class="number">04</span>/<span class="number">17</span></span><br><span class="line">t.day = t.day + <span class="number">40</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">date</span>(<span class="string">&quot;%Y/%m/%d&quot;</span>,<span class="built_in">os</span>.<span class="built_in">time</span>(t)))		 <span class="number">2020</span>/<span class="number">05</span>/<span class="number">27</span></span><br></pre></td></tr></table></figure>
<p>如果我们把数字表示的时间转换成日期表，那么就能得到日期和时间的归一化形式：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">t = <span class="built_in">os</span>.<span class="built_in">date</span>(<span class="string">&quot;*t&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(t.day,t.month)		 <span class="number">26</span> <span class="number">2</span></span><br><span class="line">t.day = t.day - <span class="number">40</span> 	</span><br><span class="line"><span class="built_in">print</span>(t.day,t.month)		 <span class="number">-14</span> <span class="number">2</span></span><br><span class="line">t = <span class="built_in">os</span>.<span class="built_in">date</span>(<span class="string">&quot;*t&quot;</span>,<span class="built_in">os</span>.<span class="built_in">time</span>(t))</span><br><span class="line"><span class="built_in">print</span>(t.day,t.month)		 <span class="number">17</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>在大多数系统中，也可以对数字形式的时间增加或减少34356000（40天对应的秒数）。不过，由于标准C并不要求数值表示的时间是从纪元开始的，因此标准C并不保证这种操作的正确性。此外，如果我们想增加的是月份而非天数，由于不同的月份具有不同的天数，那么直接操作秒数就会有问题。而以归一化的方式处理则没有这些问题：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">t = <span class="built_in">os</span>.<span class="built_in">date</span>(<span class="string">&quot;*t&quot;</span>)	 获取当前时间</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">date</span>(<span class="string">&quot;%Y/%m/%d&quot;</span>.<span class="built_in">os</span>.<span class="built_in">time</span>(t)))		 <span class="number">2020</span>/<span class="number">04</span>/<span class="number">17</span></span><br><span class="line">t.month = t.month + <span class="number">6</span>		 从当天开始往后<span class="number">6</span>个月</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">date</span>(<span class="string">&quot;%Y/%m/%d&quot;</span>.<span class="built_in">os</span>.<span class="built_in">time</span>(t)))		 <span class="number">2020</span>/<span class="number">10</span>/<span class="number">17</span></span><br></pre></td></tr></table></figure>
<p>在操作日期时，我们必须要小心。虽然归一化是显而易见的方式进行的，但是也可能会有一些不明显的后果。例如，如果计算March 31之后的一个月，将会得到April 31，而实际上应该被归一化为May 1。尽管这听上去很自然，但实际上如果从结果（May 1）中减去一个月，得到的确实April 1而不是原来的March 31。请注意，这种不一致是日历机制导致的结果，与Lua语言无关。<br>函数os.difftime用来计算两个时间之间的差值，该函数以秒为单位返回两个指定数字形式表示的时间的差值。对于大多数系统而言，这个差值就是一个时间相对于另一个时间的减法结果。但是，与减法不同，函数os.difftime的行为在任何系统中都是确定的。以下示例计算了Lua5.2和Lua5.3发布时间之间间隔的天数：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> t5_3 = <span class="built_in">os</span>.<span class="built_in">time</span>(&#123;year = <span class="number">2015</span>,month = <span class="number">1</span>,day = <span class="number">12</span>&#125;)</span><br><span class="line"><span class="keyword">local</span> t5_2 = <span class="built_in">os</span>.<span class="built_in">time</span>(&#123;year = <span class="number">2011</span>,month = <span class="number">12</span>,day = <span class="number">16</span>&#125;)</span><br><span class="line"><span class="keyword">local</span> d = <span class="built_in">os</span>.<span class="built_in">difftime</span>(t5_3,t5_2)</span><br><span class="line"><span class="built_in">print</span>(d//(<span class="number">24</span> * <span class="number">3600</span>))     <span class="number">1123.0</span></span><br></pre></td></tr></table></figure>
<p>使用函数difftime可以获取指定日期和相对任意时刻的秒数：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">myepoch = <span class="built_in">os</span>.<span class="built_in">time</span>&#123;year = <span class="number">2000</span>,month = <span class="number">1</span>,day = <span class="number">1</span>,hour = <span class="number">0</span>&#125;</span><br><span class="line">now = <span class="built_in">os</span>.<span class="built_in">time</span>&#123;year = <span class="number">2015</span>,month = <span class="number">11</span>,day = <span class="number">20</span>&#125;</span><br><span class="line"><span class="built_in">os</span>.<span class="built_in">difftime</span>(now,myepoch)			 <span class="number">501336000.0</span></span><br></pre></td></tr></table></figure>
<p>通过归一化，可以很容易地将用秒表示的时间转换为合法的数字形式表示的时间，即我们以创建一个带有开始时刻的日期表并将日期表中的秒数设置为想要转换的数字。例如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">T = &#123;year = <span class="number">2000</span>,month = <span class="number">1</span>,day = <span class="number">1</span>,hour = <span class="number">0</span>&#125;</span><br><span class="line">t.sec = <span class="number">501336000</span></span><br><span class="line"><span class="built_in">os</span>.<span class="built_in">date</span>(<span class="string">&quot;%d/%m/%Y&quot;</span>,<span class="built_in">os</span>.<span class="built_in">time</span>(T))		 <span class="number">20</span>/<span class="number">11</span>/<span class="number">2015</span></span><br></pre></td></tr></table></figure>
<p>我们还可以使用函数os.difftime来计算一段代码的执行时间。不过，对于这个需求更好的方式是使用函数os.clock，该函数会返回程序消耗的CPU时间（单位是秒）。函数os.clock在性能测试中的典型用法如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> x = <span class="built_in">os</span>.<span class="built_in">clock</span>()</span><br><span class="line"><span class="keyword">local</span> s = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>,<span class="number">100000</span> <span class="keyword">do</span> s = s + i <span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;elapsed time: %.2f\n&quot;</span>,<span class="built_in">os</span>.<span class="built_in">clock</span>() - x))</span><br></pre></td></tr></table></figure>
<p>与函数os.time不同，函数os.clock通常具有比秒更高的精度，因此返回值为一个浮点数。具体的精度与平台相关，在POSIX系统中通常是1毫秒。</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua模式匹配</title>
    <url>/47260.html</url>
    <content><![CDATA[<p>与其他几种脚本语言不通，Lua语言既没有使用POSIX正则表达式，也没有使用Perl正则表达式来进行模式匹配。之所以这样做的主要原因在于大小问题：一个典型的POSIX正则表达式实现需要超过4000行代码，这比所有Lua语言标准库总大小的一半还大。相比之下，Lua语言模式匹配的实现代码只有不到600行。尽管Lua语言的欧式匹配做不到完整POSIX实现的所有功能，但是Lua语言的模式匹配仍然非常强大，同时还具有一些与标准POSIX不同但又可与之媲美的功能。</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>



<h2 id="模式匹配的相关函数"><a href="#模式匹配的相关函数" class="headerlink" title="模式匹配的相关函数"></a>模式匹配的相关函数</h2><p>字符串标准库提供了基于模式的4个函数。我们已经初步了解过函数find和gsub，其余两个函数分别是match和gmatch。</p>
<h3 id="函数string-find"><a href="#函数string-find" class="headerlink" title="函数string.find"></a>函数string.find</h3><p>函数string.find用于在指定的目标字符串中搜索指定的模式。最简单的模式就是一个单词，它智慧匹配到这个单词本身。例如，模式’hello’会在目标自服装中所搜子串”hello”。函数string.find找到一个模式后，会返回两个值：匹配到模式开始位置的索引和结束位置的索引。如果没有找到任何匹配，则返回nil：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&quot;hello world&quot;</span></span><br><span class="line">i,j = <span class="built_in">string</span>.<span class="built_in">find</span>(s,<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">	<span class="built_in">print</span>(i,j)				<span class="comment">-- 1	5</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">sub</span>(s,i,j)) <span class="comment">-- hello</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">find</span>(s,<span class="string">&quot;world&quot;</span>))	<span class="comment">--	7	11</span></span><br><span class="line">	i,j = <span class="built_in">string</span>.<span class="built_in">find</span>(s,<span class="string">&quot;l&quot;</span>)</span><br><span class="line">	<span class="built_in">print</span>(i,j)			<span class="comment">-- 3	3</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">find</span>(s,<span class="string">&quot;lll&quot;</span>))		<span class="comment">-- nil</span></span><br></pre></td></tr></table></figure>
<p>匹配成功后，可以以函数find返回的结果为参数调用函数string.sub来获取目标字符串匹配相应模式的子串。对于简单的模式来说，这一般就是模式本身。<br>函数string.find具有两个可选参数。第3个参数是一个索引，用于说明从目标字符串的哪个位置开始搜索。第4个参数是一个布尔值，用于说明是否进行简单搜索。所谓简单所有就是忽略模式而在目标字符串中进行单纯的“查找子字符串”的动作：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">string</span>.<span class="built_in">find</span>(<span class="string">&quot;a[word]&quot;</span>,<span class="string">&quot;[&quot;</span>)</span><br><span class="line"><span class="built_in">stdin</span>:<span class="number">1</span>:malformed pattern (missing <span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">&gt; <span class="built_in">string</span>.<span class="built_in">find</span>(<span class="string">&quot;a [word]&quot;</span>,<span class="string">&quot;[&quot;</span>,<span class="number">1</span>,<span class="literal">true</span>) 		<span class="comment">-- 3	3</span></span><br></pre></td></tr></table></figure>
<p>由于’[‘在模式中具有特殊含义，因此第1个函数调用会报错。在第2个函数调用中，函数只是把’[‘当作简单字符串。请注意，如果没有第3个参数，是不能传入第4个可选参数的。</p>
<h3 id="函数string-match"><a href="#函数string-match" class="headerlink" title="函数string.match"></a>函数string.match</h3><p>由于函数string.match也用于在一个字符串搜索模式，因此它与函数string.find非常相似。不过，函数string.match返回的是目标字符串中与模式相匹配的那部分子串，而非该模式所在的位置：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">match</span>(<span class="string">&quot;hello world&quot;</span>,<span class="string">&quot;hello&quot;</span>))			<span class="comment">-- hello</span></span><br></pre></td></tr></table></figure>
<p>对于诸如’hello’这样固定的模式，使用这个函数并没有什么意义。然而，当模式是变量时，这个函数的强大之处就显现出来了。例如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">date</span> = <span class="string">&quot;Today is 15/4/2020&quot;</span></span><br><span class="line">d = <span class="built_in">string</span>.<span class="built_in">match</span>(<span class="built_in">date</span>,<span class="string">&quot;%d + /%d + /%d +&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(d)		<span class="comment">-- 15/4/2020</span></span><br></pre></td></tr></table></figure>

<h3 id="函数string-gmatch"><a href="#函数string-gmatch" class="headerlink" title="函数string.gmatch"></a>函数string.gmatch</h3><p> 函数string.gmatch返回一个函数，通过返回的函数可以遍历一个字符串中所有出现的指定模式。例如，以下示例可以找出字符串s中出现的所有单词：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&quot;some string&quot;</span></span><br><span class="line">words = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">string</span>.<span class="built_in">gmatch</span>(s,<span class="string">&quot;%a+&quot;</span>) <span class="keyword">do</span> </span><br><span class="line">	words[#words + <span class="number">1</span>] = w</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><p> 大多数模式匹配库都是用反斜杠作为转义符。然后，这种方式可能会导致一些不良的后果。对于Lua语言的解析器而言，模式仅仅是普通的字符串。模式与其他的字符串一样遵循相同的规则，并不会被特殊对待；只有模式匹配相关的函数才会把它们当做模式进行解析。由于反斜杠是Lua语言中的转义符，所以我们应该避免它传递给任何函数。模式本身就难以阅读，到处把“\”换成“\”就更加火上浇油了。<br> 我们可以使用双括号把模式括起来构成的长字符串来解决这个问题。然而，长字符串的写法对于通常比较短的模式而言又往往显得冗长。此外，我们还会失去在模式内进行转义的能力。<br> Lua语言的解决方案更加简单：Lua语言中的模式使用百分号作为转义符。总体上，所有被转义的字母都具有某些特殊含义，而所有被转移的非字母则代表其本身。<br> 我们首先来学习字符分类的模式。所谓字符分类，就是模式中能够与一个特定集合中的任意字符相匹配的一项。例如，分类%d匹配的是任意数字。因此，可以使用模式’%d%d&#x2F;%d%&#x2F;d%d%d%d’来匹配dd&#x2F;mm&#x2F;yyyy格式的日期：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&quot;Deadline is 15/04/2020, firm</span></span><br><span class="line"><span class="string">date = &quot;</span>%d%d/%d%d/%d%d%d%d<span class="string">&quot;</span></span><br><span class="line"><span class="string">print(string.match(s,date))		-- 15/04/2020</span></span><br></pre></td></tr></table></figure>
<p>下表列出了所有预置的字符串分类及其对应的含义：</p>
<hr>
<p>.					  任意字符<br>%a				  字母<br>%c				  控制字符<br>%d				  数字<br>%g				  除空格外的可打印字符	<br>%l				  小写字母<br>%p				  标点符号<br>%s				  空白字符<br>%u				  大写字母<br>%w				  字母和数字<br>%x				  十六进制数字</p>
<hr>
<p> 这些类的大写形式表示类的补集。例如，<code>%A</code>代表任意非字母的字符：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>((<span class="built_in">string</span>.<span class="built_in">gsub</span>(<span class="string">&quot;hello, up-down!&quot;</span>,<span class="string">&quot;%A&quot;</span>,<span class="string">&quot;.&quot;</span>))) <span class="comment">-- hello..up.down.</span></span><br></pre></td></tr></table></figure>
<p>在输出函数gsub的返回结果时，我们使用了额外的括号来丢弃第二个结果，也就是特换发生的次数。<br> 当在模式中使用时，还有一些被称为魔法字符的字符具有特殊含义。Lua语言的模式所使用的魔法字符包括：<br><code>()</code> <code>.</code> <code>%</code> <code>+</code> <code>-</code> <code>*</code> <code>?</code> <code>[</code> <code>]</code> <code>^</code> <code>$</code><br>正如我们之前已经看到的，百分号同样可以用于这些魔法字符的转义。因此，<code>%?</code>匹配一个问号，<code>%%</code>匹配一个百分号。我们不仅可以用百分号对魔法字符进行转义，还可以将其用于其他所有字母和数字外的字符。当不确定是否需要转义时，为了保险起见就可以使用转义符。<br> 可以使用字符集来创建自定义的字符分类，只需要在方括号内将单个字符和字符分类组合起来即可。例如，字符集<code>[%w_]</code>匹配所有以下画线结尾的字母和数字，<code>[01]</code>匹配二进制数字，<code>[%[%]]</code>匹配方括号。如果想要统计一段文本中元音的数量，可以使用如下的代码：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">_,nvow = <span class="built_in">string</span>.<span class="built_in">gsub</span>(text,<span class="string">&quot;[AEIOUaeiou]&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>还可以在字符集中包含一段字符范围，做法是写出字符范围的第一个字符和最后一个字符并用横线将它们连接在一起。由于大多数常用的字符范围都被预先定义了，所以这个功能很少被使用。例如，<code>%d</code>相当于<code>[0,9]</code>，<code>%x</code>相当于<code>[0-9a-fA-F]</code>。不过，如果需要查找一个八进制的数字，那么使用<code>[0-7]</code>就比显示地枚举<code>[01234567]</code>强多了。<br> 在字符集前加一个补字符^就可以得到这个字符集对应的补集：模式<code>[^\n]</code>则代表除换行符以外的其他字符。尽管如此，我们还是要记得对于简单的分类来说可以使用大写形式来获得对应的补集：<code>$S</code>显然要比<code>[^%s]</code>更简单。<br> 还可以通过描述模式中重复和可选部分的修饰符来让模式更加有用。Lua语言中的模式提供了4中修饰符：</p>
<hr>
<p><code>+</code>  重复一次或多次<br><code>*</code>  重复零次或多次<br><code>-</code>  重复零次或多次（最小匹配）<br><code>?</code>  可选（出现零次或一次）</p>
<hr>
<p> 修饰符 + 匹配原始字符串分类中的一个或多个字符，它总是获取与模式相匹配的最长序列。例如，模式’%a+’代表一个或多个字母：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>((<span class="built_in">string</span>.gusb(<span class="string">&quot;one , and two; and three&quot;</span>, <span class="string">&quot;%a+&quot;</span>,<span class="string">&quot;word&quot;</span>)))</span><br><span class="line"><span class="comment">-- word, word word; word word</span></span><br></pre></td></tr></table></figure>
<p>模式’%d+’匹配一个或多个数字</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">match</span>(<span class="string">&quot;the number 1298 is event&quot;</span>,<span class="string">&quot;%d+&quot;</span>))	<span class="comment">-- 1298</span></span><br></pre></td></tr></table></figure>
<p> 修饰符 * 类似于修饰符+，但是它还接受对应字符分类出现零次的情况。该修饰符一个典型的用法就是在模式的部分之间匹配可选的空格。例如，为了匹配像（）或（）这样的空括号对，就可以使用模式<code>&#39;%(%s*%)&#39;</code>，其中的<code>&#39;%s*&#39;</code>匹配零个或多个空格。另一个示例是用模式<code>&#39;[_%a][_%w]*&#39;</code>匹配Lua程序中的标识符：标识符是一个由字母或下画线开头，并紧跟零个或多个由下画线、字母或数字组成的序列。<br> 修饰符-和修饰符 * 类似，也是用于匹配原始字符分类的零次或多次出现。不过，跟修饰符 * 总是匹配能匹配的最长序列不同，修饰符-只会匹配最短序列。虽然有时它们两者并没有什么区别，但大多数情况下这两者会导致截然不同的结果。例如，当试图用模式<code>&#39;[_%a][_%w]-&#39;</code>查找标识符时，由于<code>[_%w]-</code>总是匹配空序列，所以我们只会找到第一个字母。又如，假设我们想要删掉某C语言程序中的所有注释，通常会首先尝试使用<code>&#39;/%*.*%*/&#39;</code>。然而，由于<code>&#39;.*</code>会尽可能长地匹配，因此程序中的第一个<code>&quot;/*&quot;</code>只会与最后一个<code>&quot;*/&quot;</code>相匹配：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">test = <span class="string">&quot;int x; /* x */ int y; /* y * /&quot;</span></span><br><span class="line"><span class="built_in">print</span>((<span class="built_in">string</span>.<span class="built_in">gsub</span>(test,<span class="string">&quot;/%*.*%*/&quot;</span>, <span class="string">&quot;&quot;</span>)))</span><br><span class="line"><span class="comment">-- int x</span></span><br></pre></td></tr></table></figure>
<p>相反，模式’.-‘则只会匹配到找到的第一个”*&#x2F;“，这样就能得到期望的结果：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">test = <span class="string">&quot;int x; /* x */ int y; /* y * /&quot;</span></span><br><span class="line"><span class="built_in">print</span>((<span class="built_in">string</span>.<span class="built_in">gsub</span>(test,<span class="string">&quot;/%*.-*%*/&quot;</span>, <span class="string">&quot;&quot;</span>)))</span><br><span class="line"><span class="comment">-- int x;	int y</span></span><br></pre></td></tr></table></figure>
<p> 最后一个修饰符？可用于匹配一个可选的字符。例如，假设我们想在一段文本中寻找一个证书，而这个证书可能包括一个可选的符号，那么就可以使用模式<code>[+-]?%d+</code>来完成这个需求，该模式可以匹配像“-12”、“23”和“+1009”这样的数字。其中字符分类<code>[+-]</code>匹配加号或减号，而其后的问号则代表这个符号是可选的。<br> 与其他系统不同的是，Lua语言中的修饰符只能作用于一个字符模式，而无法作用于一组分类。例如，我们不能写出匹配一个可选的单词的模式。通常，可以使用一些高级技巧来绕开这个限制。<br> 以补字符^开头的模式表示从目标字符串开头开始匹配。类似地，以$结尾的模式表示匹配到目标字符串的结尾。我们可以同时使用这两个标记来限制匹配查找和锚定模式。例如，如下的代码可以用来检查字符串s是否以数字开头：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">string</span>.<span class="built_in">find</span>(s,<span class="string">&quot;^%d&quot;</span>) <span class="keyword">then</span> ...</span><br></pre></td></tr></table></figure>
<p>如下的代码用来检查字符串是否为一个没有多余前缀字符和后缀字符的整数：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">string</span>.<span class="built_in">find</span>(s.<span class="string">&quot;^[+-]?%d+$&quot;</span>) <span class="keyword">then</span> ...</span><br></pre></td></tr></table></figure>
<p>^和$字符只有位于模式的开头和结尾时才具有特殊含义；否则，它们仅仅就是与其身相匹配的普通字符。<br> 模式<code>%b</code>匹配成对的字符串，它的写法是<code>%bxy</code>，其中x和y是任意两个不同的字符，x作为起始符而y作为结束字符。例如，模式<code>%b()</code>匹配以左括号开始并以对应右括号结束的子串：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&quot;a (enclosed (in) parentheses line&quot;</span></span><br><span class="line"><span class="built_in">print</span>((<span class="built_in">string</span>.<span class="built_in">gsub</span>（s,<span class="string">&quot;%b()&quot;</span>,<span class="string">&quot;&quot;</span>))			<span class="comment">-- a line</span></span><br></pre></td></tr></table></figure>
<p>通常，我们使用<code>%b()</code>、<code>%b[]</code>、<code>%b&#123;&#125;</code>或<code>%b&lt;&gt;</code>等作为模式，但实际上可以用任意不同的字符作为分隔符。<br> 最后，模式<code>%f[char-set]</code>代表前置模式。该模式只有在后一个字符位于char-set内而前一个字符不在时匹配一个空字符串：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&quot;the anthem is then theme&quot;</span></span><br><span class="line"><span class="built_in">print</span>((<span class="built_in">string</span>.<span class="built_in">gsub</span>(s,<span class="string">&quot;%f[%w]the%f[%W]&quot;</span>,<span class="string">&quot;one&quot;</span>)))			<span class="comment">-- one anthem is one theme</span></span><br></pre></td></tr></table></figure>
<p>模式<code>%f[%w]</code>匹配位于一个非字母或数字的字符和一个字母或数字的字符之间的前置，而模式<code>%f[%W]</code>则匹配一个字母或数字的字符和一个非字母或数字的字符之间的前置。因此，指定的模式只会匹配完整的字符串”the”。请注意，即使字符集只有一个分类，也必须把它用括号括起来。<br> 前置模式把目标字符串中第一个字符前和最后一个字符后的位置当成空字符。在前例中，第一个”the”在不属于集合<code>[%W]</code>的空字符和属于集合<code>[%W]</code>的t之间匹配了一个前置。</p>
<h2 id="捕获"><a href="#捕获" class="headerlink" title="捕获"></a>捕获</h2><p> 捕获机制允许根据一个模式从目标字符串中抽出与该模式匹配的内容来用于后续用途，可以通过把模式中需要捕获的部分放到一对圆括号内来指定捕获。<br> 对于具有捕获的模式，函数string.match会将所有捕获到的值作为单独的结果返回；换句话说，该函数将字符串切分成多个被捕获的部分：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">pair = <span class="string">&quot;name = Anna&quot;</span></span><br><span class="line">key,value = <span class="built_in">string</span>.<span class="built_in">match</span>(pair, <span class="string">&quot;(%a+)%s*=%s*(%a+)&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(key,value)		<span class="comment">-- name Anna</span></span><br></pre></td></tr></table></figure>
<p>模式<code>%a+</code>表示一个非空的字母序列，模式<code>%s*</code>表示一个可能为空的空白序列。因此，上例中的这个模式表示一个字母序列、紧跟着空白序列、一个等号、空白序列以及另一个字母序列。模式中的两个字母系列被分别放在圆括号中，因此在匹配时就能捕获到它们。下面是一个类似的示例：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">date</span> = <span class="string">&quot;Today is 15/4/2020&quot;</span></span><br><span class="line">d,m,y = <span class="built_in">string</span>.<span class="built_in">match</span>(<span class="built_in">date</span>,<span class="string">&quot;(%d+)/(%d+)/(%d+)&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(d,m,y)		<span class="comment">-- 15 4 2020</span></span><br></pre></td></tr></table></figure>
<p>在这个示例中，使用了3个捕获，每个捕获对应一个数字序列。<br> 在模式中，形如<code>%n</code>的分类，表示匹配第n个捕获的副本。举一个典型的例子，假设想在一个字符串中寻找一个由单引号或双引号括起来的子串。那么可能会尝试使用模式’[“ ‘].-[“ ‘]’，它表示一个引号后面跟任意内容及另外一个引号；但是，这种模式在处理像”it’s all right”这样的字符串时会有问题。要解决这个问题，可以捕获第一个引号然后用它来指明第二个引号：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">s = <span class="string">[[then he said:&quot;it&#x27;s all right&quot;!]]</span></span><br><span class="line">q, quotedPart = <span class="built_in">string</span>.<span class="built_in">match</span>(s,<span class="string">&quot;([\&quot;&#x27;])(.-)%1&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(quotedPart)			<span class="comment">-- it&#x27;s all right</span></span><br><span class="line"><span class="built_in">print</span>(q)					<span class="comment">-- &quot;</span></span><br></pre></td></tr></table></figure>
<p>第1个捕获是引号本身，第2个捕获是引号中的内容。<br>下例是一个类似的示例，用于匹配Lua语言中的长字符串的模式：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">%[(=*)%[(.-)%]%<span class="number">1</span>%]</span><br></pre></td></tr></table></figure>
<p>它所匹配的内容依次是：一个左方括号、零个或多个等号、另一个左方括号、任意内容（字符串的内容）、一个右方括号、相同数量的等号及另一个右方括号：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">p = <span class="string">&quot;%[(=*)%[(.-)%]%1%]&quot;</span></span><br><span class="line">s = <span class="string">&quot;a = [ = [[[ something ]] ] == ] ] =];print(a)&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">match</span>(s,p))   <span class="comment">-- [[something]] ] == ]</span></span><br></pre></td></tr></table></figure>
<p>第1个捕获是等号序列，第2个捕获是字符串内容。<br> 被捕获对象的第3个用途是在函数gsub的替代字符串中。像模式一样，替代字符串同样可以包括像”%n”一样的字符分类，当发生替换时会被替换为相应的捕获。特别地，“%0”意味着整个匹配，并且替换字符串中的百分号必须被转义为“%%”。下面这个示例会重复字符串中的每个字母，并且在每个被重复的字母之间插入一个减号：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>((<span class="built_in">string</span>.<span class="built_in">gsub</span>(<span class="string">&quot;hello Lua!&quot;</span>,<span class="string">&quot;%a&quot;</span>,<span class="string">&quot;%0-%0&quot;</span>)))		<span class="comment">-- h-he-el-ll-lo-o L-Lu-ua-a!</span></span><br></pre></td></tr></table></figure>
<p>下例交换了相邻的字符：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>((<span class="built_in">string</span>.<span class="built_in">gsub</span>(<span class="string">&quot;hello Lua!&quot;</span>,<span class="string">&quot;(.)(.)&quot;</span>,<span class="string">&quot;%2%1&quot;</span>)))  <span class="comment">-- ehll ouLa	</span></span><br></pre></td></tr></table></figure>

<h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><p> 正如我们此前已经看到的，函数string.gsub的第3个参数不仅可以是字符串，还可以是一个函数或表。当第3个参数是一个函数时，函数string.gsub会在每次找到匹配时调用该函数，参数是捕获到的内容而返回值则被作为替换字符串。当第3个参数是一个表时，函数string.gsub会把第一个捕获到的内容作为建，然后将表中对应该键的值作为替换字符串。如果函数的返回值为nil或表中不包含这个键或表中键的对应值为nil，那么函数gsub不改变这个匹配。<br> 先举一个例子，下述函数用于变量展开，它会把字符串中所有出现的$varname替换为全局变量varname的值：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">expand</span><span class="params">(s)</span></span></span><br><span class="line">	<span class="keyword">return</span> (<span class="built_in">string</span>.<span class="built_in">gsub</span>(s,<span class="string">&quot;$(%w+)&quot;</span>,<span class="built_in">_G</span>))</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">name = <span class="string">&quot;Lua&quot;</span>;<span class="built_in">status</span> = <span class="string">&quot;great&quot;</span></span><br><span class="line"><span class="built_in">print</span>(expand(<span class="string">&quot;$name is %status, isn&#x27;t it?&quot;</span>))	<span class="comment">-- Lua is great ,isn&#x27;t it?</span></span><br></pre></td></tr></table></figure>
<p>（_G是预先定义的包括所有全局变量的表）对于每个与<code>$(%w_)</code>匹配到的地方，函数gsub都会在全局表_G中查找捕获到的名字，并用找到的结果替换字符串中相匹配的部分；如果表中没有对应的键，则不进行替换：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(expand(<span class="string">&quot;$othername is $status, isn&#x27;t it?&quot;</span>))	<span class="comment">-- $othername is great,isn&#x27;t it?</span></span><br></pre></td></tr></table></figure>
<p>如果不确定是否制定变量具有字符串值，那么可以对它们的值调用函数tostring。在这种情况下，可以用一个函数来返回要替换的值：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">expand</span><span class="params">(s)</span></span></span><br><span class="line">	<span class="keyword">return</span> (<span class="built_in">string</span>.<span class="built_in">gsub</span>(s,<span class="string">&quot;$(%w+)&quot;</span>,<span class="function"><span class="keyword">function</span><span class="params">(n)</span></span></span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">tostring</span>(<span class="built_in">_G</span>[n])</span><br><span class="line">	<span class="keyword">end</span>))</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(expand(<span class="string">&quot;print = $print; a = $a&quot;</span>))		<span class="comment">-- print = function:0x8050; a = nil</span></span><br></pre></td></tr></table></figure>
<p>在函数expand中，对于所有匹配<code>$(%w+)</code>的地方，函数gsub都会调用给定的函数，传入捕获到的名字作为参数，并使用返回字符串替换匹配到的内容。</p>
<h3 id="URL编码"><a href="#URL编码" class="headerlink" title="URL编码"></a>URL编码</h3><p>我们的下一个示例中将用到URL编码，也就是HTTP所使用的在URL中传递参数的编码方式。这种编码方式会将特殊字符编码为”%xx”的形式，其中xx是对应字符的十六进制。此外，URL编码还会将空格转换为加号。例如，字符串<code>a + b = c</code>的URL编码为<code>a%2Bb+%3D+c</code>。最后，URL编码会将对参数名及其值用等号连接起来，然后将每对name &#x3D; value用&amp;连接起来。例如，值<br><code>name = &quot;al&quot;</code>;<code>query = &quot;a+b = c&quot;</code>;<code>q = &quot;yes or no&quot;</code><br>对应的URL编码为<code>name=al&amp;query=a%2Bb+%3D+c&amp;q=yes+or+no</code>。<br>现在，假设要将这个URL解码并将其中的键值对保存到一个表内，以相应的键作为索引，那么可以使用一下函数完成基本的解码：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unescape</span><span class="params">(s)</span></span></span><br><span class="line">	s = <span class="built_in">string</span>.<span class="built_in">gsub</span>(s,<span class="string">&quot;+&quot;</span>,<span class="string">&quot; &quot;</span>)</span><br><span class="line">	s = <span class="built_in">string</span>.<span class="built_in">gsub</span>(s,<span class="string">&quot;%%(%x%x)&quot;</span>,<span class="function"><span class="keyword">function</span><span class="params">(h)</span></span></span><br><span class="line">		<span class="keyword">return</span> sting.<span class="built_in">char</span>(<span class="built_in">tonumber</span>(h,<span class="number">16</span>))</span><br><span class="line">	<span class="keyword">end</span>)</span><br><span class="line">	<span class="keyword">return</span> s</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(unescape(<span class="string">&quot;a%2Bb+%3D+c&quot;</span>))			<span class="comment">-- a + b = c</span></span><br></pre></td></tr></table></figure>
<p>第一个gsub函数将字符串中的所有加号替换为空格，第二个gsub函数则匹配所有以百分号开头的两位十六进制数，并对每处匹配调用一个匿名函数。这个匿名函数会将十六进制转换成一个数字并返回其对应的字符。<br>可以使用函数gmatch来对键值对name &#x3D; value进行解码。由于键名和值都不能包含&amp;或&#x3D;，所以可以使用模式<code>[^&amp;=]+</code>来匹配它们：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">cgi = &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decode</span><span class="params">(s)</span></span></span><br><span class="line">	<span class="keyword">for</span> name, value <span class="keyword">in</span> <span class="built_in">string</span>.<span class="built_in">gmatch</span>(s,<span class="string">&quot;([^&amp;=]+)=([^&amp;=]+)&quot;</span>) <span class="keyword">do</span></span><br><span class="line">		neme = unescape(name)</span><br><span class="line">		value = unescape(value)</span><br><span class="line">		cgi[name] = value</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>调用函数gmatch会匹配所有格式为name&#x3D;value的键值对。对于每组键值对，迭代器会返回对应的捕获，捕获到的内容也就是name和value的值。循环体内只是简单地对两个字符串调用函数unescape，然后将结果保存到表cgi中。<br>对应的编码函数也很容易编写。先写一个escape函数，用它将所有的特殊字符编码为百分号紧跟对应的十六进制形式，然后把空格替换成加号：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function escape(s)</span><br><span class="line">	s - string.gsub(s,&quot;[&amp;=+%%%c]&quot;,function(c)</span><br><span class="line">		return string.format(&quot;%%%02X&quot;,string.byte(c))</span><br><span class="line">	end)</span><br><span class="line">	s = string.gsub(s,&quot; &quot;,&quot;+&quot;)</span><br><span class="line">	return s</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>encode函数会遍历整个待编码的表，然后构造出最终的字符串：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encode</span><span class="params">(t)</span></span></span><br><span class="line">	<span class="keyword">local</span> b = &#123;&#125;</span><br><span class="line">	<span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(t) <span class="keyword">do</span></span><br><span class="line">		b[#b + <span class="number">1</span>] = (escape(k) .. <span class="string">&quot;=&quot;</span> .. escape(v))</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	<span class="comment">-- 将b中所有元素连接在一起，使用&quot;&amp;&quot;分隔</span></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">table</span>.<span class="built_in">concat</span>(b,<span class="string">&quot;&amp;&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">t = &#123;name = <span class="string">&quot;al&quot;</span>,query = <span class="string">&quot;a+b=c&quot;</span> , q = <span class="string">&quot;yes or no&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(encode(t)) 	<span class="comment">-- q = yes+or+no&amp;query=a%2Bb+%3D+c&amp;name=al</span></span><br></pre></td></tr></table></figure>

<h3 id="制表符展开"><a href="#制表符展开" class="headerlink" title="制表符展开"></a>制表符展开</h3><p>在Lua语言中，像<code>()</code>这样的空白捕获具有特殊含义。该模式并不代表捕获空内容，而是捕获模式在目标字符串中的位置：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(strig.<span class="built_in">match</span>(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;()ll()&quot;</span>))   <span class="comment">-- 3    5</span></span><br></pre></td></tr></table></figure>
<p>另一个关于位置捕获的良好示例是在字符串中进行制表符展开：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">expandTabs</span><span class="params">(s,tab)</span></span></span><br><span class="line">	tab = tab <span class="keyword">or</span> <span class="number">8</span> 	<span class="comment">-- 制表符的&quot;大小&quot;（默认是8）</span></span><br><span class="line">	<span class="keyword">local</span> corr = <span class="number">0</span> 	<span class="comment">-- 修正量</span></span><br><span class="line">	s = <span class="built_in">string</span>.<span class="built_in">gsub</span>(s,<span class="string">&quot;()\t&quot;</span>,<span class="function"><span class="keyword">function</span><span class="params">(p)</span></span></span><br><span class="line">		<span class="keyword">local</span> sp = tab - (p - <span class="number">1</span> + corr)%tab)</span><br><span class="line">		corr = corr - <span class="number">1</span> + sp</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">string</span>.<span class="built_in">rep</span>(<span class="string">&quot;&quot;</span>,sp)</span><br><span class="line">	<span class="keyword">end</span>)</span><br><span class="line">	<span class="keyword">return</span> s</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>函数gsub会匹配字符串中所有的制表符并捕获它们的位置。对于每个制表符，匿名函数会根据其所在位置计算出需要多少个空格才能恰好凑够一列（整数个tab）：该函数先将位置减去1以从0开始计数，然后加上corr凑整之前的指标符（每一个被展开的指标符都会影响后续制表符的位置）。之后，该函数更新下一个制表符的修正量：为正在被去掉的制表符减1，再加上要增加的空格数sp。最后，这个函数返回由替代制表符的合适数量的空格组成的字符串。<br>为了完整起见，让我们再看下如何实现逆向操作，即将空格转换为制表符。第一种方法是通过空捕获来对位置进行操作，但还有一种更简单的方法：即在字符串中每隔8个字符插入一个标记，然后将前面有空格的标记替换为制表符。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unexpandTabs</span><span class="params">(s,tab)</span></span></span><br><span class="line">	tab = tab <span class="keyword">or</span> <span class="number">8</span></span><br><span class="line">	s = expandTabs(s,tab)</span><br><span class="line">	<span class="keyword">local</span> pat = <span class="built_in">string</span>.<span class="built_in">rep</span>(<span class="string">&quot;.&quot;</span>,tab)			<span class="comment">-- 辅助模式</span></span><br><span class="line">	s = <span class="built_in">string</span>.<span class="built_in">gsub</span>(s,pat,<span class="string">&quot;%0\1&quot;</span>)			<span class="comment">-- 在每8个字符后添加一个标记\1</span></span><br><span class="line">	s = <span class="built_in">string</span>.<span class="built_in">gsub</span>(s,<span class="string">&quot;+\1&quot;</span>,<span class="string">&quot;\t&quot;</span>)			<span class="comment">-- 将所有以此标记结尾的空格序列都替换为制表符\t</span></span><br><span class="line">	s = <span class="built_in">string</span>.<span class="built_in">gsub</span>(s,<span class="string">&quot;\1&quot;</span>,<span class="string">&quot;&quot;</span>)				<span class="comment">-- 将剩下的标记\1删除</span></span><br><span class="line">	<span class="keyword">return</span> s</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>这个函数首先对字符串进行了制表符展开以移除其中所有的制表符，然后构造出一个用于匹配所有8个字符序列的辅助模式，再利用这个模式在每8个字符后添加一个标记。接着，它将所有以此标记结尾的空格序列都替换为制表符。最后，将剩下的标记删除。</p>
<h2 id="诀窍"><a href="#诀窍" class="headerlink" title="诀窍"></a>诀窍</h2><p>模式匹配是进行字符串处理的强大工具之一。虽然通过多次调用函数string.gsub就可以完成许多复杂的操作，但是还是应该谨慎地使用函数。<br>模式匹配替代不了传统的解析器。对于那些用后即弃的程序来说，我们确实可以在源代码中做一些有用的操作，但却很难构建出高质量的产品。<br>通常，在Lua程序中使用模式匹配时的效率是足够高的，但仍然需要注意，应该永远使用尽可能的精确的模式，不精确的模式会比精确的模式慢很多。一个极端的例子是模式<code>(.-)%$</code>，它用于获取字符串中第一个$字符前的所有内容。如果目标字符串中有$符号，那么这个模式工作很正常；但是，如果字符串中没有$符号，那么匹配算法就会受限从字符串起始位置开始匹配，直至为了搜索$符号而遍历完整字符串。当到达字符串结尾时，这次从字符串起始位置开始的模式匹配就失败了。之后，模式匹配算法又从字符串的第二个位置开始第二次搜索，结果仍然是无法匹配这个模式。这个匹配过程会在字符串的每个位置上进行一次，从而导致O(n^2^)的时间复杂度。<br>此外，还要留心空模式，也就是那些匹配空字符串的模式。例如，如果试图使用模式<code>%a*</code>来匹配名字，那么 就会发现到处都是名字：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">i,j = <span class="built_in">string</span>.<span class="built_in">find</span>(<span class="string">&quot;;$% **#$hello13&quot;</span>,<span class="string">&quot;%a*&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(i,j)			<span class="comment">-- 1   0 </span></span><br></pre></td></tr></table></figure>
<p>在这个示例汇中，函数string.find在字符串的开始位置正确地找到一个空的字母序列。<br>在模式的结束处使用修饰符-是没有意义的，因为这样只会匹配到空字符串。该修饰符总是需要在其后跟上其他的东西来限制扩展的范围。同样，含有”.*”的模式也非常容易出错，这主要是因为这种模式可能会匹配到超出我们预期范围的内容。<br>有时，用Lua语言来构造一个模式也很有用。我们已经在将空格转换为制表符的程序中使用过这个技巧。接下来再看另外一个示例，考虑如何找出一个文本中较长的行（比如超出70个字符的行）。较长的行就是一个具有70个或更多字符的序列，其中每个字符都不为换行符，因而可以使用字符分类<code>[^\n]</code>来匹配除换行符以外的其他单个字符。这样，就能够通过把这个匹配单个字符的模式重复70次来匹配较长的行。除了手写以外，还可以使用函数string.rep来创建这个模式：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">pattern = <span class="built_in">string</span>.ret(<span class="string">&quot;[^\n]&quot;</span>,<span class="number">70</span> .. <span class="string">&quot;+&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>再举一个例子，假设要进行大小写无关的查找。一种方法就是将模式中的所有字母x用<code>[xX]</code>替换，即同时包含原字母大小写形式的字符分类。我们可以使用如下函数来自动地完成这种替换：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">oncase</span><span class="params">(s)</span></span></span><br><span class="line">	s = <span class="built_in">string</span>.<span class="built_in">gsub</span>(s,<span class="string">&quot;%a&quot;</span>,<span class="function"><span class="keyword">function</span><span class="params">(c)</span></span></span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;[&quot;</span> .. <span class="built_in">string</span>.<span class="built_in">lower</span>(c) .. <span class="built_in">string</span>.<span class="built_in">upper</span>(c)..<span class="string">&quot;]&quot;</span></span><br><span class="line">	<span class="keyword">end</span>)</span><br><span class="line">	<span class="keyword">return</span> s</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(nocase(<span class="string">&quot;Hi there!&quot;</span>))		<span class="comment">-- [hH][iI][tT][hH][eE][rR][eE]!</span></span><br></pre></td></tr></table></figure>
<p>有时，我们可能需要将所有出现的s1替换为s2，而不管其中是否包含魔法字符。如果字符串s1和s2是常量，那么可以在编写字符串时对魔法字符进行合理的转义；但如果字符串是一个变量，那么就需要用另一个gsub函数来进行转义：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">s1 = <span class="built_in">string</span>.<span class="built_in">gsub</span>(s1,<span class="string">&quot;(%W)&quot;</span>,<span class="string">&quot;%%%1&quot;</span>)</span><br><span class="line">s2 = <span class="built_in">string</span>.<span class="built_in">gsub</span>(s2,<span class="string">&quot;%%&quot;</span>,<span class="string">&quot;%%%%&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>在进行字符串搜索时，我们对所有字母和数字外的字符进行了转义（即大写的W）。而在替换字符串中，我们只对百分号进行了转义。<br>模式匹配的另一个有用的技巧就是，在进行实际工作前对目标字符串进行预处理。假设想把一个字符串中所有被双引号(“)引起来的内容改为大写，但又允许内容中包含转义的引号(“&quot;“):</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">follows a typical <span class="built_in">string</span>:<span class="string">&quot;This is \&quot;great\&quot;!&quot;</span>.</span><br></pre></td></tr></table></figure>
<p>处理这种情况的方法之一就是先对文本进行预处理，将所有可能导致歧义的内容编码成别的内容。例如，可以讲<code>&quot;\&quot;&quot;</code>编码成<code>&quot;\1&quot;</code>。不过，如果原文中本身就含有<code>&quot;\1&quot;</code>，那么就会遇到问题。另一种可以避免这个问题的简单做法是将所有<code>&quot;\x&quot;</code>编码为<code>&quot;\ddd&quot;</code>，其中ddd为字符x的十六进制表示形式：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">code</span><span class="params">(s)</span></span></span><br><span class="line">	<span class="keyword">return</span> (<span class="built_in">string</span>.<span class="built_in">gsub</span>(s,<span class="string">&quot;\\(.)&quot;</span>,<span class="function"><span class="keyword">function</span><span class="params">(x)</span></span></span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;\\%03d&quot;</span>,<span class="built_in">string</span>.<span class="built_in">byte</span>(x))</span><br><span class="line">	<span class="keyword">end</span>))</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>这样，由于原字符串中所有的<code>&quot;\ddd&quot;</code>都进行了编码，所以编码后字符串中的<code>&quot;\ddd&quot;</code>序列一定都是编码造成的。这样，解码也就很简单了：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decode</span><span class="params">(s)</span></span></span><br><span class="line">	<span class="keyword">return</span> (<span class="built_in">string</span>.<span class="built_in">gsub</span>(s,<span class="string">&quot;\\(%d%d%d)&quot;</span>,<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span></span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;\\&quot;</span> .. <span class="built_in">string</span>.<span class="built_in">char</span>(<span class="built_in">tonumber</span>(d))</span><br><span class="line">	<span class="keyword">end</span>))</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>现在我们就可以完成把一个字符串中被双引号(“)引起来的内容改为大写的需求。由于编码后的字符串中不包含任何转义的引号<code>(&quot;\&quot;&quot;)</code>，所以就可以直接使用<code>&quot;._&quot;</code>来查找位于一对引号中的内容：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">s = <span class="string">[[follows a typical string:&quot;This is \&quot;great\&quot;!&quot;.]]</span></span><br><span class="line">s = code(s)</span><br><span class="line">s = <span class="built_in">string</span>.<span class="built_in">gsub</span>(s,<span class="string">&#x27;&quot;.-&quot;&#x27;</span>,<span class="built_in">string</span>.<span class="built_in">upper</span>)</span><br><span class="line">s = decode(s)</span><br><span class="line"><span class="built_in">print</span>(s)	<span class="comment">-- follows a typical string:&quot;THIS IS \&quot;GREAT\&quot;!&quot;.</span></span><br></pre></td></tr></table></figure>
<p>或者写成：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(decode(<span class="built_in">string</span>.<span class="built_in">gsub</span>(code(s),<span class="string">&#x27;&quot;.-&quot;&#x27;</span>,<span class="built_in">string</span>.<span class="built_in">upper</span>)))</span><br></pre></td></tr></table></figure>
<p>是否能够将模式匹配函数用于UTF-8字符串取决于模式本身。由于UTF-8的主要特征之一就是任意字符的编码不会出现在别的字符的编码中，因此文本类的模式一般可以正常工作。字符分类和字符集只对ASCII字符有效。例如，可以对UTF-8字字符串使用模式’%s’，但它只能匹配ASCII空格，而不能匹配诸如HTML空格或蒙古文元音分隔符等其他的Uicode空格。<br>恰当的模式能够为处理Unicode带来额外的能力。一个优秀的例子是预定义模式utf8.charpattern，该模式只精确地匹配一个UTF-8字符。utf8标准库中就是按照下面的方法定义这个模式的：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">utf8.charpattern = [\<span class="number">0</span>-\x7F\xC2-\xF4][\x80-\xBF]*</span><br></pre></td></tr></table></figure>
<p>该模式的第1部分匹配ASCII字符或多字节序列的其实字节。第2部分则匹配零个或多个后续的自己。</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua的控制结构</title>
    <url>/16666.html</url>
    <content><![CDATA[<p>Lua语言提供了一组精简且常用的控制结构，包括用于条件执行的if以及用户循环的while、repeat和for。所有的控制结构语法上都有一个显示的终结符：end用于终结if、for及while结构，until用于终结repeat结构。</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>控制结构的条件表达式的结果可以是任何值。Lua语言将所有不是false和nil的值当做真。</p>
<h3 id="if-then-else"><a href="#if-then-else" class="headerlink" title="if then else"></a>if then else</h3><p>if 语句先测试其条件，并根据条件是否满足执行相应的then部分或else部分。else部分是可选的。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> a&lt;<span class="number">0</span> <span class="keyword">then</span> a == <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a &lt;b <span class="keyword">then</span> <span class="keyword">return</span> a <span class="keyword">else</span> <span class="keyword">return</span> b <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> line &gt; MAXLINES <span class="keyword">then</span></span><br><span class="line">	showpage()</span><br><span class="line">	line = <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>如果要编写嵌套的if语句，可以使用elseif。它类似于在else后面紧跟一个if，但可以避免重复使用end：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> op == <span class="string">&quot;+&quot;</span> <span class="keyword">then</span></span><br><span class="line">	r = a + b</span><br><span class="line"><span class="keyword">elseif</span> op == <span class="string">&quot;-&quot;</span> <span class="keyword">then</span></span><br><span class="line">	r = a - b</span><br><span class="line"><span class="keyword">elseif</span> op == <span class="string">&quot;*&quot;</span> <span class="keyword">then</span></span><br><span class="line">	r = a * b</span><br><span class="line"><span class="keyword">elseif</span> op == <span class="string">&quot;/&quot;</span> <span class="keyword">then</span></span><br><span class="line">	r = a / b</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	<span class="built_in">error</span>(<span class="string">&quot;invalid operation&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>由于Lua语言不支持switch语句，所以这种一连串的else-if语句比较常见。</p>
<h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><p>当条件为真时while循环会重复执行其循环体。Lua语言先测试while语句的条件，若条件为假则循环结束；否则，Lua会执行循环体并不断地重复这个过程。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> a[i] <span class="keyword">do</span></span><br><span class="line">	<span class="built_in">print</span>(a[i])</span><br><span class="line">	i = i + <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h3><p>repeat-until语句会重复执行其循环体知道条件为真时结束。由于条件测试在循环体之后执行，所以循环体至少会执行一次。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 输出第一个非空的行</span></span><br><span class="line"><span class="keyword">local</span> line </span><br><span class="line"><span class="keyword">repeat</span></span><br><span class="line">	line = <span class="built_in">io</span>.<span class="built_in">read</span>()</span><br><span class="line"><span class="keyword">until</span> line ~= <span class="string">&quot; &quot;</span></span><br><span class="line"><span class="built_in">print</span>(line)</span><br></pre></td></tr></table></figure>
<p>和大多数其他编程语言不同，在Lua语言中，循环体内声明的局部变量的作用于包括测试条件：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 使用Newton-Raphson法计算&quot;x&quot;的平方根</span></span><br><span class="line"><span class="keyword">local</span> sqr = x / <span class="number">2</span></span><br><span class="line"><span class="keyword">repeat</span> </span><br><span class="line">	sqr = (sqr + x / sqr) /<span class="number">2</span></span><br><span class="line">	<span class="keyword">local</span> <span class="built_in">error</span> = <span class="built_in">math</span>.<span class="built_in">abs</span>(sqr^<span class="number">2</span> - x)</span><br><span class="line"><span class="keyword">until</span> <span class="built_in">error</span> &lt; x/ <span class="number">10000</span>  <span class="comment">-- 局部变量&#x27;error&#x27;此时仍然可见</span></span><br></pre></td></tr></table></figure>

<h3 id="数值型for"><a href="#数值型for" class="headerlink" title="数值型for"></a>数值型for</h3><p>for 语句有两种形式：数值型for和泛型for。<br>数值型for的语法如下：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> var = exp1 , exp2, exp3 <span class="keyword">do</span></span><br><span class="line">	something</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>在这种循环中，var的值从exp1变化到exp2之前的每次循环会执行something。并且在每次循环结束后将步长exp3增加到var上。第三个表达式exp3是可选的，若不存在，Lua语言会默认步长值为1.如果不想给循环设置上限，可以使用常量math.huge:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="built_in">math</span>.<span class="built_in">huge</span> <span class="keyword">do</span> </span><br><span class="line">	<span class="keyword">if</span> (<span class="number">0.3</span>*i^<span class="number">3</span> - <span class="number">20</span>*i^<span class="number">2</span> - <span class="number">500</span> &gt;= <span class="number">0</span> ) <span class="keyword">then</span></span><br><span class="line">		pirnt(i)</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>为了更好地使用for循环，还需要了解一些细节。首先，在循环开始前，三个表达式都会运行一次；其次，控制变量是被for语句自动声明的局部变量，且其作用范围仅限于循环体内。一种典型的错误是认为控制变量在循环结束后仍然存在：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i = <span class="number">1</span> , <span class="number">10</span> <span class="keyword">do</span> <span class="built_in">print</span>(i) <span class="keyword">end</span></span><br><span class="line"><span class="built_in">max</span> = i 			<span class="comment">-- 可能会出错</span></span><br></pre></td></tr></table></figure>
<p>如果需要在循环结束后使用控制变量的值，则必须将控制变量的值保存到另一个变量中：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 在一个列表中寻找一个值</span></span><br><span class="line"><span class="keyword">local</span> found = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span> , #a <span class="keyword">do</span></span><br><span class="line">	<span class="keyword">if</span> a[i] &lt; <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">		found = i</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(found)</span><br></pre></td></tr></table></figure>
<p>最后，不要改变控制变量的值，随意改变控制变量的值可能产生不可预知的结果。如果要在循环正常结束前停止for，那么可以使用break语句。</p>
<h3 id="泛型for"><a href="#泛型for" class="headerlink" title="泛型for"></a>泛型for</h3><p>泛型for遍历迭代函数返回的所有值。例如我们已经在很多示例中看到过的pairs、ipairs和io.lines等。虽然泛型for看似简单，但它的功能非常强大。使用恰当的迭代器可以在保证代码可读性的情况下遍历几乎所有的数据结构。<br>当然，我们也可以自己编写迭代器。尽管泛型for的使用很简单，但编写迭代函数却有不少细节需要注意。<br>与数值型for不同，泛型for可以使用多个变量，这些变量在每次循环时都会更新。当第一个变量变为nil时，循环终止。像数值型for一样，控制变量时循环体中的局部变量，我们也不应该在循环中改变其值。</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua的深拷贝和浅拷贝</title>
    <url>/29648.html</url>
    <content><![CDATA[<p>今天在写游戏的时候，遇到了一个数据问题，就开始查资料</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>代码如下</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--- Deep copies a table into a new table.</span></span><br><span class="line"><span class="comment">-- Tables used as keys are also deep copied, as are metatables</span></span><br><span class="line"><span class="comment">-- @param orig The table to copy</span></span><br><span class="line"><span class="comment">-- @return Returns a copy of the input table</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">deep_copy</span><span class="params">(orig)</span></span></span><br><span class="line">  <span class="keyword">local</span> copy</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">type</span>(orig) == <span class="string">&quot;table&quot;</span> <span class="keyword">then</span></span><br><span class="line">    copy = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> orig_key, orig_value <span class="keyword">in</span> <span class="built_in">next</span>, orig, <span class="literal">nil</span> <span class="keyword">do</span></span><br><span class="line">      copy[deep_copy(orig_key)] = deep_copy(orig_value)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">setmetatable</span>(copy, deep_copy(<span class="built_in">getmetatable</span>(orig)))</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    copy = orig</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> copy</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--- Copies a table into a new table.</span></span><br><span class="line"><span class="comment">-- neither sub tables nor metatables will be copied.</span></span><br><span class="line"><span class="comment">-- @param orig The table to copy</span></span><br><span class="line"><span class="comment">-- @return Returns a copy of the input table</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">shallow_copy</span><span class="params">(orig)</span></span></span><br><span class="line">  <span class="keyword">local</span> copy</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">type</span>(orig) == <span class="string">&quot;table&quot;</span> <span class="keyword">then</span></span><br><span class="line">    copy = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> orig_key, orig_value <span class="keyword">in</span> <span class="built_in">pairs</span>(orig) <span class="keyword">do</span></span><br><span class="line">      copy[orig_key] = orig_value</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">else</span> <span class="comment">-- number, string, boolean, etc</span></span><br><span class="line">    copy = orig</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> copy</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>例子如下：<br>深拷贝</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> a = &#123; aa = <span class="number">1</span>, bb = <span class="number">2</span>, cc = &#123; dd = &#123; ee = <span class="number">3</span> &#125; &#125; &#125;</span><br><span class="line"><span class="comment">--local b = deep_copy(a)</span></span><br><span class="line"><span class="keyword">local</span> b = shallow_copy(a)</span><br><span class="line">b.cc.dd.ee = <span class="number">111</span></span><br><span class="line">b.bb = <span class="number">111</span></span><br><span class="line">ngx.say(cjson.encode(a))</span><br><span class="line">ngx.say(cjson.encode(b))</span><br></pre></td></tr></table></figure>
<p>结果：{“aa”:1,”bb”:2,”cc”:{“dd”:{“ee”:111}}}<br>{“aa”:1,”bb”:111,”cc”:{“dd”:{“ee”:111}}}</p>
<p>浅拷贝</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> men = &#123; mkey = <span class="number">555</span> &#125;</span><br><span class="line"><span class="keyword">local</span> a = &#123; aa = <span class="number">1</span>, bb = <span class="number">2</span>, cc = &#123; dd = &#123; ee = &#123; ff = <span class="number">3</span> &#125; &#125; &#125; &#125;</span><br><span class="line"><span class="built_in">setmetatable</span>(a, &#123; <span class="built_in">__index</span> = men &#125;)</span><br><span class="line"><span class="keyword">local</span> b = deep_copy(a)</span><br><span class="line"></span><br><span class="line">ngx.say(a.cc.dd.ee.ff)</span><br><span class="line">ngx.say(a.mkey)</span><br><span class="line">ngx.say(b.mkey)</span><br></pre></td></tr></table></figure>
<p>3<br>555<br>555</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua计算表格包含的字段数量</title>
    <url>/3e813c88.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>Lua中计算表格包含的字段数量，也可以理解为计算表的长度,很多人平时都习惯用<code>#</code>,但是<code>#</code>和<code>table.nums()</code>还是有区别的。<br><code>Lua table</code> 的 <code>&quot;#&quot;</code> 操作只对依次排序的数值下标数组有效，<code>table.nums()</code> 则计算 <code>table</code> 中所有不为 <code>nil</code> 的值的个数。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- @function [parent=#table] nums</span></span><br><span class="line"><span class="comment">-- @param table t 要检查的表格</span></span><br><span class="line"><span class="comment">-- @return integer#integer</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">table.nums</span><span class="params">(t)</span></span></span><br><span class="line">    <span class="keyword">local</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(t) <span class="keyword">do</span></span><br><span class="line">        count = count + <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua的元表和元方法</title>
    <url>/62511.html</url>
    <content><![CDATA[<p>通常，Lua语言中的每种类型的值都有一套可预见的操作集合。例如，我们可以将数字相加，可以连接字符，还可以在表中插入键值对等。但是，我们无法将两个表相加，无法对函数做比较，也琺调用一个字符串，除非使用元表。</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>元表可以修改一个值在面对一个未知操作时的行为。例如，假设a和b都是表，那么可以通过元表定义Lua语言如何计算表达式a+b。当Lua语言试图将两个表相加时，它会先检查两者之一是否有元表且该元表中是否有<code>__add</code>字段。如果Lua语言找到了该字段，就调用该字段对应的值，即所谓的元方法，在本例中就是用于计算表的和的函数。<br>可以认为，元表是面向对象领域中的受限制类。像类一样，元表定义的是实例的行为。不过，由于元表只能给出预先定义的操作集合的行为，所以元表被类更受限；同时，元表也不支持继承。<br>Lua语言中的每一个值都可以有元表。每一个表和用户数据类型都具有各自独立的元表，而其他类型的值则共享对应类型所属的同一个元表。Lua语言在创建新表时不带元表：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">t = &#123;&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">getmetatable</span>(t))   <span class="comment">-- nil</span></span><br></pre></td></tr></table></figure>
<p>可以使用函数setmetatable来设置或修改任意表的元表：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">t1 = &#123;&#125;</span><br><span class="line"><span class="built_in">setmetatable</span>(t,t1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">getmetatable</span>(t) == t1)		<span class="comment">--true</span></span><br></pre></td></tr></table></figure>
<p>在Lua语言中，我们只能为表设置元表；如果要为其他类型的值设置元表，则必须通过C代码或调试库完成（该限制存在的主要原因是为了防止过度使用对某种类型的所有值生效的元表。Lua语言老版本中的经验表明，这样的全局设置经常导致不可重用的代码）。字符串标准库为所有的字符串都设置了同一个元表，而其他类型在默认情况中都没有元表：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">getmetatable</span>(<span class="string">&quot;hi&quot;</span>))		<span class="comment">-- table:0x80772e0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">getmetatable</span>(<span class="string">&quot;xuxu&quot;</span>))     <span class="comment">-- table:0x80772e0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">getmetatable</span>(<span class="number">10</span>))			<span class="comment">-- nil</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">getmetatable</span>(<span class="built_in">print</span>))		<span class="comment">-- nil</span></span><br></pre></td></tr></table></figure>
<p>一个表可以成为任意值的元表；一组相关的表也可以共享一个描述了它们共同行为的通用元表；一个表还可以成为它自己的元表，用于描述其自身特有的行为。总之，任何配置都是合法的。</p>
<h2 id="算术运算相关的元方法"><a href="#算术运算相关的元方法" class="headerlink" title="算术运算相关的元方法"></a>算术运算相关的元方法</h2><p>假设有一个用表来表示集合的模块，该模块还有一些用来计算集合并集和交集等的函数。</p>
<blockquote>
<p>示例：一个用于集合的简单模块</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> Set = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用指定的列表创建一个新的集合</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Set.new</span><span class="params">(l)</span></span></span><br><span class="line">	<span class="keyword">for</span> _, v inpairs(l) <span class="keyword">do</span> set[v] = <span class="literal">true</span> <span class="keyword">end</span></span><br><span class="line">	<span class="keyword">return</span> set</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Set.union</span><span class="params">(a,b)</span></span></span><br><span class="line">	<span class="keyword">local</span> res = Set.new&#123;&#125;</span><br><span class="line">	<span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">pairs</span>(a) <span class="keyword">do</span> res[k] = <span class="literal">true</span> <span class="keyword">end</span></span><br><span class="line">	<span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">pairs</span>(b) <span class="keyword">do</span> res[k] = <span class="literal">true</span> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Set.intersection</span><span class="params">(a,b)</span></span></span><br><span class="line">	<span class="keyword">local</span> res = Set.new&#123;&#125;</span><br><span class="line">	<span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">pairs</span>(a) <span class="keyword">do</span></span><br><span class="line">		res[k] = b[k]</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">return</span> res</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将集合表示为字符串</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Set.tostring</span><span class="params">(set)</span></span></span><br><span class="line">	<span class="keyword">local</span> l = &#123;&#125;		<span class="comment">-- 保存集合中所有元素的列表</span></span><br><span class="line">	<span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">pairs</span>(set) <span class="keyword">do</span></span><br><span class="line">		l[#l + <span class="number">1</span>] = <span class="built_in">tostring</span>(e)</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;&#123;&quot;</span> .. <span class="built_in">table</span>.<span class="built_in">concat</span>(l.<span class="string">&quot;,&quot;</span>)..<span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Set </span><br></pre></td></tr></table></figure>
<p>现在，假设想使用加法操作符来计算两个集合的并集，那么可以让所有表示集合的表共享一个元表。这个元表中定义了这些表应该如何执行加法操作。首先，我们创建一个普通的表，这个表被用作集合的元表：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> mt = &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>然后，修改用于创建集合的函数<code>Set.new</code>。在新版本中只多了一行，即将mt设置为函数Set.new所创建的表的元表：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Set.new</span><span class="params">(l)</span></span>		<span class="comment">-- 第二个版本</span></span><br><span class="line">	<span class="keyword">local</span> set = &#123;&#125;</span><br><span class="line">	<span class="built_in">setmetatable</span>(set,mt)</span><br><span class="line">	<span class="keyword">for</span> _, v <span class="keyword">in</span> inpairs(l) <span class="keyword">do</span> set[v] = <span class="literal">true</span> <span class="keyword">end</span></span><br><span class="line">	<span class="keyword">return</span> set</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>在此之后，所有由Set.new创建的集合都具有了一个相同的元表：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">s1 = Set.new&#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">50</span>&#125;</span><br><span class="line">s2 = Set.new&#123;<span class="number">30</span>,<span class="number">1</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">getmetatable</span>(s1))			<span class="comment">-- table:0x00672B60</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">getmetatable</span>(s2))			<span class="comment">-- table:0x00672B60</span></span><br></pre></td></tr></table></figure>
<p>最后，向元表中加入元方法<code>__add</code>，也就是用于描述如何完成加法的字段：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">mt.<span class="built_in">__add</span> = Set.union</span><br></pre></td></tr></table></figure>
<p>此后，只要Lua语言试图将两个集合相加，它就会调用函数Set.union，并将两个操作数作为参数传入。<br>通过元方法，我们就可以使用加法运算符来计算集合的并集了：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">s3 = s1 + s2</span><br><span class="line"><span class="built_in">print</span>(Set.<span class="built_in">tostring</span>(s3))				<span class="comment">--&#123;1,10,20,30,50&#125;</span></span><br></pre></td></tr></table></figure>
<p>类似地，还可以使用乘法运算符来计算集合的交集：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">mt.<span class="built_in">__mul</span> = Set.intersection</span><br><span class="line"><span class="built_in">print</span>(Set.<span class="built_in">tostring</span>(s1 + s2)*s1)		<span class="comment">-- &#123;10,20,30,50&#125;</span></span><br></pre></td></tr></table></figure>
<p>每种算术运算符都有一个对应的元方法。除了加法和乘法外，还有减法(__sub)、除法(__div)、floor除法(__idiv)、负数(__unm)、取模(__mod)和幂运算(__pow)。类似地，位操作也有元方法：按位与(__band)、按位或(__bor)、按位异或(__bxor)、按位取反(__bnot)、向左移位(__shl)和向右位移(__shr)。我们还可以使用字段<code>__concat</code>来定义连接运算符的行为。<br>当我们把两个集合相加时，使用哪个元素是确定的。然而，当一个表达式中混合了两种具有不同元素的值时，例如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">s = Set.new&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">s = s + <span class="number">8</span></span><br></pre></td></tr></table></figure>
<p>Lua语言会按照如下步骤来查找元方法：如果第一个值有元表且元表中存在所需的元方法，那么Lua语言就使用这个元方法，与第二个值无关；如果第二个值有元表且元表中存在所需的元方法，Lua语言就使用这个元方法；否则，Lua语言就抛出异常。因此，上例会调用Set.union，而表达式10+s和”hello”+s同理（由于数值和字符串都没有元方法__add）。<br>Lua语言不关心这些混淆类型，但我们在实现中需要关心混合类型。如果我们执行了s &#x3D; s + 8，那么在Set.union内部就会发生错误：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">bad argument #<span class="number">1</span> to <span class="string">&#x27;pairs&#x27;</span> (<span class="built_in">table</span> expected , got number)</span><br></pre></td></tr></table></figure>
<p>如果想要得到更明确的错误信息，则必须在试图进行操作前显式地检查操作数的类型，例如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Set.union</span><span class="params">(a,b)</span></span></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">getmetatable</span>(a) ~= mt <span class="keyword">or</span> <span class="built_in">getmetatable</span>(b) ~= mt <span class="keyword">then</span></span><br><span class="line">		<span class="built_in">error</span>(<span class="string">&quot;attempt to &#x27;add&#x27; a set with a non-set value&quot;</span>,<span class="number">2</span>)</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	同前</span><br></pre></td></tr></table></figure>
<p>请注意，函数error的第二个参数说明了出错的原因位于调用该函数的代码中。</p>
<h2 id="关系运算相关的元方法"><a href="#关系运算相关的元方法" class="headerlink" title="关系运算相关的元方法"></a>关系运算相关的元方法</h2><p>元表还允许我们制定关系运算符的含义，其中的元方法包括等于(__eq)、小于(__lt)和小于等于(__le)。其他三个关系运算符没有单独的元方法，Lua语言会将<code>a~=b</code>转换为<code>not(a == b),a&gt;b</code>转换为<code>b&lt;a,a&gt;=b</code>转换为<code>b&lt;=a</code>。<br>在Lua语言的老版本中，Lua语言会通过将<code>a&lt;=b</code>转换为<code>not (b&lt;a)</code>来把所有的关系运算符转化为一个关系运算符。不过，这种转化在遇到部分有序时就会不正确。所谓部分有序是指，并非所有类型的元素都能够被正确地排序。例如，由于<em>Not a Number(NaN)<em>的存在，大多数计算机中的浮点数就不是完全可以排序的。根据IEEE 754标准，NaN代表未定义的值，例如</em>O&#x2F;O</em>的结果就是NaN。标准规定任何涉及NaN的比较都应返回假，这就意味着NaN&lt;&#x3D;x永远为假，x&lt;NaN也为假。因此，在这种情况下，<code>a&lt;=b</code>到<code>not(b&lt;a)</code>的转化也就不合法了。<br>在集合的示例中，我们也面临类似的问题。&lt;&#x3D;显而易见且有用的含义集合包含：<code>a&lt;=b</code>通常意味着a是b的一个子集。然而，根据部分有序的定义，<code>a&lt;=b</code>和<code>b&lt;a</code>可能同时为假。因此，我们就必须实现<code>__le</code>（小于等于，子集关系）和<code>__lt</code>（小于，真子集关系）：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">mt.<span class="built_in">__le</span> = <span class="function"><span class="keyword">function</span> <span class="params">(a,b)</span></span> 		<span class="comment">-- 子集</span></span><br><span class="line">	<span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">pairs</span>(a) <span class="keyword">do</span></span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> b[k] <span class="keyword">then</span> <span class="keyword">return</span> <span class="literal">false</span> <span class="keyword">end</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">mt.<span class="built_in">__lt</span> = <span class="function"><span class="keyword">function</span> <span class="params">(a,b)</span></span>		<span class="comment">-- 真子集</span></span><br><span class="line">	<span class="keyword">return</span> a&lt;= b <span class="keyword">and</span> <span class="keyword">not</span> (b &lt;= a)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>最后，我们还可以通过集合包含来定义集合相等:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">mt.<span class="built_in">__eq</span> = <span class="function"><span class="keyword">function</span> <span class="params">(a,b)</span></span></span><br><span class="line">	<span class="keyword">return</span> a &lt;= b <span class="keyword">and</span> b &lt;= a</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>有力这些定义后，我们就可以比较集合了：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">s1 = Set.new&#123;<span class="number">2</span>,<span class="number">4</span>&#125;</span><br><span class="line">s2 = Set.new&#123;<span class="number">4</span>,<span class="number">10</span>,<span class="number">2</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s1 &lt;= s2)			<span class="comment">-- true</span></span><br><span class="line"><span class="built_in">print</span>(s1 &lt; s2)			<span class="comment">-- true</span></span><br><span class="line"><span class="built_in">print</span>(s1 &gt;= s1)			<span class="comment">-- true</span></span><br><span class="line"><span class="built_in">print</span>(s1 &gt; s1)			<span class="comment">-- false</span></span><br><span class="line"><span class="built_in">print</span>(s1 == s2 * s1)	<span class="comment">-- true</span></span><br></pre></td></tr></table></figure>
<p>相等比较有一些限制。如果两个对象的类型不同，那么相等比较操作不会调用任何元方法而直接返回false。因此，不管元方法如何，集合永远不等于数字。</p>
<h2 id="库定义相关的元方法"><a href="#库定义相关的元方法" class="headerlink" title="库定义相关的元方法"></a>库定义相关的元方法</h2><p>到目前为止，我们见过的所有元方法针对的都是核心Lua语言。Lua语言虚拟机会检测一个操作中设计的值是否有存在对应元方法的元表。不过，由于元表是一个普通的表，所以任何人都可以使用它们。因此，程序库在元表中定义和使用它们自己的字段也是一种常见的时间。<br>函数tostring就是一个典型的例子。正如我们此前所看到的，函数tostring能将表表示一种简单的文本格式：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(&#123;&#125;)			<span class="comment">--table:0x8062ac0</span></span><br></pre></td></tr></table></figure>
<p>函数print总是调用tostring来进行格式化输出。不过，当对值进行格式化时，函数tostring会首先检查值是否有一个元方法<code>__tostring</code>。如果有，函数tostring就调用这个元方法来完成工作，将对象作为参数传给该函数，然后把元方法的返回值作为函数tostring的返回值。<br>在之前集合的示例中，我们已经定义了一个将集合表示为字符串的函数。因此，只需要在元表中设置__tostring字段：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">mt.<span class="built_in">__tostring</span> = Set.<span class="built_in">tostring</span></span><br></pre></td></tr></table></figure>
<p>之后，当以一个集合作为参数调用函数print时，print就会调用函数tostring，tostring又会调用Set.tostring:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">s1 = Set.new&#123;<span class="number">10</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s1)			<span class="comment">-- &#123;4,5,10&#125;</span></span><br></pre></td></tr></table></figure>
<p>函数setmetatable和getmetatable也用到了元方法，用于保护元表。假设想要保护我们的集合，就要使用户既不能看到也不能修改集合的元表。如果在元表中设置__metatable字段，那么getmetatable会返回这个字段的值，而setmetatable则会引发一个错误：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">mt.<span class="built_in">__metatable</span> = <span class="string">&quot;not yopur business&quot;</span></span><br><span class="line"></span><br><span class="line">s1 = Set.new&#123;&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">getmetatable</span>(s1))				<span class="comment">-- not your business</span></span><br><span class="line"><span class="built_in">setmetatable</span>(s1,&#123;&#125;)</span><br><span class="line">	<span class="built_in">stdin</span>:<span class="number">1</span>:cannot change protected metatable</span><br></pre></td></tr></table></figure>
<p>从Lua5.2开始，函数pairs也有了对应的元方法。因此我们可以修改表被遍历的方式和为非表的对象增加遍历行为。当一个对象拥有__pairs元方法时，pairs会调用这个元方法来完成遍历。</p>
<h2 id="表相关的元方法"><a href="#表相关的元方法" class="headerlink" title="表相关的元方法"></a>表相关的元方法</h2><p>算术运算符、位运算符和关系运算符的元方法都定义了各种错误情况的行为，但它们都没有改变语言的正常行为。Lua语言还提供了一种改变表在两种正常情况下的行为的方式，即访问和修改表中不存在的字段。</p>
<h3 id="index元方法"><a href="#index元方法" class="headerlink" title="__index元方法"></a>__index元方法</h3><p>正如我们此前所看到的，当访问一个表中不存在的字段时会得到nil。这是正确的，但不是完整的真相。实际上，这些访问会引发解释器查找一个名为<code>__index</code>的元方法。如果没有这个元方法，那么像一般情况下一样，结果就是nil；否则，则由这个元方法来提供最终结果。<br>下面介绍一个关于继承的原型示例。假设我们要创建几个表来描述窗口，每个表中必须描述窗口的一些参数，例如位置、大小及主题颜色等。所有的这些参数都有默认值，因此我们希望在创建窗口对象时只需要给出那些不同于默认值的参数即可。第一种方法是使用一个构造器来填充不存在的字段，第二种方法是让新窗口从一个原型窗口继承所有不存在的字段。首先，我们声明一个原型：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建具有默认值的原型</span></span><br><span class="line">prototype = &#123;x = <span class="number">0</span>, y = <span class="number">0</span> ,width = <span class="number">100</span>,height = <span class="number">100</span>&#125;</span><br></pre></td></tr></table></figure>
<p>然后，声明一个构造函数，让构造函数创建共享同一个元表的新窗口：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> mt = &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">new</span><span class="params">(o)</span></span></span><br><span class="line">	<span class="built_in">setmetatable</span>(o,mt)</span><br><span class="line">	<span class="keyword">return</span> o</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>现在，我们来定义元方法__index:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">mt.<span class="built_in">__index</span> = <span class="function"><span class="keyword">function</span><span class="params">(_,key)</span></span></span><br><span class="line">	<span class="keyword">return</span> prototype[key]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>在这段代码后，创建一个新窗口，并查询一个创建时没有指定的字段：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">w = new&#123;x = <span class="number">10</span>,y = <span class="number">20</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(w.width) 		<span class="comment">-- 100</span></span><br></pre></td></tr></table></figure>
<p>Lua语言会发现w中没有对应的字段”width”，但却有一个带有<code>__index</code>元方法的元表。因此，Lua语言会以w（表）和”width”（不存在的键）为参数来调用这个元方法。元方法随后会用这个键来检索原型并返回结果。<br>在Lua语言中，使用元方法<code>__index</code>来实现继承是很普通的方法。虽然被叫作方法，但元方法<code>__index</code>不一定必须是一个函数，它还可以是一个表。当元方法是一个函数时，Lua语言会以表和不存在的键为参数调用该函数，正如我们刚刚所看到的。当元方法是一个表时，Lua语言就访问这个表。因此，在我们此前的示例中，可以把<code>__index</code>简单地声明为如下样式：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">mt.<span class="built_in">__index</span> = prototype</span><br></pre></td></tr></table></figure>
<p>这样，当Lua语言查找元表的__index字段时，会发现字段的值是表prototype。因此，Lua语言就会在这个表中继续查找，即等价地执行prototype[“width”]，并得到预期的结果。<br>将一个表用作__index元方法为实现单继承提供了一种简单快捷的方法。虽然将函数用作元方法开销更昂贵，但函数却更加灵活：我们可以通过函数来实现多继承、缓存及其他一些变体。<br>如果我们希望在访问一个表时不调用__index元方法，那么可以使用函数rawget。调用rawget(t,i)会对表t进行原始的访问，即在不考虑元表的情况下对表进行简单的访问。进行一次原始访问并不会加快代码的执行（一次函数调用的开销就会抹杀用户所作的这些努力），但是，我们后续会看到，有时确实会用到原始访问。</p>
<h3 id="newindex元方法"><a href="#newindex元方法" class="headerlink" title="__newindex元方法"></a>__newindex元方法</h3><p>元方法<code>__newindex</code>与<code>__index</code>类似，不同之处在于前者用于表的更新而后者用于表的查询。当对一个表中不存在的索引赋值时，解释器就会查找<code>__newindex</code>元方法：如果这个元方法存在，那么解释器就调用它而不执行赋值。像元方法__index一样，如果这个元方法时一个表，解释器就在此表中执行赋值，而不是在原始的表中进行复制。此外，还有一个原始函数允许我们绕过元方法：调用rawset(t,k,v)来等价于<code>t[k] =v</code>，但不涉及任何元方法。<br>组合使用元方法__index和__newindex可以实现Lua语言中的一些强大的结构，例如只读的表、具有默认值的表和面向对象编程中的继承。</p>
<h3 id="具有默认值的表"><a href="#具有默认值的表" class="headerlink" title="具有默认值的表"></a>具有默认值的表</h3><p>一个普通表中所有字段的默认值都是nil。通过元表，可以很容易地修改这个默认值：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setDefualut</span><span class="params">(t,d)</span></span></span><br><span class="line">	<span class="keyword">local</span> mt = &#123;<span class="built_in">__index</span> = <span class="function"><span class="keyword">function</span> <span class="params">()</span></span> <span class="keyword">return</span> d <span class="keyword">end</span>&#125;</span><br><span class="line">	<span class="built_in">setmetatable</span>(t,mt)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">tab = &#123;x = <span class="number">10</span>, y = <span class="number">20</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(tab.x,tab.z)			<span class="comment">-- 10  nil</span></span><br><span class="line">setDefualut(tab,<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(tab.x,tab.z)		<span class="comment">-- 10  0 </span></span><br></pre></td></tr></table></figure>
<p>在调用setDefault后，任何对表tab中不存在字段的访问都将调用它的__index元方法，而这个元方法会返回零（这个元方法中的值是d）。<br>函数setDefault为所有需要默认值的表创阿金一个新的闭包和一个新的元表。如果我们有很多需要默认值的表，那么开销会比较大。然而，由于具有默认值d的元表是于元方法关联在一起的，所有我们不能把同意个元表用于具有不同默认的表。为了能够使所有的表都使用同一个元表，可以使用一个额外的字段将每个表的默认值存放到表自身中。如果不担心命名冲突的话，我们可以使用形如<code>___</code>这样的键作为额外的字段：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> mt = &#123;<span class="built_in">__index</span> = <span class="function"><span class="keyword">function</span><span class="params">(t)</span></span> <span class="keyword">return</span> t.___ <span class="keyword">end</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setDefualut</span><span class="params">(t,d)</span></span></span><br><span class="line">	t,___ = d</span><br><span class="line">	<span class="built_in">setmetatable</span>(t,mt)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>请注意，这里我们只在setDefault外创建了一次元表mt及对应的元方法。<br>如果担心命名冲突，要确保这个特殊键的唯一性也很容易，只需要创建一个新的排除表，然后将它作为键即可：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> key = &#123;&#125;</span><br><span class="line"><span class="keyword">local</span> mt = &#123;<span class="built_in">__index</span> = <span class="function"><span class="keyword">function</span> <span class="params">(t)</span></span> <span class="keyword">return</span> t[key] <span class="keyword">end</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setDefualut</span><span class="params">(t,d)</span></span></span><br><span class="line">	t[key] = d</span><br><span class="line">	<span class="built_in">setmetatable</span>(t,mt)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>还有一种方法可以将每个表与其默认值关联起来，称为对偶表示，即使使用一个独立的表，该表的键为各种表，值为这些表的默认值。不过，为了正确地实现这种做法，我们还需要一种特殊的表，称为弱引用表。在这里，我们暂时不会使用弱引用表。<br>另一种为具有相同默认值的表复用同一个元表的方式是记忆元表。不过，这也需要用到弱引用表。</p>
<h3 id="跟踪对表的访问"><a href="#跟踪对表的访问" class="headerlink" title="跟踪对表的访问"></a>跟踪对表的访问</h3><p>假设我们要跟踪对某个表的所有访问。由于__index和__newindex元方法都是在表中的索引不存在时才有用，因此，捕获对一个表访问的唯一方式是保持表是空的。如果要监控对一个表的所有访问，那么需要为真正的表创建一个代理。这个代理是一个空的表，具有用于跟踪所有访问并将访问重定向到原来的表格的合理元方法。</p>
<blockquote>
<p>示例： 跟踪对标的访问</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">track</span><span class="params">(t)</span></span></span><br><span class="line">	<span class="keyword">local</span> proxy = &#123;&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">-- 为代理创建元表</span></span><br><span class="line">	<span class="keyword">local</span> mt = &#123;</span><br><span class="line">		<span class="built_in">__index</span> = <span class="function"><span class="keyword">function</span><span class="params">(_,k)</span></span></span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;*access to element&quot;</span> .. <span class="built_in">tostring</span>(k))</span><br><span class="line">		<span class="keyword">return</span> t[k]			<span class="comment">-- 访问原来的表</span></span><br><span class="line">	<span class="keyword">end</span>,</span><br><span class="line"></span><br><span class="line">	<span class="built_in">__newindex</span> = <span class="function"><span class="keyword">function</span> <span class="params">(_,k,v)</span></span></span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;*update to element &quot;</span> .. <span class="built_in">tostring</span>(k) .. <span class="string">&quot; to &quot;</span> ..<span class="built_in">tostring</span>(v))</span><br><span class="line">		t[k] = v      <span class="comment">-- 更新原来的表</span></span><br><span class="line">	<span class="keyword">end</span>,</span><br><span class="line"></span><br><span class="line">	__pairs = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">		<span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(_,k)</span></span>			<span class="comment">--迭代函数</span></span><br><span class="line">			<span class="keyword">local</span> nextkey,nextvalue = <span class="built_in">next</span>(t,k)</span><br><span class="line">			<span class="keyword">if</span> nextkey ~= <span class="literal">nil</span> <span class="keyword">then</span> 		<span class="comment">-- 避免最后一个值</span></span><br><span class="line">				<span class="built_in">print</span>(<span class="string">&quot;*traversing element &quot;</span> .. <span class="built_in">tostring</span>(nextkey))</span><br><span class="line">			<span class="keyword">end</span></span><br><span class="line">			<span class="keyword">return</span> nextkey,nextvalue</span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">end</span>,</span><br><span class="line"></span><br><span class="line">	<span class="built_in">__len</span> = <span class="function"><span class="keyword">function</span><span class="params">()</span></span> <span class="keyword">return</span> #t <span class="keyword">end</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">setmetatable</span>(proxy,mt)</span><br><span class="line">	<span class="keyword">return</span> proxy</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>以下展示了上述代码的用法：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">t = &#123;&#125;				<span class="comment">-- 任意一个表</span></span><br><span class="line">t = track(t)</span><br><span class="line">t[<span class="number">2</span>] = <span class="string">&quot;hello&quot;</span>		<span class="comment">-- *update of element 2 to hello</span></span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">2</span>])		</span><br><span class="line"><span class="comment">-- *access to elemetn 2</span></span><br><span class="line"><span class="comment">-- hello</span></span><br></pre></td></tr></table></figure>
<p>元方法__index和__newindex按照我们设计的规则跟踪每一个访问并将其重定向到原来的表中。元方法__pairs使得我们能够像遍历原来的表一样遍历代理，从而跟踪所有的访问。最后，远方__len通过代理实现了长度操作符：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">t = track(&#123;<span class="number">10</span>,<span class="number">20</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(#t)</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(t) <span class="keyword">do</span> <span class="built_in">pairs</span>(k,v) <span class="keyword">end</span></span><br><span class="line"><span class="comment">-- *traversing element 1</span></span><br><span class="line"><span class="comment">-- 1	10</span></span><br><span class="line"><span class="comment">-- *traversing element 2</span></span><br><span class="line"><span class="comment">-- 2	10</span></span><br></pre></td></tr></table></figure>
<p>如果想要同时监控几个表，并不需要为每个表创建不同的元表。相反，只要以某种形式将每个代理与其原始表映射起来，并且让所有的代理共享一个公共的元表即可。</p>
<h3 id="只读的表"><a href="#只读的表" class="headerlink" title="只读的表"></a>只读的表</h3><p>使用代理的概念可以很容易地实现只读的表，需要做的只是跟踪对表的更新操作并抛出异常即可。对于元方法__index，由于我们不需要跟踪查询，所以可以直接使用原来的表来代替函数。这样做比把所有的查询重定向到原来的表上更简单也更有效率。不过，这种做法要求为每个只读代理创建一个新的元表，其中__index元方法指向原来的表：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readOnly</span><span class="params">(t)</span></span></span><br><span class="line">	<span class="keyword">local</span> proxy = &#123;&#125;</span><br><span class="line">	<span class="keyword">local</span> mt = &#123;</span><br><span class="line">		<span class="built_in">__index</span> = t,</span><br><span class="line">		<span class="built_in">__newindex</span> = <span class="function"><span class="keyword">function</span><span class="params">(t,k,v)</span></span></span><br><span class="line">		<span class="built_in">error</span>(<span class="string">&quot;attempt to update a read-only table&quot;</span>, <span class="number">2</span>)</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">setmetatable</span>(proxy,mt)</span><br><span class="line">	<span class="keyword">return</span> proxy</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>作为示例，我们可以创建一个表示星期的只读表：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">days = readOnly&#123;<span class="string">&quot;Sunday&quot;</span>,<span class="string">&quot;Monday&quot;</span>,<span class="string">&quot;Tuesday&quot;</span>,<span class="string">&quot;Wednesday&quot;</span>,<span class="string">&quot;Thrsday&quot;</span>,<span class="string">&quot;Friday&quot;</span>,<span class="string">&quot;Saturday&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(days[<span class="number">1</span>])			<span class="comment">-- Sunday</span></span><br><span class="line">days[<span class="number">2</span>] = <span class="string">&quot;Nodya&quot;</span></span><br><span class="line"><span class="comment">-- stdin:1:attempt to update a read-only table</span></span><br></pre></td></tr></table></figure>






]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua编译执行和错误</title>
    <url>/21815.html</url>
    <content><![CDATA[<p>虽然我们把Lua语言成为解释型语言，但Lua语言总是在运行代码前先预编译源码为中间代码（这没什么大不了的，很多解释型语言也这样做）。编译阶段的存在听上去超出了解释型语言的范畴，但解释型语言的区分并不在与源码是否被编译，而在于是否有能力（且轻易地）执行动态生成的代码。可以认为，正是由于诸如dofile这样函数的的存在，才使得Lua语言能够被称为解释型语言。</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>此前，我们已经介绍过函数dofile，它是运行Lua代码段的主要方式之一。实际上，函数dofile是一个辅助函数，函数loadfile才完成了真正的核心工作。与函数dofile类似，函数loadfile也是从文件中加载Lua代码段，但它不会运行代码，而是只是编译代码，然后将编译后的代码段作为一个函数返回。此外，与函数dofile不同，函数loadfile只返回错误码而不抛出异常。可以认为，函数dofile就是：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dofile</span> <span class="params">(filename)</span></span></span><br><span class="line">	<span class="keyword">local</span> f = <span class="built_in">assert</span>(<span class="built_in">loadfile</span>(filename))</span><br><span class="line">	<span class="keyword">return</span> f()</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>请注意，如果函数loadfile执行失败，那么函数assert会引发一个错误。<br>对于简单的需求而言，由于函数dofile在一次调用中就做完了所有工作，所以改函数非常易用。不过，函数loadfile更灵活。在发生错误的情况中，函数loadfile会返回nil及错误信息，以允许我们按自定义的方式来处理错误。此外，如果需要多次运行一个文件，那么只需要调用一次loadfile函数后再多次调用它的返回结果即可。由于只编译一次文件，因此这种方式的开销要比多次调用函数dofile小得多（编译在某种程度上相比其他操作开销更大）。<br>函数load与函数loadfile类似，不同之处在于该函数从一个字符串或函数中读取代码段，而不是从文件中读取。例如，考虑如下的代码：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">load</span>(<span class="string">&quot;i = i + 1&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>在这句话代码执行后，变量f就会变成一个被调用时执行i &#x3D; i + 1的函数：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">i = <span class="number">0</span> </span><br><span class="line">f();<span class="built_in">print</span>(i)		<span class="comment">-- 1</span></span><br><span class="line">f();<span class="built_in">print</span>(i)		<span class="comment">-- 2</span></span><br></pre></td></tr></table></figure>
<p>尽管函数load的功能很强大，但还是应该谨慎地使用。相当于其他可选的函数而言，该函数的开销较大并且可能会引起诡异的问题。请先确定当下已经找不到更简单的解决方式后再使用该函数。<br>如果要编写一个用后即弃的dostring函数（例如加载并运行一行代码），那么我们可以直接调用函数load的返回值：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">load</span>(s)()</span><br></pre></td></tr></table></figure>
<p>不过，如果代码中有语法错误，函数load就会返回你来和形如”attempt to call a nil value”的错误信息。为了更清楚地展示错误信息，最好使用函数assert:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">assert</span>(<span class="built_in">load</span>(s))()</span><br></pre></td></tr></table></figure>
<p>通常，用函数load来加载字符串常量是没有意义的。例如，如下的两行代码基本等价：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">load</span>(<span class="string">&quot;i = i + 1&quot;</span>)</span><br><span class="line"></span><br><span class="line">f = <span class="function"><span class="keyword">function</span><span class="params">()</span></span> i = i + <span class="number">1</span> <span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>但是，由于第2行代码会与其外层的函数一起被编译，所以其执行速度要快得多。与之对比，第一段代码在调用函数load时会进行一次独立的编译。</p>
<p>由于函数load在编译时不涉及词法定界，所以上述示例的两段代码可能并不完全等价。为了清洗地展示它们之间的区别，让我们稍微修改一下上面的例子：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">i = <span class="number">32</span></span><br><span class="line"><span class="keyword">local</span> i = <span class="number">0</span></span><br><span class="line">f = <span class="built_in">load</span>(<span class="string">&quot;i = i +1;print(i)&quot;</span>)</span><br><span class="line">g = <span class="function"><span class="keyword">function</span><span class="params">()</span></span> i = i + <span class="number">1</span>; <span class="built_in">print</span>(i) <span class="keyword">end</span></span><br><span class="line">f()			<span class="comment">-- 33</span></span><br><span class="line">g()			<span class="comment">-- 1</span></span><br></pre></td></tr></table></figure>
<p>函数g像我们所预期地那样操作局部变量i，但函数f操作的却是全局变量i，这是由于函数load总是在全局环境中编译代码段。<br>函数load最典型的用法是执行外部代码（即那些来自程序本身之外的代码段）或动态生成的代码。例如，我们可能想运行用户定义的函数，由用户输入函数的代码后调用函数load对其求值。请注意，函数load期望的输入是一段程序，也就是一系列的语句。如果需要对表达式求值，那么可以在表达式前添加return，这样才能构成一条返回指定表达式值的语句。例如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> <span class="string">&quot;enter your expression:&quot;</span></span><br><span class="line"><span class="keyword">local</span> line = <span class="built_in">io</span>.<span class="built_in">read</span>()</span><br><span class="line"><span class="keyword">local</span> f = <span class="built_in">assert</span>(<span class="built_in">load</span>(<span class="string">&quot;return &quot;</span> .. line))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;the value of your expression is&quot;</span> .. fun())</span><br></pre></td></tr></table></figure>
<p>由于函数load所返回的函数就是一个普通函数，因此可以反复对其进行调用：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> <span class="string">&quot;enter function to be plotted (with variable &#x27;x&#x27;):&quot;</span></span><br><span class="line"><span class="keyword">local</span> line = <span class="built_in">io</span>.<span class="built_in">read</span>()</span><br><span class="line"><span class="keyword">local</span> f = <span class="built_in">assert</span>(<span class="built_in">load</span>(<span class="string">&quot;return &quot;</span> .. line ))</span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">20</span> <span class="keyword">do</span></span><br><span class="line">	x = i <span class="comment">-- 全局的&#x27;x&#x27;（当前代码段内可见）</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">rep</span>(<span class="string">&quot;*&quot;</span>,f()))</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>我们也可以使用读取函数作为函数load的第1个参数。读取函数时以分几次返回一段程序，函数load会不断地调用读取函数知道读取函数返回nil（表示程序段结束）。作为示例，以下的调用与函数loadfile等价：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">load</span>(<span class="built_in">io</span>.<span class="built_in">lines</span>(filename,<span class="string">&quot;*L&quot;</span>))</span><br></pre></td></tr></table></figure>
<p>调用io.lines(filename.”*L”)返回一个函数，这个函数每次被调用时就从指定文件返回一行。因此，函数load会一行一行地从文件中读出一段程序。以下的版本与之相似但效率稍高：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">load</span>(<span class="built_in">io</span>.<span class="built_in">lines</span>(filename,<span class="number">1024</span>))</span><br></pre></td></tr></table></figure>
<p>这里，函数io.lines返回的迭代器会以1024字节为块读取源文件。<br>Lua语言将所有独立的代码段当做匿名可变长参数函数的函数体。例如，load(“a &#x3D; 1”)的返回值与以下表达式等价：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="params">(...)</span></span> a = <span class="number">1</span> <span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>像其他任何函数一样，代码段中可以声明局部变量：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">load</span>(<span class="string">&quot;local a = 10;pirnt(a + 20&quot;</span>)</span><br><span class="line">f()			<span class="comment">-- 30</span></span><br></pre></td></tr></table></figure>
<p>使用这个特行，可以在不使用全局变量x的情况下重写之前运行用户定义函数的示例：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> <span class="string">&quot;enter function to be plotted(with variable &#x27;x&#x27;):&quot;</span></span><br><span class="line"><span class="keyword">local</span> line = <span class="built_in">io</span>.<span class="built_in">read</span>()</span><br><span class="line"><span class="keyword">local</span> f = <span class="built_in">assert</span>(<span class="built_in">load</span>(<span class="string">&quot;local x = ...;return &quot;</span> .. line))</span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">20</span> <span class="keyword">do</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">rep</span>(<span class="string">&quot;*&quot;</span>,f(i)))</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>在上述代码中，在代码段开头增加了”local x &#x3D; …” 来将x声明为局部变量。之后使用参数i调用函数f，参数i就是可变长参数表达式的值(…)。<br>函数load和函数loadfile从来不引发错误。当有错误发生时，它们会返回nil及错误信息：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">load</span>(<span class="string">&quot;i i&quot;</span>))			<span class="comment">-- nil [string &quot;i i&quot;]:1: &#x27;=&#x27; expected near &#x27;i&#x27;</span></span><br></pre></td></tr></table></figure>
<p>另外，这些函数没有任何副作用，它们既不改变后创建变量，也不向文件写入等。这些函数只是将程序段编译为一种中间形式，然后将结果作为匿名函数返回。一种常见的误解是认为加载一段程序也就是定义了函数，但实际上在Lua语言中函数定义是在运行时而不是在编译时发生的一种赋值操作。例如，假设有一个文件foo.lua:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 文件foo.lua</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">(x)</span></span></span><br><span class="line">	<span class="built_in">print</span>(x)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>当执行</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">loadfile</span>(<span class="string">&quot;foo.lua&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>时，编译foo的命令并没有定义foo，只有运行代码才会定义它：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">loadfile</span>(<span class="string">&quot;foo.lua&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(foo)			<span class="comment">-- nil</span></span><br><span class="line">f()					<span class="comment">-- 运行代码</span></span><br><span class="line">foo(<span class="string">&quot;ok&quot;</span>)			<span class="comment">-- ok</span></span><br></pre></td></tr></table></figure>
<p>这种行为可能看上去有些奇怪，但如果不使用语法糖对其进行重写则看上去会清晰很多：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 文件&#x27;foo.lua&#x27;</span></span><br><span class="line">foo = <span class="function"><span class="keyword">function</span><span class="params">(x)</span></span></span><br><span class="line">	<span class="built_in">print</span>(x)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>如果线上产品级别的程序需要执行外部代码，那么应该处理加载程序段时报告的所有错误。此外，为了避免不愉快的副作用发生，可能还应该在一个受保护的环境中执行这些代码。</p>
<h2 id="预编译的代码"><a href="#预编译的代码" class="headerlink" title="预编译的代码"></a>预编译的代码</h2><p>生成预编译文件（也被称为二进制文件）最简单的方式是，使用标准发行版中附带的luac程序。例如，下列命令会创建文件prog.lua的预编译版本prog.lc:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">$ luac -o prog.lc prog.lua</span><br></pre></td></tr></table></figure>
<p>Lua解析器会像执行普通Lua代码一样执行这个新文件，完成与原来代码完全一致的动作：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">$ lua prog.lc</span><br></pre></td></tr></table></figure>
<p>几乎在Lua语言中所有能够使用源码的地方都可以使用预编译代码。特别地，函数loadfile和函数load都可以接受预编译代码。<br>我们可以直接在Lua语言中实现一个最简单的Luac：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">p = <span class="built_in">loadfile</span>(<span class="built_in">arg</span>[<span class="number">1</span>])</span><br><span class="line">f = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="built_in">arg</span>[<span class="number">2</span>],<span class="string">&quot;wb&quot;</span>)</span><br><span class="line">f:<span class="built_in">write</span>(<span class="built_in">string</span>.<span class="built_in">dump</span>(p))</span><br><span class="line">f:<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure>
<p>这里关键函数是string.dump，该函数的入参是一个Lua函数，返回值是传入函数对应的字符串形式的预编译代码。<br>luac程序提供了一些有意思的选项。特别地，选项-l会列出编译器为指定代码段生成的操作码。</p>
<blockquote>
<p>示例 luac -l的输出示例</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">main&lt;<span class="built_in">stdin</span>:<span class="number">0</span>,o&gt; (<span class="number">7</span> instructions, <span class="number">28</span>bytes at <span class="number">0x988cb30</span>)</span><br><span class="line"><span class="number">0</span> + params, <span class="number">2</span> slots, <span class="number">0</span> upvalues, o locals, <span class="number">4</span> constants, <span class="number">0</span> functions</span><br><span class="line"><span class="number">1</span> [<span class="number">1</span>] GETGLOBAL	<span class="number">0</span> <span class="number">-2</span>	; x</span><br><span class="line"><span class="number">2</span> [<span class="number">1</span>] GETGLOBAL <span class="number">1</span> <span class="number">-3</span>	; y</span><br><span class="line"><span class="number">3</span> [<span class="number">1</span>] ADD	    <span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span></span><br><span class="line"><span class="number">4</span> [<span class="number">1</span>] GETGLOBAL <span class="number">1</span> <span class="number">-4</span>	; x</span><br><span class="line"><span class="number">5</span> [<span class="number">1</span>] USB       <span class="number">0</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">6</span> [<span class="number">1</span>] SETGLOBAL <span class="number">0</span> <span class="number">-1</span>	; a</span><br><span class="line"><span class="number">7</span> [<span class="number">1</span>] RETURN    <span class="number">0</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>预编译形式的代码不一定比源代码更小，但是却加载得更快。预编译形式的代码的另一个好处是，可以避免由于意外而修改源码。然而，与源代码不同，蓄意损坏或构造的二进制代码可能会让Lua解析器奔溃或甚至执行用户提供的机器码。当运行一般的代码时通常无须担心，但应该避免运行以预编译形式给出的非受信代码。这种需求，函数load正好有一个选项可以适用。<br>除了必需的第1个参数外，函数load还有3个可选参数。第2个参数是程序段的名称，只在错误信息中被用到。第4个参数是环境。第3个参数正是我们这里关心的，它控制了允许加载的代码段的类型。如果该参数存在，则只能是如下的字符串：字符串”t”允许加载文本类型的代码段，字符串”b”只允许加载二进制类型的代码段，字符串”bt”允许同时加载上述两种类型的代码段。</p>
<h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><p>人人皆难免犯错误。因此，我们必须尽可能地处理错误。由于lua语言是一种经常被嵌入在应用程序中的扩展语言，所以当错误发生时并不能简单地奔溃或退出。相反，只要错误发生，Lua语言就必须提供处理错误的方式。<br>Lua语言会在遇到非预期的情况时引发错误。例如，当试图将两个非常值类型的值相加，对不是函数的值进行调用，对不是表类型的值进行索引等。我们也可以显示地通过调用函数error并传入一个错误信息来作为参数引发一个错误。通常，这个函数就是在代码中提示出错的合理方式：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">pirnt <span class="string">&quot;enter a number :&quot;</span></span><br><span class="line">n = <span class="built_in">io</span>.<span class="built_in">read</span>(<span class="string">&quot;n&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> n <span class="keyword">then</span> <span class="built_in">error</span>(<span class="string">&quot;invalid input&quot;</span>) <span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>由于“针对某些情况调用函数error”这样的代码结构太常见了，所以Lua语言提供了一个内建的函数assert来完成这类工作：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> <span class="string">&quot;enter a nubmer:&quot;</span></span><br><span class="line">n = <span class="built_in">assert</span>(<span class="built_in">io</span>.<span class="built_in">read</span>(<span class="string">&quot;*n&quot;</span>),<span class="string">&quot;invalid input&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>函数assert检查其第1个参数是否为真，如果该参数为真则返回该参数；如果该参数为假，则引发一个错误。该函数的第2个参数是一个可选的错误信息。不过，要注意函数assert只是一个普通函数，所以Lua语言会总是在调用该函数前先对参数进行求值。如果编写形如</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">n = <span class="built_in">io</span>.<span class="built_in">read</span>()</span><br><span class="line"><span class="built_in">assert</span>(tonumver(n),<span class="string">&quot;invalid input:&quot;</span> .. n .. <span class="string">&quot;is not a number&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>的代码，那么即使n是一个数值类型，Lua语言也总是会进行字符串连接。在这种情况下使用显示的测试可能更加明智。<br>当一个函数发现某种意外的情况发生时，在进行一场处理时可以采取两种基本方式：一种是返回错误代码（通常是nil或者false），另一种是通过调用函数error引发了一个错误。如何在这两种方式之间进行选择并没有固定的规则，但笔者通常遵循如下的知道原则：容易避免的异常应该引发错误，否则应该返回错误码。<br>以函数math.sin为例，当调用参数传入了一个表该如何反应呢？如果要检查错误，那么就不得不编写如下代码：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> res = <span class="built_in">math</span>.<span class="built_in">sin</span>(x)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> res <span class="keyword">then</span>			<span class="comment">-- 错误？</span></span><br><span class="line">	<span class="built_in">error</span>-handling code</span><br></pre></td></tr></table></figure>
<p>当然，也可以在调用函数前轻松地检查出这种异常：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">tonumber</span>(x) <span class="keyword">then</span>			<span class="comment">-- x是否为数字</span></span><br><span class="line">	<span class="built_in">error</span>-handling code</span><br></pre></td></tr></table></figure>
<p>通常，我们既不会检查参数也不会检查函数sin的返回值；如果sin的参数不是一个数值，那么就意味着我们的程序可能出现了问题。此时，处理异常最简单也是最实用的做法就是停止运行，然后输出一条错误信息。<br>另一方面，让我们再考虑一下用于打开文件的函数io.open。如果要打开的文件不存在，那么该函数应该有怎么样的行为呢？在这种情况下，没有什么简单的方法可以在调用函数前检测到这种异常。在很多系统中，判断一个文件是否存在的唯一方法就是试着去打开这个文件。因此，如果由于外部原因导致函数io.open无法打开一个文件，那么它应返回false及一条错误信息。通过这种方式，我们就有机会采取恰当的方式来处理这个异常情况，例如要求用户提供另外一个文件名：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> file, msg</span><br><span class="line"><span class="keyword">repeat</span></span><br><span class="line">	<span class="built_in">print</span> <span class="string">&quot;enter a file name:&quot;</span></span><br><span class="line">	<span class="keyword">local</span> name = <span class="built_in">io</span>.<span class="built_in">read</span>()</span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">not</span> name <span class="keyword">then</span> <span class="keyword">return</span> <span class="keyword">end</span> 		<span class="comment">--没有输入</span></span><br><span class="line">	file, msg = <span class="built_in">io</span>.<span class="built_in">open</span>(name,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">not</span> file <span class="keyword">then</span> <span class="built_in">print</span>(msg) <span class="keyword">end</span></span><br><span class="line"><span class="keyword">until</span> file</span><br></pre></td></tr></table></figure>
<p>如果不想处理这些情况，但又想安全地运行程序，那么只需要用assert：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">file = <span class="built_in">assert</span>(<span class="built_in">io</span>.<span class="built_in">open</span>(name,<span class="string">&quot;r&quot;</span>))	<span class="comment">-- stdin:1:no-file: No such file or directory</span></span><br></pre></td></tr></table></figure>
<p>这是Lua语言中一种典型的技巧：如果函数io.open执行失败，assert就引发一个错误。</p>
<h2 id="错误处理和异常"><a href="#错误处理和异常" class="headerlink" title="错误处理和异常"></a>错误处理和异常</h2><p>对于大多数应用而言，我们无须在Lua代码中做任何错误处理，应用程序本身会负责处理这类问题。所以Lua语言的行为是由应用程序的第一次调用而触发的，这类调用通常是要求Lua语言执行一段代码。如果执行中发生了错误，那么调用会返回一个错误代码，以便应用程序采取适当的行为来处理错误。当独立解释器中发生错误时，主循环会打印错误信息，然后继续显示提示符，并等待执行指令的命令。<br>不过，如果要在Lua代码中处理错误，那么就应该使用函数pcall来封装代码。<br>假设要执行一段Lua代码并捕获执行中发生的所有错误，那么首先需要将这段代码封装到一个函数中，这个函数通常是一个匿名函数。之后通过pcall来调用这个函数：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> ok , msg = <span class="built_in">pcall</span> (<span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">	some code</span><br><span class="line">	<span class="keyword">if</span> unexpected_condition <span class="keyword">then</span> <span class="built_in">error</span>() <span class="keyword">end</span></span><br><span class="line">	some code</span><br><span class="line">	<span class="built_in">print</span>(a[i])			<span class="comment">-- 潜在错误，&#x27;a&#x27;可能不是一个表</span></span><br><span class="line">	some code</span><br><span class="line"><span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ok <span class="keyword">then</span>			<span class="comment">-- 执行被保护的代码时没有发生错误</span></span><br><span class="line">	regular code</span><br><span class="line"><span class="keyword">else</span>				<span class="comment">-- 执行被保护的代码时有错误发生：进行恰当的处理</span></span><br><span class="line">	<span class="built_in">error</span>-handling code</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>函数pcall会以一种保护模式来调用它的第1个参数，以便捕获该函数执行中的错误。无论是否有错误发生，函数pcall都不会引发错误。如果没有错误发生，那么pcall返回true及调用函数的所有返回值；否则，则返回false及错误信息。<br>使用”错误信息”的命名方式可能会让人误解错误信息必须是一个字符串，因此称之为错误对象可能更好，这主要是因为函数pacll能够返回传递给error的任意语言类型的值。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="built_in">status</span> , err = <span class="built_in">pcall</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span></span> <span class="built_in">error</span>(&#123;coude = <span class="number">121</span>&#125;) <span class="keyword">end</span>)</span><br><span class="line"><span class="built_in">print</span>(err.code)		<span class="comment">-- 121</span></span><br></pre></td></tr></table></figure>
<p>这些机制为我们提供了在Lua语言中进行异常处理的全部。我们可以通过error来抛出异常，然后用函数pcall来捕获异常，而错误信息则用来表示错误的类型。</p>
<h2 id="错误信息和栈回调"><a href="#错误信息和栈回调" class="headerlink" title="错误信息和栈回调"></a>错误信息和栈回调</h2><p>虽然能够使用任何类型的值作为错误对象，但错误对象通常是一个描述出错内容的字符串。当遇到内部错误出现时，Lua语言负责产生错误对象，如果错误对象是一个字符串，那么Lua语言会尝试把一些有关错误发生位置的信息附上：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="built_in">status</span> , err = <span class="built_in">pcall</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span></span> <span class="built_in">error</span>(<span class="string">&quot;my error&quot;</span>) <span class="keyword">end</span>)</span><br><span class="line"><span class="built_in">print</span>(err)		<span class="comment">-- stdin:1:my error</span></span><br></pre></td></tr></table></figure>
<p>位置信息中给出了出错代码段的名称和行号。<br>函数error还有第2个可选参数level，用于指出向函数调用层次中的哪层函数报告错误，以说明谁应该为错误负责。例如，假设编写一个用来检查其自身是否被正确调用了的函数：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">(str)</span></span></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">type</span>(str) ~= <span class="string">&quot;string&quot;</span> <span class="keyword">then</span></span><br><span class="line">		<span class="built_in">error</span>(<span class="string">&quot;string expected&quot;</span>)</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	regular code</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>如果调用时被传递了错误的参数：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">foo(&#123;x = <span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure>
<p>由于函数foo调用的error，所以Lua语言会认为是函数foo发生了错误。然而，真正的肇事者其实是函数foo的调用者。为了纠正这个问题，我们需要告诉error函数错误实际发生在函数调用蹭的第2层中：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> <span class="params">(str)</span></span></span><br><span class="line">	<span class="keyword">if</span> typr(str) ~= <span class="string">&quot;string&quot;</span> <span class="keyword">then</span></span><br><span class="line">		<span class="built_in">error</span>(<span class="string">&quot;string expected&quot;</span>,<span class="number">2</span>)</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	regular code</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>通常，除了发生错误的位置以外，我们还希望在错误发生时得到更多的调试信息。至少，我们希望得到具有发生错误时完整函数调用栈回溯。当函数pcall返回错误信息时，部分的调用栈已经被破坏了。因此，如果希望得到一个有意义的栈回溯，那么就必须在函数pcall返回前先将调用栈构造好。为了完成这个需求，Lua语言提供了函数xpcall。该函数与函数pcall蕾西，但它的第2个参数是一个消息处理函数。当发生凑无时，Lua会调用栈展开前调用这个消息处理函数，以便消息处理函数能够使用调试库来获取有关错误的更逗信息。两个常用的消息处理函数是debug.debug和debug.traceback，前者为用户提供一个Lua提示符来让用户检查错误发生的原因；后者则使用调用栈来构造详细的错误，Lua语言的独立解释器就是使用这个函数来构造错误信息的。</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua语言入门</title>
    <url>/41246.html</url>
    <content><![CDATA[<p>遵照惯例，我们的第一个Lua程序时通过标准输出打印字符串”Hello World”:<br><code>print(&quot;Hello World&quot;)</code></p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>如果读者使用的是Lua语言独立解释器(stand-alone interpreter)，要运行这第一个程序的话，直接调用解释器运行包含程序代码的文本文件就可以了。例如，如果把上述代码保存为名hello.lua的文件，那么可以通过以下命令运行：<br><code>% lua hello.lua</code></p>
<p>再来看一个稍微复杂点的例子，以下代码定义了一个计算阶乘的函数，该函数先让用户输入一个数，然后打印出这个数的阶乘结果：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--定义一个计算阶乘的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fact</span><span class="params">(n)</span></span></span><br><span class="line">	<span class="keyword">if</span> n  == <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> n * fact(n<span class="number">-1</span>)</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;enter a number:&quot;</span>)</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">io</span>.<span class="built_in">read</span>(<span class="string">&quot;*n&quot;</span>)  <span class="comment">--读取一个数字</span></span><br><span class="line"><span class="built_in">print</span>(fact(a))</span><br></pre></td></tr></table></figure>

<h2 id="1-1-程序段"><a href="#1-1-程序段" class="headerlink" title="1.1 程序段"></a>1.1 程序段</h2><p>我们将Lua语言执行的每一段代码称为一个*程序段(Chunk)*，即一组命令或表达式组成的序列。<br>程序段既可以简单到只由一句表达式构成，也可以由多句表达式和函数定义（实际是复制表达式，后面会详细介绍）组成（例如计算阶乘的示例）。程序段在大小上并没有限制，事实上，由于Lua语言也可以被用作数据定义语言，所以几MB的程序段也很常见。Lua语言的解释器可以支持非常大的程序段。<br>除了将源码保存成文件外，我们有也可以直接在交互式模式(interactive mode)下运行独立解释器。当不带参数第调用lua时，可以看到如下的输出:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">% lua</span><br><span class="line">Lua <span class="number">5.3</span> Copyright(C)<span class="number">1994</span><span class="number">-2016</span> Lua.org, PUC-Rio</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
<p>此后，输入的每一条命令都会在按下回车键后立即执行。我们可以通过输入<code>EPF</code>控制字符，或调用操作系统库的<code>exit</code>函数（执行<code>os.exit()</code>）退出交互模式。<br>从Lua5.3版本开始，可以直接在交互模式下输入表达式，Lua语言会输出表达式的值，例如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">% lua</span><br><span class="line">Lua <span class="number">5.3</span> Copyright(C)<span class="number">1994</span><span class="number">-2016</span> Lua.org, PUC-Rio</span><br><span class="line">&gt; <span class="built_in">math</span>.<span class="built_in">pi</span> / <span class="number">4</span>         <span class="comment">--0.78539816339745</span></span><br><span class="line">&gt; a = <span class="number">15</span></span><br><span class="line">&gt; a^<span class="number">2</span>                 <span class="comment">--225</span></span><br><span class="line">&gt; a + <span class="number">2</span>               <span class="comment">--7</span></span><br></pre></td></tr></table></figure>
<p>要以代码段的方式运行代码（不在交互模式下），那么必须把表达式包在函数<code>print</code>的调用中：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">math</span>.<span class="built_in">pi</span>/<span class="number">4</span>)</span><br><span class="line">a = <span class="number">15</span></span><br><span class="line"><span class="built_in">print</span>(a^<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(a + <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>在交互模式下，Lua语言解释器一般会把我们输入的每一行当做完整的程序块或表达式解释执行。但是，如果Lua语言解释器发现我们输入的某一行不完成，那么它会等待直到程序块或表达式被输入完整后再进行解释执行。这样，我们也可以直接在交互模式下输入一个像阶乘函数示例那样的由多行组成的多行定义。不过，对于这种较长的函数定义而言，将其保存文件然后再调用独立解释器来执行通常更方便。<br>我们可以使用<code>-i</code>参数让Lua语言解释器在执行完制定的程序段后进入交互模式：<br><code>% lua -i prog</code><br>上述命令会在执行完文件prog中的程序后进入交互模式，这对于调试和手工测试很有用。在本章的最后，我们会学习有关独立解释器的更多参数。<br>另一种运行程序段的方式调用函数<code>dofile</code>，该函数会立即执行一个文件。例如，假设我们有一个如下所示的文件lib1.lua:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">norm</span><span class="params">( x,y )</span></span></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">math</span>.<span class="built_in">sqrt</span>(x^<span class="number">2</span> + y^<span class="number">2</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">twice</span> <span class="params">(x)</span></span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">2.0</span> * x</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>然后，在交互模式下运行：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt;<span class="built_in">dofile</span>(<span class="string">&#x27;lib1.lua&#x27;</span>)   <span class="comment">--加载文件</span></span><br><span class="line">&gt;n = norm(<span class="number">3.4</span>,<span class="number">1.0</span>)</span><br><span class="line">&gt;twice(n)             <span class="comment">--7.088018058677</span></span><br></pre></td></tr></table></figure>
<p>函数dofile在开发阶段也非常有用。我们可以同时打开两个窗口，一个窗口中使用文件编辑器编辑代码，另一个窗口中使用交互模式运行Lua语言解释器。当修改完代码并保存后，只要在Lua语言交互模式的提示符下执行dofile(“prog.lua”)就可以加载新代码，然后就可以观察新代码的函数调用和执行结果了。</p>
<h2 id="1-2-一些语法规范"><a href="#1-2-一些语法规范" class="headerlink" title="1.2 一些语法规范"></a>1.2 一些语法规范</h2><p>Lua语言中的标识符是由任意字母、数字和下划线组成的字符串（注意不能用数字开头），例如：<br><code>i</code>,<code>j</code>,<code>i1</code>,<code>j1</code>,<code>_i</code>,<code>abc</code><br>“下划线 + 大写字母”组成的标识符通过被Lua语言用作特殊用途，应避免将其用作其他用途。我们通常将“下划线 + 小写字母”用作哑变量。<br>以下是Lua语言的保留字，它们不能被用作标识符：<br><code>and</code>,<code>brask</code>,<code>do</code>,<code>else</code>,<code>elseif</code>,<code>end</code>,<code>false</code>,<code>goto</code>,<code>for</code>,<code>function</code>,<code>if</code>,<code>in</code>,<code>local</code>,<code>nil</code>,<code>not</code>,<code>or</code>,<code>repeat</code>,<code>return</code>,<code>then</code>,<code>true</code>,<code>until</code>,<code>while</code><br>Lua语言是对大小写敏感的，因而<code>and</code>是保留字，但是<code>And</code>和<code>AND</code>就是两个不同的标识符。<br>Lua语言中使用两个连续的连字符（–）表示单行注释，使用两个连续的连字符加两对左方括号表示长注释或多行注释的开始，指导两个连续的右括号为止，中间都是注释，例如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--[[多行</span></span><br><span class="line"><span class="comment">长注释</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure>
<p>在注释一段代码时，一个常见的技巧是将这些代码放入–[[和–]]之间，例如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">print(10)   --无动作，被注释掉了</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></table></figure>
<p>当我们需要重新启用这段代码时，只需要在第一行行首添加一个连字符即可：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">---[[</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span>)      <span class="comment">--10</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></table></figure>
<p>在第一个示例中，第一行的–[[表示一段多行注释的开始，直到两个连续的右括号这段多行注释才会结束，因而尽管最后一行有两个连续的连字符，但由于这两个连字符在最后两个右括号之前，所以仍然被注释掉了。在第二个示例中，由于第一行的–[[实际是单行注释，因此最后一行实际上也是一条独立的单行注释（最后的两个连续右方括号没有与之匹配的–[[），print并没有被注释掉。<br>在Lua语言中，连续语句之间的分隔符并不是必需的，如果有需要的话可以使用分号来进行分割。在Lua语言中，表达式之间的换行也不起任何作用。例如，以下4个程序段都是合法且等价的：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span> </span><br><span class="line">b = a * <span class="number">2</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">1</span>;</span><br><span class="line">b = a * <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">a = <span class="number">1</span>; b = a * <span class="number">2</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">1</span> b = a * <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>这个根据个人习惯来。</p>
<h2 id="1-3-全局变量"><a href="#1-3-全局变量" class="headerlink" title="1.3 全局变量"></a>1.3 全局变量</h2><p>在Lua语言中，全局变量无须声明即可使用，使用未经初始化的全局变量也不会导致错误。当使用未经初始化的全局变量时，得到的结果是<code>nil</code>：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt; b      <span class="comment">-- nil</span></span><br><span class="line">&gt; b = <span class="number">10</span> </span><br><span class="line">&gt; b      <span class="comment">--10</span></span><br></pre></td></tr></table></figure>
<p>当把<code>nil</code>赋值给全局变量时，Lua会回收改全局变量（就像该全局变量从来没有出现过一样），例如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt; b = <span class="literal">nil</span></span><br><span class="line">&gt; b         			<span class="comment">--nil</span></span><br></pre></td></tr></table></figure>
<p>Lua语言不区分为初始化变量和被赋值为nil的变量。在上述赋值语句执行后，Lua语言会最终回收该变量占用的内存。</p>
<h2 id="1-4类型和值"><a href="#1-4类型和值" class="headerlink" title="1.4类型和值"></a>1.4类型和值</h2><p>Lua语言是一种动态类型的语言，在这种语言中没有类型定义，每个值都带有其自身的类型信息。<br>Lua语言中有8个基本类型：nil（空）、bloolean（布尔）、number（数值）、string（字符串）、userdata（用户数据）、function（函数）、thread（线程）和table（表）。使用函数type可获取一个值对应的类型名称：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt;<span class="built_in">type</span>(<span class="literal">nil</span>)			<span class="comment">-- nil</span></span><br><span class="line">&gt;<span class="built_in">type</span>(<span class="literal">true</span>)			<span class="comment">-- boolean</span></span><br><span class="line">&gt;<span class="built_in">type</span>(<span class="number">10.4</span>*<span class="number">3</span>)		<span class="comment">--number</span></span><br><span class="line">&gt;<span class="built_in">type</span>(<span class="string">&quot;Hello World&quot;</span>)<span class="comment">--string</span></span><br><span class="line">&gt;<span class="built_in">type</span>(<span class="built_in">io</span>.<span class="built_in">stdin</span>)		<span class="comment">--userdata</span></span><br><span class="line">&gt;<span class="built_in">type</span>(<span class="built_in">print</span>)		<span class="comment">--function</span></span><br><span class="line">&gt;<span class="built_in">type</span>(<span class="built_in">type</span>)			<span class="comment">--thread</span></span><br><span class="line">&gt;<span class="built_in">type</span>(&#123;&#125;)			<span class="comment">--table</span></span><br><span class="line">&gt;<span class="built_in">type</span>(<span class="built_in">type</span>(X))		<span class="comment">--string</span></span><br></pre></td></tr></table></figure>
<p>不管X是什么，最后一行返回的永远是“string”。这是因为函数type的返回值永远是一个字符串。<br>userdata类型允许把任意的C语言数据保存在Lua语言变量中。在Lua语言中，用户数据类型除了赋值和相等性测试外，没有其他预定义的操作。用户数据被用来表示由应用或C语言编写的库所创建的新类型。例如，标准I&#x2F;O库使用用户数据来表示打开的文件。我们会在后面设计C API时再讨论更多的相关内容。<br>变量没有预定义的类型，任何变量都可以包含任何类型的值：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt;<span class="built_in">type</span>(a)		<span class="comment">-- nil(a没有初始化)</span></span><br><span class="line">&gt;a = <span class="number">10</span></span><br><span class="line">&gt;<span class="built_in">type</span>(a)		<span class="comment">--number</span></span><br><span class="line">&gt;a = <span class="string">&quot;a string!&quot;</span></span><br><span class="line">&gt;<span class="built_in">type</span>(a)		<span class="comment">--string</span></span><br><span class="line">&gt;a = <span class="literal">nil</span> </span><br><span class="line">&gt;<span class="built_in">type</span>(a)		<span class="comment">--nil</span></span><br></pre></td></tr></table></figure>
<p>一般情况下，将一个变量用作不同类型时会导致代码的可读性不佳；但是，在某些情况下谨慎地使用这个特行可能会带来一定程度的便利。例如，当代码发生异常时可以返回一个nil以区别于其他正常情况下的返回值。</p>
<h3 id="1-4-1-nil"><a href="#1-4-1-nil" class="headerlink" title="1.4.1 nil"></a>1.4.1 nil</h3><p>nil是一种只有一个nil值的类型，它的主要作用就是与其他所有值进行区分。Lua语言使用nil来表示无效值的情况。像我们所学习的其他语言，一个全局变量在第一次被赋值前的默认值就是nil，而将nil赋值给全局变量则相当于将其删除。</p>
<h3 id="1-4-2-boolean"><a href="#1-4-2-boolean" class="headerlink" title="1.4.2 boolean"></a>1.4.2 boolean</h3><p>boolean类型具有两个值，<em>true</em>和<em>false</em>，它们分别代表了传统布尔值。不过，在Lua语言中，Boolean值并非是用于条件测试的唯一方式，任何值都可以表示条件。在Lua语言中，条件测试将除Boolean值false和nil外的所有其他值视为真。特别的是，在条件检测中Lua语言把零和空字符串也都视为真。<br>Lua语言支持常见的逻辑运算符：<code>and</code>,<code>or</code>和<code>not</code>。和条检测试一样，所有的逻辑运算将Boolean类型的false和nil当做假，而把其他值当作真。</p>
<h2 id="1-5-独立解释器"><a href="#1-5-独立解释器" class="headerlink" title="1.5 独立解释器"></a>1.5 独立解释器</h2><p>独立解释器是一个可以直接使用Lua语言的小程序。<br>如果源代码文件第一行以井号（#）开头，那么解释器在加载该文件时会忽略这一行。这个特征主要是为了方便在POSIX系统中将Lua作为一种脚本解释器来使用。假设独立解释器位于&#x2F;usr&#x2F;local&#x2F;bin下，当使用下列脚本:<br><code>#!/usr/local/bin/lua</code><br>或<br><code>#!/usr/bin/env lua</code><br>时，不需要显式地调用Lua语言解释器也可以直接运行Lua脚本。<br>lua命令的完整参数如：<br><code>lua [options] [script [args]]</code><br>其中，所有的参数都是可选的。如前所述，当不使用任何参数调用lua时，就会直接进入交互模式。<br> -e参数允许我们直接在命令行中输入代码，例如</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">% lua -e <span class="string">&quot;print(math.sin(12))&quot;</span> </span><br></pre></td></tr></table></figure>
<p>请注意，在POSIX系统下需要使用双引号，以防止Shell错误第解析括号。<br>-l参数用于加载库。正如之前提到的那样，-i参数用于在运行完其他命令行参数后进入交互模式。因此，下面的命令会首先加载lib库，然后执行x&#x3D;10的赋值语句，并最终进入交互模式：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">% lua -i -llib -e <span class="string">&quot;x = 10&quot;</span></span><br></pre></td></tr></table></figure>
<p>如果在交互模式下输入表达式，那么解释器会输出表达式求值后的结果：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">math</span>.<span class="built_in">sin</span>(<span class="number">3</span>)</span><br><span class="line">&gt; a = <span class="number">30</span> </span><br><span class="line">&gt; a 			<span class="comment">--30</span></span><br></pre></td></tr></table></figure>
<p>请记住，这个特征只在Lua5.3及之后的版本中才有效。在之前的版本中，必须在表达式前加上一个等号。如果不想输出结果，那么可以在行末加上一个分号：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">io</span>.<span class="built_in">flush</span>()	<span class="comment">--true</span></span><br><span class="line">&gt; <span class="built_in">io</span>.<span class="built_in">flush</span>();</span><br></pre></td></tr></table></figure>
<p>分号使得最后一行在语法上变成了无效的表达式，但可以被当作有效命令执行。<br>解释器在处理参数前，会查找名为<code>LUA_INIT_5_3</code>的环境变量，如果找不到，就会再查找名为<code>LUA_INIT</code>的环境变量。如果这两个环境变量中的任意一个存在，并且其内容为<code>@filename</code>，那么解释器就会运行相应的文件；如果这两个环境变量存在，但是不以@开头，那么解释器就会认为其包含Lua代码，并会对其进行解释执行。由于可以通过上面的方法完整地配置Lua，因而LUA_INIT使得我们可以灵活地配置独立解释器。例如，我们可以预先加载程序包、修改路径、定义自定义函数、对函数进行重命名或删除函数，等等。<br>我们可以通过预先定义的全局变量arg来获取解释器传入的参数。例如，当执行如下命令时：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">% lua script a b c</span><br></pre></td></tr></table></figure>
<p>编辑器在运行代码前或创建一个名为arg的表，其中存储了所有的命令行参数。索引0中保存的内容为脚本名，索引1中保存的内容为第一个参数，以此类推；而在脚本之前的所有选项则位于负数索引上，例如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">% lua -e <span class="string">&quot;sin = math.sin&quot;</span> script a b</span><br></pre></td></tr></table></figure>
<p>解释器按照如下的方式获取参数:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">arg</span>[<span class="number">-3</span>] = <span class="string">&quot;lua&quot;</span></span><br><span class="line"><span class="built_in">arg</span>[<span class="number">-2</span>] = <span class="string">&quot;-e&quot;</span></span><br><span class="line"><span class="built_in">arg</span>[<span class="number">-1</span>] = <span class="string">&quot;sin = math.sin&quot;</span></span><br><span class="line"><span class="built_in">arg</span>[<span class="number">0</span>]  = <span class="string">&quot;script&quot;</span></span><br><span class="line"><span class="built_in">arg</span>[<span class="number">1</span>]  = <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="built_in">arg</span>[<span class="number">2</span>]  = <span class="string">&quot;b&quot;</span></span><br></pre></td></tr></table></figure>
<p>一般情况下，脚本只会用到索引为证书的参数。<br>Lua语言也支持可变长参数，可以通过可变长参数表达式来获取。在脚本文件中，表达式…（3个点）表示传递给脚本的所有参数。</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua迭代器和泛型for</title>
    <url>/12794.html</url>
    <content><![CDATA[<p>迭代器是一种可以让我们遍历一个集合中所有元素的代码结构。在Lua语言中，通常使用函数表示迭代器：每一次调用函数时，函数会返回集合中的”下一个“元素。一个典型的例子是io.read，每次调用该函数时它都会返回标准输入中的下一行，在没有读取的行时返回nil。</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>所有的迭代器都需要在连续的调用之间保存一些状态，这样才能知道当前迭代所处的位置及如何从当前位置步进到下一位置。对于函数io.read而言，C语言会将状态保存在流的结构体中。对于我们自己的迭代器而言，闭包则为保存状态提供了一种良好的机制。庆祝，一个闭包就是一个可以访问其自身的环境中一个或多个局部变量的函数。这些变量将连续调用过程中的值并将其保存在闭包中，从而使得闭包能够记住迭代所处的位置。当然，要创建一个新的闭包，我们还必须创建非局部变量。因此，一个闭包结构通常涉及两个函数；闭包本身和一个用于创建该闭包及其封装变量的工程。<br>作为示例，让我们来为列表编写一个简单的迭代器。与ipairs不同的是，该迭代器并不是返回每个元素的索引而是返回元素的值：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">values</span><span class="params">(t)</span></span></span><br><span class="line">	<span class="keyword">local</span> i = <span class="number">0</span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">()</span></span> i = i +<span class="number">1</span> ；<span class="keyword">return</span> t[i] <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>在这个例子中，values就是工厂。每当调用这个工厂时，它就会创建一个新的闭包（既迭代器本身）。这个闭包将它的状态保存在其外部的变量t和i中，这两个变量也是由values创建的。每次调用这个迭代器时，它就从列表t中返回下一个值。在遍历完最后一个元素后，迭代器返回nil，表示迭代结束。<br>我们可以在一个while循环中使用这个迭代器：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">t = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>&#125;</span><br><span class="line">iter = values(t)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line">	<span class="keyword">local</span> element = iter()</span><br><span class="line">	<span class="keyword">if</span> element == <span class="literal">nil</span> <span class="keyword">then</span> <span class="keyword">break</span> <span class="keyword">end</span></span><br><span class="line">	<span class="built_in">print</span>(element)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>不过，使用泛型for更简单。毕竟，泛型for正是为了这种迭代而设计的：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">t = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>&#125;</span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> values(t) <span class="keyword">do</span></span><br><span class="line">	<span class="built_in">print</span>(element)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>泛型for为一次迭代循环做了所有的记录工作：它的内部保存了迭代函数，因此不需要变量iter；它在每次做新的迭代时都会再次调用迭代器，并在迭代器返回nil时结束循环。<br>下面是一个更高级的示例，它可以遍历来自标准输入的所有单词。</p>
<blockquote>
<p>示例 遍历来自标准输入的所有单词的迭代器</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">allwords</span><span class="params">()</span></span></span><br><span class="line">	<span class="keyword">local</span> line = <span class="built_in">io</span>.<span class="built_in">read</span>()		<span class="comment">-- 当前行</span></span><br><span class="line">	<span class="keyword">local</span> pos  = <span class="number">1</span>				<span class="comment">-- 当前行的当前位置</span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span>			<span class="comment">-- 迭代函数</span></span><br><span class="line">	<span class="keyword">while</span> line <span class="keyword">do</span> 				<span class="comment">-- 当还有行时循环</span></span><br><span class="line">		<span class="keyword">local</span> w , <span class="number">3</span> = <span class="built_in">string</span>.<span class="built_in">match</span>(line,<span class="string">&quot;(%w+)()&quot;</span>,pos)</span><br><span class="line">			<span class="keyword">if</span> w <span class="keyword">then</span>				<span class="comment">-- 发现一个单词？</span></span><br><span class="line">				pos = e 			<span class="comment">-- 下一个位置位于该单词后</span></span><br><span class="line">				<span class="keyword">return</span> w 			<span class="comment">-- 返回该单词</span></span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				line = <span class="built_in">io</span>.<span class="built_in">read</span>()	<span class="comment">-- 没找到单词；尝试下一行</span></span><br><span class="line">				pos  = <span class="number">1</span>			<span class="comment">-- 从第一个位置重新开始</span></span><br><span class="line">			<span class="keyword">end</span></span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>					<span class="comment">-- 没有行了：迭代结束</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>为了完成这样的便利，我们需要保存两个值：当前行的内容及当前行的当前位置。有了这些数据，我们就可以不断产生下一个单词。这个迭代函数的主要部分是调用函数string.match，以当前位置作为起始在当前行中搜索一个单词。函数string.match使用模式’%w+’来匹配一个“单词”，也就是匹配一个或多个字母&#x2F;数字字符。如果函数string.match找到了一个单词，它就捕获并返回这个单词及该单词之后的第一个字符位置，迭代函数则更新当前位置并返回该单词；否则，迭代函数读取新的一行，然后重复上述搜索过程。在所有的行都被读取完后，迭代函数返回nil以表示迭代结束。<br>尽管迭代器本身有点复杂，但allwords的使用还是很简明易懂的：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> allowrds () <span class="keyword">do</span></span><br><span class="line">	<span class="built_in">print</span>(word)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>对于迭代器而言，一种常见的情况就是，编写迭代器可能不太容易，但使用迭代器却十分简单。这也不是一个大问题，因为使用Lua语言编程的最终用户一般不会去定义迭代器，而只会使用那些宿主应用已经提供的迭代器。</p>
<h2 id="泛型for的语法"><a href="#泛型for的语法" class="headerlink" title="泛型for的语法"></a>泛型for的语法</h2><p>上述那些迭代器都有一个缺点，即需要为每个新的循环创建一个新的闭包。对于大多数情况而言，这或许不会有什么问题。例如，在之前的allwords迭代器中，创建一个闭包的开销相对于读取整个文件的开销而言几乎可以忽略不计。但是，在另外一些情况下，这样的开销可能会很可观。在这类情况中，我们可以通过使用泛型for自己保存迭代状态。<br>泛型for在循环过程中在其内部保存了迭代函数。实际上，泛型for保存了三个值：一个迭代函数、一个不可变状态和一个控制变量。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> var-list <span class="keyword">in</span> <span class="built_in">exp</span>-list <span class="keyword">do</span></span><br><span class="line">	body</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>其中，var-list是由一个或多个变量名组成的列表，以逗号分隔；exp-list是一个或多个表达式组成的列表，同样以逗号分隔。通常，表达式列表只有一个元素，即一句对迭代器工厂的调用。例如，在如下代码中，变量列表是k,v,表达式列表只要一个元素pairs(t):</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(t) <span class="keyword">do</span> <span class="built_in">print</span>(k,v) <span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>我们把变量列表的第一个（或唯一的）变量称为控制变量，其值在循环过程中永远不会是nil，因为当其值为nil时循环就结束了。<br>for做的第一件事情就是对in后面的表达式求值。这些表达式应该返回三个值供for保存：迭代函数、不可变状态和控制变量的初始值。类似于多重赋值，只有最后一个表达式能够产生不止一个值；表达式列表的结果值会保留三个，多余的值会被丢弃，不足三个则以nil补齐。例如，在使用简单迭器时，工厂只会返回迭代函数，因此不可变状态和控制变量都是nil。<br>在上述的初始化步骤完成后，for使用不可变状态和控制变量为参数来调用迭代函数。从for代码结构的立足点来看，不可变状态根本没有意义。for只是把从初始化步骤得到的状态值传递给所有迭代函数。然后，for将迭代函数的返回值赋给变量列表中声名的变量。如果第一个返回值为nil，那么循环终止；否则，for执行它的循环体并再次调用迭代函数，再不断地重复这个过程。<br>更确切地说，形如</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> var_1,... ,var_n <span class="keyword">in</span> explist <span class="keyword">do</span> block <span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>这样代码结构与下列代码等价：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> </span><br><span class="line">	<span class="keyword">local</span> _f, _s , _var = explist</span><br><span class="line">	<span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line">		<span class="keyword">local</span> var_1, ... , var_n = _f(_s,_var)</span><br><span class="line">		_var = _var_1</span><br><span class="line">		<span class="keyword">if</span> _var  == <span class="literal">nil</span> <span class="keyword">then</span> <span class="keyword">break</span> <span class="keyword">end</span></span><br><span class="line">		block</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>因此，假设迭代函数为f，不可变状态为s，控制变量的初始值为a0，那么在循环中控制变量的值一次为a1 &#x3D; f(s,a0),a2 &#x3D; f(s,a1),一次类推，直至ai为nil。如果for还有其他变量，那么这些变量只是简单地在每次调用f后得到额外的返回值。</p>
<h2 id="无状态迭代器"><a href="#无状态迭代器" class="headerlink" title="无状态迭代器"></a>无状态迭代器</h2><p>顾名思义，无状态迭代器就是一种自身不保存任何状态的迭代器。因此，可以在多个循环中使用同一个无状态迭代器，从而避免创建新闭包的开销。<br>正如刚刚所看到的，for循环会以不可变状态和控制变量为参数低啊用迭代函数。一个无状态迭代器只根据这两个值来迭代生成下一个元素。这类迭代器的一个典型例子就是ipairs，它可以迭代一个序列中的所有元素：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="string">&quot;one&quot;</span>,<span class="string">&quot;two&quot;</span>,<span class="string">&quot;three&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(a) <span class="keyword">do</span></span><br><span class="line">	<span class="built_in">print</span>(i,v)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>迭代的状态由正在被遍历的表（一个不可变状态，它不会在循环中改变）及当前的索引值（控制变量）组成。ipairs和迭代器都非常简单，我们可以在Lua语言中将其编写出来：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">iter</span><span class="params">(t,i)</span></span></span><br><span class="line">	i = i + <span class="number">1</span></span><br><span class="line">	<span class="keyword">local</span> v = t[i]</span><br><span class="line">	<span class="keyword">if</span> v <span class="keyword">then</span></span><br><span class="line">		<span class="keyword">return</span> i, v</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ipairs</span><span class="params">(t)</span></span></span><br><span class="line">	<span class="keyword">return</span> iter, t, <span class="number">0</span> </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>当调用for循环中的ipairs(t)时，ipairs(t)会返回三个值，即迭代函数iter、不可变状态表t和控制变量的初始值0。然后，Lua语言调用iter(t,0)，得到1,t[1]（除非t[1]已经变成nil）。在第二次迭代中，Lua语言调用iter(t,1)，得到2,t[2]，依次类推，直至得到第一个为nil的元素。<br>函数pairs与函数ipairs类似，也用于遍历一个表中的所有元素。不同的是，函数pairs的迭代函数是Lua语言中的一个基本函数next：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pairs</span><span class="params">(t)</span></span></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">next</span>,t,<span class="literal">nil</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>在低啊用next(t,k)时，k是表t的一个键，该函数会以随机次序返回表中的下一个键及k对应的值（作为第二个返回值）。调用next(t,nil)时，返回表中的第一个键值对。当所有元素被遍历完时，函数next返回nil。<br>我们可以不调用pairs而直接使用next：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">next</span> , t <span class="keyword">do</span></span><br><span class="line">	loop body</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>请注意，for循环会把表达式列表的结果调整为三个值，因此上例得到的是next、t和nil，这也正与pairs(t)的返回值完全一致。<br>关于无状态迭代器的另一个有趣的示例是遍历链表的迭代器（链表在Lua语言中并不常见，但有时也需要用到）。我们的第一反应可能是只把当前节点当做控制变量，以便于迭代函数能够返回下一个节点：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">getnext</span><span class="params">(node)</span></span></span><br><span class="line">	<span class="keyword">return</span> node.<span class="built_in">next</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">traverse</span><span class="params">(list)</span></span></span><br><span class="line">	<span class="keyword">return</span> getnext, <span class="literal">nil</span>, list</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>但是，这种实现会跳过第一个节点。所以，我们需要使用如下的代码：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">getnext</span><span class="params">(list,node)</span></span></span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">not</span> node <span class="keyword">then</span></span><br><span class="line">		<span class="keyword">return</span> list</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> node.<span class="built_in">next</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">traverse</span><span class="params">(list)</span></span></span><br><span class="line">	<span class="keyword">return</span> getnext, list,<span class="literal">nil</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>这里的技巧是，除了将当前节点作为控制变量，还要将头节点作为不可变状态。第一次调用迭代函数getnext时，node为nil，因此函数返回list作为第一个节点。在后续的调用中，node不再是nil，所以迭代函数会像我们所期望的那样返回node.next。</p>
<h2 id="按顺序遍历表"><a href="#按顺序遍历表" class="headerlink" title="按顺序遍历表"></a>按顺序遍历表</h2><p>一个常见的困惑发生在开发人员想要对表中的元素进行排序时。由于一个表中的元素没有顺序，所以如果想对这些元素排序，就不得不把键值对拷贝到一个数组中，然后再对数组进行排序。<br>假设我们要读取一个源文件，然后构造一个表来保存每个函数的名称及其声明所在的行数，形式如下：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">lines</span> = &#123;</span><br><span class="line">	[<span class="string">&quot;luaH_set&quot;</span>]     = <span class="number">10</span>,</span><br><span class="line">	[<span class="string">&quot;luaH_get&quot;</span>]	 = <span class="number">24</span>,</span><br><span class="line">	[<span class="string">&quot;luaH_present&quot;</span>] = <span class="number">48</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在，我们想按照字母顺序输出这些函数名。如果使用pairs遍历表，那么函数名会按照随机的顺序出现。由于这些函数名是表的键，所以我们无法直接对其进行排序。不过，我们把他们放到数组中，那么就可以对它们进行排序了。首先，我们必须创建一个包含函数名的数组，然后对其排序，再最终输出结果。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">pairs</span>(<span class="built_in">lines</span>) <span class="keyword">do</span> a[#a + <span class="number">1</span>] = n <span class="keyword">end</span></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">sort</span>(a)</span><br><span class="line"><span class="keyword">for</span> _, n <span class="keyword">in</span> <span class="built_in">ipairs</span>(a) <span class="keyword">do</span> <span class="built_in">print</span>(n) <span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>有些人可能会困惑。毕竟，对于Lua语言来说，数组也没有顺序。但是我们知道如何数数！因此，当我们使用有序的索引访问数组时，就实现了有序。这正是应该总是使用ipairs而不是pairs来遍历数组的原因。第一个函数通过有序的键1、2等来实现有序，然而后者使用则是天然的随机顺序（虽然大多数情况下顺序随机也无碍，但有时可能并非我们想要的）。<br>现在，我们已经准备好写一个按照键的顺序来遍历表的迭代器了：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pairsByKeys</span><span class="params">(t,f)</span></span></span><br><span class="line">	<span class="keyword">local</span> a = &#123;&#125;</span><br><span class="line">	<span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">pairs</span>(t) <span class="keyword">do</span> <span class="comment">--  创建一个包含所有键的表</span></span><br><span class="line">		a[#a + <span class="number">1</span>] = n</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	<span class="built_in">table</span>.<span class="built_in">sort</span>( a, f )  <span class="comment">-- 对列表排序</span></span><br><span class="line">	<span class="keyword">local</span> i = <span class="number">0</span>         <span class="comment">-- 迭代变量</span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span>   <span class="comment">-- 迭代函数</span></span><br><span class="line">		i = i + <span class="number">1</span></span><br><span class="line">		returna[i],t[a[i]]		<span class="comment">--返回键和值</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>工厂函数pairsByKeys首先把键放到一个数组中，然后对数组进行排序，最后返回迭代函数。在每一步中，迭代器都会按照数组a中的顺序返回原始表中的下一个键值对。可选的参数f允许指定一种其他的排序方法。<br>使用这个函数，可以很容易地解决开始时提出的按顺序遍历表的问题：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> name,line <span class="keyword">in</span> pairsByKeys(<span class="built_in">lines</span>) <span class="keyword">do</span> </span><br><span class="line">	<span class="built_in">print</span>(name,line)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>像通常的情况一样，所有的复杂性都被隐藏到了迭代器中。</p>
<h2 id="迭代器的真实含义"><a href="#迭代器的真实含义" class="headerlink" title="迭代器的真实含义"></a>迭代器的真实含义</h2><p>“迭代器”这个名称多少有点误导性，这是因为迭代器并没有进行实际的迭代：真正的迭代时for循环完成的，迭代器只不过为每次的迭代提供连续的值。或许，称其为“生成器”更好，表示迭代生产元素；不过，“迭代器”这个名字已在出入Java等其他语言中被广泛是用了。<br>然而，还有一种创建迭代器的方式可以让迭代器进行实际的迭代操作。当使用这种迭代器时，就不再需要编写循环了。相反，只需要调用这个迭代器，并传入一个描述了在每次迭代时需要做什么的参数即可。更确切地说，迭代器接收了一个函数作为参数，这个函数在循环的内部被调用，这种迭代器就被称为真正的迭代器。<br>&ensp;&ensp;举一个具体的例子，让我们使用这种风格再次重写allowrds迭代器：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">allwords</span><span class="params">(f)</span></span></span><br><span class="line">	<span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">io</span>.line() <span class="keyword">do</span></span><br><span class="line">		<span class="keyword">for</span> word <span class="keyword">in</span> <span class="built_in">string</span>.<span class="built_in">gmatch</span>(line,<span class="string">&quot;%w+&quot;</span>) <span class="keyword">do</span></span><br><span class="line">			f(word)			<span class="comment">--调用函数</span></span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>使用这个迭代器时，我们必须传入一个函数作为循环体。如果我们只想输出每个单词，那么简单地使用函数print即可：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">allwords(<span class="built_in">print</span>)</span><br></pre></td></tr></table></figure>
<p>通常，我们可以使用一个匿名函数作为循环体。例如，以下的代码用于计算单词”hello”在输入文件中出现的次数：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> count = <span class="number">0</span></span><br><span class="line">allwords(<span class="function"><span class="keyword">function</span><span class="params">(w)</span></span></span><br><span class="line">	<span class="keyword">if</span> w == <span class="string">&quot;hello&quot;</span> <span class="keyword">then</span> count = count + <span class="number">1</span> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span>)</span><br><span class="line"><span class="built_in">print</span>(count)</span><br></pre></td></tr></table></figure>
<p>同样的需求，如果采用之前的迭代器风格，差异也不是特别大：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> allwords() <span class="keyword">do</span></span><br><span class="line">	<span class="keyword">if</span> w == <span class="string">&quot;hello&quot;</span> <span class="keyword">then</span> count = count + <span class="number">1</span> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(count)</span><br></pre></td></tr></table></figure>
<p>&ensp;&ensp;&ensp;&ensp;真正的迭代器在老版本的Lua语言中曾非常流行，那是还没有for语句。真正的迭代器与生成器风格的迭代器相比怎么样呢？这两种风格都有大致相同的开销，即每次迭代都有一次函数调用。一方面，编写真正的迭代器比较容易。另一方面，生成器风格的迭代器则更灵活。首先，生成器风格的迭代器允许两个或更多个并行的迭代。其次，生成器风格的迭代器允许在循环体中使用break和return语句。使用真正的迭代器，return语句从匿名函数中返回而非从进行迭代的函数中返回。</p>
]]></content>
      <tags>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua输入输出</title>
    <url>/55910.html</url>
    <content><![CDATA[<p>由于Lua语言强调可移植性和嵌入性，所以Lua语言本身并没有提供太多与外部交互的机制。在真实的Lua程序中，从图形、数据库到网络的网络的访问等大多数I&#x2F;O操作，要么游宿主程序实现，要么通过不包括在发行版中的外部库实现。单就Lua语言而言，只提供IOS C语言标准支持的功能，即基本的文件操作等。</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h2 id="简单I-O模型"><a href="#简单I-O模型" class="headerlink" title="简单I&#x2F;O模型"></a>简单I&#x2F;O模型</h2><p>对于文件操作来说，I&#x2F;O库提供了两种不同的模型。简单模型虚拟了一个当前输入流和一个当前输出流，其I&#x2F;O操作时通过这些流实现的。I&#x2F;O库把当前输入流初始化为进程的标准输入，将当前输出流初始化为进程的标准输出。因此，当执行类似于io.read()这样的语句时，就可以从标准输入中读取一行。<br>函数io.input可以用于改变当前的输入输出流。调用io.input(file-name)会以只读模式打开指定文件，并将文件设置为当前输入流。之后，所有的输入都将来自该文件，除非再次调用io.input。对于输出流而言，函数io.output的逻辑与之类似。如果出现错误，这两个函数都会抛出异常。如果想直接处理这些异常，则必须使用完整I&#x2F;O模型。<br>由于函数write比函数read简单，我们首先来看函数write。函数io.write可以读取任意数量的字符串并将其写入当前输入流。由于调用该函数时可以使用多个参数，因此应该避免使用io.write(a..b..c)，应该调用io.write(a,b,c)，后者可以用更少的资源达到同样的效果，并且可以避免更多的连接动作。<br>作为原则，应该只在“用后即弃”的代码或调试代码中使用函数print；当需要完全控制输出时，应该使用函数io.write。与函数print不同，函数io.wirte不会在最终的输出结果中添加诸如制表符或换行符这样的额外内容。此外，函数io.write允许对输出进行重定向，而函数print只能使用标准输出。最后，函数print可以自动为其参数调用tostring，这一点对于调试而言非常便利，但这也容易导致一些诡异的Bug。<br>函数io.write在将数值转为字符串时遵循一般的转换规则；如果想要完全地控制这种转换，则应该使用函数string.format:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">io</span>.<span class="built_in">write</span>(<span class="string">&quot;sin(3) = &quot;</span>,<span class="built_in">math</span>.<span class="built_in">sin</span>(<span class="number">3</span>),<span class="string">&quot;\n&quot;</span>)		<span class="comment">-- sin(3) = 0.14112000805987</span></span><br><span class="line">&gt; <span class="built_in">io</span>.<span class="built_in">write</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;sin(3) = %0.4f\n&quot;</span>,<span class="built_in">math</span>.<span class="built_in">sin</span>(<span class="number">3</span>))) 			<span class="comment">-- sin(3) = 0.1411</span></span><br></pre></td></tr></table></figure>
<p>函数io.read可以从当前输入流中读取字符串，其参数决定了要读取的数据：</p>
<hr>
<p>“a”				读取整个文件<br>“l”					读取下一行（丢弃换行符）<br>“L”				读取下一行（保留换行符）<br>“n”				读取一个数值<br>num				以字符串读取num个字符</p>
<hr>
<p>调用io.write(“a”)可以从当前位置开始读取输入文件的全部内容。如果当前位置处于文件的末尾或文件为空，那么该函数返回一个空字符串。<br>因为Lua语言可以高效地处理长字符串，所以在Lua语言编写过滤器的一种简单技巧就是将整个文件读取到一个字符串中，然后对字符串进行处理，最后输出结果为：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">t = <span class="built_in">io</span>.<span class="built_in">read</span>(<span class="string">&quot;a&quot;</span>)			<span class="comment">-- 读取整个文件</span></span><br><span class="line">t = <span class="built_in">string</span>.<span class="built_in">gsub</span>(t,<span class="string">&quot;bad&quot;</span>,<span class="string">&quot;good&quot;</span>)			<span class="comment">-- 进行处理</span></span><br><span class="line"><span class="built_in">io</span>.wirte(t)					<span class="comment">-- 输出结果</span></span><br></pre></td></tr></table></figure>
<p>举一个更加具体的例子，一下是一段将某个人间的内容使用MIME可打印字符串引用编码进行编码的代码。这种编码方式将所有非ASCII字符编码为 &#x3D;xx，其中xx是这个字符的十六进制。为保证编码的一致性，等号也会被编码：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">t = <span class="built_in">io</span>.<span class="built_in">read</span>(<span class="string">&quot;all&quot;</span>)</span><br><span class="line">t = <span class="built_in">string</span>.<span class="built_in">gsub</span>(t,<span class="string">&quot;[\128 - \255 = ]&quot;</span>, <span class="function"><span class="keyword">function</span><span class="params">(c)</span></span></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;=%02X&quot;</span>,<span class="built_in">string</span>.<span class="built_in">byte</span>(c))</span><br><span class="line"><span class="keyword">end</span>)</span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">write</span>(t)</span><br></pre></td></tr></table></figure>
<p>函数string.gsub会匹配所有的等号及非ASCII字符（从128到255），并调用指定的函数完成替换。<br>调用io.read(“l”)会返回当前输入流的下一行，不包括换行符在内；调用io.read(“L”)与之类似，但会保留换行符。当达到文件末尾时，由于已经没有内容可以返回，该函数会返回nil。选项”l”是函数read的默认参数。我通常只在逐行处理数据的算法使用该参数，其他情况则更倾向于使用选项”a”一次性地读取整个文件，或者像后续介绍的按块读取。<br>作为面向行的输入的一个简单例子，以下的程序会在将当前输入复制到当前输出中的同时对每行进行编码：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> count = <span class="number">1</span> , <span class="built_in">math</span>.<span class="built_in">huge</span> <span class="keyword">do</span></span><br><span class="line">	<span class="keyword">local</span> line = <span class="built_in">io</span>.<span class="built_in">read</span>(<span class="string">&quot;L&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> line == <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	<span class="built_in">io</span>.<span class="built_in">write</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%6d &quot;</span>,count),line)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>不过，如果要逐行迭代一个文件，那么使用io.lines迭代器会更简单：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">io</span>.<span class="built_in">lines</span>() <span class="keyword">do</span></span><br><span class="line">	count = count + <span class="number">1</span></span><br><span class="line">	<span class="built_in">io</span>.<span class="built_in">write</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%6d &quot;</span>,count), line , <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>另一个面向行的输入的例子参考下例，其中给出了一个对文件中的进行排序的完整程序。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="built_in">lines</span> = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">io</span>.<span class="built_in">lines</span>() <span class="keyword">do</span></span><br><span class="line">	<span class="built_in">lines</span>[#<span class="built_in">lines</span> + <span class="number">1</span>] = line</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">sort</span>(<span class="built_in">lines</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, l <span class="keyword">in</span> <span class="built_in">ipairs</span>(<span class="built_in">lines</span>) <span class="keyword">do</span></span><br><span class="line">	<span class="built_in">io</span>.<span class="built_in">write</span>(l,<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>调用io.read(“n”)会从当前输入流中读取一个数值，这也是函数read返回值为数值而非字符串的唯一情况。如果在跳过了空格后，函数io.read仍然不能从当前位置读取到数值，则返回nil。<br>除了上述这些基本的读取模式外，在调用函数read时还可以用一个数字n作为其参数：在这种情况下，函数read会从输入流中读取n个字符。如果无法读取到任何字符则返回nil；否则，则返回一个由流中最多n个字符组成的字符串。作为这种读取模式的示例，以下的代码展示了将文件从stdin复制到stdout的高效方法：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line">	<span class="keyword">local</span> block = <span class="built_in">io</span>.<span class="built_in">read</span>(<span class="number">2</span>^<span class="number">13</span>)</span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">not</span> block <span class="keyword">then</span> <span class="keyword">break</span> <span class="keyword">end</span></span><br><span class="line">	<span class="built_in">io</span>.<span class="built_in">write</span>(block)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>io.read(0)是一个特例，它常用于测试是否到达了文件末尾。如果仍然有数据可供读取，它会返回一个空字符串；否则，则返回nil。<br>调用函数read时可以指定多个选项，函数会根据每个参数返回相应的结果。假设有一个每行由3个数字组成的文件：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="number">6.0</span> <span class="number">-3.23</span> <span class="number">15e12</span></span><br><span class="line"><span class="number">4.3</span>	<span class="number">234</span>	  <span class="number">1000001</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>如果想打印每一行的最大值，那么可以通过调用函数read来一次性地同时读取每行中的3个数字：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span> </span><br><span class="line">	<span class="keyword">local</span> n1,n2,n3 = <span class="built_in">io</span>.<span class="built_in">read</span>(<span class="string">&quot;n&quot;</span>,<span class="string">&quot;n&quot;</span>,<span class="string">&quot;n&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">not</span> n1 <span class="keyword">then</span> <span class="keyword">break</span> <span class="keyword">end</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="built_in">math</span>.<span class="built_in">max</span>(n1,n2,n3))</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h2 id="完整I-O模型"><a href="#完整I-O模型" class="headerlink" title="完整I&#x2F;O模型"></a>完整I&#x2F;O模型</h2><p>简单I&#x2F;O模型对简单的需求而言还算适用，但对于诸如同时读写多个文件等更高级的文件操作来说就不够了。对于这些文件操作，我们需要用到完整I&#x2F;O模型。<br>可以使用函数io.open来打开一个文件，该函数仿造C语言中的函数fopen。这个函数有两个参数一个参数是待打开文件的文件名，另一个参数是一个模式字符串。模式字符串包括表示只读的r、表示只写的w、表示追加的a，以及另外一个可选的表示打开二进制文件的b。函数io.open返回对应文件的流。当发生错误时，该函数会返回nil的同时返回一条错误信息及一个系统相关的错误码：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">&quot;non-existent-file&quot;</span>,<span class="string">&quot;r&quot;</span>))		<span class="comment">-- nil  non-existent-file:No such file file or directory 2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">&quot;/etc/passwd&quot;</span>,<span class="string">&quot;w&quot;</span>))			<span class="comment">-- nil  /etc/passwd:Permission denied 13</span></span><br></pre></td></tr></table></figure>
<p>检查错误的一种典型方法是使用函数assert:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> f = <span class="built_in">assert</span>(<span class="built_in">io</span>.<span class="built_in">open</span>(filename,mode))</span><br></pre></td></tr></table></figure>
<p>如果函数io.open执行失败，错误信息会作为函数assert的第二个参数被传入，之后函数assert会将错误信息展示出来。<br>在打开文件后，可以使用方法read和write从流中读取和向流中写入。它们与函数read和write类似，但需要使用冒号运算符将它们当做流对象的方法来调用。例如，可以使用如下的代码打开一个文件并读取其中多有内容：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> f = <span class="built_in">assert</span>(<span class="built_in">io</span>.<span class="built_in">open</span>(filename,<span class="string">&quot;r&quot;</span>))</span><br><span class="line"><span class="keyword">local</span> t = f:<span class="built_in">read</span>(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">f:<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure>
<p>I&#x2F;O库提供了三个预定义的C语言流的句柄：io.stdin、io.stdout和io.stderr。例如，可以使用如下的代码将信息直接写到标准错误流中：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">io</span>.<span class="built_in">stderr</span>:<span class="built_in">write</span>(message)</span><br></pre></td></tr></table></figure>
<p>函数io.input和io.output允许混用完整I&#x2F;O模型和简单I&#x2F;O模型。调用无参数的io.input()可以获得当前输入流，调用io.input(handle)可以设置当前输入流。例如，如果想要临时改变当前输入流，可以像这样：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> temp = <span class="built_in">io</span>.<span class="built_in">input</span>()			<span class="comment">-- 保存当前输入流</span></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">input</span>(<span class="string">&quot;newinput&quot;</span>)			<span class="comment">-- 打开一个新的当前输入流</span></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">input</span>():<span class="built_in">close</span>()				<span class="comment">-- 关闭当前流</span></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">input</span>(temp)					<span class="comment">-- 恢复此前的当前输入流</span></span><br></pre></td></tr></table></figure>
<p>注意，io.read(args)实际上是io.input():read(args)的简写，即函数read是用在当前输入流上的。同样，io.write(args)是io.output():write(args)的简写。<br>除了函数io.read外，还可以用函数io.lines从流中读取内容。正如之前的示例中展示的那样，函数io.lines返回一个可以从流中不断读取内容的迭代器。给函数io.lines提供一个文件名，它就会只读方式打开对应该文件的输入流，并在到达文件末尾后关闭该输入流。若调用时不带参数，函数io.lines就从当前输入读取。我们也可以把函数lines当作句柄的一个方法。</p>
<h2 id="其他文件操作"><a href="#其他文件操作" class="headerlink" title="其他文件操作"></a>其他文件操作</h2><p>函数io.tmpfile返回一个操作临时文件的句柄，该句柄是以读&#x2F;写模式打开的。当程序运行结束后，该临时文件会被自动移除。<br>函数flush将所有缓冲数据写入文件。与函数write一样，我们也可以把它当做io.flush()使用，以刷新当前输出流；或者把它当作方法f:flush()使用，以刷新流f。<br>函数setvbuf用于设置流的缓冲模式。该函数的第一个参数是一个字符串:”no”表示无缓冲，”full”表示在缓冲区满时或者显示地刷新文件时文件时才写入数据，”line”表示输出一直被缓冲直到遇到换行符或从一些特定文件中读取到了数据。对于后两个选项，函数setvbuf支持可选的第二个参数，用于指定缓冲区大小。<br>在大多数系统中，标准错误流(io.stdrr)是不被缓冲的，而标准输出流(io.stdout)按行缓冲。因此，当向标准输出中写入了不完整的行时，可能需要刷新这个输出流才能看到输出结果。<br>函数seek用来获取和设置文件的当前位置，常常使用f:seek(whence，offset)的形式来调用，其中参数whence是一个指定如何使用偏移的字符串。当参数whence取值为”set“时，表示相对文件开头的偏移；取值为”cur”时，表示相对于文件位置的偏移；取值为”end”时，表示相对于文件尾部的偏移。不管whence的取值是什么，该函数都会以字节为单位，返回当前新位置在流中的相对于文件开头的偏移。<br>whence的默认值是”cur”，offset的默认值是0。因此，调用函数file:seek()会返回当前的位置且不改变当前位置；调用函数file:seek(“set”)会将位置重置到文件开头并返回0；调用函数file:seek(“end”)会将当前位置到文件结尾并返回文件的大小。下面的函数演示了如何在不修改当前位置的情况下获取文件大小：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fsize</span> <span class="params">(file)</span></span></span><br><span class="line">	<span class="keyword">local</span> current = file:seek()				<span class="comment">-- 保存当前位置</span></span><br><span class="line">	<span class="keyword">local</span> size = file:seek(<span class="string">&quot;end&quot;</span>)			<span class="comment">-- 获取文件大小</span></span><br><span class="line">	file:seek(<span class="string">&quot;set&quot;</span>,current)				<span class="comment">-- 恢复当前位置</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>此外，函数os.rename用于文件重命名，函数os.remove用于移除（删除）文件。需要注意的是，由于这两个函数处理的是真实文件而非流，所以它们位于os库而非io库中。<br>上述所有的函数在遇到错误时，均会返回nil外加一条错误信息和一个错误新。</p>
<h2 id="其他系统调用"><a href="#其他系统调用" class="headerlink" title="其他系统调用"></a>其他系统调用</h2><p>函数os.exit用于终止程序的执行。该函数的第一个参数是可选的，表示该程序的返回状态，其值可以为一个数值（0表示执行成功）或者一个布尔值（true表示执行成功）；该函数的第二个参数也是可选的，当值为true时会关闭Lua状态并调用所有析构器释放所用的所有内存。<br>函数os.getenv用于获取某个环境变量，该函数的输入参数是换环境变量的名称，返回值为保存了该环境变量对应值的字符串：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">getenv</span>(<span class="string">&quot;HOME&quot;</span>)) 	<span class="comment">-- /home/lua</span></span><br></pre></td></tr></table></figure>
<p>对于未定义的环境变量，该函数返回nil。</p>
<h2 id="运行系统命令"><a href="#运行系统命令" class="headerlink" title="运行系统命令"></a>运行系统命令</h2><p>函数os.execute用于运行系统命令，它等价于C语言中的函数system。该函数的参数为表示待执行命令的字符串，返回值为命令运行结束后的状态。其中，第一个返回值是一个布尔类型，当为true时表示程序成功运行完成；第二个返回值是一个字符串，当为”exit”时表示程序正常运行程序，当为”signal”时表示因信号而中断；第三个返回值是返回状态或者终结该程序的信号代码。例如，在POSIX和Windows中都可以使用如下的函数创建新目录：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createDir</span><span class="params">(dirname)</span></span></span><br><span class="line">	<span class="built_in">os</span>.<span class="built_in">execute</span>(<span class="string">&quot;mkdir &quot;</span> .. dirname)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>另一个非常有用的函数是io.popen。同函数os.execute一样，该函数运行一条系统命令，但该函数还可以重定向命令的输入&#x2F;输出，从而使得程序可以向命令中写入或从命令的输出中读取。例如，下列代码使用当前目录中的所有内容构建一个表：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> f = <span class="built_in">io</span>.<span class="built_in">popen</span>(<span class="string">&quot;dir/B&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="keyword">local</span> dir = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> entry <span class="keyword">in</span> f:<span class="built_in">lines</span>() <span class="keyword">do</span></span><br><span class="line">	dir[#dir + <span class="number">1</span>] = entry</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>其中，函数io.popen的第二个参数”r”表示从命令的执行结果中读取。由于该函数的默认行为就是这样，所以在上例中这个参数实际是可选的。<br>下面的示例用于发送一封邮件：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> subject = <span class="string">&quot;some news&quot;</span></span><br><span class="line"><span class="keyword">local</span> address = <span class="string">&quot;someone@somewhere.org&quot;</span></span><br><span class="line"><span class="keyword">local</span> cmd = <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;mail -s &#x27;%s&#x27; &#x27;%s&#x27; &quot;</span>,subject,address)</span><br><span class="line"><span class="keyword">local</span> f = <span class="built_in">io</span>.<span class="built_in">popen</span>(cmd,<span class="string">&quot;w&quot;</span>)</span><br><span class="line">f:<span class="built_in">write</span>(<span class="string">[[</span></span><br><span class="line"><span class="string">	Nothing important to say.</span></span><br><span class="line"><span class="string">	]]</span>)</span><br><span class="line">f:<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure>
<p>注意，该脚本只能在安装了相应工具包的POSIX系统中运行。上例中函数io.popen的第二个参数是”w”，表示向该命令中写入。<br>正如我们在上面的两个例子中看到的一样，函数os.execute和io.popen都是功能非常强大的函数，但它们也同样是非常依赖于操作系统的。<br>如果要使用操作系统的其他扩展功能，最好的选择是使用第三方库，比如用于基于目录操作和文件属性操作的LuaFileSystem，或者提供了POSIX.1标准支持的luaposix库。</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua闭包详解</title>
    <url>/57636.html</url>
    <content><![CDATA[<p>在Lua语言中，函数是严格遵循词法定界的第一类值。<br>“第一类值”以为这Lua语言中的函数与其他常见类型的值具有同等权限：一个程序可以将某个函数保存到变量中或表中，也可以将某个函数作为参数传递给其他函数，还可以将某个函数作为其他函数的返回值返回。</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>“词法定界”意味着Lua语言中的函数可以访问包含其自身的外部函数中的变量。<br>上述两个特行联合起来为Lua语言带来了极大的灵活性。例如，一个程序可以通过重新定义函数来增加新功能，也可以通过擦除函数来为不受信任的代码创建一个安全的运行时环境。更重要的是，上述两个特行允许我们在Lua语言中使用很多函数式语言的强大编程技巧。即使对函数式编程毫无兴趣，也不妨学习下如何使用这些技巧。因为这些技巧可以使程序变得更加小巧和简单。</p>
<h2 id="函数是第一类值"><a href="#函数是第一类值" class="headerlink" title="函数是第一类值"></a>函数是第一类值</h2><p>如前所述，Lua语言中的函数是第一类值。以下的示例演示了第一类值的含义：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = &#123;p = <span class="built_in">print</span>&#125;				<span class="comment">-- &#x27;a.p&#x27;指向&#x27;print&#x27;函数</span></span><br><span class="line">a.p(<span class="string">&quot;Hello World&quot;</span>)			<span class="comment">-- HEllo World</span></span><br><span class="line"><span class="built_in">print</span> = <span class="built_in">math</span>.<span class="built_in">sin</span>			<span class="comment">-- &#x27;print&#x27;现在指向sine函数</span></span><br><span class="line">a.p(<span class="built_in">print</span>(<span class="number">1</span>))				<span class="comment">-- 0.8414709848079</span></span><br><span class="line"><span class="built_in">math</span>.<span class="built_in">sin</span> = a.p 				<span class="comment">-- &#x27;sin&#x27;现在指向print函数</span></span><br><span class="line"><span class="built_in">math</span>.<span class="built_in">sin</span>(<span class="number">10</span>,<span class="number">20</span>)				<span class="comment">-- 10	20</span></span><br></pre></td></tr></table></figure>
<p>如果函数也是值的话，那么是否有创建函数的表达式呢？答案是肯定的。事实上，Lua语言中常见的函数定义方式如下：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">(x)</span></span> <span class="keyword">return</span> <span class="number">2</span>*x <span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>就是所谓的语法糖的例子，它只是下面这种写法的一种美化形式：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">foo = <span class="function"><span class="keyword">function</span><span class="params">(x)</span></span> <span class="keyword">return</span> <span class="number">2</span>*x <span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>赋值语句右边的表达式(function(x) body end)就是函数构造器，与表构造器{}相似。因此，函数定义实际上就是创建类型为”function”的值并把她赋值给一个变量的语句。<br>请注意，在Lua语言中，所有的函数都是匿名的。像其他所有的值一样，函数并没有名字。当讨论函数时，比如print，实际上指的是保存函数的变量。虽然我们通常会把函数赋值给全局变量，从而看似给函数起了一个名字，但在很多场景下仍然会保留函数的匿名性。<br>表标准库提供了函数table.sort，该函数以一个表为参数并对其中的元素排序。这种函数必须支持各种各样的排序方式：升序或降序、按数值顺序或按字母顺序、按表中的键等。函数sort并没有试图穷尽所有的排序方式，而是提供了一个可选的参数，也就是所谓的排序函数，排序函数接收两个参数并根据第一个元素是否应排在第二个元素之前返回不同的值。<br>假如，有一个如下所示的表：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">network = &#123;</span><br><span class="line">	&#123;name = <span class="string">&quot;grauna&quot;</span> , IP = <span class="string">&quot;210,26.30.34&quot;</span>&#125;,</span><br><span class="line">	&#123;name = <span class="string">&quot;arraial&quot;</span>, IP = <span class="string">&quot;210,26,30,23&quot;</span>&#125;,</span><br><span class="line">	&#123;name = <span class="string">&quot;lua&quot;</span>,	   IP = <span class="string">&quot;210,26,23,12&quot;</span>&#125;,</span><br><span class="line">	&#123;name = <span class="string">&quot;derain&quot;</span>,  IP = <span class="string">&quot;210,26,23,20&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果想针对name字段、按字母顺序逆序对这个表排序，只需使用下面语句：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">talbe.<span class="built_in">sort</span>(network,<span class="function"><span class="keyword">function</span> <span class="params">(a,b)</span></span> <span class="keyword">return</span> (a.name &gt; b.name) <span class="keyword">end</span>)</span><br></pre></td></tr></table></figure>
<p>可见，匿名函数在这条语句中显示出了很好的便利性。<br>像函数sort这样以另一个函数为参数的函数，我们称之为高阶函数。高阶函数是一种强大的编程机制，而利用匿名函数作为参数正式其灵活性的主要来源。不过尽管如此，请记住高阶函数也并没有什么特殊的，它们只是Lua语言将函数作为第一类值处理所带来的直接体现。<br>为了进一步演示高阶函数的用法，让我们再来实现一个常见的高阶函数，即导数。按照通常的定义，函数f的导数为$f’(x) &#x3D; (f(x + d) - f(x))&#x2F;d$,其中d趋向于无穷小。根据这个定义，可以赢如下方式近似第计算导数：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">derivative</span> <span class="params">(f,delta)</span></span></span><br><span class="line">	delta = delta <span class="keyword">or</span> <span class="number">1e-4</span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(x)</span></span></span><br><span class="line">		<span class="keyword">return</span> (f(x + delta) - f(x))/delta</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>对于指定的函数f，调用derivative(f)将返回其导数，也就是另一个函数：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">c = derivative(<span class="built_in">math</span>.<span class="built_in">sin</span>)</span><br><span class="line">&gt; <span class="built_in">print</span>(<span class="built_in">math</span>.<span class="built_in">cos</span>(<span class="number">5.2</span>),c(<span class="number">5.2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">math</span>.<span class="built_in">cos</span>(<span class="number">10</span>),c(<span class="number">10</span>)) 		</span><br></pre></td></tr></table></figure>
<h2 id="非全局函数"><a href="#非全局函数" class="headerlink" title="非全局函数"></a>非全局函数</h2><p>由于函数是一种“第一类值”，因此一个显而易见的结果就是：函数不仅可以被存储在全局变量中，还可以被存储在表字段和局部变量中。<br>创建函数：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">Lib = &#123;&#125;</span><br><span class="line">Lib.foo = <span class="function"><span class="keyword">function</span><span class="params">(x,y)</span></span> <span class="keyword">return</span> x + y <span class="keyword">end</span></span><br><span class="line">Lib.goo = <span class="function"><span class="keyword">function</span><span class="params">(x,y)</span></span> <span class="keyword">return</span> x - y <span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(Lib.foo(<span class="number">2</span>,<span class="number">3</span>),Lib.goo(<span class="number">2</span>,<span class="number">3</span>))		<span class="comment">-- 5 -1</span></span><br></pre></td></tr></table></figure>
<p>当然，也可使用表构造器：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">Lib = &#123;</span><br><span class="line">	foo = <span class="function"><span class="keyword">function</span><span class="params">(x,y)</span></span> <span class="keyword">return</span> x + y <span class="keyword">end</span></span><br><span class="line">	goo = <span class="function"><span class="keyword">function</span><span class="params">(X,y)</span></span> <span class="keyword">return</span> x - y <span class="keyword">end</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>除此以外，Lua语言还提供了另一种特殊的语言来定义这类函数：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">Lib = &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Lib.foo</span><span class="params">(x,y)</span></span> <span class="keyword">return</span> x + y <span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Lib.goo</span><span class="params">(x,y)</span></span> <span class="keyword">return</span> x - y <span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>在表字段中存储函数是Lua语言中实现面向对象编程的关键要素。<br>当把一个函数存储到局部变量时，就得到一个局部函数，即一个被限定在指定作用域中使用的函数。局部函数对于包而言尤其有用：由于Lua语言将每个程序段作为一个函数处理，所以在一段程序中声明的函数就是局部函数，这些局部函数只在该程序段中可见。词法定界保证了程序段中的其他函数可以使用这些局部函数。<br>对于这种局部函数的使用，Lua语言提供了一种语法他那个：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span> <span class="params">(params)</span></span></span><br><span class="line">	body</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>在定义局部递归函数时，由于原来的方法不使用，所有有一点是极易出错的。考虑如下代码：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> fact = <span class="function"><span class="keyword">function</span><span class="params">(n)</span></span></span><br><span class="line">	<span class="keyword">if</span> n == <span class="number">0</span> <span class="keyword">then</span> <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> n * fact(n<span class="number">-1</span>)   <span class="comment">--有问题</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>当Lua语言编译函数体中的fact(n-1)调用时，局部的fact尚未定义。因此，这个表达式会尝试调用全局的fact而非局部的fact。我们可以通过先定义局部变量再定义函数的方式来解决这个问题：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> fact</span><br><span class="line">fact = <span class="function"><span class="keyword">function</span><span class="params">(n)</span></span></span><br><span class="line">	<span class="keyword">if</span> n == <span class="number">0</span> <span class="keyword">then</span> <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> n * fact(n<span class="number">-1</span>)</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>这样，函数内的fact指向的是局部变量。尽管在定义函数时，这个局部变量的值尚未确定，但到了执行函数时，fact肯定有了正确的赋值。<br>当Lua语言展开局部函数的语法糖时，使用的并不是之前的基本函数定义。相反，形如</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">(params)</span></span> body <span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>的定义会被展开成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">local foo; foo = function(params) body end</span><br></pre></td></tr></table></figure>
<p>因此，使用这个语法来定义递归函数不会有问题。<br>当然，这个技巧对于简介递归函数是无效的。在间接递归的情况下，必须使用与明确的前向声明等价的形式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">local f </span><br><span class="line"></span><br><span class="line">local function <span class="title function_">g</span><span class="params">()</span></span><br><span class="line">	some code <span class="title function_">f</span><span class="params">()</span> some code</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">function <span class="title function_">f</span><span class="params">()</span></span><br><span class="line">	some code <span class="title function_">g</span><span class="params">()</span> some code</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>请注意，不能在最后一个函数定义前加上local。否则，Lua语言会创建一个全新的局部变量f，从而使得先前声明的f变为未定义状态。</p>
<h2 id="词法定界"><a href="#词法定界" class="headerlink" title="词法定界"></a>词法定界</h2><p>当编写一个被其他函数B包含的函数A时，被包含的函数A可以访问包含其的函数B的所有局部变量，我们将这种特行称为词法定界。虽然这种可见性规则听上去很明确，但实际上并非如此。词法定界外加嵌套的第一类值函数可以为编程语言提供强大的功能，但很多编程语言并不支持将这两者组合使用。<br>先看一个例子。假设有一个表，其中包含了学生的姓名和对应的成绩，如果我们想基于分数对学生姓名排序，分数高者在前，那么可以使用如下的代码完成上述需求：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">name = &#123;<span class="string">&quot;Peter&quot;</span>,<span class="string">&quot;Paul&quot;</span>,<span class="string">&quot;MAry&quot;</span>&#125;</span><br><span class="line">grades = &#123;Mary = <span class="number">10</span>, Paul = <span class="number">7</span>, Peter = <span class="number">8</span>&#125;</span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">sort</span>(names,<span class="function"><span class="keyword">function</span><span class="params">(n1,n2)</span></span></span><br><span class="line">	<span class="keyword">return</span> grades[n1] &gt; grades[n2]</span><br><span class="line"><span class="keyword">end</span>)</span><br></pre></td></tr></table></figure>
<p>现在，假设我们想创建一个函数来完成这个需求：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortbygrade</span><span class="params">(names,grades)</span></span></span><br><span class="line">	<span class="built_in">table</span>.<span class="built_in">sort</span>( names, <span class="function"><span class="keyword">function</span><span class="params">(n1,n2)</span></span></span><br><span class="line">		<span class="keyword">return</span> grades[n1] &gt; grades[n2]</span><br><span class="line">	<span class="keyword">end</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>在后一个示例中，有趣的一点就在于传给函数sort的匿名函数可以访问grades,而grades是包含匿名函数的外层函数sortbygrade的形参。在该匿名函数中，grades既不是全局变量也不是局部变量，而是我们所说的非局部变量。<br>这一点之所有如此有趣是因为函数作为第一类值，能够逃逸出它们变量的原始定界范围。考虑如下代码：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newCounter</span><span class="params">()</span></span></span><br><span class="line">	<span class="keyword">local</span> count = <span class="number">0</span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">()</span></span></span><br><span class="line">		count = count + <span class="number">1</span></span><br><span class="line">		<span class="keyword">return</span> count</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">c1 = newCounter()</span><br><span class="line"><span class="built_in">print</span>(c1())			<span class="comment">-- 1</span></span><br><span class="line">pirnt(c2())			<span class="comment">-- 2</span></span><br></pre></td></tr></table></figure>
<p>在上述代码中，匿名函数访问了一个非局部变量并将其当作计数器。然而，游艺创建变量的函数已经返回，因此当我们调用匿名函数时，变量count似乎已经超出了作用范围。但其实不然，由于闭包概念的存在，Lua语言能够正确地应对这种情况。简单地说，一个闭包就是一个函数外加能够使该函数正确访问非局部变量所需的其他机制。如果我们再次调用newCounter，那么一个新的局部变量count和一个新的闭包会被创建出来，这个新的闭包针对的是这个新变量：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">c2 = newCounter()</span><br><span class="line"><span class="built_in">print</span>(c2())			<span class="comment">-- 1</span></span><br><span class="line"><span class="built_in">print</span>(c1())			<span class="comment">-- 3</span></span><br><span class="line"><span class="built_in">print</span>(c3())			<span class="comment">-- 2</span></span><br></pre></td></tr></table></figure>
<p>因此，c1和c2是不同的闭包。它们建立在相同的函数之上，但是各自拥有局部变量count的独立实例。<br>从技术上讲，Lua语言中只有闭包而没有函数。函数本身只是闭包的一种原型。不过尽管如此，只要不会引起混淆，我们就仍将使用术语“函数”来指代闭包。<br>闭包在许多场合中均是一种有价值的工具。闭包在作为诸如sort这样的高阶函数的参数时就非常有用。同样，闭包对于那些创建了其他函数的函数也很有用。这种机制使得Lua程序能够综合运用函数式编程世界中多种精妙的编程技巧。另外，闭包对于回调函数来说也很有用。对于回调函数而言，一个典型的例子就是在传统GUI工具箱中创建按钮。每个按钮通常都对应一个回调函数，当用户按下按钮时，完成不同的处理动作的回调函数就会被调用。<br>例如，假设有一个具有10个类似按钮的数字计算器，我们就可以使用如下的函数来创建这些按钮：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">digitButton</span><span class="params">(digit)</span></span></span><br><span class="line">	<span class="keyword">return</span> Button&#123; label = <span class="built_in">tostring</span>(digit),</span><br><span class="line">		action = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">			add_to_display(digit)</span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>在上述示例中，假设Button是一个创建新按钮的工具箱函数，label是按钮的标签，action是当按钮按下时被调用的回调函数。回调可能发生在函数digitButton早已执行完后，那时变量digit已经超出了作用范围，但闭包仍可以访问它。<br>闭包在另一种很不一样的场景下也非常有用。由于函数可以保存在普通变量中，因此在Lua语言中可以轻松地重新定义函数，甚至是预定义函数。这种机制也正是Lua语言灵活的原因之一。通常，当重新定义一个函数的时候，我们需要在新的实现中调用原来的那个函数。例如，假设要重新定义函数sin以使其参数以角度为单位而不是以弧度为单位。那么这个新函数就可以先对参数进行转换，然后再调用原来的sin函数进行真正的计算。代码可能形如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> oldSin - <span class="built_in">math</span>.<span class="built_in">sin</span> </span><br><span class="line"><span class="built_in">math</span>.<span class="built_in">sin</span> = <span class="function"><span class="keyword">function</span><span class="params">(x)</span></span></span><br><span class="line">	<span class="keyword">return</span> oldSin(x * (<span class="built_in">math</span>.<span class="built_in">pi</span>/<span class="number">180</span>))</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>另一种更清晰一点的完成重新定义的写法是：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> </span><br><span class="line">	<span class="keyword">local</span> oldSin = <span class="built_in">math</span>.<span class="built_in">sin</span> </span><br><span class="line">	<span class="keyword">local</span> k = <span class="built_in">math</span>.<span class="built_in">pi</span>/<span class="number">180</span></span><br><span class="line">	<span class="built_in">math</span>.<span class="built_in">sin</span> = <span class="function"><span class="keyword">function</span><span class="params">(x)</span></span></span><br><span class="line">		<span class="keyword">return</span> oldSin(x * k)</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>上述代码使用了do代码段来限制局部变量oldSin的作用范围；根据可见性规则，局部变量oldSin只在这部分代码段中有效。因此，只有新版本的函数sin才能访问原来的sin函数，其他部分的代码则访问不了。<br>我们可以使用同样的技巧来创建安全的运行时环境，即所谓的沙盒。当执行一些诸如从远程服务器上下载到的未受信任代码时，安全的运行时环境非常重要。例如，我们可以通过使用闭包重定义函数io.open来限制一个程序能够访问的文件：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> </span><br><span class="line">	<span class="keyword">local</span> oldOpen = <span class="built_in">io</span>.<span class="built_in">open</span></span><br><span class="line">	<span class="keyword">local</span> access_OK - <span class="function"><span class="keyword">function</span> <span class="params">(filename, mode)</span></span></span><br><span class="line">		check access </span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	<span class="built_in">io</span>.<span class="built_in">open</span> = <span class="function"><span class="keyword">function</span> <span class="params">(filename ,mode)</span></span></span><br><span class="line">		<span class="keyword">if</span> access_OK(filename, mode) <span class="keyword">then</span></span><br><span class="line">			<span class="keyword">return</span> oldOpen(filename,mode)</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> <span class="literal">nil</span>, <span class="string">&quot;access denied&quot;</span></span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>上述示例的巧妙之处在于，在经过重新定义后，一个程序就只能通过新的受限版本来调用原来未受限版本的io.open函数。示例代码将原来不安全的版本保存为闭包的一个私有变量，该变量无法从外部访问。通过这一技巧，就可以在保证简洁性和灵活性的前提下在Lua语言本身上构建Lua沙盒。相对于提供一套大而全的解决方案，Lua语言提供的是一套“元机制”，借助这种机制可以根据特定的安全需求来裁剪具体的运行时环境。</p>
<h2 id="小试函数式编程"><a href="#小试函数式编程" class="headerlink" title="小试函数式编程"></a>小试函数式编程</h2><p>这里，我们的目标就是开发一个用来表示几何区域的系统，其中区域即为点的几何。我们希望能够利用该系统表示各种各样的图形，同时可以通过多种方式组合和修改这些图形。<br>为了实现这样的一个系统，首先需要找到表示这些图形的合理数据结构。我们可以尝试着使用面向对象的方案，利用继承来抽象某些图形；或者，也可以直接利用特征函数来进行更高层次的抽象。鉴于一个几何区域就是点的集合，因此可以通过特征函数来表示一个区域，即可以提供一个点并根据点是否属于指定区域而返回真或假的函数来表示一个区域。<br>举例来说，下面的函数表示一个点(1.0,3.0)为圆心、半径4.5的圆盘：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">disk1</span><span class="params">(x,y)</span></span></span><br><span class="line">	<span class="keyword">return</span> (x - <span class="number">1.0</span>)^<span class="number">2</span> + (y - <span class="number">3.0</span>)^<span class="number">2</span> &lt;= <span class="number">4.5</span>^<span class="number">2</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>利用高阶函数和词法定界，可以很容易地定义一个根据指定的圆心和半径创建圆盘的工厂：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">disk</span><span class="params">(cx,cy,r)</span></span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(x,y)</span></span></span><br><span class="line">		<span class="keyword">return</span> (x - cx)^<span class="number">2</span> + (y - cy)^<span class="number">2</span> &lt;= r^<span class="number">2</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>形如disk(1.0,3.0,4.5)的调用会创建一个与disk1等价的圆盘。<br>下面的函数创建了一个指定边界的轴对称矩形：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rect</span><span class="params">(left,right,bottom,up)</span></span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(x,y)</span></span></span><br><span class="line">		<span class="keyword">return</span> left &lt;= x <span class="keyword">and</span> x &lt;= right <span class="keyword">and</span> bottom &lt;= y <span class="keyword">and</span> y &lt;= up</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>按照类似的方式，可以定义函数以创建诸如三角形或非轴承矩形等其他基本图形。每一种图形都具有完全独立的实现，所需的仅仅是一个正确的特征函数。<br>接下来让我们考虑一下如何改变和组合区域。我们可以很容易地创建任何区域的补集：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">complement</span><span class="params">(r)</span></span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(x,y)</span></span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">not</span> r(x,y)</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>并集、交集和差集也很简单。</p>
<blockquote>
<p>示例 区域的并集、交集和差集</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">union</span> <span class="params">(r1,r2)</span></span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(x,y)</span></span></span><br><span class="line">		<span class="keyword">return</span> r1(x,y) <span class="keyword">or</span> r2(x,y)</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">intersection</span> <span class="params">(r1,r2)</span></span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(x,y)</span></span></span><br><span class="line">		<span class="keyword">return</span> r1(x,y) <span class="keyword">and</span> r2(x,y)</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">difference</span> <span class="params">(r1,r2)</span></span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(x,y)</span></span></span><br><span class="line">		<span class="keyword">return</span> r1(x,y) <span class="keyword">and</span> <span class="keyword">not</span> r2(x,y)</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>以下函数按照指定的增量平移指定的区域：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">translate</span><span class="params">(r,dx,dy)</span></span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(x,y)</span></span></span><br><span class="line">		<span class="keyword">return</span> r(x - dx, y -dy)</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>为了使一个区域可视化，我们可以遍历每个像素进行视口测试；位于区域内的像素被绘制成黑色，而位于区域外的像素被绘制成白色。为了用简单的方式演示这个过程，我们接下来写一个函数来生成一个PBM格式的文件来绘制指定的区域。<br>PBM文件的结构很简单。PBM文件的文本形式以字符串”P1”开头，接下来的一行是图片的宽和高，然后是对应每一个像素、由1和0组成的数字序列，最后是EOF。</p>
<blockquote>
<p>示例 在PBM文件中绘制区域</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">plot</span><span class="params">(r,M,N)</span></span></span><br><span class="line">	<span class="built_in">io</span>.<span class="built_in">write</span>(<span class="string">&quot;P1\n&quot;</span>,M,<span class="string">&quot; &quot;</span>,N,<span class="string">&quot;\n&quot;</span>)		<span class="comment">-- 文件头</span></span><br><span class="line">	<span class="keyword">for</span> i = <span class="number">1</span>, N <span class="keyword">do</span></span><br><span class="line">		<span class="keyword">local</span> y = (N - i*<span class="number">2</span>)/N</span><br><span class="line">		<span class="keyword">for</span> j = <span class="number">1</span>, M <span class="keyword">do</span></span><br><span class="line">			<span class="keyword">local</span> x = (j*<span class="number">2</span> - M)/M</span><br><span class="line">			<span class="built_in">io</span>.<span class="built_in">write</span>(r(x,y) <span class="keyword">and</span> <span class="string">&quot;1&quot;</span> <span class="keyword">or</span> <span class="string">&quot;0&quot;</span>)</span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">		<span class="built_in">io</span>.<span class="built_in">write</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>为了让示例更加完整，一下的代码绘制了一个南半球所能看到的娥眉月：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">c1 = disk(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">plot(difference(c1,translate(c1,<span class="number">0.3</span>,<span class="number">0</span>)),<span class="number">500</span>,<span class="number">500</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac-Xcode各种目录路径和调试方法</title>
    <url>/22026.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>hosts文件所在目录:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">/private/etc/</span><br></pre></td></tr></table></figure>

<p>xcode插件目录:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">~<span class="regexp">/Library/</span><span class="title class_">Application</span> <span class="title class_">Support</span>/<span class="title class_">Developer</span>/<span class="title class_">Shared</span>/<span class="title class_">Xcode</span>/<span class="title class_">Plug</span>-ins</span><br></pre></td></tr></table></figure>
<p>模拟器上app应用运行生成缓存文件：删除无影响，可重新生成</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">~<span class="regexp">/Library/</span><span class="title class_">Developer</span>/<span class="title class_">XCPGDevices</span></span><br></pre></td></tr></table></figure>
<p>Xcode对模拟器缓存路径：如果删除下次运行时间会较长，但不影响使用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">~<span class="regexp">/Library/</span><span class="title class_">Developer</span>/<span class="title class_">Xcode</span>/<span class="title class_">DerivedData</span></span><br></pre></td></tr></table></figure>
<p>Xcode中卸载多余模拟器位置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/资源库/<span class="title class_">Developer</span>/<span class="title class_">CoreSimulator</span>/<span class="title class_">Profiles</span>/<span class="title class_">Runtimes</span>/</span><br></pre></td></tr></table></figure>
<p>Xcode对真机设备支持: 连接设备时自动生成对应的版本支持文件，如果删除了，再次连接还会重新生成。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">~<span class="regexp">/Library/</span><span class="title class_">Developer</span>/<span class="title class_">Xcode</span>/iOS <span class="title class_">DeviceSupport</span></span><br></pre></td></tr></table></figure>
<p>Xcode6以后的模拟器的位置。每个长串名字的文件夹代表一个模拟器，在它的device.plist文件可以看到具体的哪个模拟器型号。不可恢复。慎重删除，删除之后再用就得重新下载了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">~<span class="regexp">/Library/</span><span class="title class_">Developer</span>/<span class="title class_">CoreSimulator</span>/<span class="title class_">Devices</span></span><br></pre></td></tr></table></figure>
<p>提交App Store或者Adhoc时打包的ipa文件路径，删除了不可恢复，可重新打包。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">~<span class="regexp">/Library/</span><span class="title class_">Developer</span>/<span class="title class_">Xcode</span>/<span class="title class_">Archives</span></span><br></pre></td></tr></table></figure>
<p>删除多余配置证书路径:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">~<span class="regexp">/Library/</span><span class="title class_">MobileDevice</span>/<span class="title class_">Provisioning</span> <span class="title class_">Profiles</span></span><br></pre></td></tr></table></figure>
<p>pod缓存路径:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">~<span class="regexp">/Library/</span><span class="title class_">Caches</span>/<span class="title class_">CocoaPods</span>/<span class="title class_">Pods</span>/<span class="title class_">Release</span></span><br></pre></td></tr></table></figure>
<p>XCode来定位循环引用的方法:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1）在product－Analyze中使用静态分析来检测代码中可能存在循环引用的问题。</span><br><span class="line"></span><br><span class="line">2）在Xcode－open developer tool－Instruments打开工具集，选择Leaks工具可以对已安装的应用进行内存泄漏检测，此工具能检测静态分析不会提示，但是到运行时才会出现的内存泄漏问题。</span><br></pre></td></tr></table></figure>
<p>Xcode来定位及分析僵尸对象方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 ）在product－scheme－edit scheme－diagnostics中将enable zombie objects勾选上。</span><br><span class="line"></span><br><span class="line">2）在Xcode－open developer tool－Instruments打开工具集，选择Zombies工具可以对已安装的应用进行僵尸对象检测。</span><br></pre></td></tr></table></figure>
<p>存在多Xcode 时，更改默认路径：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Xcode</span> &gt; <span class="title class_">Preferences</span> &gt; <span class="title class_">Locations</span>路径查看到正在使用的版本和该版本路径。可下拉选择需要版本。</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>mac</tag>
        <tag>Xcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac下安装NDK(android开发)</title>
    <url>/391391b6.html</url>
    <content><![CDATA[<p>最近博主在做android平台的游戏开发，不得不说android开发是真的麻烦。</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h3 id="ndk下载"><a href="#ndk下载" class="headerlink" title="ndk下载"></a>ndk下载</h3><p>android开发需要安装android ndk，这里对ndk的版本有着高要求。<br>推荐大家一个下载地址<a href="https://blog.csdn.net/momo0853/article/details/73898066">ndk老版本下载</a>这上面的ndk版本相对比较全面，选择自己需要的版本下载即可。<br>博主这里用到的是<code>ndkr10e</code>版本。</p>
<h3 id="解压安装"><a href="#解压安装" class="headerlink" title="解压安装"></a>解压安装</h3><p>下载下来后，完整的文件名字是<code>android-ndk-r10e-darwin-x86_64.bin</code><br>在Mac上，<code>.bin</code>文件是不能直接用解压文件直接解压的，这时候需要输入下面命令。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">chmod a+x android-ndk-r10c-darwin-x86_64.<span class="property">bin</span></span><br><span class="line">./android-ndk-r10c-darwin-x86_64.<span class="property">bin</span> <span class="comment">//在这个过程中可能需要安全认证</span></span><br></pre></td></tr></table></figure>
<p>输入第二行命令后，就会看到文件再解压了，解压需要一小小小会儿，稍等一下下就行。</p>
<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>要使用ndk，还得将ndk配置到设备的环境变量中。<br>在终端执行下面操作<br><code>vim .bash_profile</code><br>复制粘贴如下内容</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="variable constant_">ANDROID_SDK_ROOT</span>=<span class="regexp">/Users/</span>cxf/<span class="title class_">Library</span>/<span class="title class_">Android</span>/sdk     <span class="comment">// android sdk路径</span></span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">ANDROID_NDK_ROOT</span>=<span class="regexp">/Users/</span>cxf/<span class="title class_">Documents</span>/android-ndk-r10e  <span class="comment">// ndk路径</span></span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">NDK_ROOT</span>=<span class="regexp">/Users/</span>cxf/<span class="title class_">Documents</span>/android-ndk-r10e </span><br><span class="line"><span class="keyword">export</span> NDK_ROOT_quick=<span class="regexp">/Users/</span>cxf/<span class="title class_">Documents</span>/android-ndk-r10e</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：上面的路径都要改成自己的路径</p>
</blockquote>
<p>保存退出后输入命令<code>source .bash_profile</code>即可</p>
<h3 id="可能出现的错误"><a href="#可能出现的错误" class="headerlink" title="可能出现的错误"></a>可能出现的错误</h3><p>进行了上面操作后，还是可能会出现<code>ndk not found</code>的错误。这是因为登陆shell选择的是zsh，加载的是 <code>~/.zshrc</code>文件，所以每次重启终端后配置的不生效自己在 <code>~/.bash_profile</code>中配置环境变量<br>解决方法：<br>首先在终端命令行执行<code>open .zshrc</code><br>如果提示没有 .zshrc 文件，则 执行 <code>touch .zshrc</code> 创建文件，再添加 <code>source ~/.bash_profile</code><br>重启电脑即可。</p>
]]></content>
      <categories>
        <category>android ndk</category>
      </categories>
      <tags>
        <tag>android ndk</tag>
        <tag>ndkr10e</tag>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac升级后安装python2.7</title>
    <url>/4a90989.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>前不久博主升级了Macbook的系统，升级后却发现系统自带的python2.7不见了，取而代之的是python3。也是给我造成了诸多不便。后面发现其实只要自己重新在电脑上装一个python2.7就行了，点击下方链接，直接下载安装就行了。<br><a href="https://www.python.org/ftp/python/2.7.18/python-2.7.18-macosx10.9.pkg">直接下载安装即可</a></p>
]]></content>
      <categories>
        <category>电脑使用技巧</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua连续教程之Lua面向对象编程</title>
    <url>/59502.html</url>
    <content><![CDATA[<p>从很多意义上讲，Lua语言中的一张表就是一个对象。首先，表与对象一样，可以拥有状态。其次，表与对象一样，拥有一个与其无关的标识(self)；</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>特别地，两个具有相同值的对象（表）是两个不同的对象，而一个对象可以具有多个不同的值；最后，表与对象一样，具有创建者和被创建位置无关的声明周期。</p>
<!--more-->
<p>对象有其自己的操作。表也可以有自己的操作，例如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">Account = &#123;balance = <span class="number">0</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Account.withdraw</span><span class="params">(v)</span></span></span><br><span class="line">	Account.balance = Account.balance - v</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>上面的代码创建了一个新函数，并将该函数存入Account对象的withdraw字段。然后，我们就可以进行如下的调用：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">Account.withdraw(<span class="number">100.00</span>)</span><br></pre></td></tr></table></figure>
<p>这种函数差不多就是所谓的方法了。不过，在函数中使用全局名称Account是一个非常槽糕的编程习惯。首先，这个函数只能针对特定对象工作。其次，即使针对特定的对象，这个函数也只有在对象保存在特定的全局变量中时才能工作。如果我们改变类对象的名称，withdraw就不能工作了：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a, Account = Account, <span class="literal">nil</span></span><br><span class="line">a.withdraw(<span class="number">100.00</span>) 	<span class="comment">-- ERROR!</span></span><br></pre></td></tr></table></figure>
<p>这种行为违反对象拥有独立声明周期的原则。<br>另一种更加有原则的方法是对操作的接受者进行操作。因此，我们的方法需要额外的参数来表示该接受者，这个参数通常被称为self或this:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Account.withdraw</span><span class="params">(self,v)</span></span></span><br><span class="line">	<span class="built_in">self</span>.balance = <span class="built_in">self</span>.balance - v</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>此时，当我们调用该方法时，必须指定要操作的对象：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a1 = Account; Account = <span class="literal">nil</span></span><br><span class="line">...</span><br><span class="line">a1.withdraw(a1,<span class="number">100.00</span>) 		<span class="comment">-- OK</span></span><br></pre></td></tr></table></figure>
<p>通过使用参数self，可以对多个对象调用相同的方法：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a2 = &#123;balance = <span class="number">0</span>, withdraw = Account.withdraw&#125;</span><br><span class="line">...</span><br><span class="line">a2.withdraw(a2,<span class="number">260.00</span>)</span><br></pre></td></tr></table></figure>
<p>使用参数self是所有面向对象语言的核心店。大多数面向对象语言都向程序员隐藏了这个机制，从而使得程序员不必显式地声明这个参数（虽然程序员仍然可以在方法内使用self或者this）。Lua语言同样可以使用冒号操作符隐藏该参数。使用冒号操作符，我们可以将上例重写为a2:withdraw(260.00):</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Account:withdraw</span><span class="params">(v)</span></span></span><br><span class="line">	<span class="built_in">self</span>.balance = <span class="built_in">self</span>.balance -v</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>冒号的作用是在一个方法调用中增加一个额外的参数，或在方法的定义中增加一个额外的隐藏行参。冒号只是一种语法机制，虽然很便利，但没有引入任何新的东西。我们可以使用点分语法来定义一个函数，然后用冒号语法调用它，反之亦然，只要能够正确地处理好额外参数即可：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">Account = &#123;</span><br><span class="line">	balance = <span class="number">0</span>,</span><br><span class="line">	withdraw = <span class="function"><span class="keyword">function</span><span class="params">(self,v)</span></span></span><br><span class="line">		<span class="built_in">self</span>.balance = <span class="built_in">self</span>.balance -v</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Account:deposit</span><span class="params">(v)</span></span></span><br><span class="line">	<span class="built_in">self</span>.balance = <span class="built_in">self</span>.balance + v</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Account.deposit(Account,<span class="number">200.00</span>)</span><br><span class="line">Account:withdraw(<span class="number">100.00</span>)</span><br></pre></td></tr></table></figure>

<h2 id="类（class）"><a href="#类（class）" class="headerlink" title="类（class）"></a>类（class）</h2><p>截至目前，我们的对象具有了标识、状态和对状态进行的操作，但还缺乏类体系、继承和私有性。让我们先来解决第一个问题，即应该如何创建多个具有类似行为的对象。更具体地说，我们应该如果创建多个银行账户呢？<br>大多数面向对象语言提供了类的概念，类在对象的创建中扮演了模子的作用。在这些语言中，每个对象都是某个特定类的实例。Lua语言中没有类的概念；虽然元表的概念在某种程度上与类的概念相似，但是把元表当作类使用在后续会比较麻烦。相反，我们可以参考基于原型的语言中的一些做法来在Lua语言中模拟类，例如Self语言。在这些语言中，对象不属于类。相反，每个对象可以有一个原型。原型也是一种普通的对象，当对象（类的实例）遇到一个为知操作时会首先在原型中查找。要在这种语言中表示一个类，我们只需要创建一个专门被用作其他对象的原型对象即可。类和原型都是一种组织多个对象间共享行为的方式。<br>在Lua语言中，我们可以使用继承的思想来实现原型。更准确第说，如果有两个对象A和B，要让B成为A的一个原型，只需要：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setmetatable</span>(A,&#123;<span class="built_in">__index</span> = B&#125;)</span><br></pre></td></tr></table></figure>
<p>在此之后，A就会在B中查找所有它没有的操作。如果把B看作对象A的类，则只不过是术语上的一个变化。<br>让我们回到之前银行账户的示例。为了创建其他与Account行为类似的账号，我们可以使用__index元方法让这些新对象从Account中继承这些操作。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> mt = &#123;<span class="built_in">__index</span> = Account&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Account.new</span><span class="params">(o)</span></span></span><br><span class="line">	o = o <span class="keyword">or</span> &#123;&#125;</span><br><span class="line">	<span class="built_in">setmetatable</span>(o,mt)</span><br><span class="line">	<span class="keyword">return</span> o</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>在这段代码执行后，当我们创建一个新账户并调用新账户的一个方法时会发生什么呢？</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = Account.new&#123;balance = <span class="number">0</span>&#125;</span><br><span class="line">a:deposit(<span class="number">100.00</span>)</span><br></pre></td></tr></table></figure>
<p>当我们创建一个新账户a时，a会将mt作为其元表。当调用a:deposit(100.00)时，实际上调用的是a.deposit(a,100.00)，冒号只不过是一个语法糖。不过，Lua语言无法在表a中找到字段”deposit”，所以它会在元表的__index中搜索。此时的情况大致如下：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">getmetatable</span>(a).<span class="built_in">__index</span>.deposit(a,<span class="number">100.00</span>)</span><br></pre></td></tr></table></figure>
<p>a的元表是mt，而mt.__index是Account。因此，上述表达式等价于：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">Account.deposit(a,<span class="number">100.00</span>)</span><br></pre></td></tr></table></figure>
<p>即，Lua语言调用了原来的deposit函数，传入了a作为self参数。因此新账户a从Account继承了函数deposit。同样，它还从Account继承了所有的字段。<br>对于这种模式，我们可以进行两个小改进。第一种改进是，不创建扮演元表角色的新表而是把Account直接用作元表。第二种改进是，对new方法也使用冒号语法。加入了这两个改动后，方法new会变成：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Account:new</span><span class="params">(o)</span></span></span><br><span class="line">	o = o <span class="keyword">or</span> &#123;&#125;</span><br><span class="line">	<span class="built_in">self</span>.<span class="built_in">__index</span> = <span class="built_in">self</span></span><br><span class="line">	<span class="built_in">setmetatable</span>(o,<span class="built_in">self</span>)</span><br><span class="line">	<span class="keyword">return</span> o</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>现在，当我们调用Account:new()时，隐藏的参数self得到的实参是Account，Account.__index等于Account，并且Account被用作新对象的元表。可能看上去第二种修改（冒号语法）并没有得到大大的好处，但实际上当我们在使用类的继承的时候，使用self的优点就会很明显了。<br>继承不仅可以作用于方法，还可以作用于其他在新账户中没有的字段。因此，一个类不仅可以提供方法，还可以为实例中的字段提供常量和默认量。请注意，在第一版Account的定义中，有一个balance字段的值是0。因此，如果在创建新账户时没有提供初始的余额，那么余额就会继承这个默认值：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">b = Account:new()</span><br><span class="line"><span class="built_in">print</span>(balance)			<span class="comment">-- 0</span></span><br></pre></td></tr></table></figure>
<p>当在b上调用 deposit方法时，由于self就是b，所以等价于：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">b.balance = b.balance + v</span><br></pre></td></tr></table></figure>
<p>表达式b.balance求值后等于零，且该方法给b.balance赋了初始的金额。由于此时b有了它自己的balance字段，因此后续对b.balance的访问就不会再涉及元方法了。</p>
<h2 id="继承（Inheritance）"><a href="#继承（Inheritance）" class="headerlink" title="继承（Inheritance）"></a>继承（Inheritance）</h2><p>由于类也是对象，因此它们也可以从其他类获得方法。这种行为使得继承（即常见的面向对象的定义）可以很容易地在Lua语言中实现。</p>
<blockquote>
<p>Account类</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">Account = &#123;balance = <span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Account:new</span><span class="params">(o)</span></span></span><br><span class="line">	o = o <span class="keyword">or</span> &#123;&#125;</span><br><span class="line">	<span class="built_in">self</span>.<span class="built_in">__index</span> - <span class="built_in">self</span></span><br><span class="line">	<span class="built_in">setmetatable</span>(o,<span class="built_in">self</span>)</span><br><span class="line">	<span class="keyword">return</span> o</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Account:deposit</span><span class="params">(v)</span></span></span><br><span class="line">	<span class="built_in">self</span>.balance = <span class="built_in">self</span>.balance + v</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Account:withdraw</span><span class="params">(v)</span></span></span><br><span class="line">	<span class="keyword">if</span> v &gt; <span class="built_in">self</span>.balance <span class="keyword">then</span> <span class="built_in">error</span> <span class="string">&quot;insufficient funds&quot;</span> <span class="keyword">end</span></span><br><span class="line">	<span class="built_in">self</span>.balance = <span class="built_in">self</span>.balance - v</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>若想从这个类派生一个子类SpecialAccount以允许客户透支，那么可以先创建一个从基类继承了所有操作的空类：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">SpecialAccount = Account:new()</span><br></pre></td></tr></table></figure>
<p>直到现在，SpecialAccount还只是Account的一个实例。下面让我们来见证奇迹：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">s = SpecialAccount:new&#123;limit = <span class="number">1000.00</span>&#125;</span><br></pre></td></tr></table></figure>
<p>SpecialAccount就像继承其他方法一样从Account继承了new。不过，现在执行new时，它的self参数指向的是SpeciaAccount。因此，s的元表会是SpecialAccount，其中字段__index的值也是SpecialAccount。因此，s继承自SpecialAccount，而 SpecialAccount又继承自Account。之后，当执行s:deposit(100.00)时，Lua语言在s中找不到deposit字段，就会查找 SpecialAccount，仍找不到deposit字段，就查找Account并最终会在Account中找到deposit的最初实现。<br>SpecialAccount之所以特殊是因为我们可以重新定义从基类继承的任意方法，只需要编写一个新方法即可：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SpecialAccount:withdraw</span><span class="params">(v)</span></span></span><br><span class="line">	<span class="keyword">if</span> v - <span class="built_in">self</span>.balance &gt;= <span class="built_in">self</span>:getLimit() <span class="keyword">then</span></span><br><span class="line">		<span class="built_in">error</span> <span class="string">&quot;insufficient funds&quot;</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	<span class="built_in">self</span>.balance = <span class="built_in">self</span>.balance - v</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SpecialAccount:getLimit</span><span class="params">()</span></span></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">self</span>.limit <span class="keyword">or</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>现在，当调用s:withdraw(200.00)时，因为Lua语言会在 SpecialAccount中先找到新的withdraw方法，所以不会再从Account中查找。由于s.limit为1000.00（我们创建s时设置了这个值），所以程序会执行取款并使s变成负的余额。<br>Lua语言中的对象有一个有趣的特行，就是无须为了指定一种新行为而创建一个新类。如果只有单个对象需要某种特殊的行为，那么我们可以直接在该对象中实现在和行为。例如，账户s表示一个特殊的客户，这个客户的透支额度总是其余额的10%，那么可以只修改这个账户：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">s:getLimit</span><span class="params">()</span></span></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">self</span>.balance * <span class="number">0.10</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>在这段代码后，调用s:withdraw(200.00)还是会执行 SpecialAccount的withdraw方法，但当withdraw调用 self:getLimit时，调用的是上述的定义。</p>
<h2 id="多重继承（Multiple-Lnheritance）"><a href="#多重继承（Multiple-Lnheritance）" class="headerlink" title="多重继承（Multiple Lnheritance）"></a>多重继承（Multiple Lnheritance）</h2><p>由于Lua语言中的对象不是基本类型，因此在Lua语言中进行面向对象编程时又几种方式。上面缩减的是一种使用__index元方法的做法，也可能是在简易、性能和灵活性方面最均衡的做法。不过尽管如此，还有一些其他的实现对某些特殊的情况可能更加合适。在此，我们会看到允许在Lua语言中实现多重继承的另一种实现。<br>这种实现的关键在于把一个函数用作__index元方法。请注意，当一个表的元表中的__index字段为一个函数时，当Lua不能在原来的表中找到一个键时就会调用这个函数。基于这一点，就可以让__index元方法在其他期望的任意数量的父类中查找缺失的键。<br>多重继承以为这一个类可以具有多个超类。因此，我们不应该使用一个（超）类中的方法来创建子类，而是应该定义一个独立的函数createClass来创建子类。函数createClass的参数为新类的所有超类。该函数创建一个表来表示新类，然后设置新类元表中的元方法__index，由元方法实现多重继承。虽然是多重继承，但每个实例仍然属于单个类，并在其中查找所有的方法。因此，类和超类之间的关系不同于类和实例之间的关系。尤其是，一个类不能同时成为其实例和子类的元表。</p>
<blockquote>
<p>实例：一种多重继承的实现</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 在表&#x27;plist&#x27;的列表中查找&#x27;k&#x27;</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">search</span> <span class="params">(k,plist)</span></span></span><br><span class="line">	<span class="keyword">for</span> i = <span class="number">1</span>, # plist <span class="keyword">do</span></span><br><span class="line">		<span class="keyword">local</span> v = plist[i][k]		<span class="comment">-- 尝试第&#x27;i&#x27;个超类</span></span><br><span class="line">		<span class="keyword">if</span> v <span class="keyword">then</span> <span class="keyword">return</span> v <span class="keyword">end</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createClass</span><span class="params">(...)</span></span></span><br><span class="line">	<span class="keyword">local</span> c = &#123;&#125;		<span class="comment">-- 新类</span></span><br><span class="line">	<span class="keyword">local</span> parents = &#123;...&#125; <span class="comment">-- 父类列表</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">-- 在父类列表中查找类缺失的方法</span></span><br><span class="line">	<span class="built_in">setmetatable</span>(c,&#123;<span class="built_in">__index</span> = <span class="function"><span class="keyword">function</span><span class="params">(t,k)</span></span></span><br><span class="line">		reuturn search(k,parents)</span><br><span class="line">	<span class="keyword">end</span>&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="comment">-- 将&#x27;c&#x27;作为其实例的元表</span></span><br><span class="line">	c.<span class="built_in">__index</span> = c</span><br><span class="line"></span><br><span class="line">	<span class="comment">-- 为新类定义一个新的构造函数</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">c:new</span><span class="params">(o)</span></span></span><br><span class="line">		o = o <span class="keyword">or</span> &#123;&#125;</span><br><span class="line">		<span class="built_in">setmetatable</span>(o,c)</span><br><span class="line">		<span class="keyword">return</span> o</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> c 	<span class="comment">-- 返回新类</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>让我们用一个简单地示例来演示 createClass的用法。假设前面提到的类Account和另一个只有两个方法setname和getname的类Named：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">Named = &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Named:getname</span><span class="params">()</span></span></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">self</span>.name </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Named:setname</span><span class="params">(n)</span></span></span><br><span class="line">	<span class="built_in">self</span>.name = n</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>要创建一个同时继承Account和Named的新类NamedAccount，只需要调用createClass：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">NamedAccount = createClass(Account, Named)</span><br></pre></td></tr></table></figure>
<p>可以像平时一样创建和使用实例：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">account = NamedAccount:new&#123;name = <span class="string">&quot;Paul&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(account:getname())			<span class="comment">-- Paul</span></span><br></pre></td></tr></table></figure>
<p>现在，让我们来学习Lua语言是如何对表达式account:getname()求值的；更确切地说，让我们来学习account[“getname”]的求值过程。首先，Lua语言在account中找不到字段”getname”；因此，它就查找account的元表中的__index字段，在我们的示例中该字段为NamedAccount。由于在NamedAccount中也不存在字段”getname”,所以再从NamedAccount的元表中查找__index字段。由于这个字段是一个函数，因此Lua语言就调用了这个函数（即search）。该函数现在Account中查找”getname”；未找到后，继而在Named中查找并最终在Named中找到了一个非nil的值，也就是最终的搜索结果。<br>当然，由于这种搜索具有一定的复杂性，因此多重继承的性能不如单继承。一种改进性能的简单做法是将被继承的方法复制到子类中，通过这种技术，类的__index元方法会变成：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setmetatable</span>(c,&#123;<span class="built_in">__index</span> = <span class="function"><span class="keyword">function</span><span class="params">(t,k)</span></span></span><br><span class="line">	<span class="keyword">local</span> v = search(k,parents)</span><br><span class="line">	t[k] = v</span><br><span class="line">	<span class="keyword">return</span> v&#125;)</span><br></pre></td></tr></table></figure>
<p>使用了这种技巧后，在第一次访问过被继承的方法后，再访问被继承的方法就会像访问局部方法一样快了。这种技巧的缺点在于当系统开始运行后修改方法的定义就比价困难了，这是因为这些修改不会沿着继承层次向下传播。</p>
<h2 id="私有性"><a href="#私有性" class="headerlink" title="私有性"></a>私有性</h2><p>许多人认为，私有性是一门面向对象语言不可或缺的一部分：每个对象的状态都应该由它自己控制。在一些诸如C++和java的面向对象中，我们可以控制一个字段（也被称为实例变量）或一个方法是否在对象之外可见。另一种非常流行的面向对象语言Smalltalk，则规定所有的变量都是私有的。而所有的方法都是公有的。第一种面向对象语言Simula，则不提供任何形式的私有性保护。<br>此前，我们所学习的Lua语言中标准的对象实现方式没有提供私有性机制。一方面，这是使用普通结构来表示对象所带来的后果；另一方面，这也是Lua语言为了避免冗余和人为限制所采取的方法。如果夬不想返回一个对象内的内容，那就不要去访问就是了。一种常见的做法是把所有私有名称的最后加上一个上下画线，这样就能立刻区分出全局名称了。<br>不过，尽管如此，Lua原因的另外一项设计目标是灵活性，它为程序员提供能够模拟许多不同机制的元机制。虽然在Lua语言中，对象的基本设计没有提供私有性机制，但可以用其他方式来实现具有具有访问控制能力的对象。尽管程序员一般不会用到这种实现，但是了解这种实现还是有好处的，因为这种实现即探索了Lua语言中某些有趣的方面，又可以成为其他更具体问题的良好解决方案。<br>这种做法的基本思想是通过两个表来表示一个对象：一个表用来保存对象的状态，另一个表用于保存对象的操作（或接口）。我们通过二个表来访问对象本身，即通过组成其接口的操作来访问。为了避免未授权的访问，表示对象状态的表不保存在其他表的字段中，而只保存在方法的闭包中。例如，如果要用这种设计来表示银行账户，那么可以通过下面的工厂函数创建新的对象：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newAccount</span> <span class="params">(initialBalance)</span></span></span><br><span class="line">	<span class="keyword">local</span> <span class="built_in">self</span> = &#123;balance = initialBalance&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">local</span> withdraw = <span class="function"><span class="keyword">function</span><span class="params">(v)</span></span></span><br><span class="line">		<span class="built_in">self</span>.balance = <span class="built_in">self</span>.balance - v</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">local</span> deposit = <span class="function"><span class="keyword">function</span><span class="params">(v)</span></span></span><br><span class="line">		<span class="built_in">self</span>.balance = <span class="built_in">self</span>.balance + v</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">local</span> getBalance = <span class="function"><span class="keyword">function</span><span class="params">()</span></span> <span class="keyword">return</span> <span class="built_in">self</span>.balance <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		withdraw = withdraw,</span><br><span class="line">		deposit = deposit,</span><br><span class="line">		getBalance = getBalance</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>首先，这个函数创建了一个用于保存对象内部状态的表，并将其存储在局部变量self中。然后，这个函数创建了对象的方法。最后，这个函数会创建并返回一个外部对象，该对象将方法名与真正的方法实现映射起来。这里的关键在于，这些方法不需要额外的self参数，而是直接访问self变量。由于没有了额外的参数，我们也就无须使用冒号语法来操作这些对象，而是可以像普通函数那样来调用这些方法：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">acc1 = newAccount(<span class="number">100.00</span>)</span><br><span class="line">acc1.withdraw(<span class="number">40.00</span>)</span><br><span class="line"><span class="built_in">print</span>(acc1.getBalance())		<span class="comment">-- 60</span></span><br></pre></td></tr></table></figure>
<p>这种设计给予了存储在表self中所有内容完成的私有性。当newAccount返回后，就无法直接访问这个表了，我们只能通过在newAccount中创建的函数来访问它。虽然我们的示例只把一个实例变量放到了私有表中，但还有可以将一个对象中的所有私有部分都存入这个表。我们也可以定义私有方法，它们类似于公有方法但不放入接口中。例如，我们的账户可以给余额大于某个值的用户额外的10%的信用额度，但是又不想让用户访问到这些计算细节，就可以将这个功能按以下方法实现：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newAccount</span><span class="params">(initialBalance)</span></span></span><br><span class="line">	<span class="keyword">local</span> <span class="built_in">self</span> = &#123;</span><br><span class="line">		balance = initialBalance,</span><br><span class="line">		LIM	 	= <span class="number">10000.00</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">local</span> extra = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">self</span>.balance &gt; <span class="built_in">self</span>.LIM <span class="keyword">then</span></span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">self</span>.balance*<span class="number">0.10</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> getBalance = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">self</span>.balance + extra()</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h2 id="单方法对象（Single-method-Object）"><a href="#单方法对象（Single-method-Object）" class="headerlink" title="单方法对象（Single-method Object）"></a>单方法对象（Single-method Object）</h2><p>上述面向对象编程实现的一个特例是对象只有一个方法的情况。在这种情况下，可以不用创建接口表，只要将这个单独的方法以对象的表示形式返回即可。<br>单方法对象的另一种有趣的情况是，这个方法其实是一个根据不同的参数完成不同任务的分发方法。这种对象的一种原型实现如下：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newObject</span> <span class="params">(value)</span></span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(action , v)</span></span></span><br><span class="line">		<span class="keyword">if</span> action == <span class="string">&quot;get&quot;</span> <span class="keyword">then</span> <span class="keyword">return</span> value</span><br><span class="line">		<span class="keyword">elseif</span> action == <span class="string">&quot;set&quot;</span> <span class="keyword">then</span> value = v</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">error</span>(<span class="string">&quot;invalid action&quot;</span>)</span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>其使用方法很简单：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">d = newObject(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(d(<span class="string">&quot;get&quot;</span>))   <span class="comment">--- 0 </span></span><br><span class="line">d(<span class="string">&quot;set&quot;</span>,<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(d(<span class="string">&quot;get&quot;</span>))		<span class="comment">-- 10</span></span><br></pre></td></tr></table></figure>
<p>这种非传统的对象实现方式是很高效的。虽然d(“set”,10)这样的语法有些奇怪，但也不过只是比传统的d:set(10)多出了两个字符而已。每个对象使用一个闭包，要比使用一个表的开销更低。虽然使用这种方式不能继承，但我们却可以拥有完全的私有性：访问单方法对象中某个成员只能通过该对象所具有的唯一方法进行。<br>Tcl&#x2F;Tk对它的窗口部件使用了类似的做法。在Tk中，一个窗口部件的名称就是一个函数，这个函数可以根据它的第一个参数完成所有针对该部件的操作。</p>
<h2 id="对偶表示（Dual-Repressentation）"><a href="#对偶表示（Dual-Repressentation）" class="headerlink" title="对偶表示（Dual Repressentation）"></a>对偶表示（Dual Repressentation）</h2><p>实现私有性的另一种有趣方式是使用对偶表示。让我们先看一下什么是对偶表示。<br>通常我们使用键来把属性关联到表，例如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">table</span>[key] = value</span><br></pre></td></tr></table></figure>
<p>不过，我们可以使用对偶表示：把表当作键，同时又把对象本身当作这个表的键：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">key = &#123;&#125;</span><br><span class="line">...</span><br><span class="line">key[<span class="built_in">table</span>] = value</span><br></pre></td></tr></table></figure>
<p>这里的关键在于：我们不仅可以通过数值和字符串来索引一个表，还可以通过任何值来索引一个表。尤其是可以使用其他的表来索引一个表。<br>例如，我们在银行账户的实现中，可以把所有账户的余额放在表balance中，而不是把余额放在每个账户里。我们的withdraw方法会变成：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Account.withdraw</span><span class="params">(self,v)</span></span></span><br><span class="line">	balance[<span class="built_in">self</span>] = balance[<span class="built_in">self</span>] -v</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>这样做的好处在于私有性。即使一个函数可以访问一个账户，但是除非它能够同时访问表balance，否则也不能访问余额。如果表balance是一个在模块Account内部保存的局部变量，那么只有模块内部的函数才能访问它。因此，只有这些函数才能操作账户余额。</p>
<blockquote>
<p>示例 使用对偶表示实现账户</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> balance = &#123;&#125;</span><br><span class="line">Account = &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Account:withdraw</span><span class="params">(v)</span></span></span><br><span class="line">	balance[<span class="built_in">self</span>] = balance[<span class="built_in">self</span>] - v</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Account:deposit</span><span class="params">(v)</span></span></span><br><span class="line">	balance[<span class="built_in">self</span>] = balance[<span class="built_in">self</span>] + v</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Account:balance</span><span class="params">()</span></span></span><br><span class="line">	<span class="keyword">return</span> balance[<span class="built_in">self</span>]</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">Account:new</span><span class="params">( o )</span></span></span><br><span class="line">	o = o <span class="keyword">or</span> &#123;&#125;</span><br><span class="line">	<span class="built_in">setmetatable</span>(o,<span class="built_in">self</span>)</span><br><span class="line">	<span class="built_in">self</span>.<span class="built_in">__index</span> = <span class="built_in">self</span></span><br><span class="line">	balance[o] = <span class="number">0</span></span><br><span class="line">	<span class="keyword">return</span> o</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>我们可以像使用其他类一样使用这个类：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = Account:new&#123;&#125;</span><br><span class="line">a:deposit(<span class="number">100.00</span>)</span><br><span class="line"><span class="built_in">print</span>(a:balance())</span><br></pre></td></tr></table></figure>
<p>不过，我们不能恶意修改账户余额。这种实现通过让表balance为模块所私有，保证了它的安全性。<br>对偶表示无须修改即可实现继承。这种实现方式与标准实现方式在内存和时间开销方面基本相同。新对象需要一个新表，而且再每一个被使用的私有表中需要一个新的元素。访问balance[self]会比访问self.balance稍慢，这是因为后者使用了局部变量而前者使用了外部变量。通常，这种区别是可以忽略的。</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac提示&quot;文件已损坏，您应该将它移到废纸篓&quot;解决办法</title>
    <url>/e9ae662c.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>出现这个提示是由于mac防止恶意软件安装，只允许正规途径获取的软件安装，对于破解软件很可能出现此问题。</p>
<p>第一种常见情况：只需要开启允许“任何来源”即可</p>
<p>1.在终端控制台中输入：<code>sudo spctl --master-disable</code>，回车,如果你的笔记本设置有开机密码，会提示要你输入密码，输入的整个过程中是看不到密码显示的，不要因为看不到输入的密码而着急，继续输入完密码后按下回车键。<br>2.打开系统偏好设置——&gt;安全性与隐私，显示了任何来源，然后点击允许来自任何来源。如果没有【任何来源】的选项，可以再次执行刚才的代码进行尝试。</p>
<p>3.重新双击安装文件便不会再次提示“文件已损坏”了。</p>
<p>此时有的小伙伴发现依旧会出现“文件已损坏的提示”，此时就需要使用另外一种方式了</p>
<p>1.打开终端，输入： <code>sudo xattr -r -d com.apple.quarantine</code>，最后面加上一个空格（别着急Enter）<br>2.然后在访达-&gt;应用程序中找到你要打开的软件，拖到终端窗口中，回车执行，就可以正常打开文件了</p>
<blockquote>
<p>其他可执行文件也可以用该方法解决</p>
</blockquote>
]]></content>
      <categories>
        <category>电脑使用技巧</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown文本转Word文档，简单又高效</title>
    <url>/b4b7357d.html</url>
    <content><![CDATA[<p>在日常写作和文档编辑中，Markdown是一个非常方便的工具，但有时候我们可能需要将Markdown文本转换为Word文档，以便更好地与他人共享、编辑或打印。在本文中，我们将介绍一些简单而高效的方法来实现这一目标。</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h3 id="使用脚本"><a href="#使用脚本" class="headerlink" title="使用脚本"></a>使用脚本</h3><p>使用Python脚本将Markdown文本转换为Word文本的方法。你需要安装<code>pypandoc</code>库，它是一个与Pandoc文档转换器交互的Python库。<br>示例代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pypandoc</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">markdown_to_word</span>(<span class="params">markdown_text, output_path</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># Convert Markdown to Word</span></span><br><span class="line">        output = pypandoc.convert_text(markdown_text, <span class="string">&#x27;docx&#x27;</span>, <span class="built_in">format</span>=<span class="string">&#x27;md&#x27;</span>, outputfile=output_path)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Conversion successful. Word document saved at: <span class="subst">&#123;output_path&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error during conversion: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 输入Markdown文本</span></span><br><span class="line">    markdown_text = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    # Markdown to Word</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This is a sample Markdown text.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    - Item 1</span></span><br><span class="line"><span class="string">    - Item 2</span></span><br><span class="line"><span class="string">    - Item 3</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置输出Word文档路径</span></span><br><span class="line">    output_path = <span class="string">&quot;output.docx&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调用函数进行转换</span></span><br><span class="line">    markdown_to_word(markdown_text, output_path)</span><br></pre></td></tr></table></figure>
<p>将上述脚本中的<code>markdown_text</code>替换为你的Markdown文本，然后运行脚本。转换后的Word文档将保存在指定的输出路径中。请注意，这个方法依赖于Pandoc，因此你需要安装Pandoc并确保它在系统路径中。</p>
<h3 id="转换工具-推荐"><a href="#转换工具-推荐" class="headerlink" title="转换工具(推荐)"></a>转换工具(推荐)</h3><p>有许多在线和离线工具可以帮助我们将Markdown文本转换为Word文档。其中一些工具包括：</p>
<ol>
<li><strong>Pandoc:</strong><br>Pandoc是一个强大的文档转换工具，支持多种文本格式之间的转换，包括Markdown到Word。你可以使用如下命令：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pandoc input.md -o output.docx</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>Word</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32GPIO部分介绍</title>
    <url>/28639.html</url>
    <content><![CDATA[<p>最近在老师交给了一个项目，需要用到STM32单片机，这里就在学习的过程中所注意到的一些地方或细节部分记录了下来，笔者所使用的是STM32F407ZGT6芯片（探索者）。</p>
<span id="more"></span>
<p><strong>查看芯片的数据手册</strong></p>
<p><img data-src="https://pic.imgdb.cn/item/66434a6c0ea9cb1403ceb8c0.png" alt="这里写图片描述"><br>这个表格对每个I&#x2F;O口的功能进行了很详细的介绍。每个I&#x2F;O除了作为I&#x2F;O使用外，还可以作为其他的复用。已以PE2口为例，“Alternate functions”所展示就是其可以复用的功能。</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p> <strong>芯片结构</strong><br>F3系列和F4系列芯片的芯片结构大体相似，区别在于F4将F3芯片的上下拉结构配置由内部转到了外部。如下图所示。<br><img data-src="https://pic.imgdb.cn/item/66434b080ea9cb1403cf85ba.png" /><br><img data-src="https://pic.imgdb.cn/item/66434b090ea9cb1403cf8655.png"/><br>同时大家注意到在第二张图的右边有一个“TF:5V容忍”，F4芯片I&#x2F;O口大部分也支持5V容忍，5V容忍就是说STM32的输出电压是3.3V，但是也容忍输出5V。<br>那么哪些I&#x2F;O口支持5V容忍了，这个得看最上面的芯片手册，如果芯片后面有一栏写有“TF”标示，即说明支持5V容忍。</p>
<p><strong>GPIO相关配置寄存器</strong><br>每组GPIO口包含１０组寄存器。</p>
<p><code>一个端口模式寄存器（GPIOx_MODER） 一个端口输出类型寄存器(GPIOx_OTYPER) 一个端口输出速度寄存器（GPIOx_OSPEEDR) 一个端口上拉下拉寄存器（GPIOx_PUPDR)　　前４个为３２位配置寄存器 一个端口输入数据寄存器（GPIOx_IDR） 一个端口输出数据寄存器（GPIOx_ODR)　　中间２个为３２位数据寄存器 一个端口置位/复位寄存器（GPIOx_BSRR) 一个端口配置锁存寄存器（GPIOx_LCKR) 两个复位功能寄存器（低位GPIOx_AFRL &amp; GPIOx_AFRH) </code> </p>
<blockquote>
<p>如果配置一个IO口需要2个位，那么刚好32位寄存器配置一组IO口16个IO口<br>如果配置一个IO口只需要1个位，一般高16位保留<br>BSRR寄存器32位分为低16位BSRRL和高16位BSRRH，BSRRL配置一组IO口的16个IO口的置位状态（1），BSRRH配置复位状态（0）。</p>
</blockquote>
<p><strong>端口模式寄存器(GPIOx_MODER)</strong><br><img data-src="https://pic.imgdb.cn/item/66434a6c0ea9cb1403ceb86e.png" alt="这里写图片描述"><br>MODER寄存器没２位控制一个IO,３２位就控制１６个IO。以GPIOA为例，它就有GPIOA0~15，如果配置为’00’,则为“输入（复位状态）”模式。那么32位刚好可以配置一组IO的16个IO。</p>
<p><strong>端口输出类型寄存器(GPIOx_OTYPER)</strong><br>但是只有输出模式是不够的，还需要输出类型。<br><img data-src="https://pic.imgdb.cn/item/66434a6c0ea9cb1403ceb886.png" alt="这里写图片描述"><br>OTYPER寄存器每位控制一个IO，低16位控制一组IO的16个IO，高16位保留没有用。<br> 每个IO只用到一位，可以设置位0或者1。如果设置为0则为“输出推挽”，若要设置为“复用输出推挽”，则将端口模式寄存器设置为“复用功能模式”，再将这里设置为“输出推挽”模式即可。</p>
<p><strong>提示</strong> 任何方式操作IO口，都必须先使能相应IO口始终。<br>‘RCC_AHB1PeriphColckCmd();’</p>
<blockquote>
<p>其它的寄存器设置方法与这两个类似，这里不过多介绍。</p>
</blockquote>
<blockquote>
<p>以上图片均来自探索者光盘自带的资料。<br>如果不妥地方，还请各位读者多多指出。需要更详细资料的也可以和笔者联系</p>
</blockquote>
]]></content>
      <categories>
        <category>嵌入式开发</category>
      </categories>
      <tags>
        <tag>硬件</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32系统时钟树分析</title>
    <url>/58656.html</url>
    <content><![CDATA[<p>下面是一个STM32芯片的时钟树图<br><img data-src="https://pic.imgdb.cn/item/664349da0ea9cb1403cde7b8.png" alt="这里写图片描述"><br>1、LSI是低速内部时钟，RC振荡器，频率为32kHz左右。供独立看门狗和自动唤醒单元使用。<br>2、LSE是低速外部时钟，接频率为32.768kHz的石英晶体。这个主要是RTC的时钟源。<br>3、HSE是高速外部时钟，课接石英&#x2F;陶瓷谐振器，或者接外部时钟源，频率范围为4MHz~26MHz。我们开发板接的是8M的晶振。HSE也可以直接作为系统时钟或者PLL输入。</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>4、HSI是高速内部时钟，RC振荡器，频率为16MHz。可以直接作为系统时钟或者用作PLL输入。<br>5、PLL为锁相环倍频输出。STM32F4有两个PLL：<br>（1）主PLL由HSE或者HSI提供时钟信号，并具有两个不同的输出时钟。<br>    第一个输出PLLP用于生成高速的系统时钟（最高168MHz）<br>    第二个输出PLLQ用于生成USB　OTG FS的时钟（48MHz）,随机数发生器的时钟和SDIO时钟。<br>（2）专用PLL（PLLI2S）用于生成精确时钟，从而在I2S借口实现高品质音频性能。<br><img data-src="https://pic.imgdb.cn/item/664349d90ea9cb1403cde6f4.png" alt="这里写图片描述">                                               <img data-src="https://pic.imgdb.cn/item/664349d90ea9cb1403cde6dc.png" alt="这里写图片描述"><br>大家在图中可以看到一些梯形，这些梯形为选择器。左边为选择器，右边为分频器</p>
<h3 id="LSI，低速内部时钟"><a href="#LSI，低速内部时钟" class="headerlink" title="LSI，低速内部时钟"></a>LSI，低速内部时钟</h3><p>LSI低速内部时钟，频率为32kHz。RC振荡器产生，因为是RC振荡器产生，所以频率不是很稳定。主要对右边的独立看门狗做时钟。因为独立看门狗对时钟的精度要求不是很高，所以可以使用LSI。LSI比较简单，简单的理解就是一个电阻一个电容。<br>    LSI还可以作为RTC模块的时钟来源。在RTC模块左边有一个选择器，那么它不仅可以选择LSI作为时钟来源，还可以选择LSE作为时钟来源。</p>
<h3 id="LSE，低速外部时钟"><a href="#LSE，低速外部时钟" class="headerlink" title="LSE，低速外部时钟"></a>LSE，低速外部时钟</h3><p>LSE一般是由外接的一个精确的32.768k的晶振产生，比较稳定，一般情况下RTC选择LSE作为时钟源。RTC的时钟来源还可以来自HSE（图上有线连着，顺着线找）。</p>
<h4 id="MCO1-MCO2"><a href="#MCO1-MCO2" class="headerlink" title="MCO1&#x2F;MCO2"></a>MCO1&#x2F;MCO2</h4><p>在LSE下面有MCO1和MCO2两个引脚，这两个引脚就是把芯片内部的时钟输出到引脚。MCO1对应的是PA8，MCO2对应的是PC9（笔者这里使用的STM32F407芯片），MCO1和MCO2都有一个选择器，可以选择四个时钟来源，选择好时钟来源后经过一个分频器，分频就是对时钟进行除法运算，然后再输出到对应的引脚。</p>
<h3 id="HSE，高速外部时钟"><a href="#HSE，高速外部时钟" class="headerlink" title="HSE，高速外部时钟"></a>HSE，高速外部时钟</h3><p>HSE是由外接的晶振产生的，是4MHz<del>26MHz。HSE产生时钟后会先经过一个分频器，这个分频系数是2</del>31，分频后的时钟才可以作为RTC时钟的一个选择。</p>
<h3 id="HSI，高速内部时钟"><a href="#HSI，高速内部时钟" class="headerlink" title="HSI，高速内部时钟"></a>HSI，高速内部时钟</h3><p><img data-src="https://pic.imgdb.cn/item/664349d90ea9cb1403cde6ce.png" alt="这里写图片描述"><br>由RC振荡器产生，精度不高。首先，可以作为MCO1的一个时钟来源，其次可以作为系统时钟的一个来源。向下会将时钟信号送给一个选择器，这个选择器可以选择来自HSE和HSI的信号。左边一个“&#x2F;M”的分频器，会把选择的时钟&#x2F;M之后产生一个频率，产生一个频率后就到了PLL。</p>
<h3 id="PLL，锁相环倍频输出"><a href="#PLL，锁相环倍频输出" class="headerlink" title="PLL，锁相环倍频输出"></a>PLL，锁相环倍频输出</h3><p><img data-src="https://pic.imgdb.cn/item/664349d90ea9cb1403cde6b3.png" alt="这里写图片描述"><br>上面的叫主PLL，下面的叫专用PLL。主PLL产生两种时钟，一种作为系统时钟；一种叫作PLL48CK的时钟，用于USB OTG的时钟。专用PLL时钟主要是给I2S模块使用，因为I2S主要处理音频问题，对于频率的要求比较高，所以就有一个专用PLL。时钟信号从“&#x2F;M”分频器出来后，进入“xN”的倍频器，然后在“&#x2F;P”、“&#x2F;Q”或者“&#x2F;R”，“&#x2F;P”出来后作为系统时钟；“&#x2F;Q”出来后作为PLL48CK时钟；“&#x2F;Q”出来后作为I2S时钟。从这里我们就能计算出从PLL出来的时钟频率，假设从选择器进去的时钟频率为f，PLL&#x3D;(f&#x2F;M)<em>(N&#x2F;P)或者PLL&#x3D;(f&#x2F;M)</em>(N&#x2F;Q)或者PLL&#x3D;(f&#x2F;M)*(N&#x2F;R)。</p>
<p>图中A<del>G表示的地方：<br><strong>A：</strong> 这里是看门狗时钟输入。从图中可以看出，看门狗时钟源之恩给你是低速的LSI时钟。<br><strong>B：</strong>  这里是RTC时钟源，从图上可以看出，RTC的时钟源可以选择LSI，LSE，以及HSE分频后的时钟，HSE分频系数为2</del>31。<br><strong>C：</strong>  这里是STM32F4输出时钟MCO1和MCO2。MCO1是芯片的。PA8引脚输出时钟。它有四个时钟来源分别为：HSI,LSE,HSE和PLL时钟。MCO2是向芯片的PC9输出时钟，它同样有四个时钟来源分别为：HSE,PLL,SYSCLK以及PLLI2S时钟MCO输出时钟频率最大不超过100MHz。<br><strong>D：</strong> 这里我们值得是以太网PTP时钟，AHB时钟，APB2高速时钟，APB1低速时钟。这些时钟都是来源与SYSCLK系统时钟。其中以太网PTP时钟是使用系统时钟。最大时钟为168MHz，APB2高速时钟最大频率为84MHz,而APB1低速时钟最大频率为42MHz。<br><strong>F：</strong> 这里是指I2S时钟源。从图可以看出，I2S的时钟源来源于PLLI2S或者映射到I2S_CKIN引脚的外部时钟。I2S出于音质的考虑，对时钟精度要求很高。<br><strong>G:</strong> 这是STM32F4内部以太网MAC时钟的来源。对于MII接口来说，必须向外部PHY芯片提供25MHz的时钟，这个时钟，可以由PHY芯片外接晶振，或者使用STM32F4的MCO输出来提供。然后，PHY芯片再给STM32F4提供ETH_MII_TX_CLK和ETH_MII_RX_CLK时钟。对于RMII接口来说，外部必须提供50MHz的时钟驱动PHY和STM32F4的ETH_RMII_REF_CLK,这个50MHz时钟可以来自PHY、有源晶振或者STM32F4的MCO。我们的开发板使用的是RMII接口，使用PHY芯片提供50MHz时钟驱动STM32F4的ETH_RMII_REF_CLK.<br><strong>H：</strong> 这里是指外部PHY提供的USB OTG HS (60MHz)时钟。</p>
<blockquote>
<p>本文图片来STM32F4开发指南，部分内容参考STM32F4开发指南。如有不妥，还请各位多多指出。</p>
</blockquote>
]]></content>
      <categories>
        <category>嵌入式开发</category>
      </categories>
      <tags>
        <tag>硬件</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript写一个类似于`format.string`方法</title>
    <url>/45f4cb45.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>代码：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">formatString</span>(<span class="params">str: <span class="built_in">string</span>, ...args: <span class="built_in">any</span>[]</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> str.<span class="title function_">replace</span>(<span class="regexp">/\&#123;(\d+)\&#125;/g</span>, <span class="function">(<span class="params">match, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> args[index] !== <span class="string">&quot;undefined&quot;</span> ? args[index] : match;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&quot;Alice&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">age</span>: <span class="built_in">number</span> = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">message</span>: <span class="built_in">string</span> = <span class="title function_">formatString</span>(<span class="string">&quot;My name is &#123;0&#125; and I am &#123;1&#125; years old.&quot;</span>, name, age);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message); <span class="comment">// Output: &quot;My name is Alice and I am 25 years old.&quot;</span></span><br></pre></td></tr></table></figure>
<p>在上面的示例中，我们定义了一个名为 <code>formatString</code> 的函数，它接受一个字符串和任意数量的参数。在函数体内，我们使用正则表达式 <code>/\\&#123;\\d+\\&#125;/g</code> 来匹配字符串中的占位符 <code>&#123;&#125;</code>，并在每个匹配项上调用一个回调函数来进行替换。</p>
<p>在回调函数中，我们使用 <code>args</code> 数组来获取与占位符 <code>&#123;&#125;</code> 中的索引对应的参数。如果参数存在，则将其用于替换占位符。否则，我们返回匹配项本身。最后，我们返回替换后的字符串。</p>
<p>在示例中，我们还定义了两个变量 <code>name</code> 和 <code>age</code>，并使用 <code>formatString</code> 函数来将它们的值嵌入到字符串中。最后，我们输出格式化后的字符串 <code>message</code>，它的值是 <code>&quot;My name is Alice and I am 25 years old.&quot;</code>。</p>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript正则验证字符串是否为邮箱地址</title>
    <url>/a0e0975a.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h3 id="TypeScript-正则验证邮箱地址"><a href="#TypeScript-正则验证邮箱地址" class="headerlink" title="TypeScript 正则验证邮箱地址"></a>TypeScript 正则验证邮箱地址</h3><p>要使用 TypeScript 进行邮箱地址的正则验证，你可以使用以下代码示例：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假设 email 是要验证的字符串</span></span><br><span class="line"><span class="keyword">const</span> email = <span class="string">&quot;example@email.com&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义邮箱地址的正则表达式</span></span><br><span class="line"><span class="keyword">const</span> emailRegex = <span class="regexp">/^[^\s@]+@[^\s@]+\.[^\s@]+$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 test 方法进行验证</span></span><br><span class="line"><span class="keyword">if</span> (emailRegex.<span class="title function_">test</span>(email)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;email&#125;</span> 是有效的邮箱地址`</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;email&#125;</span> 不是有效的邮箱地址`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个代码中，emailRegex 是一个基本的邮箱地址正则表达式，它匹配常见的邮箱格式。isValidEmail 函数接受一个字符串作为参数，并返回一个布尔值，指示该字符串是否是有效的邮箱地址。在示例中，我们调用这个函数并根据返回值输出相应的消息。请注意，这只是一个基本的邮箱地址验证，实际上，验证邮箱地址可能会更加复杂，因为邮箱地址的规范有很多变化。</p>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Argument value 10880 is outside the valid range [0, 255]</title>
    <url>/26963.html</url>
    <content><![CDATA[<p>今天一不小心把自己的mac系统升级了，为后续的学习带来了一堆的麻烦。写这篇博文是希望各种同是ios开发的同行不要踩雷。系统升级到最新之后，也只能将就将Xcode升级到最新。</p>
<span id="more"></span>
<p>现在所用到的环境<br>Mac：macOS 11.4<br>Xcode：12.5<br>于是在创建cocos 工程时，就遇到了下面这个问题</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<ul>
<li>双击左边提示错误的地方，会直接跳转到错误代码处<br><img data-src="https://pic.imgdb.cn/item/66433d1d0ea9cb1403b5a7ca.png" alt="在这里插入图片描述"></li>
<li>鼠标选中bt_splat_ps，右键，Jump to Definition就会跳转到该变量定义的地方<br><img data-src="https://pic.imgdb.cn/item/66433d2b0ea9cb1403b5b649.png" alt="在这里插入图片描述"><br> bt_splat_ps是一个定义宏，直接指向 bt_pshufd_ps</li>
<li>同理，也可以找到定义bt_pshufd_ps的地方<br> <img data-src="https://pic.imgdb.cn/item/66433d3e0ea9cb1403b5ca3f.png" alt="在这里插入图片描述"><br>不难发现，bt_pshufd_ps同样也是一个定义宏</li>
</ul>
<p>这里可以看到，错误是值超出了范围了<br><img data-src="https://pic.imgdb.cn/item/66433d4c0ea9cb1403b5dc6f.png" alt="在这里插入图片描述"></p>
<p>这里，直接修改值的范围就行了，修改下面值的范围<br><img data-src="https://pic.imgdb.cn/item/66433d5b0ea9cb1403b5ea9e.png" alt="在这里插入图片描述"><br>修改如下<br><img data-src="https://pic.imgdb.cn/item/66433d5b0ea9cb1403b5ea13.png" alt="在这里插入图片描述"><br>这样，这个bug就解决啦<br>当我满怀欣喜去运行工程的时候，又出现了下面这个问题<br><img data-src="https://pic.imgdb.cn/item/66433d5b0ea9cb1403b5ea9e.png" alt="在这里插入图片描述"><br>心中顿时“万马奔腾”，这个苹果公司，升级的产品总是一大堆bug，让人头疼。</p>
<p>时间不早了，为了头上仅剩的几根头发，决定睡觉不看。<br>如果您有好的解决方案，可以发给我学习学习，望各位大佬多多指教，小白在此敬上</p>
]]></content>
      <tags>
        <tag>mac</tag>
        <tag>Xcode</tag>
      </tags>
  </entry>
  <entry>
    <title>androidStudio build type isn&#39;t debuggable</title>
    <url>/dfc8d152.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>今天在使用<code>android studio</code>调试代码的时候，报错：<code>build type isn&#39;t debuggable</code>；<br>推荐个人觉得比较方便的方法：</p>
<ul>
<li>点击日志框左侧的<code>BuildVariants</code></li>
<li>就会看到下图左上方的样式</li>
<li>点击<code>release</code>，选择<code>debug</code>即可<br>具体如下图：<img data-src="https://s11.ax1x.com/2024/02/22/pFNIFXV.png"  alt="" /></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>java.lang.RuntimeException Failure delivering result ResultInfo{who=null,request=64206,result=-1}</title>
    <url>/facebook1.html</url>
    <content><![CDATA[<p>今天在接入facebook第三方登录的时候，点击登录按钮，APP闪退，并报错<br><code>java.lang.RuntimeException Failure delivering result ResultInfo&#123;who=null,request=64206,result=-1&#125;</code></p>
<span id="more"></span>
<p>如下图：</p>
<img data-src="https://pic.imgdb.cn/item/6646e299d9c307b7e9ccc15e.png" alt="" />

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h3 id="问题出现的原因"><a href="#问题出现的原因" class="headerlink" title="问题出现的原因"></a>问题出现的原因</h3><p><code>PROP_TARGET_SDK_VERSION</code>的版本设置不对，我之前设置为31，现在将版本改为30即可。<br>之前facebook登录是其他同事弄的，弄好后又给去掉了，现在我来重新接入。在接入的时候，没有太仔细看官方的开发文档，直接就用了他之前的代码。结果没有配置好正确的参数。<br>即<code>facebook_app_id</code>、<code>fb_login_protocol_scheme</code>以及 <code>facebook_client_token</code> 这三个参数的值没有改。</p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>配置好上面说的三个参数值就可以了。<br>具体方法：</p>
<ul>
<li>在andorid studio 中打开 <code>/app/res/values/strings.xml</code> 文件。</li>
<li>添加名称为 <code>facebook_app_id</code>、<code>fb_login_protocol_scheme</code> 以及 <code>facebook_client_token</code> 的 <code>string</code> 元素，并将值相应设置为<strong>应用编号</strong>和<strong>客户端口令</strong>。获取方式下面说到。例如，如果您的应用编号为 <code>1234</code>，并且客户端口令为 <code>56789</code>，则您的代码格式如下所示：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;string name=<span class="string">&quot;facebook_app_id&quot;</span>&gt;<span class="number">1234</span>&lt;/string&gt;</span><br><span class="line">&lt;string name=<span class="string">&quot;fb_login_protocol_scheme&quot;</span>&gt;fb1234&lt;/string&gt;</span><br><span class="line">&lt;string name=<span class="string">&quot;facebook_client_token&quot;</span>&gt;<span class="number">56789</span>&lt;/string&gt;</span><br></pre></td></tr></table></figure>
仔细看，这里的<code>fb_login_protocol_scheme</code>其实就是在<code>facebook_app_id</code>前面加上<code>fb</code>即可，不要傻傻的到处找了。</li>
</ul>
<h3 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h3><h4 id="获取应用编号"><a href="#获取应用编号" class="headerlink" title="获取应用编号"></a>获取应用编号</h4><p>打开你的facebook开发者后台，查看相应的应用，上面就有个应用编号，如下图：<br><img data-src="https://pic.imgdb.cn/item/6646e632d9c307b7e9d12171.png" alt="" /></p>
<h4 id="获取客户端口令"><a href="#获取客户端口令" class="headerlink" title="获取客户端口令"></a>获取客户端口令</h4><p>在开发者后台，点击你所创建的应用，依次选择<code>应用设置</code>，<code>高级</code>，在<code>安全</code>这一栏就可以看到<code>客户端口令</code>了，如下图：<br><img data-src="https://pic.imgdb.cn/item/6646e692d9c307b7e9d18988.png" alt="" /></p>
<p>配置好后就可以继续下一步了~</p>
]]></content>
      <categories>
        <category>android studio</category>
        <category>facebook</category>
      </categories>
      <tags>
        <tag>facebook</tag>
      </tags>
  </entry>
  <entry>
    <title>checkReleaseDuplicateClasses</title>
    <url>/d1e46ee1.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>cocos creator导出的安卓工程在打包的时候报了<code>Execution failed for task: checkReleaseDuplicateClasses</code>这个错。如下图：</p>
<img data-src="https://pic.imgdb.cn/item/664327ba0ea9cb14038f1b05.png" alt="" />
解决方案：
在`gradle.properties`中加上下面两行
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android.useAndroidX=true</span><br><span class="line">android.enableJetifier=true</span><br></pre></td></tr></table></figure>
如下图所示：
<img data-src="https://pic.imgdb.cn/item/664327ed0ea9cb14038f53c9.png" alt=""/>

<p>然后刷新重新编译即可。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>chrome调试手机网页</title>
    <url>/343880cb.html</url>
    <content><![CDATA[<h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>1、 PC端安装好chrmoe浏览器<br>2、 安卓手机安装好chrmoe浏览器<br>3、 数据线</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h3 id="手机打开调试模式"><a href="#手机打开调试模式" class="headerlink" title="手机打开调试模式"></a>手机打开调试模式</h3><p>进入手机设置，找到开发者模式，然后启用USB调试</p>
<h3 id="打开PC端chrome调试功能"><a href="#打开PC端chrome调试功能" class="headerlink" title="打开PC端chrome调试功能"></a>打开PC端chrome调试功能</h3><p>1、点击chrmoe右上角的3个点点<br>2、选择扩展程序，选择管理扩展程序<br>3、管理扩展程序右上角有一个<code>开发者模式</code>的开关，将开发者模式打开<br>如下图：<br><img data-src="https://pic.imgdb.cn/item/66586a1dd9c307b7e993fcc5.png" alt="" /></p>
<h3 id="浏览器连接手机"><a href="#浏览器连接手机" class="headerlink" title="浏览器连接手机"></a>浏览器连接手机</h3><p>1、打开浏览器，输入网址<code>chrome://inspect/#devices</code><br>2、手机通过数据线连上电脑，选择<code>允许访问手机文件</code><br>3、刷新浏览器，就会出现下面界面，如果没有出现，等一会儿再刷新，只要手机成功连上电脑，就一定会出现下面界面<br><img data-src="https://pic.imgdb.cn/item/66586a21d9c307b7e99411a9.png" alt="" /><br>4、点击<code>inspect</code>即可调试手机网页啦~</p>
<h3 id="其它说明"><a href="#其它说明" class="headerlink" title="其它说明"></a>其它说明</h3><p>1、该界面如没有没有出现<code>Remote Target</code>，说明手机没有连接成功，只要连接成功，哪怕手机没有打开浏览器，也会出现对应手机的型号。<br>2、手机打开<code>Chrome</code>浏览器，就会有图中框框中的内容，浏览器页面越多，框框里的内容就越多，而且每一条下面都会显示你打开的网址，选择自己要调试的网页就行。<br>3、需要科学上网，可以自行下载梯子，也可以修改本地<code>host</code>文件。</p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
      </tags>
  </entry>
  <entry>
    <title>cocos2dx-lua游戏开发</title>
    <url>/19422.html</url>
    <content><![CDATA[<p>开发环境： mac，cocos2dx 3.17<br>开发语言： lua</p>
<span id="more"></span>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>cocos2dx 英文官网：<a href="http://www.cocos2d-x.org/">http://www.cocos2d-x.org/</a><br>cocos2dx 中文社区：<a href="http://www.cocos.com/">http://www.cocos.com/</a></p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h3 id="横屏竖屏"><a href="#横屏竖屏" class="headerlink" title="横屏竖屏"></a>横屏竖屏</h3><p>打开工程目录下的<code>config.json</code>文件，横屏竖屏由<code>isLandscape</code>控制，<code>true</code>为横屏，<code>flase</code>为竖屏，其中<code>width</code>和<code>height</code>是控制模拟器的大小</p>
<h3 id="屏幕适配"><a href="#屏幕适配" class="headerlink" title="屏幕适配"></a>屏幕适配</h3><p>打开工程目录下<code>src/config.lua</code>文件，修改<code>CC_DESIGN_RESOLUTION</code>下的参数，具体修改方法可参考<a href="https://blog.csdn.net/chinahaerbin/article/details/39586281">博客</a></p>
<h3 id="添加精灵"><a href="#添加精灵" class="headerlink" title="添加精灵"></a>添加精灵</h3><p>打开工程目录下<code>src/app/views/MainScene.lua</code>文件,添加一下代码</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> png = <span class="string">&quot;2.png&quot;</span> <span class="comment">--文件路径</span></span><br><span class="line"><span class="keyword">local</span> sprite = cc.Sprite:<span class="built_in">create</span>(png)<span class="comment">--,cc.rect(0,0,0,0))</span></span><br><span class="line"><span class="built_in">self</span>:addChild(sprite)</span><br><span class="line">sprite:setPosition(display.width/<span class="number">2</span>,display.height/<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>具体可以参考博客<a href="https://blog.csdn.net/shimazhuge/article/details/50396388">cocos2dx-lua中sprite精灵的3种创建方法</a></p>
<h3 id="创建按钮及按钮事件"><a href="#创建按钮及按钮事件" class="headerlink" title="创建按钮及按钮事件"></a>创建按钮及按钮事件</h3><ul>
<li>方法1：<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> playBotton = cc.MenuItemImage:<span class="built_in">create</span>(<span class="string">&quot;botton.png&quot;</span>,<span class="string">&quot;botton.png&quot;</span>)</span><br><span class="line">    :onClicked(<span class="function"><span class="keyword">function</span> <span class="params">(  )</span></span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;点击按钮，到MainScene&quot;</span>)</span><br><span class="line">        <span class="built_in">self</span>:getApp():enterScene(<span class="string">&quot;PlayScene&quot;</span>)</span><br><span class="line">    <span class="keyword">end</span>)</span><br><span class="line">    cc.Menu:<span class="built_in">create</span>(playBotton)</span><br><span class="line">        :move(display.cx<span class="number">-200</span>, display.cy+<span class="number">200</span>)</span><br><span class="line">        :addTo(<span class="built_in">self</span>)</span><br></pre></td></tr></table></figure></li>
<li>方法2： <figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> button = ccui.Button:<span class="built_in">create</span>()</span><br><span class="line">	button:setPosition(display.centor)</span><br><span class="line">	button:addTo(<span class="built_in">self</span>)</span><br><span class="line">	button:setEnable(<span class="literal">true</span>)    <span class="comment">--是否禁用</span></span><br></pre></td></tr></table></figure>
<a href="https://blog.csdn.net/ZY_cat/article/details/78332253?locationNum=6&fp">链接</a></li>
</ul>
<h3 id="单点触摸事件"><a href="#单点触摸事件" class="headerlink" title="单点触摸事件"></a>单点触摸事件</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> layer = cc.Layer:<span class="built_in">create</span>()</span><br><span class="line"><span class="built_in">self</span>:addChild(layer)</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> sprite = cc.Sprite:<span class="built_in">create</span>(<span class="string">&quot;res/13.png&quot;</span>)</span><br><span class="line"><span class="comment">--sprite:setPosition(cc.p(origin.x + size.width/2 - 80, origin.y + size.height/2 + 80))</span></span><br><span class="line">sprite:setPosition(<span class="number">300</span>,<span class="number">300</span>)</span><br><span class="line">layer:addChild(sprite, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--实现事件触发回调</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">onTouchBegan</span><span class="params">(touch, event)</span></span></span><br><span class="line"><span class="keyword">local</span> target = event:getCurrentTarget()</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> locationInNode = target:convertToNodeSpace(touch:getLocation())</span><br><span class="line"><span class="keyword">local</span> s = target:getContentSize()</span><br><span class="line"><span class="keyword">local</span> rect = cc.rect(<span class="number">0</span>, <span class="number">0</span>, s.width, s.height)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> cc.rectContainsPoint(rect, locationInNode) <span class="keyword">then</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">onTouchMoved</span><span class="params">(touch, event)</span></span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">onTouchEnded</span><span class="params">(touch, event)</span></span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;触摸事件&quot;</span>)</span><br><span class="line">sprite:setPosition(<span class="number">300</span>,<span class="number">500</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> listener = cc.EventListenerTouchOneByOne:<span class="built_in">create</span>() <span class="comment">-- 创建一个事件监听器</span></span><br><span class="line">listener:setSwallowTouches(<span class="literal">true</span>)</span><br><span class="line">listener:registerScriptHandler(onTouchBegan, cc.Handler.EVENT_TOUCH_BEGAN)</span><br><span class="line">listener:registerScriptHandler(onTouchMoved, cc.Handler.EVENT_TOUCH_MOVED)</span><br><span class="line">listener:registerScriptHandler(onTouchEnded, cc.Handler.EVENT_TOUCH_ENDED)</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> eventDispatcher = <span class="built_in">self</span>:getEventDispatcher() <span class="comment">-- 得到事件派发器</span></span><br><span class="line">eventDispatcher:addEventListenerWithSceneGraphPriority(listener, sprite) <span class="comment">-- 将监听器注册到派发器中</span></span><br></pre></td></tr></table></figure>
<h3 id="存放数据"><a href="#存放数据" class="headerlink" title="存放数据"></a>存放数据</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">cc.UserDefault:getInstance():setIntegerForKey(<span class="string">&quot;hightscore1&quot;</span>, <span class="built_in">self</span>.hightscore1)</span><br><span class="line"></span><br><span class="line">如果数据是表格</span><br><span class="line">cc.UserDefault:getInstance():setStringForKey(<span class="string">&quot;biaoge&quot;</span>, json.encode(sss))</span><br></pre></td></tr></table></figure>
<h3 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">self</span>.hightscore1 = cc.UserDefault:getInstance():getIntegerForKey(<span class="string">&quot;hightscore1&quot;</span>)</span><br><span class="line"></span><br><span class="line">如果数据是表格</span><br><span class="line">cc.UserDefault:getInstance():getStringForKey(<span class="string">&quot;biaoge&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="艺术字体"><a href="#艺术字体" class="headerlink" title="艺术字体"></a>艺术字体</h3><p>首先在res文件中加入字体文件：”.fnt”以及”.png”文件<br>然后调用下面命令</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> bmFont  = ccui.TextBMFont:<span class="built_in">create</span>()</span><br><span class="line">	:move(display.cx, display.cy <span class="number">-200</span> )    <span class="comment">--坐标</span></span><br><span class="line">	:addTo(<span class="built_in">self</span>)    <span class="comment">--加入场景</span></span><br><span class="line">	bmFont:setFntFile(<span class="string">&quot;res/myFont.fnt&quot;</span>)</span><br><span class="line">	bmFont:setString(<span class="string">&quot;内容&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> label = cc.Label:createWithTTF(<span class="string">&quot;用户登录&quot;</span>,<span class="string">&quot;res/font1.ttf&quot;</span>,<span class="number">50</span> )</span><br><span class="line">        :setColor(ccc3(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))			<span class="comment">--设置字体颜色</span></span><br><span class="line">        :move(display.cx - <span class="number">500</span> ,display.cy)</span><br><span class="line">        :addTo(<span class="built_in">self</span>)</span><br></pre></td></tr></table></figure>
<h3 id="AtlasLabel-数字标签"><a href="#AtlasLabel-数字标签" class="headerlink" title="AtlasLabel 数字标签"></a>AtlasLabel 数字标签</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> AtlasLabel = ccui.TextAtlas:<span class="built_in">create</span>(<span class="string">&quot;0123456789&quot;</span>,img, <span class="number">9</span>, <span class="number">12</span>, <span class="string">&quot;0&quot;</span>)</span><br><span class="line"><span class="comment">-- 参数分别是  数字 图片 宽 高 首个数字</span></span><br></pre></td></tr></table></figure>

<h3 id="延时函数"><a href="#延时函数" class="headerlink" title="延时函数"></a>延时函数</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">global.countDown.createTimer(<span class="string">&quot;time&quot;</span>, <span class="built_in">time</span> )</span><br><span class="line">     <span class="keyword">local</span> node = cc.Node:<span class="built_in">create</span>()</span><br><span class="line">     node:addTo(<span class="built_in">self</span>)</span><br><span class="line">     performWithDelay(node,<span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;时间到&quot;</span>)</span><br><span class="line">         <span class="keyword">end</span>,<span class="built_in">time</span>)</span><br></pre></td></tr></table></figure>

<h3 id="滚动容器"><a href="#滚动容器" class="headerlink" title="滚动容器"></a>滚动容器</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 测试 pageView  </span></span><br><span class="line"><span class="keyword">local</span> pageView = ccui.PageView:<span class="built_in">create</span>()  </span><br><span class="line"><span class="comment">--设置pageView长宽  </span></span><br><span class="line">pageView:setContentSize(<span class="number">600</span>,<span class="number">600</span>)  </span><br><span class="line"><span class="comment">--设置是否响应触摸事件  </span></span><br><span class="line">pageView:setTouchEnabled(<span class="literal">true</span>)  </span><br><span class="line"><span class="comment">--设置锚点  </span></span><br><span class="line">pageView:setAnchorPoint(cc.p(<span class="number">0.5</span>,<span class="number">0.5</span>))  </span><br><span class="line"><span class="comment">--设置位置在中心位置  </span></span><br><span class="line">pageView:setPosition(display.center)  </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>,<span class="number">5</span> <span class="keyword">do</span>  </span><br><span class="line"><span class="comment">---然后layout，每个layout保存一个page  </span></span><br><span class="line"><span class="keyword">local</span> layout = ccui.Layout:<span class="built_in">create</span>()  </span><br><span class="line"><span class="comment">--为了演示这里做个小图片  </span></span><br><span class="line">layout:setContentSize(<span class="number">600</span>,<span class="number">600</span>)  </span><br><span class="line">layout:setPosition(<span class="number">0</span>,<span class="number">0</span>)  </span><br><span class="line"><span class="comment">--创建一个button  </span></span><br><span class="line"><span class="keyword">local</span> btn= ccui.Button:<span class="built_in">create</span>(<span class="string">&quot;game/dian/Maininterface/tuichu.png&quot;</span>,<span class="string">&quot;game/dian/Maininterface/tuichi.png&quot;</span>,<span class="string">&quot;game/dian/Maininterface/weizi.png&quot;</span>):setPosition(<span class="number">300</span>,<span class="number">300</span>)  </span><br><span class="line">layout:addChild(btn)  </span><br><span class="line">pageView:addChild(layout)<span class="comment">---一个layout 为一个page内容   page:addPage(layout)  </span></span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"><span class="comment">--添加pageView 到场景中  </span></span><br><span class="line"><span class="built_in">self</span>:addChild(pageView)  </span><br><span class="line"></span><br><span class="line"><span class="comment">--添加事件响应  </span></span><br><span class="line">pageView:addEventListener(handler(<span class="built_in">self</span>, <span class="built_in">self</span>.onEvent))  </span><br><span class="line"></span><br><span class="line"><span class="comment">--事件响应方法  </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MainScene:onEvent</span><span class="params">(sender,event)</span></span>  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1234&quot;</span>)</span><br><span class="line"><span class="comment">-- if event == ccui.PageViewEventType.turning then  </span></span><br><span class="line"><span class="comment">--     local pageNum = sender:getCurrentPageIndex()  </span></span><br><span class="line"><span class="comment">--     print(&quot;is turning,this PageNum:&quot;..pageNum)  </span></span><br><span class="line"><span class="comment">-- end  </span></span><br><span class="line"><span class="keyword">end</span> </span><br></pre></td></tr></table></figure>

<h3 id="拖动精灵"><a href="#拖动精灵" class="headerlink" title="拖动精灵"></a>拖动精灵</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> sprite = cc.Sprite:<span class="built_in">create</span>(<span class="string">&quot;&quot;</span>)<span class="comment">--自己随便找个图片试一试</span></span><br><span class="line">    <span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">onTouchBegan</span><span class="params">( touch, event )</span></span></span><br><span class="line">            <span class="keyword">local</span> point = touch:getLocation()      <span class="comment">--获取鼠标坐标</span></span><br><span class="line">            <span class="keyword">local</span> rect = sprite:getBoundingBox()    <span class="comment">--  获取精灵的范围   </span></span><br><span class="line">            <span class="keyword">if</span> (cc.rectContainsPoint(rect,point)) <span class="keyword">then</span>   <span class="comment">--判断鼠标是否在精灵范围内，是触发</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            <span class="comment">--这里必须判断，不然拖动屏幕精灵也会移动</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">onTouchEnded</span><span class="params">( touch, event )</span></span></span><br><span class="line">        <span class="comment">-- body</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">onTouchMoved</span><span class="params">(touch, event)</span></span></span><br><span class="line">        <span class="keyword">local</span> target = sprite  <span class="comment">--获取当前的控件(这里是精灵)</span></span><br><span class="line">        <span class="keyword">local</span> posX,posY = target:getPosition()  <span class="comment">--获取当前的位置</span></span><br><span class="line">        <span class="keyword">local</span> delta = touch:getDelta() <span class="comment">--获取滑动的距离</span></span><br><span class="line">        target:setPosition(cc.p(posX + delta.x, posY + delta.y)) <span class="comment">--给精灵重新设置位置</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">local</span> listener1 = cc.EventListenerTouchOneByOne:<span class="built_in">create</span>()  <span class="comment">--创建一个单点事件监听</span></span><br><span class="line">    listener1:setSwallowTouches(<span class="literal">true</span>)  <span class="comment">--是否向下传递</span></span><br><span class="line">    listener1:registerScriptHandler(onTouchBegan,cc.Handler.EVENT_TOUCH_BEGAN )</span><br><span class="line">    listener1:registerScriptHandler(onTouchMoved,cc.Handler.EVENT_TOUCH_MOVED )</span><br><span class="line">    listener1:registerScriptHandler(onTouchEnded,cc.Handler.EVENT_TOUCH_ENDED )</span><br><span class="line">    <span class="keyword">local</span> eventDispatcher = <span class="built_in">self</span>:getEventDispatcher() </span><br><span class="line">    eventDispatcher:addEventListenerWithSceneGraphPriority(listener1, sprite) <span class="comment">--分发监听事件</span></span><br></pre></td></tr></table></figure>

<h3 id="获取鼠标点击位置"><a href="#获取鼠标点击位置" class="headerlink" title="获取鼠标点击位置"></a>获取鼠标点击位置</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> location = touch:getLocation()   <span class="comment">--获取鼠标的位置</span></span><br><span class="line"><span class="keyword">local</span> event_x = location[<span class="string">&quot;x&quot;</span>] <span class="keyword">or</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">local</span> event_y = location[<span class="string">&quot;y&quot;</span>] <span class="keyword">or</span> <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;event_x = &quot;</span> .. event_x .. <span class="string">&quot;           event_y = &quot;</span> .. event_y)</span><br></pre></td></tr></table></figure>


<h3 id="游戏暂停"><a href="#游戏暂停" class="headerlink" title="游戏暂停"></a>游戏暂停</h3><blockquote>
<p>说明，点击“go”按钮，按钮变成“stop”</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> spriteFrame = cc.SpriteFrameCache:getInstance()</span><br><span class="line">   spriteFrame:addSpriteFrames(<span class="string">&quot;Plist.plist&quot;</span>)</span><br><span class="line">   <span class="keyword">local</span> goSprite = cc.Sprite:createWithSpriteFrameName(<span class="string">&quot;go.png&quot;</span>)</span><br><span class="line">   <span class="keyword">local</span> stopSprite = cc.Sprite:createWithSpriteFrameName(<span class="string">&quot;stop.png&quot;</span>)</span><br><span class="line">   <span class="keyword">local</span> goToggleMenuItem = cc.MenuItemSprite:<span class="built_in">create</span>(goSprite, goSprite)  </span><br><span class="line">   <span class="keyword">local</span> stopToggleMenuItem = cc.MenuItemSprite:<span class="built_in">create</span>(stopSprite,stopSprite)  </span><br><span class="line">   <span class="keyword">local</span> toggleMenuItem = cc.MenuItemToggle:<span class="built_in">create</span>(goToggleMenuItem,stopToggleMenuItem)  </span><br><span class="line">   toggleMenuItem:setPosition(cc.Director:getInstance():convertToGL(cc.p(<span class="number">930</span>,<span class="number">540</span>)))</span><br><span class="line">   <span class="keyword">local</span> a = cc.Menu:<span class="built_in">create</span>(toggleMenuItem)</span><br><span class="line">   a:setPosition(cc.p(<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">   <span class="built_in">self</span>:addChild(a)</span><br></pre></td></tr></table></figure>

<h3 id="滑动条的使用"><a href="#滑动条的使用" class="headerlink" title="滑动条的使用"></a>滑动条的使用</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">self</span>.jindutiao = <span class="built_in">self</span>.root:getChildByName(<span class="string">&#x27;jindutiao&#x27;</span>)</span><br><span class="line"><span class="built_in">self</span>.jindutiao:addEventListener(<span class="function"><span class="keyword">function</span><span class="params">(sender ,eventType)</span></span></span><br><span class="line">    <span class="keyword">local</span> volume = <span class="built_in">self</span>.jindutiao:getPercent()  </span><br><span class="line">    pritn(volume)</span><br><span class="line"><span class="keyword">end</span>)</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getPercent()  --获取滑动条当前值</span><br><span class="line">getMaxPercent()  --获取滑动条最大值</span><br><span class="line">getMinPercent()--获取滑动条最小值</span><br><span class="line">setPercent()  --设置滑动条当前值</span><br><span class="line">setMaxPercent()  --设置滑动条最大值</span><br><span class="line">setMinPercent()--设置滑动条最小值</span><br></pre></td></tr></table></figure>

<h3 id="播放帧动画"><a href="#播放帧动画" class="headerlink" title="播放帧动画"></a>播放帧动画</h3><blockquote>
<p>该方法需要提前cocos studio上将帧动画创建好</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">self</span>.root = cc.CSLoader:createNode(<span class="string">&#x27;game/basketball/Node.csb&#x27;</span>)</span><br><span class="line"><span class="built_in">self</span>.root:move(x,y)</span><br><span class="line"><span class="built_in">self</span>.root:addTo(<span class="built_in">self</span>)</span><br><span class="line">        <span class="keyword">local</span> action = cc.CSLoader:createTimeline(<span class="string">&#x27;game/basketball/Node.csb&#x27;</span>)</span><br><span class="line">        <span class="built_in">self</span>.root:runAction(action)</span><br><span class="line">        action:pause()</span><br><span class="line">        action:clearFrameEventCallFunc()</span><br><span class="line">        action:gotoFrameAndPlay(<span class="number">0</span>,<span class="number">20</span>,<span class="literal">false</span>)</span><br><span class="line">        <span class="comment">--从第0帧播放到20帧，直播一次</span></span><br></pre></td></tr></table></figure>

<h3 id="求夹角"><a href="#求夹角" class="headerlink" title="求夹角"></a>求夹角</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">local</span> p1 = &#123;x = x1 , y = y1&#125;</span><br><span class="line">    <span class="keyword">local</span> p2 = &#123;x = x2 , y = y2 &#125;</span><br><span class="line">    <span class="built_in">self</span>:getAngleByPos(p1,p2)</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">GameScene:getAngleByPos</span><span class="params">(p1,p2)</span></span></span><br><span class="line">    <span class="keyword">local</span> p = &#123;&#125;</span><br><span class="line">    p.x = p2.x - p1.x</span><br><span class="line">    p.y = p2.y - p1.y</span><br><span class="line">    <span class="keyword">local</span> r = <span class="built_in">math</span>.<span class="built_in">atan2</span>(p.y , p.x) * <span class="number">180</span>/<span class="built_in">math</span>.<span class="built_in">pi</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;夹角为：&quot;</span> .. r)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="画二次贝塞尔曲线"><a href="#画二次贝塞尔曲线" class="headerlink" title="画二次贝塞尔曲线"></a>画二次贝塞尔曲线</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GameScene:testBezier</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">self</span>.drawNode <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">self</span>.drawNode = cc.DrawNode:<span class="built_in">create</span>(). <span class="comment">--创建节点</span></span><br><span class="line">        <span class="built_in">self</span>:addChild(<span class="built_in">self</span>.drawNode)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">self</span>.drawNode:clear()     <span class="comment">--删除节点</span></span><br><span class="line">    <span class="built_in">self</span>.drawNode:drawQuadBezier(cc.p(<span class="built_in">self</span>.xp0,<span class="built_in">self</span>.yp0),cc.p(<span class="built_in">self</span>.xp1,<span class="built_in">self</span>.yp1),cc.p(<span class="built_in">self</span>.xp2,<span class="built_in">self</span>.yp2),<span class="number">1000</span>,cc.c4f(<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>))</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--p0,p1,p2 分别为曲线起点，控制点，终点</span></span><br></pre></td></tr></table></figure>

<h3 id="精灵的运动"><a href="#精灵的运动" class="headerlink" title="精灵的运动"></a>精灵的运动</h3><h4 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h4><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">self</span>.sprite:runAction(cc.RepeatForever:<span class="built_in">create</span>(cc.RotateBy:<span class="built_in">create</span>(<span class="number">1</span>,<span class="number">360</span>))) <span class="comment">--以锚点为中心不停的旋转，速度为每秒中360度</span></span><br></pre></td></tr></table></figure>

<h4 id="直线运动"><a href="#直线运动" class="headerlink" title="直线运动"></a>直线运动</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">self:runAction(cc.MoveTo:create(time,cc.p(x , y)))</span><br><span class="line">self:runAction(cc.MoveBy:create(time,cc.p(x , y)))</span><br><span class="line">--To移动到指定位置</span><br><span class="line">--By移动到相对位置</span><br></pre></td></tr></table></figure>
<h4 id="跳跃运动"><a href="#跳跃运动" class="headerlink" title="跳跃运动"></a>跳跃运动</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">self:runAction(cc.JumpTo:create(time,cc.p(x , y),a,b))</span><br><span class="line">self:runAction(cc.JumpBy:create(time,cc.p(x , y),a,b))</span><br><span class="line">--参数time表示时间，a表示最高点，b表示跳跃次数</span><br></pre></td></tr></table></figure>
<h4 id="停止运动"><a href="#停止运动" class="headerlink" title="停止运动"></a>停止运动</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">self:stopAllActions()</span><br></pre></td></tr></table></figure>
<h4 id="按顺序运动"><a href="#按顺序运动" class="headerlink" title="按顺序运动"></a>按顺序运动</h4><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> run1 = <span class="built_in">self</span>:runAction(cc.RotateTo:<span class="built_in">create</span>(<span class="number">1</span>,<span class="number">-80</span>))</span><br><span class="line">    <span class="keyword">local</span> run2 = <span class="built_in">self</span>:runAction(cc.RotateTo:<span class="built_in">create</span>(<span class="number">1</span>,<span class="number">80</span>))</span><br><span class="line">    <span class="keyword">local</span> delay = cc.DelayTime:<span class="built_in">create</span>(<span class="number">0.01</span>)</span><br><span class="line">  	<span class="built_in">self</span>:runAction(cc.RepeatForever:<span class="built_in">create</span>(cc.Sequence:<span class="built_in">create</span>(run1,delay,run2,delay)))</span><br></pre></td></tr></table></figure>

<h4 id="渐入渐出"><a href="#渐入渐出" class="headerlink" title="渐入渐出"></a>渐入渐出</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">self:runAction(cc.FadeIn:create(<span class="number">0.1</span>)) -- 渐入</span><br><span class="line">self:runAction(cc.FadeOut:create(<span class="number">0.1</span>)) --渐出</span><br></pre></td></tr></table></figure>

<h4 id="放大缩小"><a href="#放大缩小" class="headerlink" title="放大缩小"></a>放大缩小</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">self:runAction(cc.ScaleTo:create(<span class="number">0.5</span>,<span class="number">1</span>)) --放大，参数：时间和缩放尺寸</span><br><span class="line">self:runAction(cc.ScaleTo:create(<span class="number">0.2</span>,<span class="number">0.6</span>)) --缩小</span><br></pre></td></tr></table></figure>

<h3 id="画直线"><a href="#画直线" class="headerlink" title="画直线"></a>画直线</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">self.Yg_DrawNode = cc.DrawNode:create()</span><br><span class="line">self:addChild(self.Yg_DrawNode)</span><br><span class="line">self.Yg_DrawNode:drawLine(cc.p(qidian_x,qidian_y),cc.p(zhongdian_x ,zhongdian_y),cc.c4f(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">5</span>)) --参数 起点坐标，终点坐标，线条的颜色</span><br></pre></td></tr></table></figure>

<h3 id="游戏暂停、继续"><a href="#游戏暂停、继续" class="headerlink" title="游戏暂停、继续"></a>游戏暂停、继续</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">CCDirector.sharedDirector():pause() --游戏暂停</span><br><span class="line">CCDirector.sharedDirector():resume() --游戏继续</span><br></pre></td></tr></table></figure>

<h3 id="两个矩形的碰撞"><a href="#两个矩形的碰撞" class="headerlink" title="两个矩形的碰撞"></a>两个矩形的碰撞</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">local juxingA = A:getBoundingBox()</span><br><span class="line">local juxingB = B:getBoundingBox()</span><br><span class="line"><span class="keyword">if</span> (cc.rectIntersectsRect(juxingA,juxingB))then</span><br><span class="line">        print(<span class="string">&quot;撞到了&quot;</span>)</span><br><span class="line">    end</span><br></pre></td></tr></table></figure>

<h3 id="点是否在矩形内"><a href="#点是否在矩形内" class="headerlink" title="点是否在矩形内"></a>点是否在矩形内</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">local juxingA = A:getBoundingBox()</span><br><span class="line">local Point = &#123;x = x1, y = y1&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cc.rectContainsPoint(juxingA,Point)) then</span><br><span class="line">        print(<span class="string">&quot;撞到了&quot;</span>)</span><br><span class="line">    end</span><br></pre></td></tr></table></figure>

<h3 id="解析json数据"><a href="#解析json数据" class="headerlink" title="解析json数据"></a>解析json数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在文件中添加下面语句</span><br><span class="line">local json = cc.load(<span class="string">&quot;tools&quot;</span>).json</span><br></pre></td></tr></table></figure>
<h3 id="背景音乐与音效"><a href="#背景音乐与音效" class="headerlink" title="背景音乐与音效"></a>背景音乐与音效</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">AudioEngine.playMuisc(“bg.mp2”, true)      --播放背景音乐，第二个参数为true表示循环播放，默认情况下为false</span><br><span class="line">AudioEngine.stopMusic()                    --停止播放背景音乐</span><br><span class="line"></span><br><span class="line">AudioEngine.pauseMusic()                   --暂停播放背景音乐</span><br><span class="line"></span><br><span class="line">AudioEngine.resumeMusic()                  --恢复播放背景音乐</span><br><span class="line"></span><br><span class="line">AudioEngine.isMusicPlaying()               --判断背景音乐是否播放</span><br><span class="line"></span><br><span class="line">AudioEngine.preloadEffect(“effect.mp3”)    --预加载音效</span><br><span class="line"></span><br><span class="line">AudioEngine.playEffect(“effect.mp3”)       --播放音效</span><br><span class="line"></span><br><span class="line">AudioEngine.pauseEffect(<span class="built_in">id</span>)                --暂停播放音效，<span class="built_in">id</span>是playEffect返回的参数</span><br><span class="line"></span><br><span class="line">AudioEngine.pauseAllEffect()               --暂停所有音效的播放</span><br><span class="line"></span><br><span class="line">AudioEngine.resumeEffect(<span class="built_in">id</span>)               --继续播放某个音效</span><br><span class="line"></span><br><span class="line">AudioEngine.resumeAllEffect()              --继续播放所有音效</span><br><span class="line"></span><br><span class="line">AudioEngine.stopEffect(<span class="built_in">id</span>)                 --停止播放某一音效</span><br><span class="line"></span><br><span class="line">AudioEngine.stopAllEffect()                --停止所有音效播放</span><br><span class="line"></span><br><span class="line">AudioEngine.setMusicVolume(<span class="number">0.5</span>)            --设置背景音乐音量</span><br><span class="line"></span><br><span class="line">AudioEngine.setEffectsVolume(<span class="number">0.5</span>)          --设置音效音量</span><br><span class="line"></span><br><span class="line">AudioEngine.getMusicVolume()               --获得背景音乐音量</span><br><span class="line"></span><br><span class="line">AudioEngine.getEffectsVolume()             --获得音效音量</span><br></pre></td></tr></table></figure>
<h3 id="容器添加点击事件"><a href="#容器添加点击事件" class="headerlink" title="容器添加点击事件"></a>容器添加点击事件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Panel:addTouchEventListener(function(sender,eventType)</span><br><span class="line">    <span class="keyword">if</span> <span class="number">2</span> == eventType then</span><br><span class="line">    end</span><br><span class="line">end)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>游戏开发</category>
      </categories>
      <tags>
        <tag>Lua</tag>
        <tag>cocos2dx</tag>
      </tags>
  </entry>
  <entry>
    <title>cocos2dx-Lua中Label文本超过特定长度使用...代替</title>
    <url>/12275.html</url>
    <content><![CDATA[<p>开发环境：cocos2dx 3.17<br>开发语言：lua<br>我们在开发过程中，经常会遇到字符串过长，显示的时候超出范围，我们可以用<code>...</code>来代替字符串后面的内容。</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>代码：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStrByLen</span><span class="params">(str, len)</span></span></span><br><span class="line">    <span class="keyword">if</span> str == <span class="literal">nil</span> <span class="keyword">or</span> <span class="built_in">len</span> == <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">local</span> limitStr = str </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">string</span>.<span class="built_in">len</span>(limitStr) &gt; <span class="built_in">len</span>) <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> sName = SubUTF8String(limitStr , <span class="built_in">len</span>)</span><br><span class="line">        <span class="keyword">return</span> sName..<span class="string">&quot;...&quot;</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> limitStr</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>游戏开发</category>
      </categories>
      <tags>
        <tag>Lua</tag>
        <tag>cocos2dx</tag>
      </tags>
  </entry>
  <entry>
    <title>cocos2dx-Lua分割字符串</title>
    <url>/5b9b2fa4.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>我们在使用cocos2dx开发过程中经常会使用指定分隔符来分割字符串，并返回包含分割结果的数组，这里就介绍一种比较常用的方法</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--------------------------------</span></span><br><span class="line"><span class="comment">-- 用指定字符或字符串分割输入字符串，返回包含分割结果的数组</span></span><br><span class="line"><span class="comment">-- @function [parent=#string] split</span></span><br><span class="line"><span class="comment">-- @param string input 输入字符串</span></span><br><span class="line"><span class="comment">-- @param string delimiter 分割标记字符或字符串</span></span><br><span class="line"><span class="comment">-- @return array#array  包含分割结果的数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--[[--</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">用指定字符或字符串分割输入字符串，返回包含分割结果的数组</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">local input = &quot;Hello,World&quot;</span></span><br><span class="line"><span class="comment">local res = string.split(input, &quot;,&quot;)</span></span><br><span class="line"><span class="comment">-- res = &#123;&quot;Hello&quot;, &quot;World&quot;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">local input = &quot;Hello-+-World-+-Quick&quot;</span></span><br><span class="line"><span class="comment">local res = string.split(input, &quot;-+-&quot;)</span></span><br><span class="line"><span class="comment">-- res = &#123;&quot;Hello&quot;, &quot;World&quot;, &quot;Quick&quot;&#125;</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">string.split</span><span class="params">(input, delimiter)</span></span></span><br><span class="line">    <span class="built_in">input</span> = <span class="built_in">tostring</span>(<span class="built_in">input</span>)</span><br><span class="line">    delimiter = <span class="built_in">tostring</span>(delimiter)</span><br><span class="line">    <span class="keyword">if</span> (delimiter == <span class="string">&#x27;&#x27;</span>) <span class="keyword">then</span> <span class="keyword">return</span> <span class="literal">false</span> <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">local</span> pos, arr = <span class="number">0</span>, &#123;&#125;</span><br><span class="line">    <span class="comment">-- for each divider found</span></span><br><span class="line">    <span class="keyword">for</span> st, sp <span class="keyword">in</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span> <span class="keyword">return</span> <span class="built_in">string</span>.<span class="built_in">find</span>(<span class="built_in">input</span>, delimiter, pos, <span class="literal">true</span>) <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">table</span>.<span class="built_in">insert</span>(arr, <span class="built_in">string</span>.<span class="built_in">sub</span>(<span class="built_in">input</span>, pos, st - <span class="number">1</span>))</span><br><span class="line">        pos = sp + <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">table</span>.<span class="built_in">insert</span>(arr, <span class="built_in">string</span>.<span class="built_in">sub</span>(<span class="built_in">input</span>, pos))</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>游戏开发</category>
      </categories>
      <tags>
        <tag>cocos2dx</tag>
        <tag>lua</tag>
      </tags>
  </entry>
  <entry>
    <title>cocos2dx-Lua角度与弧度的转换</title>
    <url>/bb43a614.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>在游戏开发过程中，很多地方都需要用到一个角度和弧度的计算，见代码</p>
<h3 id="角度转弧度"><a href="#角度转弧度" class="headerlink" title="角度转弧度"></a>角度转弧度</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- @function [parent=#math] angle2radian</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">math.angle2radian</span><span class="params">(angle)</span></span></span><br><span class="line">    <span class="keyword">return</span> angle * <span class="built_in">math</span>.<span class="built_in">pi</span> / <span class="number">180</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="弧度转角度"><a href="#弧度转角度" class="headerlink" title="弧度转角度"></a>弧度转角度</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- @function [parent=#math] radian2angle</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">math.radian2angle</span><span class="params">(radian)</span></span></span><br><span class="line">    <span class="keyword">return</span> radian / <span class="built_in">math</span>.<span class="built_in">pi</span> * <span class="number">180</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>游戏开发</category>
      </categories>
      <tags>
        <tag>cocos2dx</tag>
        <tag>lua</tag>
      </tags>
  </entry>
  <entry>
    <title>cocos2dx-lua_ProgressTimer创建扇形进度条</title>
    <url>/18736.html</url>
    <content><![CDATA[<p>开发环境：cocos2dx 3.17<br>开发语言：lua<br>我们在开发游戏的时候经常会用到扇形进度条。比如：技能CD</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>下面直接上代码吧</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">skillCD</span><span class="params">()</span></span></span><br><span class="line">	<span class="keyword">local</span> loading = cc.Sprite:<span class="built_in">create</span>(<span class="string">&#x27;skill.png&#x27;</span>) <span class="comment">-- 先创建一个精灵</span></span><br><span class="line">    <span class="keyword">local</span> progress = cc.ProgressTimer:<span class="built_in">create</span>(loading)</span><br><span class="line">    progress:setMidpoint(cc.p(<span class="number">0.5</span>, <span class="number">0.5</span>))</span><br><span class="line">    progress:setType(cc.PROGRESS_TIMER_TYPE_RADIAL)</span><br><span class="line">    progress:setReverseDirection(<span class="literal">true</span>) <span class="comment">-- true为逆时针，false为顺时针</span></span><br><span class="line">    <span class="built_in">self</span>:addChild(progress)</span><br><span class="line">    progress:setPercentage(<span class="number">100</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>游戏开发</category>
      </categories>
      <tags>
        <tag>Lua</tag>
        <tag>cocos2dx</tag>
      </tags>
  </entry>
  <entry>
    <title>cocos2dx-lua中Label文本设置自动换行</title>
    <url>/27430.html</url>
    <content><![CDATA[<p>开发环境：cocos2dx 3.17<br>开发语言：lua<br>我们在开发过程中，经常会遇到字符串过长，显示的时候超出范围，这时我们可以设置Label自动换行</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FunSetLinefeed</span><span class="params">( strText, nLineWidth )</span></span>		<span class="comment">--文本，行宽</span></span><br><span class="line">	<span class="comment">--读取每个字符做中文英文判断，并且记录大小</span></span><br><span class="line">	<span class="keyword">local</span> nStep = <span class="number">1</span></span><br><span class="line">	<span class="keyword">local</span> index = <span class="number">1</span></span><br><span class="line">	<span class="keyword">local</span> ltabTextSize = &#123;&#125;</span><br><span class="line">	<span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line">		c = <span class="built_in">string</span>.<span class="built_in">sub</span>(strText, nStep, nStep)</span><br><span class="line">		b = <span class="built_in">string</span>.<span class="built_in">byte</span>(c)</span><br><span class="line"> </span><br><span class="line">		<span class="keyword">if</span> b &gt; <span class="number">128</span> <span class="keyword">then</span></span><br><span class="line">			ltabTextSize[index] = <span class="number">3</span></span><br><span class="line">			nStep = nStep + <span class="number">3</span></span><br><span class="line">			index = index + <span class="number">1</span></span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			ltabTextSize[index] = <span class="number">1</span></span><br><span class="line">			nStep = nStep + <span class="number">1</span></span><br><span class="line">			index = index + <span class="number">1</span></span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line">		<span class="keyword">if</span> nStep &gt; #strText <span class="keyword">then</span></span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">--将字符按照限定行宽进行分组</span></span><br><span class="line">	<span class="keyword">local</span> nLineCount = <span class="number">1</span></span><br><span class="line">	<span class="keyword">local</span> nBeginPos = <span class="number">1</span></span><br><span class="line">	<span class="keyword">local</span> lptrCurText = <span class="literal">nil</span></span><br><span class="line">	<span class="keyword">local</span> ltabText = &#123;&#125;</span><br><span class="line">	<span class="keyword">local</span> nCurSize = <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i = <span class="number">1</span>, index - <span class="number">1</span> <span class="keyword">do</span></span><br><span class="line">		nCurSize = nCurSize + ltabTextSize[i]</span><br><span class="line">		<span class="keyword">if</span> nCurSize &gt; nLineWidth <span class="keyword">and</span> nLineCount&lt; <span class="built_in">math</span>.<span class="built_in">ceil</span>(#strText/nLineWidth) <span class="keyword">then</span></span><br><span class="line">			nCurSize = nCurSize - ltabTextSize[i]</span><br><span class="line">			ltabText[nLineCount] = <span class="built_in">string</span>.<span class="built_in">sub</span>( strText, nBeginPos, nBeginPos + nCurSize - <span class="number">1</span> )</span><br><span class="line">			nBeginPos = nBeginPos + nCurSize</span><br><span class="line">			nCurSize = ltabTextSize[i]</span><br><span class="line">			nLineCount = nLineCount + <span class="number">1</span></span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">        <span class="keyword">if</span> nLineCount == <span class="built_in">math</span>.<span class="built_in">ceil</span>(#strText/nLineWidth) <span class="keyword">then</span></span><br><span class="line">			ltabText[nLineCount] = <span class="built_in">string</span>.<span class="built_in">sub</span>( strText, nBeginPos, #strText)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	<span class="comment">-- for i = 1, nLineCount - 1 do </span></span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span>, nLineCount  <span class="keyword">do</span> </span><br><span class="line">		<span class="keyword">if</span> lptrCurText == <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">			lptrCurText = ltabText[i]</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			lptrCurText = lptrCurText .. <span class="string">&quot;\n&quot;</span> .. ltabText[i]</span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">return</span> lptrCurText</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>游戏开发</category>
      </categories>
      <tags>
        <tag>Lua</tag>
        <tag>cocos2dx</tag>
      </tags>
  </entry>
  <entry>
    <title>ccocos2dx-lua使用schedule定时器</title>
    <url>/38089.html</url>
    <content><![CDATA[<p>开发环境：cocos2dx 3.17<br>开发语言：lua<br>定时器在游戏开发中必不可少，下面简单介绍下定时器在cocos2dx-lua中的一种用法</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> scheduler = <span class="built_in">require</span>(<span class="string">&quot;framework.scheduler&quot;</span>) </span><br><span class="line"><span class="keyword">local</span> handler = scheduler.scheduleGlobal(<span class="function"><span class="keyword">function</span><span class="params">()</span></span> </span><br><span class="line">        <span class="comment">-- 想做的事情   </span></span><br><span class="line"><span class="keyword">end</span>,</span><br><span class="line"><span class="number">0.2</span>) <span class="comment">-- 调用间隔</span></span><br></pre></td></tr></table></figure>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">scheduler.unscheduleGlobal(handler) <span class="comment">-- 取消定时器</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>游戏开发</category>
      </categories>
      <tags>
        <tag>Lua</tag>
        <tag>cocos2dx</tag>
      </tags>
  </entry>
  <entry>
    <title>cocos2dx-lua各种容器的使用</title>
    <url>/62614.html</url>
    <content><![CDATA[<p>在cocos2dx-lua开发中，经常用到容器。下面就介绍在开发中会用到的4种容器：ListView,scrollView,tableView,pageView</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h3 id="1-ListView-（列表容器）使用"><a href="#1-ListView-（列表容器）使用" class="headerlink" title="1. ListView （列表容器）使用"></a>1. ListView （列表容器）使用</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> MainScene = class(<span class="string">&quot;MainScene&quot;</span>, cc.<span class="built_in">load</span>(<span class="string">&quot;mvc&quot;</span>).ViewBase)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MainScene:onCreate</span><span class="params">()</span></span></span><br><span class="line">    <span class="comment">-- 测试ListView</span></span><br><span class="line">    <span class="comment">--[[</span></span><br><span class="line"><span class="comment">    注: 1.子节点如果是RichText，或是文本信息。</span></span><br><span class="line"><span class="comment">      设置setVerticalSpace()，高度间隔。adjustToRealHeight(),自适应高度。</span></span><br><span class="line"><span class="comment">        2.设置子节点的锚点信息，否则 高度不对称</span></span><br><span class="line"><span class="comment">    ]]</span><span class="comment">--</span></span><br><span class="line"> </span><br><span class="line">    <span class="built_in">self</span>.listView = ccui.ListView:<span class="built_in">create</span>();  </span><br><span class="line">    <span class="built_in">self</span>.listView:setPosition(cc.p(<span class="number">10</span>, <span class="number">10</span>));  </span><br><span class="line">    <span class="built_in">self</span>.listView:setContentSize(cc.size(<span class="number">1116</span>, <span class="number">550</span>));  </span><br><span class="line">    <span class="built_in">self</span>.listView:setDirection(cc.SCROLLVIEW_DIRECTION_VERTICAL);  </span><br><span class="line">    <span class="built_in">self</span>.listView:setBounceEnabled(<span class="literal">true</span>);  </span><br><span class="line">    <span class="built_in">self</span>.listView:setItemsMargin(<span class="number">20</span>)  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">4</span> <span class="keyword">do</span>  </span><br><span class="line">        <span class="keyword">local</span> layout = ccui.Layout:<span class="built_in">create</span>();  </span><br><span class="line">        layout:setContentSize(cc.size(<span class="number">1116</span>, <span class="number">209</span>));  </span><br><span class="line">        layout:setBackGroundColorType(ccui.LayoutBackGroundColorType.solid);  </span><br><span class="line">        layout:setBackGroundColor(cc.c3b(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>));  </span><br><span class="line">  </span><br><span class="line">        <span class="built_in">self</span>.listView:pushBackCustomItem(layout);  </span><br><span class="line">    <span class="keyword">end</span>  </span><br><span class="line">    <span class="built_in">self</span>:addChild(<span class="built_in">self</span>.listView); </span><br><span class="line"> </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> MainScene</span><br></pre></td></tr></table></figure>
<h3 id="2-scrollView-（滚动容器）使用"><a href="#2-scrollView-（滚动容器）使用" class="headerlink" title="2. scrollView （滚动容器）使用"></a>2. scrollView （滚动容器）使用</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> MainScene = class(<span class="string">&quot;MainScene&quot;</span>, cc.<span class="built_in">load</span>(<span class="string">&quot;mvc&quot;</span>).ViewBase)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MainScene:onCreate</span><span class="params">()</span></span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">-- 测试 scrollView</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">local</span> scrollView = cc.ScrollView:<span class="built_in">create</span>()</span><br><span class="line">    <span class="keyword">local</span> layerColor = cc.LayerColor:<span class="built_in">create</span>(cc.c4b(<span class="number">100</span>, <span class="number">100</span>,<span class="number">100</span>, <span class="number">100</span>), <span class="number">700</span>, <span class="number">600</span>)</span><br><span class="line">    scrollView:setViewSize(cc.size(<span class="number">700</span>, <span class="number">300</span>))</span><br><span class="line">    scrollView:setContainer(layerColor)</span><br><span class="line">    layerColor:setPosition(cc.p(<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    scrollView:setPosition(cc.p(<span class="number">50</span>, <span class="number">50</span>))</span><br><span class="line">    <span class="built_in">self</span>:addChild(scrollView)</span><br><span class="line">    scrollView:setDirection(cc.SCROLLVIEW_DIRECTION_VERTICAL)<span class="comment">--垂直滚动</span></span><br><span class="line">    scrollView:setBounceEnabled(<span class="literal">true</span>)</span><br><span class="line">    scrollView:setDelegate()</span><br><span class="line">    scrollView:registerScriptHandler(handler(<span class="built_in">self</span>, <span class="built_in">self</span>.scrollViewDidZoom)  ,cc.SCROLLVIEW_SCRIPT_ZOOM)</span><br><span class="line">    scrollView:registerScriptHandler(handler(<span class="built_in">self</span>, <span class="built_in">self</span>.scrollViewDidScroll) ,cc.SCROLLVIEW_SCRIPT_SCROLL)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">6</span> <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">local</span> strFmt = <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;num %d&quot;</span>, i)</span><br><span class="line">        <span class="keyword">local</span> label = cc.Label:createWithSystemFont(strFmt, <span class="string">&quot;Arial&quot;</span>, <span class="number">32</span>)</span><br><span class="line">        label:setColor(cc.c3b(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        label:setPosition(cc.p(<span class="number">350</span>, <span class="number">600</span>-i*<span class="number">100</span>+<span class="number">50</span>))</span><br><span class="line">        layerColor:addChild(label)</span><br><span class="line">    <span class="keyword">end</span>    </span><br><span class="line"> </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MainScene:scrollViewDidZoom</span><span class="params">()</span></span></span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;ScrollViewDidZoom&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MainScene:scrollViewDidScroll</span><span class="params">()</span></span></span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;ScrollViewDidScroll&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> MainScene</span><br></pre></td></tr></table></figure>
<h3 id="tableView-使用"><a href="#tableView-使用" class="headerlink" title="tableView 使用"></a>tableView 使用</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">local</span> MainScene = class(<span class="string">&quot;MainScene&quot;</span>, cc.<span class="built_in">load</span>(<span class="string">&quot;mvc&quot;</span>).ViewBase)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MainScene:onCreate</span><span class="params">()</span></span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">-- 测试tableView2</span></span><br><span class="line">    <span class="built_in">self</span>.tableView2 = cc.TableView:<span class="built_in">create</span>(cc.size(<span class="number">200</span>, <span class="number">200</span>))</span><br><span class="line">    <span class="built_in">self</span>.tableView2:setDirection(cc.SCROLLVIEW_DIRECTION_HORIZONTAL)</span><br><span class="line">    <span class="built_in">self</span>.tableView2:setPosition(cc.p(<span class="number">200</span>, <span class="number">200</span>))</span><br><span class="line">    <span class="built_in">self</span>.tableView2:setDelegate()</span><br><span class="line">    <span class="built_in">self</span>:addChild(<span class="built_in">self</span>.tableView2)</span><br><span class="line">    <span class="built_in">self</span>.tableView2:registerScriptHandler(handler(<span class="built_in">self</span>, <span class="built_in">self</span>.scrollViewDidScroll) , cc.SCROLLVIEW_SCRIPT_SCROLL)</span><br><span class="line">    <span class="built_in">self</span>.tableView2:registerScriptHandler(handler(<span class="built_in">self</span>, <span class="built_in">self</span>.scrollViewDidZoom) , cc.SCROLLVIEW_SCRIPT_ZOOM)</span><br><span class="line">    <span class="built_in">self</span>.tableView2:registerScriptHandler(handler(<span class="built_in">self</span>, <span class="built_in">self</span>.tableCellTouched) , cc.TABLECELL_TOUCHED)</span><br><span class="line">    <span class="built_in">self</span>.tableView2:registerScriptHandler(handler(<span class="built_in">self</span>, <span class="built_in">self</span>.cellSizeForTable) , cc.TABLECELL_SIZE_FOR_INDEX)</span><br><span class="line">    <span class="built_in">self</span>.tableView2:registerScriptHandler(handler(<span class="built_in">self</span>, <span class="built_in">self</span>.tableCellAtIndex) , cc.TABLECELL_SIZE_AT_INDEX)</span><br><span class="line">    <span class="built_in">self</span>.tableView2:registerScriptHandler(handler(<span class="built_in">self</span>, <span class="built_in">self</span>.numberOfCellsInTableView) , cc.NUMBER_OF_CELLS_IN_TABLEVIEW)</span><br><span class="line">    <span class="built_in">self</span>.tableView2:reloadData()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MainScene:scrollViewDidScroll</span><span class="params">(view)</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ScrollViewDidScroll&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MainScene:scrollViewDidZoom</span><span class="params">(view)</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ScrollViewDidZoom&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MainScene:tableCellTouched</span><span class="params">(table, cell)</span></span></span><br><span class="line">    <span class="keyword">if</span> <span class="literal">nil</span> == cell <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;cell touched at index: &quot;</span>..cell:getIdx())</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MainScene:cellSizeForTable</span><span class="params">(table, idx)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">60</span>, <span class="number">60</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MainScene:tableCellAtIndex</span><span class="params">(table, idx)</span></span></span><br><span class="line">    <span class="keyword">local</span> strValue = <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%d&quot;</span>, idx)</span><br><span class="line">    <span class="keyword">local</span> cell = <span class="built_in">table</span>:dequeueCell()</span><br><span class="line">    <span class="keyword">local</span> label = <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">if</span> <span class="literal">nil</span> == cell <span class="keyword">then</span></span><br><span class="line">        cell = cc.TableViewCell:<span class="built_in">create</span>()</span><br><span class="line">        label = cc.Label:createWithSystemFont(strValue, <span class="string">&quot;Arial&quot;</span>, <span class="number">32</span>)</span><br><span class="line">        label:setPosition(cc.p(<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        label:setAnchorPoint(cc.p(<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        cell:addChild(label)</span><br><span class="line">        label:setTag(<span class="number">123</span>)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        label = cell:getChildByTag(<span class="number">123</span>)</span><br><span class="line">        <span class="keyword">if</span> label ~= <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">            label:setString(strValue)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> cell</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MainScene:numberOfCellsInTableView</span><span class="params">(table)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">20</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> MainScene</span><br></pre></td></tr></table></figure>
<h3 id="4-pageView（翻页容器）-使用"><a href="#4-pageView（翻页容器）-使用" class="headerlink" title="4. pageView（翻页容器） 使用"></a>4. pageView（翻页容器） 使用</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> MainScene = class(<span class="string">&quot;MainScene&quot;</span>, cc.<span class="built_in">load</span>(<span class="string">&quot;mvc&quot;</span>).ViewBase)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MainScene:onCreate</span><span class="params">()</span></span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">-- 测试 pageView</span></span><br><span class="line">    <span class="keyword">local</span> pageView = ccui.PageView:<span class="built_in">create</span>()</span><br><span class="line">    <span class="comment">--设置pageView长宽</span></span><br><span class="line">    pageView:setContentSize(<span class="number">600</span>,<span class="number">600</span>)</span><br><span class="line">    <span class="comment">--设置是否响应触摸事件</span></span><br><span class="line">    pageView:setTouchEnabled(<span class="literal">true</span>)</span><br><span class="line">    <span class="comment">--设置锚点</span></span><br><span class="line">    pageView:setAnchorPoint(cc.p(<span class="number">0.5</span>,<span class="number">0.5</span>))</span><br><span class="line">    <span class="comment">--设置位置在中心位置</span></span><br><span class="line">    pageView:setPosition(display.center)</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">for</span> i=<span class="number">1</span>,<span class="number">5</span> <span class="keyword">do</span></span><br><span class="line">        <span class="comment">---然后layout，每个layout保存一个page</span></span><br><span class="line">        <span class="keyword">local</span> layout = ccui.Layout:<span class="built_in">create</span>()</span><br><span class="line">        <span class="comment">--为了演示这里做个小图片</span></span><br><span class="line">        layout:setContentSize(<span class="number">600</span>,<span class="number">600</span>)</span><br><span class="line">        layout:setPosition(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">        <span class="comment">--创建一个button</span></span><br><span class="line">        <span class="keyword">local</span> btn= ccui.Button:<span class="built_in">create</span>(<span class="string">&quot;bt_qd.png&quot;</span>,<span class="string">&quot;bt_qd_h.png&quot;</span>,<span class="string">&quot;bt_qd.png&quot;</span>):setPosition(<span class="number">300</span>,<span class="number">300</span>)</span><br><span class="line">        layout:addChild(btn)</span><br><span class="line">        pageView:addChild(layout)<span class="comment">---一个layout 为一个page内容   page:addPage(layout)</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="comment">--添加pageView 到场景中</span></span><br><span class="line">    <span class="built_in">self</span>:addChild(pageView)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">--添加事件响应</span></span><br><span class="line">    pageView:addEventListener(handler(<span class="built_in">self</span>, <span class="built_in">self</span>.onEvent))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">--事件响应方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MainScene:onEvent</span><span class="params">(sender,event)</span></span></span><br><span class="line">    <span class="keyword">if</span> event == ccui.PageViewEventType.turning <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> pageNum = sender:getCurrentPageIndex()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;is turning,this PageNum:&quot;</span>..pageNum)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> MainScene</span><br></pre></td></tr></table></figure>
<blockquote>
<p>以上就是cocos2dx中用到的四种容器</p>
</blockquote>
]]></content>
      <categories>
        <category>游戏开发</category>
      </categories>
      <tags>
        <tag>Lua</tag>
        <tag>cocos2dx</tag>
      </tags>
  </entry>
  <entry>
    <title>cocos2dx-lua安卓跳转到facebook</title>
    <url>/761caebd.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>最近产品提出一个需求，需要在游戏中能够跳转到<code>facebook</code>中打开我们的游戏主页。当时也没有多想，直接就用<code>device.openURL()</code>来打开产品发过来的链接。</p>
<p>然后今天测试的时候就发现了问题，点击<code>facebook</code>按钮无法跳转到facebook 应用，只能打开网页。在网上查了好久的资料，才发现是因为facebook的SDK升级后导致的。</p>
<p>下面说下我的做法，是能够完成产品要求的。当然，涉及到<code>Lua</code>和<code>Java</code>的交互<br>Lua代码：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AppInfo.openFacebook</span><span class="params">(name)</span></span></span><br><span class="line">    <span class="keyword">local</span> <span class="built_in">os</span> = device.platform</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">os</span> == <span class="string">&quot;android&quot;</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> sig = <span class="string">&quot;(Ljava/lang/String;)V&quot;</span></span><br><span class="line">        <span class="keyword">local</span> args = &#123;name&#125;</span><br><span class="line">        luaj.callStaticMethod(AppInfo.JAVA_CLASSNAME, <span class="string">&quot;openFacebook&quot;</span>, args, sig)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>java代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">openFacebook</span><span class="params">(<span class="keyword">final</span> String name)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        GameConfig.appContext.getPackageManager().getPackageInfo(<span class="string">&quot;com.facebook.katana&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        GameConfig.appContext.startActivity(<span class="keyword">new</span> <span class="title class_">Intent</span>(Intent.ACTION_VIEW, Uri.parse(<span class="string">&quot;fb://page/&quot;</span> + facebookId)));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        GameConfig.appContext.startActivity(<span class="keyword">new</span> <span class="title class_">Intent</span>(Intent.ACTION_VIEW, Uri.parse(<span class="string">&quot;https://www.facebook.com/&quot;</span> + name)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Lua与Java详细的交互就不贴出来了~</p>
]]></content>
      <categories>
        <category>游戏开发</category>
      </categories>
      <tags>
        <tag>Lua</tag>
        <tag>java</tag>
        <tag>facebook</tag>
        <tag>cocos2dx</tag>
      </tags>
  </entry>
  <entry>
    <title>cocos2dx-lua对图片进行九宫格缩放</title>
    <url>/63240.html</url>
    <content><![CDATA[<p>开发环境：cocos2dx 3.17<br>开发语言：lua<br>我们在使用cocos 2dx进行开发的时候，经常要对图片进行缩放。如果是一个单独的图片，对其进行常规的缩放是没什么问题的。但是图片是一个父节点，它下面还有其他的子节点，那么直接对这个图片进行缩放，就会影响到它的子节点。这个时候我们就可以对这张图片进行九宫格缩放。而且可以最大化的节省纹理资源，任意缩放图片还能保持一个不错的效果。</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>创建并返回一个 Sprite9Scale 显示对象。</p>
<p>格式：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">sprite = display.newScale9Sprite(图像名, [x, y], [size 对象])</span><br></pre></td></tr></table></figure>
<p>Sprite9Scale 就是通常所說的“九宫格”图像。一个矩形图像会被分为 9 部分，然后根据要求拉伸图像，同时保证拉伸后的图像四边不变形。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建一个 Scale9 图像，并拉伸到 400, 300 点大小</span></span><br><span class="line"><span class="keyword">local</span> sprite = display.newScale9Sprite(<span class="string">&quot;Box.png&quot;</span>, <span class="number">0</span>, <span class="number">0</span>, cc.size(<span class="number">400</span>, <span class="number">300</span>))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>游戏开发</category>
      </categories>
      <tags>
        <tag>Lua</tag>
        <tag>cocos2dx</tag>
      </tags>
  </entry>
  <entry>
    <title>cocos2dx-lua热更新</title>
    <url>/49721.html</url>
    <content><![CDATA[<p>每次登陆游戏利用cocos的assetManager从服务器拉去当前最新的两个文件。 一个是version.mainifest,一个project.mainifest. 这两个文件都是xml的描述文件。</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>一个包含了版本信息，第二个包含了游戏所有资源的MD5码。首先通过version文件对比本地的版本是否相同，如果不相同，再通过跟本地的project文件对比MD5码来判断哪些文件需要重新下载，替换资源。 </p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤:"></a>步骤:</h2><ol>
<li>有一个文件下载的热更新服务器，将最新项目资源(res&#x2F;  src&#x2F; 目录)放入热更新服务器中，添加版本信息母文件(version_info.json)和python脚本文件eneateManifest.py(生成project.manifest、version.manifest文件)。</li>
</ol>
<p>2.version_info.json文件: 主要用来配置信息</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;packageUrl&quot;</span> : <span class="string">&quot;http://ip:port/update/MyProj/assets/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;remoteManifestUrl&quot;</span> : <span class="string">&quot;http://ip:port/update/MyProj/version/project.manifest&quot;</span>,</span><br><span class="line">    <span class="string">&quot;remoteVersionUrl&quot;</span> : <span class="string">&quot;http://ip:port/update/MyProj/version/version.manifest&quot;</span>,</span><br><span class="line">    <span class="string">&quot;engineVersion&quot;</span> : <span class="string">&quot;3.3&quot;</span>,</span><br><span class="line">	<span class="string">&quot;update_channel&quot;</span> : <span class="string">&quot;Android&quot;</span>,</span><br><span class="line">	<span class="string">&quot;bundle&quot;</span> : <span class="string">&quot;2018111701&quot;</span>,</span><br><span class="line">    <span class="string">&quot;version&quot;</span> : <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3.eneateManifest.py文件: 这个文件是一个python。目的是生成对应的version和project文件。project文件可以帮你给每个资源生成独一无二的MD5码，相当于每个资源的标记。下面是一段python文件的代码。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">#coding:utf<span class="number">-8</span></span><br><span class="line"> </span><br><span class="line">import <span class="built_in">os</span></span><br><span class="line">import sys</span><br><span class="line">import json</span><br><span class="line">import hashlib</span><br><span class="line">import subprocess</span><br><span class="line">import getpass</span><br><span class="line"> </span><br><span class="line">username = getpass.getuser()</span><br><span class="line"># 改变当前工作目录</span><br><span class="line">#<span class="built_in">os</span>.chdir(<span class="string">&#x27;/Users/&#x27;</span> + username + <span class="string">&#x27;/Documents/client/MyProj/&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">assetsDir = &#123;</span><br><span class="line">    #MyProj文件夹下需要进行热跟的文件夹</span><br><span class="line">    <span class="string">&quot;searchDir&quot;</span> : [<span class="string">&quot;src&quot;</span>, <span class="string">&quot;res&quot;</span>],</span><br><span class="line">    #需要忽略的文件夹</span><br><span class="line">    <span class="string">&quot;ignorDir&quot;</span> : [<span class="string">&quot;cocos&quot;</span>, <span class="string">&quot;framework&quot;</span>, <span class="string">&quot;.svn&quot;</span>],</span><br><span class="line">    #需要忽略的文件</span><br><span class="line">    <span class="string">&quot;ignorFile&quot;</span>:[<span class="string">&quot;.DS_Store&quot;</span>],</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">versionConfigFile   = <span class="string">&quot;version/version_info.json&quot;</span>  #版本信息的配置文件路径</span><br><span class="line">versionManifestPath = <span class="string">&quot;version/version.manifest&quot;</span>    #由此脚本生成的version.manifest文件路径</span><br><span class="line">projectManifestPath = <span class="string">&quot;version/project.manifest&quot;</span>    #由此脚本生成的project.manifest文件路径</span><br><span class="line"># projectManifestPath = <span class="string">&quot;/Users/ximi/Documents/client/MyProj/res/version/project.manifest&quot;</span>    #由此脚本生成的project.manifest文件路径(mac机)</span><br><span class="line"> </span><br><span class="line">class SearchFile:</span><br><span class="line">    def __init__(<span class="built_in">self</span>):</span><br><span class="line">        <span class="built_in">self</span>.fileList = []</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> assetsDir:</span><br><span class="line">            <span class="keyword">if</span> (k == <span class="string">&quot;searchDir&quot;</span>):</span><br><span class="line">                <span class="keyword">for</span> searchdire <span class="keyword">in</span> assetsDir[k]:                 </span><br><span class="line">                    <span class="built_in">self</span>.recursiveDir(searchdire)</span><br><span class="line"> </span><br><span class="line">    def recursiveDir(<span class="built_in">self</span>, srcPath):</span><br><span class="line">        <span class="string">&#x27;&#x27;</span><span class="string">&#x27; 递归指定目录下的所有文件&#x27;</span><span class="string">&#x27;&#x27;</span></span><br><span class="line">        dirList = []    #所有文件夹  </span><br><span class="line"> </span><br><span class="line">        files = <span class="built_in">os</span>.listdir(srcPath) #返回指定目录下的所有文件，及目录（不含子目录）</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> files:         </span><br><span class="line">            #目录的处理</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">os</span>.<span class="built_in">path</span>.isdir(srcPath + <span class="string">&#x27;/&#x27;</span> + f)):              </span><br><span class="line">                <span class="keyword">if</span> (f[<span class="number">0</span>] == <span class="string">&#x27;.&#x27;</span> <span class="keyword">or</span> (f <span class="keyword">in</span> assetsDir[<span class="string">&quot;ignorDir&quot;</span>])):</span><br><span class="line">                    #排除隐藏文件夹和忽略的目录</span><br><span class="line">                    pass</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    #添加非需要的文件夹                                  </span><br><span class="line">                    dirList.append(f)</span><br><span class="line"> </span><br><span class="line">            #文件的处理</span><br><span class="line">            elif (<span class="built_in">os</span>.<span class="built_in">path</span>.isfile(srcPath + <span class="string">&#x27;/&#x27;</span> + f)) <span class="keyword">and</span> (f <span class="keyword">not</span> <span class="keyword">in</span> assetsDir[<span class="string">&quot;ignorFile&quot;</span>]):               </span><br><span class="line">                <span class="built_in">self</span>.fileList.append(srcPath + <span class="string">&#x27;/&#x27;</span> + f) #添加文件</span><br><span class="line"> </span><br><span class="line">        #遍历所有子目录,并递归</span><br><span class="line">        <span class="keyword">for</span> dire <span class="keyword">in</span> dirList:        </span><br><span class="line">            #递归目录下的文件</span><br><span class="line">            <span class="built_in">self</span>.recursiveDir(srcPath + <span class="string">&#x27;/&#x27;</span> + dire)</span><br><span class="line"> </span><br><span class="line">    def getAllFile(<span class="built_in">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;</span><span class="string">&#x27; get all file path&#x27;</span><span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> tuple(<span class="built_in">self</span>.fileList)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def CalcMD5(filepath):</span><br><span class="line">    <span class="string">&quot;&quot;</span><span class="string">&#x27;generate a md5 code by a file path&#x27;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    with open(filepath,&#x27;rb&#x27;) as f:</span></span><br><span class="line"><span class="string">        md5obj = hashlib.md5()</span></span><br><span class="line"><span class="string">        md5obj.update(f.read())</span></span><br><span class="line"><span class="string">        return md5obj.hexdigest()</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">def getVersionInfo():</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;get version config data&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    configFile = open(versionConfigFile,&quot;</span>r<span class="string">&quot;)</span></span><br><span class="line"><span class="string">    json_data = json.load(configFile)</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    configFile.close()</span></span><br><span class="line"><span class="string">    # json_data[&quot;</span>version<span class="string">&quot;] = json_data[&quot;</span>version<span class="string">&quot;] + &#x27;.&#x27; + str(GetSvnCurrentVersion())</span></span><br><span class="line"><span class="string">    json_data[&quot;</span>version<span class="string">&quot;] = json_data[&quot;</span>version<span class="string">&quot;]</span></span><br><span class="line"><span class="string">    return json_data</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">def GenerateVersionManifestFile():</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27; 生成大版本的version.manifest&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    json_str = json.dumps(getVersionInfo(), indent = 2)</span></span><br><span class="line"><span class="string">    fo = open(versionManifestPath,&quot;</span>w<span class="string">&quot;)  </span></span><br><span class="line"><span class="string">    fo.write(json_str)  </span></span><br><span class="line"><span class="string">    fo.close()</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">def GenerateProjectManifestFile():</span></span><br><span class="line"><span class="string">    searchfile = SearchFile()</span></span><br><span class="line"><span class="string">    fileList = list(searchfile.getAllFile())</span></span><br><span class="line"><span class="string">    project_str = &#123;&#125;</span></span><br><span class="line"><span class="string">    project_str.update(getVersionInfo())</span></span><br><span class="line"><span class="string">    dataDic = &#123;&#125;</span></span><br><span class="line"><span class="string">    for f in fileList:      </span></span><br><span class="line"><span class="string">        dataDic[f] = &#123;&quot;</span>md5<span class="string">&quot; : CalcMD5(f)&#125;</span></span><br><span class="line"><span class="string">        print f</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    project_str.update(&#123;&quot;</span>assets<span class="string">&quot;:dataDic&#125;)</span></span><br><span class="line"><span class="string">    json_str = json.dumps(project_str, sort_keys = True, indent = 2)</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    fo = open(projectManifestPath,&quot;</span>w<span class="string">&quot;)  </span></span><br><span class="line"><span class="string">    fo.write(json_str)  </span></span><br><span class="line"><span class="string">    fo.close()</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">if __name__ == &quot;</span>__main__<span class="string">&quot;:</span></span><br><span class="line"><span class="string">    GenerateVersionManifestFile()</span></span><br><span class="line"><span class="string">    GenerateProjectManifestFile()</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>

<p>生成version.manifest如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;packageUrl&quot;</span>: <span class="string">&quot;http://ip:port/update/MyProj/assets/&quot;</span>, </span><br><span class="line">  <span class="string">&quot;engineVersion&quot;</span>: <span class="string">&quot;3.3&quot;</span>, </span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>, </span><br><span class="line">  <span class="string">&quot;remoteVersionUrl&quot;</span>: <span class="string">&quot;http://ip:port/update/MyProj/version/version.manifest&quot;</span>, </span><br><span class="line">  <span class="string">&quot;remoteManifestUrl&quot;</span>: <span class="string">&quot;http://ip:port/update/MyProj/version/project.manifest&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>生成project.manifest如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;assets&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;src/packages/mvc/init.lua&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;md5&quot;</span>: <span class="string">&quot;6b9173481a1300c5e737ad5885ebef00&quot;</span></span><br><span class="line">        &#125;, </span><br><span class="line">        <span class="string">&quot;src/protobuf.lua&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;md5&quot;</span>: <span class="string">&quot;f790fe35eb179a4341ff41d94e488a5d&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">&quot;packageUrl&quot;</span>: <span class="string">&quot;http://ip:port/update/MyProj/assets/&quot;</span>, </span><br><span class="line">    <span class="string">&quot;engineVersion&quot;</span>: <span class="string">&quot;3.3&quot;</span>, </span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>, </span><br><span class="line">    <span class="string">&quot;remoteVersionUrl&quot;</span>: <span class="string">&quot;http://ip:port/update/MyProj/version/version.manifest&quot;</span>, </span><br><span class="line">    <span class="string">&quot;remoteManifestUrl&quot;</span>: <span class="string">&quot;http://ip:port/update/MyProj/version/project.manifest&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.游戏客户端: 利用cocos assetManager来从服务器获取文件并且进行资源的替换（这里所谓的替换并不是真正的替换，利用了Fileutils-&gt;searchPath() 设置资源文件读取的优先级。也就是老资源和代码并没有删除，而是舍弃不用。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--region *.lua</span></span><br><span class="line"><span class="comment">--Date</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">local</span> AssetsManager = class(<span class="string">&quot;AssetsManager&quot;</span>,<span class="function"><span class="keyword">function</span> <span class="params">()</span></span></span><br><span class="line">    <span class="keyword">return</span> cc.LayerColor:<span class="built_in">create</span>(cc.c4b(<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">220</span>))</span><br><span class="line"><span class="keyword">end</span>)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AssetsManager:ctor</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">self</span>:onNodeEvent(<span class="string">&quot;exit&quot;</span>, handler(<span class="built_in">self</span>, <span class="built_in">self</span>.onExitCallback))</span><br><span class="line">    <span class="built_in">self</span>:initUI()</span><br><span class="line">    <span class="built_in">self</span>:setAssetsManage()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AssetsManager:onExitCallback</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">self</span>.assetsManagerEx:release()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AssetsManager:initUI</span><span class="params">()</span></span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">local</span> hintLabel = cc.Label:createWithTTF(<span class="string">&quot;正在更新...&quot;</span>, CONFIG.TTF_FONT_2, <span class="number">20</span>)</span><br><span class="line">        :addTo(<span class="built_in">self</span>)</span><br><span class="line">        :move(<span class="number">600</span>, <span class="number">80</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">local</span> progressBg = display.newSprite(<span class="string">&quot;sprites/hyd_progress_bg.png&quot;</span>)    </span><br><span class="line">        :addTo(<span class="built_in">self</span>)</span><br><span class="line">        :move(<span class="number">600</span>, <span class="number">40</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">self</span>.progress = cc.ProgressTimer:<span class="built_in">create</span>(display.newSprite(<span class="string">&quot;sprites/hyd_progress.png&quot;</span>))</span><br><span class="line">        :addTo(progressBg)</span><br><span class="line">        :move(<span class="number">380</span>, <span class="number">19</span>)</span><br><span class="line">    <span class="built_in">self</span>.progress:setType(cc.PROGRESS_TIMER_TYPE_BAR)</span><br><span class="line">    <span class="built_in">self</span>.progress:setBarChangeRate(cc.p(<span class="number">1</span>, <span class="number">0</span>))</span><br><span class="line">    <span class="built_in">self</span>.progress:setMidpoint(cc.p(<span class="number">0.0</span>, <span class="number">0.5</span>))</span><br><span class="line">    <span class="built_in">self</span>.progress:setPercentage(<span class="number">0</span>) </span><br><span class="line"> </span><br><span class="line">    <span class="comment">--触摸吞噬</span></span><br><span class="line">    <span class="built_in">self</span>.listener = cc.EventListenerTouchOneByOne:<span class="built_in">create</span>()</span><br><span class="line">    <span class="built_in">self</span>.listener:setSwallowTouches(<span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">local</span> onTouchBegan = <span class="function"><span class="keyword">function</span> <span class="params">(touch, event)</span></span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line">    <span class="built_in">self</span>.listener:registerScriptHandler(onTouchBegan, cc.Handler.EVENT_TOUCH_BEGAN)</span><br><span class="line">    cc.Director:getInstance():getEventDispatcher():addEventListenerWithSceneGraphPriority(<span class="built_in">self</span>.listener, <span class="built_in">self</span>)   </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AssetsManager:setAssetsManage</span><span class="params">()</span></span></span><br><span class="line">    <span class="comment">--创建可写目录与设置搜索路径</span></span><br><span class="line">    <span class="keyword">local</span> storagePath = cc.FileUtils:getInstance():getWritablePath() .. <span class="string">&quot;NewRes/&quot;</span> </span><br><span class="line">    <span class="keyword">local</span> resPath = storagePath.. <span class="string">&#x27;/res/&#x27;</span></span><br><span class="line">    <span class="keyword">local</span> srcPath = storagePath.. <span class="string">&#x27;/src/&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> (cc.FileUtils:getInstance():isDirectoryExist(storagePath)) <span class="keyword">then</span>         </span><br><span class="line">        cc.FileUtils:getInstance():createDirectory(storagePath)</span><br><span class="line">        cc.FileUtils:getInstance():createDirectory(resPath)</span><br><span class="line">        cc.FileUtils:getInstance():createDirectory(srcPath)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">local</span> searchPaths = cc.FileUtils:getInstance():getSearchPaths() </span><br><span class="line">    <span class="built_in">table</span>.<span class="built_in">insert</span>(searchPaths, <span class="number">1</span>, storagePath)  </span><br><span class="line">    <span class="built_in">table</span>.<span class="built_in">insert</span>(searchPaths, <span class="number">2</span>, resPath)</span><br><span class="line">    <span class="built_in">table</span>.<span class="built_in">insert</span>(searchPaths, <span class="number">3</span>, srcPath)</span><br><span class="line">    cc.FileUtils:getInstance():setSearchPaths(searchPaths)</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">self</span>.assetsManagerEx = cc.AssetsManagerEx:<span class="built_in">create</span>(<span class="string">&quot;version/project.manifest&quot;</span>, storagePath)    </span><br><span class="line">    <span class="built_in">self</span>.assetsManagerEx:retain()</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">local</span> eventListenerAssetsManagerEx = cc.EventListenerAssetsManagerEx:<span class="built_in">create</span>(<span class="built_in">self</span>.assetsManagerEx, </span><br><span class="line">       <span class="function"><span class="keyword">function</span> <span class="params">(event)</span></span></span><br><span class="line">           <span class="built_in">self</span>:handleAssetsManagerEvent(event)</span><br><span class="line">       <span class="keyword">end</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">local</span> dispatcher = cc.Director:getInstance():getEventDispatcher()</span><br><span class="line">    dispatcher:addEventListenerWithFixedPriority(eventListenerAssetsManagerEx, <span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment">--检查版本并升级</span></span><br><span class="line">    <span class="built_in">self</span>.assetsManagerEx:update()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AssetsManager:handleAssetsManagerEvent</span><span class="params">(event)</span></span>    </span><br><span class="line">    <span class="keyword">local</span> eventCodeList = cc.EventAssetsManagerEx.EventCode    </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">local</span> eventCodeHand = &#123;</span><br><span class="line"> </span><br><span class="line">        [eventCodeList.ERROR_NO_LOCAL_MANIFEST] = <span class="function"><span class="keyword">function</span> <span class="params">()</span></span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;发生错误:本地资源清单文件未找到&quot;</span>)</span><br><span class="line">        <span class="keyword">end</span>,</span><br><span class="line"> </span><br><span class="line">        [eventCodeList.ERROR_DOWNLOAD_MANIFEST] = <span class="function"><span class="keyword">function</span> <span class="params">()</span></span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;发生错误:远程资源清单文件下载失败&quot;</span>)  <span class="comment">--资源服务器没有打开，</span></span><br><span class="line">            <span class="built_in">self</span>:downloadManifestError()</span><br><span class="line">        <span class="keyword">end</span>,</span><br><span class="line"> </span><br><span class="line">        [eventCodeList.ERROR_PARSE_MANIFEST] = <span class="function"><span class="keyword">function</span> <span class="params">()</span></span></span><br><span class="line">             <span class="built_in">print</span>(<span class="string">&quot;发生错误:资源清单文件解析失败&quot;</span>)</span><br><span class="line">        <span class="keyword">end</span>,</span><br><span class="line"> </span><br><span class="line">        [eventCodeList.NEW_VERSION_FOUND] = <span class="function"><span class="keyword">function</span> <span class="params">()</span></span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;发现找到新版本&quot;</span>)</span><br><span class="line">        <span class="keyword">end</span>,</span><br><span class="line"> </span><br><span class="line">        [eventCodeList.ALREADY_UP_TO_DATE] = <span class="function"><span class="keyword">function</span> <span class="params">()</span></span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;已经更新到服务器最新版本&quot;</span>)            </span><br><span class="line">            <span class="built_in">self</span>:updateFinished()</span><br><span class="line">        <span class="keyword">end</span>,</span><br><span class="line"> </span><br><span class="line">        [eventCodeList.UPDATE_PROGRESSION]= <span class="function"><span class="keyword">function</span> <span class="params">()</span></span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;更新过程的进度事件&quot;</span>)</span><br><span class="line">            <span class="built_in">self</span>.progress:setPercentage(event:getPercentByFile())</span><br><span class="line">        <span class="keyword">end</span>,</span><br><span class="line"> </span><br><span class="line">        [eventCodeList.ASSET_UPDATED] = <span class="function"><span class="keyword">function</span> <span class="params">()</span></span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;单个资源被更新事件&quot;</span>)</span><br><span class="line">        <span class="keyword">end</span>,</span><br><span class="line"> </span><br><span class="line">        [eventCodeList.ERROR_UPDATING] = <span class="function"><span class="keyword">function</span> <span class="params">()</span></span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;发生错误:更新过程中遇到错误&quot;</span>)</span><br><span class="line">        <span class="keyword">end</span>,</span><br><span class="line"> </span><br><span class="line">        [eventCodeList.UPDATE_FINISHED] = <span class="function"><span class="keyword">function</span> <span class="params">()</span></span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;更新成功事件&quot;</span>)</span><br><span class="line">            <span class="built_in">self</span>:updateFinished()</span><br><span class="line">        <span class="keyword">end</span>,</span><br><span class="line"> </span><br><span class="line">        [eventCodeList.UPDATE_FAILED] = <span class="function"><span class="keyword">function</span> <span class="params">()</span></span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;更新失败事件&quot;</span>)</span><br><span class="line">        <span class="keyword">end</span>,</span><br><span class="line"> </span><br><span class="line">        [eventCodeList.ERROR_DECOMPRESS] = <span class="function"><span class="keyword">function</span> <span class="params">()</span></span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;解压缩失败&quot;</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">local</span> eventCode = event:getEventCode()    </span><br><span class="line">    <span class="keyword">if</span> eventCodeHand[eventCode] ~= <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">        eventCodeHand[eventCode]()</span><br><span class="line">    <span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AssetsManager:updateFinished</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">self</span>:setVisible(<span class="literal">false</span>)</span><br><span class="line">    <span class="built_in">self</span>.listener:setEnabled(<span class="literal">false</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AssetsManager:downloadManifestError</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">self</span>:setVisible(<span class="literal">false</span>)</span><br><span class="line">    <span class="built_in">self</span>.listener:setEnabled(<span class="literal">false</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> AssetsManager</span><br><span class="line"> </span><br><span class="line"><span class="comment">--endregion</span></span><br></pre></td></tr></table></figure>
<p>Android apk 安装后在手机中还是以apk存在，apk 不可写入和删除，所以热更新下载的最新资源都存在缓存中，并添加缓存目录为最高优先级搜索目录，加载资源时从最高优先级目录中加载从而起到替换更新的作用。</p>
<p>cocos2dx中有一个热更新类AssetsManagerEx，用这个类实现热更功能时需要有两个文件，project.manifest以及version.manifest。这里主要是project.manifest文件</p>
<p>Cocos自身也封装了热更新的模块AssetsManager、AssetsManagerEx。</p>
<p>AssetsManager采用的是升级包的管理方式，首先进行版本号对比，然后根据URL获取对应的升级包，解压升级包，设置资源加载路径，通过加载writepath目录下最新文件的方式来实现更新。问题是当涉及跳版本更新，或只有一个文件被改动时，用户就要下载前面全部的升级内容，升级包会越来越大。</p>
<p>AssetsManagerEx是AssetsManager的加强版，不同的是不再使用升级包的方式，而是采用单个文件拉取的方式。首先获取本地更新配置，之后与服务器的更新配置比对，得出差异文件，之后单个拉取差异文件。当本地版本大于服务器版本时，会清理掉本地更新缓存。AssetsManagerEx也有尚未解决的问题，例如多个更新序列无法并行，只能顺序启动。另外版本后期随着项目庞大配置文件几乎包含了所有的文件信息，对比文件时间的耗时会越来越长。</p>
]]></content>
      <categories>
        <category>游戏开发</category>
      </categories>
      <tags>
        <tag>Lua</tag>
        <tag>cocos2dx</tag>
      </tags>
  </entry>
  <entry>
    <title>cocos2dx-lua物理引擎碰撞检测</title>
    <url>/17739.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在游戏中模拟真实的物理世界是比较麻烦的，通常都会交给物理引擎来做，比较知名的物理引擎有Box2D和Chipmunk。</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>在Cocos2d-x 2.x中，游戏直接使用物理引擎，引擎提供一个简单的CCPhysicsSprite，处理了物理引擎的body与CCSprite的关系，而物理引擎的其他元素并没有和引擎对应起来，游戏需要选择直接调用Box2D或Chipmunk的API来处理逻辑。然而直接使用物理引擎是比较复杂的，物理引擎的接口参数繁多、复杂、需要开发人员对物理引擎和Coco2d-x都很了解，才能把两者融合得很好。<br>这种情况在Cocos2d-x 3.x中有了改变，全新的Physics Integration，把Chipmunk和Box2D封装到引擎内部，开发者不必关心底层具体用的是哪个物理引擎，也不用直接调用物理引擎的接口。<br>Cocos2d-x 3.x默认使用Chipmunk作为内部物理引擎。<br>Physics Integration 做了以下深度融合：<br>（1）物理世界被融入到Scene中，即当创建一个场景时，可以指定这个场景是否使用物理引擎。<br>（2）Node自带body属性，也就是Sprite自带body属性。<br>（3）对物理引擎的Body(cc.PhysicsBody),Shape(cc.PhysicsShape),Contact(cc.PhysicsContact),Joint(cc.PhysicsJoint),World(cc.PhysicsWold)进行封装抽象，使用更加简单。<br>（4）更简单的碰撞检测监听:EventListenerPhysicsContact.</p>
<h3 id="创建带物理世界的scene"><a href="#创建带物理世界的scene" class="headerlink" title="创建带物理世界的scene"></a>创建带物理世界的scene</h3><p>使用下面方法创建带物理世界的scene:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> MainScene = class (<span class="string">&quot;MainScene&quot;</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">return</span> display.newScene(<span class="string">&quot;MainScene&quot;</span>,&#123;physics = <span class="number">2</span>&#125;)</span><br><span class="line"><span class="keyword">end</span>)</span><br></pre></td></tr></table></figure>
<p>创建后，<code>self:getPhysicsWorld()</code>用来获取场景绑定的物理世界对象。<br><code>PhysicsWorld()</code>默认是带重力的，大小为Vect(0.0f,-98.0f),也可以通过<code>setGravity()</code>方法来改变重力值，如下：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">self</span>:getPhysicsWorld():setGravity(cc.p(<span class="number">0</span>,<span class="number">-100</span>)) </span><br></pre></td></tr></table></figure>
<p>在调试物理世界中物体运动模拟时，可以使用<code>PyhsicsWorld</code>的<code>setDebugDrawMask()</code>来开启调试模式。它能把物理世界中不可见的shape, joint和contact都可视化。当调试结束需要发布游戏的时候，需要把该<code>debug</code>开关关闭<br>关闭DEBUG，传入参数<code>cc.PhysicsWorld.DEBUGDRAW_NONE</code>。</p>
<h3 id="创建物理边界"><a href="#创建物理边界" class="headerlink" title="创建物理边界"></a>创建物理边界</h3><p>在物理世界中，所以物体均受重力的影响。物理引擎提供StaticShape创建一个不受重力影响的形状，在Cocos2d-x 2.x中，我们需要了解物理引擎的StaticShape相关的各种参数来完成边界设置。而在Cocos2d-x 3.x中，由<code>cc.PhysicsBody</code>创建边界，然后由<code>Node</code>添加到场景，<code>addChild</code>内部自动碗好吃呢个边界添加到物理世界，<code>Node</code>在这里起中介作用。<br>代码如下：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> size = display.size</span><br><span class="line"><span class="keyword">local</span> body = cc.PhysicsBody:createEdgeBox(size,cc.PHYSICSBODY_MATERIAL_DEFAULT,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">local</span> edgeNode = display.newNode()</span><br><span class="line">edgeNode:setPosition(size.width/<span class="number">2</span>,size.height/<span class="number">2</span>)</span><br><span class="line">edgeNode:setPhysicsBody(body)</span><br><span class="line"><span class="built_in">self</span>:addChild(edgeNode)</span><br></pre></td></tr></table></figure>
<p><code>cc.PhysicsBody</code>包含很多工程方法，<code>createEdgeBox</code>创建一个不受重力影响的矩形边界,参数含义依次是:<br>      (1)矩形区域大小,这里设置为屏幕大小。<br>      (2)设置材质,可选参数,默认为<code>PHYSICSBODY_ MATERIAL DEFAULT</code>。<br>      (3)边线宽度,可选参数,默认为<code>1</code>。<br>      然后我们创建一个Node,把刚刚创建的body附加到Node上，并设置好Node的position为屏幕中心点。最后把Node添加到scene。<br>      Node的addChild方法,在Cocos2d-x 3. x中有对物理body做处理,它会自动把Node的body设置到scene的PhysicsWorld上去。<br>      PhysicsBody中的工程方法,针对参数设置的body大小，会自动创建对应的PhysicsBody和一个PhysicsShape, 这也是通常情况下,直接使用物理引擎创建一个body需要做的事情。Cocos2d-x 3. x的Physics Integration 极大地简化了使用物理引擎的代码量。</p>
<h3 id="创建受重力作用的sprite"><a href="#创建受重力作用的sprite" class="headerlink" title="创建受重力作用的sprite"></a>创建受重力作用的sprite</h3><p> 在Cocos2d-x 3.0中创建一个受重力作用的Sprite也很简单。首先来看代码:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> oneSprite = display.newSprite(<span class="string">&quot;game/basketball/image/basketball.png&quot;</span>)</span><br><span class="line"><span class="comment">-- local oneBody = cc.PhysicsBody:createBox(oneSprite:getContentSize(),cc.PHYSICSBODY_MATERIAL_DEFAULT,cc.p(0,0))  --矩形刚体</span></span><br><span class="line"><span class="keyword">local</span> oneBody = cc.PhysicsBody:createCircle(<span class="number">25</span>,cc.PHYSICSBODY_MATERIAL_DEFAULT,cc.p(<span class="number">0</span>,<span class="number">0</span>))      <span class="comment">--圆形刚体   </span></span><br><span class="line">oneBody:setContactTestBitmask(<span class="number">0xFFFFFFFF</span>)</span><br><span class="line">oneBody:applyImpulse(cc.p(<span class="number">0</span>,<span class="number">10000</span>))</span><br><span class="line">oneSprite:setPhysicsBody(oneBody)</span><br><span class="line">oneSprite:setPosition(x,y)</span><br><span class="line"><span class="built_in">self</span>:addChild(oneSprite)</span><br><span class="line"><span class="comment">--onBody:setGravityEnable(false)  --刚体不受重力作用</span></span><br></pre></td></tr></table></figure>
<p> 首先创建-一个<code>sprite</code>,然后用<code>cc.PhysicsBody:createBox()</code>创建一个矩形的body附加在sprite上。<code>createBox</code> 接受三个参数如下:<br>       (1)参数1,<code>cc. size</code>类型,表示矩形的长宽。<br>       (2)参数2,<code>cc.PhysicsMaterial</code>类型，表示物理材质属性，可选参数，默认为<code>cc. PHYSICSBODY MATERIAL DEFAULT</code>。手动创建材质方法如下:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">cc. PhysicsMaterial(density, restitution, friction)</span><br></pre></td></tr></table></figure>
<p> 其中第一个参数表示密度,第二个参数表示反弹力,第三个参数表示摩擦力。<br>(3)参数3,cc.p类型,表示body与中心点的偏移量,可选参数,默认为cc. p(0,0)。类似地,可以用下面的方法创建圆形body:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">cc. PhysicsBody:createCircle(radius,material,offset)</span><br></pre></td></tr></table></figure>
<p>不同于矩形的创建，第一个参数是园的半径，第二、三个参数的作用同<code>createBox</code>一样。</p>
<h3 id="碰撞检测"><a href="#碰撞检测" class="headerlink" title="碰撞检测"></a>碰撞检测</h3><p>在Cocos2d-x 中，事件派发机制做了重构，所有事件均由事件派发器统一管理。物理引擎的碰撞事件也不例外，下面的代码注册碰撞begin回调函数。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--监听碰撞</span></span><br><span class="line">    <span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">onContactBegin</span><span class="params">(contact)</span></span></span><br><span class="line">        <span class="keyword">local</span> tag = contact:getShapeA():getBody():getNode():getTag()</span><br><span class="line">        <span class="comment">-- print(tag)     --碰撞后的回调事件</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> contactListener = cc.EventListenerPhysicsContact:<span class="built_in">create</span>()</span><br><span class="line">    contactListener:registerScriptHandler(onContactBegin,cc.Handler.EVENT_PHYSICS_CONTACT_BEGIN)</span><br><span class="line">    <span class="keyword">local</span> eventDispatcher = cc.Director:getInstance():getEventDispatcher()</span><br><span class="line">    eventDispatcher:addEventListenerWithFixedPriority(contactListener,<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>碰撞检测的所有事件由<code>cc.EventListenerPhysicsContact</code>的实例来监听,这些事件有如下几类。<br>(1) <code>cc. Handler. EVENT_ PHYSICS_ _CONTACT_ BEGIN</code>,在碰撞刚发生时,触发这个事件,并且在此次碰撞中只会被调用一次。可以通过返回<code>true</code> 或者<code>false</code> 来决定物体是否发生碰撞。需要注意的是，当这个事件的回调函数返回<code>flase</code> 时, <code>EVENT _ PHYSICS_CONTACT_ PRESOLVE</code>和<code>EVENT_ PHYSICS_ CONTACT_ POSTSOLVE</code> 将不会被触发,但<code>EVENT_ PHYSICS_ CONTACT_ SEPERATE</code>必定会触发。<br>(2) <code>cc. Handler. EVENT_ PHYSICS_ CONTACT_ PRESOLVE</code>, 发生在碰撞的每个<code>step</code>,可以通过调用<code>cc.PhysicsContactPreSolve</code>的成员函数来改变碰撞处理的一些参数设定,比如弹力和阻力等。同样可以通过返回<code>true</code>或者<code>false</code>来决定物体是否发生碰撞。<br>(3)<code> cc. Handler. EVENT_ PHYSICS_ CONTACT_ POSTSOLVE</code>,发生在碰撞计算完毕的每个<code>step</code>,可以在此做一些碰撞的后续处理,比如安全的移除某个物体等。<br> (4) <code>cc. Handler. EVENT_ PHYSICS_ CONTACT_ SEPERATE</code>,发生在碰撞结束两物体分离时,同样只会被调用一次。它与<code>onContactBegin</code>必定是成对出现的。<br> 监听器设置完毕,需要加入到引擎导演的事件分发器中。<br> 默认情况下,物理引擎中的物体都不发出碰撞事件,也就是上面的代码中的<code>onContactBegin</code>永远不会调用到。为了解决这个问题,首先需要了解<code>cc. PhysicsBody</code>的三个mask。<br>  (1) <code>CategoryBitmask body</code>,类别掩码,32位整型,也就是可以有32 个不同的类别。默认值为<code>0xFFFFFFFF</code>。<br>  (2) <code>ContactTestBitmask</code>,当两个物体接触时,用一个物体的<code>CategoryBitmask</code>与另一.个物体的<code>ContactTestBitmask</code>做逻辑<code>与</code>运算,不为0时引擎才会新建<code>PhysicsContact</code>对象,发送碰撞事件。<code>ContactTestBitmask</code>的设计是为了优化性能,并不是所有物体之间的碰撞我们都关心,所以这个<code>ContactTestBitmask</code>的默认值为<code>0x00000000</code>。<br>  (3)<code>CollisionBitmask</code>刚体碰撞掩码,当两个物体接触后,用–个物体的<code>CollisionBitmask</code>与另一个物体的<code>CategoryBitmask</code>做逻辑<code>与</code>运算,不为0时才能发生刚体碰撞,默认值为<code>0xFFFFFFFF</code>。<br> 上面的解释说明了每个掩码的作用,而掩码之间的相互作用可归纳如下:<br> (1)<code>CategoryBitmask</code>,是其他两个掩码比较的基础。<br> (2) <code>CategoryBitmask &amp; ContactTestBitmask</code>,决定是否发送事件消息。<br> (3) <code>CategoryBitmask &amp; CollisionBitmask</code>,决定是否产生刚体反弹效果。<br> (4) <code>ContactTestBitmask</code>和<code>CollisionBitmask</code>,互相之间没有联系。</p>
<h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><blockquote>
<p>下面是main.lua文件的完整代码，单击屏幕任意一点会创建一个精灵，精灵之间相互碰撞后产生回调事件。</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> MainScene = class (<span class="string">&quot;MainScene&quot;</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">return</span> display.newScene(<span class="string">&quot;MainScene&quot;</span>,&#123;physics = <span class="number">2</span>&#125;)</span><br><span class="line"><span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MainScene:ctor</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">self</span>:getPhysicsWorld():setGravity(cc.p(<span class="number">0</span>,<span class="number">-100</span>))    <span class="comment">--重力</span></span><br><span class="line">    <span class="built_in">self</span>:getPhysicsWorld():setDebugDrawMask(cc.PhysicsWorld.DEBUGDRAW_ALL)</span><br><span class="line">    <span class="keyword">local</span> size = display.size</span><br><span class="line">    <span class="keyword">local</span> body = cc.PhysicsBody:createEdgeBox(size,cc.PHYSICSBODY_MATERIAL_DEFAULT,<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">local</span> edgeNode = display.newNode()</span><br><span class="line">    edgeNode:setPosition(size.width/<span class="number">2</span>,size.height/<span class="number">2</span>)</span><br><span class="line">    edgeNode:setPhysicsBody(body)</span><br><span class="line">    <span class="built_in">self</span>:addChild(edgeNode)</span><br><span class="line">    <span class="comment">--监听碰撞</span></span><br><span class="line">    <span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">onContactBegin</span><span class="params">(contact)</span></span></span><br><span class="line">        <span class="keyword">local</span> tag = contact:getShapeA():getBody():getNode():getTag()</span><br><span class="line">        <span class="comment">-- print(tag)     --碰撞后的回调事件</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> contactListener = cc.EventListenerPhysicsContact:<span class="built_in">create</span>()</span><br><span class="line">    contactListener:registerScriptHandler(onContactBegin,cc.Handler.EVENT_PHYSICS_CONTACT_BEGIN)</span><br><span class="line">    <span class="keyword">local</span> eventDispatcher = cc.Director:getInstance():getEventDispatcher()</span><br><span class="line">    eventDispatcher:addEventListenerWithFixedPriority(contactListener,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">self</span>:getPhysicsWorld():setDebugDrawMask(cc.PhysicsWorld.DEBUGDRAW_ALL)</span><br><span class="line">    <span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">onTouchBegan</span><span class="params">( touch, event )</span></span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>  </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">onTouchEnded</span><span class="params">( touch, event )</span></span></span><br><span class="line">        <span class="keyword">local</span> location = touch:getLocation()   <span class="comment">--获取鼠标的位置</span></span><br><span class="line">        <span class="keyword">local</span> event_x = location[<span class="string">&quot;x&quot;</span>] <span class="keyword">or</span> <span class="number">0</span>      </span><br><span class="line">        <span class="keyword">local</span> event_y = location[<span class="string">&quot;y&quot;</span>] <span class="keyword">or</span> <span class="number">0</span></span><br><span class="line">        <span class="built_in">self</span>:addSprite(event_x,event_y)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">onTouchMoved</span><span class="params">(touch, event)</span></span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">local</span> listener1 = cc.EventListenerTouchOneByOne:<span class="built_in">create</span>()  <span class="comment">--创建一个单点事件监听</span></span><br><span class="line">    listener1:setSwallowTouches(<span class="literal">false</span>)  <span class="comment">--是否向下传递</span></span><br><span class="line">    listener1:registerScriptHandler(onTouchBegan,cc.Handler.EVENT_TOUCH_BEGAN )</span><br><span class="line">    listener1:registerScriptHandler(onTouchMoved,cc.Handler.EVENT_TOUCH_MOVED )</span><br><span class="line">    listener1:registerScriptHandler(onTouchEnded,cc.Handler.EVENT_TOUCH_ENDED )</span><br><span class="line">    <span class="keyword">local</span> eventDispatcher = <span class="built_in">self</span>:getEventDispatcher() </span><br><span class="line">    eventDispatcher:addEventListenerWithSceneGraphPriority(listener1, <span class="built_in">self</span>) <span class="comment">--分发监听事件</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MainScene:addSprite</span><span class="params">(x,y)</span></span></span><br><span class="line">    <span class="keyword">local</span> oneSprite = display.newSprite(<span class="string">&quot;game/basketball/image/basketball.png&quot;</span>)</span><br><span class="line">    <span class="comment">-- local oneBody = cc.PhysicsBody:createBox(oneSprite:getContentSize(),cc.PHYSICSBODY_MATERIAL_DEFAULT,cc.p(0,0))  --矩形刚体</span></span><br><span class="line">    <span class="keyword">local</span> oneBody = cc.PhysicsBody:createCircle(<span class="number">25</span>,cc.PHYSICSBODY_MATERIAL_DEFAULT,cc.p(<span class="number">0</span>,<span class="number">0</span>))      <span class="comment">--圆形刚体   </span></span><br><span class="line">    oneBody:setContactTestBitmask(<span class="number">0xFFFFFFFF</span>)</span><br><span class="line">    oneBody:applyImpulse(cc.p(<span class="number">0</span>,<span class="number">10000</span>))</span><br><span class="line">    oneSprite:setPhysicsBody(oneBody)</span><br><span class="line">    oneSprite:setPosition(x,y)</span><br><span class="line">    oneSprite:setTag(<span class="number">101</span>)</span><br><span class="line">    <span class="built_in">self</span>:addChild(oneSprite)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MainScene:showWithScene</span><span class="params">(transition, time, more)</span></span></span><br><span class="line">    <span class="built_in">self</span>:setVisible(<span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">local</span> scene = <span class="built_in">self</span></span><br><span class="line">    display.runScene(scene, transition, <span class="built_in">time</span>, more)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">self</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> MainScene</span><br></pre></td></tr></table></figure>
<p>首先，使用	<code>display.newPhysicsScene</code>作为MainScene的父类,创建一个带物理世界的MainScene。<br>在MainScene:ctor中依次做了下面的初始化工作:<br>(1)修改物理世界的重力,重力是从cc. p(0,0)到setGravity()参数点之间的向量。<br>(2)用<code>cc. PhysicsBody: createEdgeBox</code>在屏幕四周创建物理边界，然后通过节点添加到场景中,它不受重力的影响。<br>(3)注册<code>EVENT_ PHYSICS_ CONTACT_ BEGIN</code>事件的回调函数。</p>
<blockquote>
<p>注: onContactBegin需要return true,否则物体碰撞后不发生刚体反弹。</p>
</blockquote>
<p>(4)打开物理世界的调试模式,可以在屏幕上看到物理边界以及刚体的框架。<br>(5)注册触摸事件,每次触摸事件到来都会在触摸点创建一个刚体精灵。<br><code>MainScene: addSprite</code>完成精灵的创建以及初始化:<br>(1)xxxx.png是个圆形的图片,通过这种图片创建精灵。<br>(2) <code>cc. PhysicsBody: createCircle</code>创建一个圆形的刚体,注意到它采用了radius作为第一个参数,这样刚体就能完全吻合图片的形状。<br>(3)<code>setContactTestBitmask</code>修改精灵的接触检测掩码,这样精灵之间碰撞就能发出事件。<br>(4)我们还用<code>applyImpulse</code>为刚体施加了一个向，上的瞬时冲力,这样精灵创建后会先向上飞,再掉落下来。<code>applyImpulse</code>是个很有用的接口,在物理世界中,用这个接口来改变物体的运动轨迹,而不是用传统的<code>setPos</code>,否则物理世界的运动将不可预期。<br>(5)<code>setPhysicsBody</code>把物理刚体和精灵都绑定在一起。<br>(6)设置精灵的初始坐标并添加到场景上。<br>快速单机屏幕创建多个精灵，发现它们互相弹开了，这是由于刚体的弹力作用，然后由于受到重力的影响，最终他们都凋落到屏幕下方。<br>设置刚体属性,参数分别是密度，碰撞系数，摩擦力</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">cc.PhysicsMaterial(<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h4><p><img data-src="https://pic.imgdb.cn/item/664341310ea9cb1403bc2fe2.gif" alt="在这里插入图片描述"></p>
<h3 id="掩码说明"><a href="#掩码说明" class="headerlink" title="掩码说明"></a>掩码说明</h3><pre><code>  categoryBitmask：

分类掩码，定义了物体属于哪个分类。场景中的每个物理刚体可以被赋值一个多达32位的值(因为categoryBitmask为int型),每个对应32位掩码中的每一位，你在你的游戏中定义掩码值。结合collisionBitMask和contactTestBitMask属性， 你可以定义哪些物理刚体相互作用并且你的游戏何时接受这些相互作用的通知。默认值为0xFFFFFFFF(所有位都被设置)。

contactTestBitmask：

接触测试掩码，定义哪些刚体分类可以与本刚体产生相互作用的通知。当两个刚体在同一个空间，即物理世界中，每个刚体的分类掩码会和其他刚体的接触测试掩码进行逻辑与的运算。如果任意一个比较结果为非零值，产生一个PhysicsContact对象并且传递到物理世界协议中，这里协议指我们的监听器对应的回调函数。 为了最好的性能，仅设置你感兴趣的接触测试掩码中的位，也就是说通过设置接触测试掩码，你可以决定发生碰撞后，回调函数是否有响应。默认值为0x00000000(所有位都被清除)。

collisionBitmask：

碰撞掩码，定义了哪些物理刚体分类可以和这个物理刚体发生碰撞。当两个物理刚体相互接触时，可能发生碰撞。这个刚体的碰撞掩码和另一个刚体的分类掩码进行逻辑与运算比较。如果结果是一个非零值，这个刚体会发生碰撞。每个刚体独立选择接受与哪个刚体发生碰撞。例如，你可以使用此掩码来忽略那些对于本刚体的速度有影响的刚体碰撞，也就是说你可以使用此掩码使得本刚体与某些刚体碰撞不会对本刚体产生影响。默认值为0xFFFFFFFF(所有位都被设置)。

从上面三个掩码的说明中，我们可以做一个小结。假设刚体A的接触测试掩码和碰撞掩码已知，刚体B的分类掩码决定了能否和A进行碰撞和在碰撞的前提下能否发出PhysicsContact对象触发回调函数。如果B的分类掩码与A的碰撞掩码做逻辑与运算的结果为0，则不会发生碰撞，因此也不会继续和A的接触测试掩码进行逻辑与运算。如果B的分类掩码与A的碰撞掩码做逻辑与运算的结果非0，则发生碰撞，并且B的分类掩码继续与A的接触测试掩码做逻辑与运算，如果结果非0，则发出PhysicsContact对象触发回调函数。
</code></pre>
]]></content>
      <categories>
        <category>游戏开发</category>
      </categories>
      <tags>
        <tag>Lua</tag>
        <tag>cocos2dx</tag>
      </tags>
  </entry>
  <entry>
    <title>cocos2dx-lua给文字添加下划线</title>
    <url>/722af58.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>给文字添加下划线，其实也就是画一条直线，只是直线放在了文字下方而已</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建并返回一个 DrawNode （线性）对象。</span></span><br><span class="line"><span class="comment">-- @function [parent=#display] newLine</span></span><br><span class="line"><span class="comment">-- @param table point table</span></span><br><span class="line"><span class="comment">-- @param table params 有参数，边线色 borderColor 及边线宽度 borderWidth</span></span><br><span class="line"><span class="comment">-- @return DrawNode#DrawNode ret (return value: cc.DrawNode) </span></span><br><span class="line"><span class="comment">-- @see ShapeNode</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--[[--</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">创建并返回一个 DrawNode （线性）对象。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">格式：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">shape = display.newLine(point表, [参数])</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">-- 创建一个线宽为2，颜色为红色，从(10,10)到(100,100)的线段</span></span><br><span class="line"><span class="comment">local shape3 = display.newLine(&#123;&#123;10, 10&#125;, &#123;100,100&#125;&#125;,</span></span><br><span class="line"><span class="comment">    &#123;borderColor = cc.c4f(1.0, 0.0, 0.0, 1.0),</span></span><br><span class="line"><span class="comment">    borderWidth = 1&#125;)</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">display.newLine</span><span class="params">(points, params)</span></span></span><br><span class="line">    <span class="keyword">local</span> radius</span><br><span class="line">    <span class="keyword">local</span> borderColor</span><br><span class="line">    <span class="keyword">local</span> scale</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> params <span class="keyword">then</span></span><br><span class="line">        borderColor = cc.c4f(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">        radius = <span class="number">0.5</span></span><br><span class="line">        scale = <span class="number">1.0</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        borderColor = params.borderColor <span class="keyword">or</span> cc.c4f(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">        radius = (params.borderWidth <span class="keyword">and</span> params.borderWidth/<span class="number">2</span>) <span class="keyword">or</span> <span class="number">0.5</span></span><br><span class="line">        scale = checknumber(params.scale <span class="keyword">or</span> <span class="number">1.0</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, p <span class="keyword">in</span> <span class="built_in">ipairs</span>(points) <span class="keyword">do</span></span><br><span class="line">        p = cc.p(p[<span class="number">1</span>] * scale, p[<span class="number">2</span>] * scale)</span><br><span class="line">        points[i] = p</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> drawNode = cc.DrawNode:<span class="built_in">create</span>()</span><br><span class="line">    drawNode:drawSegment(points[<span class="number">1</span>], points[<span class="number">2</span>], radius, borderColor)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> drawNode</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>游戏开发</category>
      </categories>
      <tags>
        <tag>cocos2dx</tag>
        <tag>lua</tag>
      </tags>
  </entry>
  <entry>
    <title>cocos2dx-lua虚拟摇杆方向控制</title>
    <url>/56592.html</url>
    <content><![CDATA[<p>在游戏开发中，很多时候都需要控制游戏角色的移动，比如王者荣耀中对英雄的控制，我们可以做一个虚拟摇杆来实现</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">控制层</span></span><br><span class="line"><span class="comment">--]]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> CtrlLayer = class(<span class="string">&#x27;CtrlLayer&#x27;</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">return</span> display.newLayer(<span class="string">&#x27;CtrlLayer&#x27;</span>)</span><br><span class="line"><span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--方向按钮的size</span></span><br><span class="line"><span class="keyword">local</span> btn_dir_w = <span class="number">265</span></span><br><span class="line"><span class="keyword">local</span> btn_dir_h = <span class="number">265</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--方向按钮位置</span></span><br><span class="line"><span class="keyword">local</span> btn_dir_x = display.width - btn_dir_w - <span class="number">20</span></span><br><span class="line"><span class="keyword">local</span> btn_dir_y = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--方向按钮的中心点</span></span><br><span class="line"><span class="keyword">local</span> btn_dir_cx = btn_dir_x + btn_dir_w/<span class="number">2</span></span><br><span class="line"><span class="keyword">local</span> btn_dir_cy = btn_dir_y + btn_dir_h/<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--方向按钮中心圆圈的半径</span></span><br><span class="line"><span class="keyword">local</span> btn_dir_center_r = <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">构造方法</span></span><br><span class="line"><span class="comment">@param linstener 需要接收事件通知的人，需要实现事件列表中的方法</span></span><br><span class="line"><span class="comment">事件列表为：</span></span><br><span class="line"><span class="comment">    setDir(dir) : 设置了方向</span></span><br><span class="line"><span class="comment">--]]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CtrlLayer:ctor</span><span class="params">(linstener)</span></span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">self</span>.linstener = linstener</span><br><span class="line"></span><br><span class="line">    <span class="built_in">self</span>:pos(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">self</span>:size(display.width, display.height)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">--方向按钮图片 </span></span><br><span class="line">    <span class="keyword">local</span> dirSprite = display.newSprite(<span class="string">&#x27;dir_btn.jpg&#x27;</span>)</span><br><span class="line">    dirSprite:setAnchorPoint(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    dirSprite:pos(btn_dir_x, btn_dir_y)</span><br><span class="line">    dirSprite:addTo(<span class="built_in">self</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">--添加触屏单点事件</span></span><br><span class="line">    <span class="built_in">self</span>:setTouchEnabled(<span class="literal">true</span>)</span><br><span class="line">    <span class="comment">--多点触控</span></span><br><span class="line">    <span class="comment">--self:setTouchMode(cc.TOUCHES_ALL_AT_ONCE)</span></span><br><span class="line">    <span class="comment">--单点触控</span></span><br><span class="line">    <span class="built_in">self</span>:setTouchMode(cc.TOUCHES_ONE_BY_ONE)</span><br><span class="line">    <span class="built_in">self</span>:addNodeEventListener(cc.NODE_TOUCH_EVENT, <span class="function"><span class="keyword">function</span><span class="params">(event)</span></span></span><br><span class="line">        <span class="keyword">if</span> event.name == <span class="string">&#x27;began&#x27;</span> <span class="keyword">then</span></span><br><span class="line">            <span class="comment">--需要return true才能让事件继续到move/ended等</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span> </span><br><span class="line">        <span class="keyword">elseif</span> event.name == <span class="string">&#x27;ended&#x27;</span> <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">self</span>:onTouchEnded(event)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--计算某点是否在方向按钮范围</span></span><br><span class="line"><span class="comment">--规定在方向按钮外围构成的矩形为按钮的边界</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CtrlLayer:isInDirBtn</span><span class="params">(x, y)</span></span></span><br><span class="line">    <span class="keyword">if</span> x &gt;= btn_dir_x <span class="keyword">and</span> x &lt;= (btn_dir_x + btn_dir_w) <span class="keyword">and</span> y &gt;= btn_dir_y <span class="keyword">and</span> y &lt;= (btn_dir_y + btn_dir_h) <span class="keyword">then</span> </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span> </span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span> </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--计数某点是否在方向按钮的中心圆圈内</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CtrlLayer:isInDirBtnCenter</span><span class="params">(x, y)</span></span></span><br><span class="line">    <span class="keyword">local</span> tx = <span class="built_in">math</span>.<span class="built_in">abs</span>(x-btn_dir_cx)</span><br><span class="line">    <span class="keyword">local</span> ty = <span class="built_in">math</span>.<span class="built_in">abs</span>(y-btn_dir_cy)</span><br><span class="line">    <span class="keyword">local</span> tlen = <span class="built_in">math</span>.<span class="built_in">sqrt</span>( <span class="built_in">math</span>.<span class="built_in">pow</span>(tx, <span class="number">2</span>) + <span class="built_in">math</span>.<span class="built_in">pow</span>(ty, <span class="number">2</span>) )</span><br><span class="line">    <span class="keyword">return</span> tlen &lt;= btn_dir_center_r</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--计数某点相对于方向按钮的中心点的方向</span></span><br><span class="line"><span class="comment">--规定方向有up/right/down/left</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CtrlLayer:getDir</span><span class="params">(x, y)</span></span></span><br><span class="line">    <span class="keyword">local</span> dir = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">local</span> tx = <span class="built_in">math</span>.<span class="built_in">abs</span>(x - btn_dir_cx)</span><br><span class="line">    <span class="keyword">local</span> ty = <span class="built_in">math</span>.<span class="built_in">abs</span>(y - btn_dir_cy)</span><br><span class="line">    <span class="keyword">if</span> x &gt; btn_dir_cx <span class="keyword">then</span> </span><br><span class="line">        <span class="keyword">if</span> y &gt; btn_dir_cy <span class="keyword">then</span> </span><br><span class="line">            <span class="keyword">if</span> tx &gt; ty <span class="keyword">then</span> </span><br><span class="line">                dir = <span class="string">&#x27;right&#x27;</span></span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                dir = <span class="string">&#x27;up&#x27;</span></span><br><span class="line">            <span class="keyword">end</span> </span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="keyword">if</span> tx &gt; ty <span class="keyword">then</span> </span><br><span class="line">                dir = <span class="string">&#x27;right&#x27;</span></span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                dir = <span class="string">&#x27;down&#x27;</span></span><br><span class="line">            <span class="keyword">end</span> </span><br><span class="line">        <span class="keyword">end</span> </span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">if</span> y &gt; btn_dir_cy <span class="keyword">then</span> </span><br><span class="line">            <span class="keyword">if</span> tx &gt; ty <span class="keyword">then</span> </span><br><span class="line">                dir = <span class="string">&#x27;left&#x27;</span></span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                dir = <span class="string">&#x27;up&#x27;</span></span><br><span class="line">            <span class="keyword">end</span> </span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="keyword">if</span> tx &gt; ty <span class="keyword">then</span> </span><br><span class="line">                dir = <span class="string">&#x27;left&#x27;</span></span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                dir = <span class="string">&#x27;down&#x27;</span></span><br><span class="line">            <span class="keyword">end</span> </span><br><span class="line">        <span class="keyword">end</span> </span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line">    <span class="keyword">return</span> dir </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--触屏结束</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CtrlLayer:onTouchEnded</span><span class="params">(event)</span></span></span><br><span class="line">    <span class="keyword">local</span> x, y = event.x, event.y </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">self</span>:isInDirBtn(x, y) <span class="keyword">then</span> </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">self</span>:isInDirBtnCenter(x, y) <span class="keyword">then</span> </span><br><span class="line">            <span class="keyword">local</span> dir = <span class="built_in">self</span>:getDir(x, y)</span><br><span class="line">            <span class="built_in">self</span>.linstener:setDir(dir)</span><br><span class="line">        <span class="keyword">end</span> </span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> CtrlLayer </span><br></pre></td></tr></table></figure>
<p>效果图如下<br><img data-src="https://pic.imgdb.cn/item/6643416b0ea9cb1403bc72f0.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>游戏开发</category>
      </categories>
      <tags>
        <tag>Lua</tag>
        <tag>cocos2dx</tag>
      </tags>
  </entry>
  <entry>
    <title>cocos2dx-lua设置节点层级</title>
    <url>/39213.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>cocos2dx-lua如何设置节点层级</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">node:setLocalZOrder(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>说明：括号中的数字越大，表示层级越高。高层级的节点会覆盖在低层级节点上</p>
]]></content>
      <categories>
        <category>游戏开发</category>
      </categories>
      <tags>
        <tag>Lua</tag>
        <tag>cocos2dx</tag>
      </tags>
  </entry>
  <entry>
    <title>cocos2dx-lua返回指定文件的大小</title>
    <url>/6deadeef.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>返回指定文件的大小，如果失败返回 false</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- @function [parent=#io] filesize</span></span><br><span class="line"><span class="comment">-- @param string path 文件完全路径</span></span><br><span class="line"><span class="comment">-- @return integer#integer</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">io.filesize</span><span class="params">(path)</span></span></span><br><span class="line">    <span class="keyword">local</span> size = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">local</span> file = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="built_in">path</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> file <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> current = file:seek()</span><br><span class="line">        size = file:seek(<span class="string">&quot;end&quot;</span>)</span><br><span class="line">        file:seek(<span class="string">&quot;set&quot;</span>, current)</span><br><span class="line">        <span class="built_in">io</span>.<span class="built_in">close</span>(file)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> size</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>游戏开发</category>
      </categories>
      <tags>
        <tag>cocos2dx</tag>
        <tag>lua</tag>
      </tags>
  </entry>
  <entry>
    <title>cocos2dx(3.17)中csb文件使用方法</title>
    <url>/43145.html</url>
    <content><![CDATA[<p>开发环境：xcode 、vscode<br>开发语言：lua</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h2 id="一、手写代码加载csb文件，并获取控件"><a href="#一、手写代码加载csb文件，并获取控件" class="headerlink" title="一、手写代码加载csb文件，并获取控件"></a>一、手写代码加载csb文件，并获取控件</h2><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--加载csb场景文件，并将场景添加到节点中。</span></span><br><span class="line"><span class="keyword">local</span> node = cc.CSLoader:createNode(<span class="string">&quot;MenuScene.csb&quot;</span>)</span><br><span class="line"><span class="built_in">self</span>:addChild(node)</span><br><span class="line"><span class="comment">--获取场景中的根节点（场景的跟节点一般是容器）</span></span><br><span class="line"><span class="keyword">local</span> rootLayout = node:getChildByName(<span class="string">&quot;Panel_2&quot;</span>)</span><br><span class="line"><span class="comment">--强制转换，目前还没搞懂为啥要强制转换，可有可无，测试不写这串代码，一样可以获取到它的子节点。</span></span><br><span class="line"><span class="comment">-- local rootNode = tolua.cast(root, &quot;ccui.Widget&quot;)</span></span><br><span class="line"><span class="comment">--获取控件(按钮  复选框   图片   文本 进度条  滑动条  出入框等)</span></span><br><span class="line"><span class="keyword">local</span> button =rootLayout:getChildByName(<span class="string">&quot;Button_2&quot;</span>)</span><br><span class="line"><span class="comment">--给控件添加事件（不同控件，他的事件类型不同，使用的方法也就不同，），下面是给按钮添加点击事件</span></span><br><span class="line">button:addClickEventListener(<span class="function"><span class="keyword">function</span><span class="params">(sender,eventType)</span></span> </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;点击了开始按钮&quot;</span>)</span><br><span class="line"><span class="keyword">end</span>)    </span><br></pre></td></tr></table></figure>

<h3 id="控件的通用事件"><a href="#控件的通用事件" class="headerlink" title="控件的通用事件"></a>控件的通用事件</h3><p>一般想封装控件的通用事件的话，可以通过<code>addTouchEventListener(sender,eventType)</code>来添加事件，下面示例:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">    btn 控件本身对象</span></span><br><span class="line"><span class="comment">    ended 事件类型(放开)对应的回调函数</span></span><br><span class="line"><span class="comment">    began 事件类型(按下)对应的回调函数</span></span><br><span class="line"><span class="comment">    moved 事件类型(移动)对应的回调函数</span></span><br><span class="line"><span class="comment">    canceled 事件类型(取消)对应的回调函数</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cc.exports.setButtonFunction</span><span class="params">(btn, ended, began, moved, canceled)</span></span></span><br><span class="line">    btn:addTouchEventListener(<span class="function"><span class="keyword">function</span><span class="params">(sender, eventType)</span></span></span><br><span class="line">        <span class="keyword">if</span> eventType == ccui.TouchEventType.began <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">if</span> began <span class="keyword">then</span> began(sender) <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">elseif</span> eventType == ccui.TouchEventType.ended <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">if</span> ended <span class="keyword">then</span> ended(sender) <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">elseif</span> eventType == ccui.TouchEventType.moved <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">if</span> moved <span class="keyword">then</span> moved(sender) <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">elseif</span> eventType == ccui.TouchEventType.canceled <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">if</span> canceled <span class="keyword">then</span> canceled(sender) <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h2 id="二、通过mvc-ViewBase加载csb文件"><a href="#二、通过mvc-ViewBase加载csb文件" class="headerlink" title="二、通过mvc ViewBase加载csb文件"></a>二、通过mvc ViewBase加载csb文件</h2><blockquote>
<p>博主一般都采用这种方法</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> MainScene = class(<span class="string">&quot;MainScene&quot;</span>,cc.<span class="built_in">load</span>(<span class="string">&quot;mvc&quot;</span>).ViewBase)</span><br><span class="line">    MainScene.RESOURCE_FILENAME=<span class="string">&quot;MenuScene.csb&quot;</span>    <span class="comment">--自己在cocos studio上建立的csb文件导入工程文件res文件夹下面</span></span><br><span class="line">    MainScene.RESOURCE_BINDING = &#123;</span><br><span class="line">        [<span class="string">&quot;Button_2&quot;</span>]   = &#123;</span><br><span class="line"></span><br><span class="line">            [<span class="string">&quot;varname&quot;</span>] = <span class="string">&quot;bn_StartGame&quot;</span>,  </span><br><span class="line"></span><br><span class="line">            [<span class="string">&quot;events&quot;</span>] = &#123; </span><br><span class="line">                &#123;</span><br><span class="line">                    event = <span class="string">&quot;touch&quot;</span> ,  </span><br><span class="line">                    method =<span class="string">&quot;onBack&quot;</span>   </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    funcation MainScene:ctor()</span><br><span class="line">        <span class="built_in">self</span>.bn_StartGame:addClickEventListener(<span class="function"><span class="keyword">function</span><span class="params">(sender,eventType)</span></span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;点击了开始按钮&quot;</span>)</span><br><span class="line">        <span class="keyword">end</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    funcation MainScene:onBack()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;触摸了&quot;</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> MainScene</span><br></pre></td></tr></table></figure>
<h3 id="1、MainScene-RESOURCE-FILENAME-”MenuScene-csb”"><a href="#1、MainScene-RESOURCE-FILENAME-”MenuScene-csb”" class="headerlink" title="1、MainScene.RESOURCE_FILENAME&#x3D;”MenuScene.csb”"></a>1、MainScene.RESOURCE_FILENAME&#x3D;”MenuScene.csb”</h3><blockquote>
<p>这个变量是设置场景的csb文件名称，读取时在ViewBase类中读取的<br>下面会讲一下ViewBase类怎么读取的。</p>
</blockquote>
<h3 id="2、MainScene-RESOURCE-FILENAME"><a href="#2、MainScene-RESOURCE-FILENAME" class="headerlink" title="2、MainScene.RESOURCE_FILENAME"></a>2、MainScene.RESOURCE_FILENAME</h3><blockquote>
<p>这个变量是设置绑定控件，获取控件的实例</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">MainScene.RESOURCE_BINDING = &#123;</span><br><span class="line">       [<span class="string">&quot;Button_2&quot;</span>]   = &#123;</span><br><span class="line"></span><br><span class="line">           [<span class="string">&quot;varname&quot;</span>] = <span class="string">&quot;bn_StartGame&quot;</span>,  </span><br><span class="line"></span><br><span class="line">           [<span class="string">&quot;events&quot;</span>] = &#123; </span><br><span class="line">               &#123;</span><br><span class="line">                   event = <span class="string">&quot;touch&quot;</span> ,  </span><br><span class="line">                   method =<span class="string">&quot;onBack&quot;</span>   </span><br><span class="line">               &#125;</span><br><span class="line">           &#125;  </span><br><span class="line">       &#125;</span><br><span class="line">   &#125; </span><br></pre></td></tr></table></figure>
<p>使用方式模板（两种方式）：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">MainScene.RESOURCE_BINDING =</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">--不添加事件</span></span><br><span class="line">    [<span class="string">&quot;cocos控件名&quot;</span>] = &#123;[<span class="string">&quot;varname&quot;</span>] = <span class="string">&quot;引用变量名&quot;</span> &#125; </span><br><span class="line">    <span class="comment">--添加事件</span></span><br><span class="line">    [<span class="string">&quot;cocos控件名&quot;</span>] = &#123;[<span class="string">&quot;varname&quot;</span>] = <span class="string">&quot;引用变量名&quot;</span>,[<span class="string">&quot;events&quot;</span>]=&#123;&#123;[<span class="string">&quot;event&quot;</span>]=<span class="string">&quot;事件类型(原生现在支持一种)&quot;</span>,[<span class="string">&quot;method&quot;</span>]=<span class="string">&quot;回调函数&quot;</span>&#125;,...&#125;&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">获取子控件</span><br><span class="line"><span class="built_in">self</span>.root = <span class="built_in">self</span>:getResourceNode()</span><br><span class="line"><span class="keyword">local</span> Button = <span class="built_in">self</span>.root:getChildByName(<span class="string">&quot;Button_1&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="三、ViewBase类源码讲解"><a href="#三、ViewBase类源码讲解" class="headerlink" title="三、ViewBase类源码讲解"></a>三、ViewBase类源码讲解</h2><p>源码示例：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> ViewBase = class(<span class="string">&quot;ViewBase&quot;</span>, cc.Node)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ViewBase:ctor</span><span class="params">(app, name)</span></span></span><br><span class="line">    <span class="built_in">self</span>:enableNodeEvents()</span><br><span class="line">    <span class="built_in">self</span>.app_ = app</span><br><span class="line">    <span class="built_in">self</span>.name_ = name</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 检查子类中是否设置RESOURCE_FILENAME属性，并得到他的value值</span></span><br><span class="line">    <span class="keyword">local</span> res = <span class="built_in">rawget</span>(<span class="built_in">self</span>.class, <span class="string">&quot;RESOURCE_FILENAME&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> res <span class="keyword">then</span></span><br><span class="line">        <span class="comment">--加载csb文件</span></span><br><span class="line">        <span class="built_in">self</span>:createResourceNode(res)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="comment">--检查子类中是否设置RESOURCE_BINDING属性，并得到他的value值</span></span><br><span class="line">    <span class="keyword">local</span> binding = <span class="built_in">rawget</span>(<span class="built_in">self</span>.class, <span class="string">&quot;RESOURCE_BINDING&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> res <span class="keyword">and</span> binding <span class="keyword">then</span></span><br><span class="line">        <span class="comment">--获取控件的实例</span></span><br><span class="line">        <span class="built_in">self</span>:createResourceBinding(binding)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="comment">--判断子类有没有重写onCreate方法，有，调用子类的onCreate方法</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">self</span>.onCreate <span class="keyword">then</span> <span class="built_in">self</span>:onCreate() <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ViewBase:getApp</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">self</span>.app_</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ViewBase:getName</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">self</span>.name_</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ViewBase:getResourceNode</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">self</span>.resourceNode_</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">    *加载csb文件的方法</span></span><br><span class="line"><span class="comment">    *resourceFilename 文件名称(带后缀名)</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ViewBase:createResourceNode</span><span class="params">(resourceFilename)</span></span></span><br><span class="line">    <span class="comment">--判断是否已经加载过csb文件</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">self</span>.resourceNode_ <span class="keyword">then</span></span><br><span class="line">        <span class="comment">--移除自己</span></span><br><span class="line">        <span class="built_in">self</span>.resourceNode_:removeSelf()</span><br><span class="line">        <span class="comment">--设置为nil</span></span><br><span class="line">        <span class="built_in">self</span>.resourceNode_ = <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="comment">--通过CSLoader加载csb文件，得到一个节点</span></span><br><span class="line">    <span class="built_in">self</span>.resourceNode_ = cc.CSLoader:createNode(resourceFilename)</span><br><span class="line">    <span class="built_in">assert</span>(<span class="built_in">self</span>.resourceNode_, <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;ViewBase:createResourceNode() - load resouce node from file \&quot;%s\&quot; failed&quot;</span>, resourceFilename))</span><br><span class="line">    <span class="comment">--将节点添加到该父节点（场景，层）中</span></span><br><span class="line">    <span class="built_in">self</span>:addChild(<span class="built_in">self</span>.resourceNode_)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">    *绑定控件</span></span><br><span class="line"><span class="comment">    *binding 在ViewBase子类中设置的RESOURCE_BINDING（规则模板（表））</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ViewBase:createResourceBinding</span><span class="params">(binding)</span></span></span><br><span class="line">    <span class="built_in">assert</span>(<span class="built_in">self</span>.resourceNode_, <span class="string">&quot;ViewBase:createResourceBinding() - not load resource node&quot;</span>)</span><br><span class="line">    <span class="comment">--遍历规则表</span></span><br><span class="line">    <span class="keyword">for</span> nodeName, nodeBinding <span class="keyword">in</span> <span class="built_in">pairs</span>(binding) <span class="keyword">do</span></span><br><span class="line">        <span class="comment">--节点通过名称直接获取子控件实例</span></span><br><span class="line">        <span class="comment">--这里就是我上面说的问题所在了，这里是直接通过根节点获取控件，往往，根节点的子节点是容器，而不是控件，所以这里会得不到控件</span></span><br><span class="line">        <span class="keyword">local</span> node = <span class="built_in">self</span>.resourceNode_:getChildByName(nodeName)</span><br><span class="line">        <span class="comment">--如果设置变量名不为nil</span></span><br><span class="line">        <span class="keyword">if</span> nodeBinding.varname <span class="keyword">then</span></span><br><span class="line">            <span class="comment">--则将node赋值类nodeBinding.varname变量</span></span><br><span class="line">            <span class="built_in">self</span>[nodeBinding.varname] = node</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="comment">--遍历规则表中的事件</span></span><br><span class="line">        <span class="comment">--nodeBinding.events or &#123;&#125;这个表达式相当于三目运算 nodeBinding.events~=nil?nodeBinding.events:&#123;&#125;</span></span><br><span class="line">        <span class="keyword">for</span> _, event <span class="keyword">in</span> <span class="built_in">ipairs</span>(nodeBinding.events <span class="keyword">or</span> &#123;&#125;) <span class="keyword">do</span></span><br><span class="line">            <span class="comment">--原生这里只支持touch事件，如果有别的需求可自行添加</span></span><br><span class="line">            <span class="keyword">if</span> event.event == <span class="string">&quot;touch&quot;</span> <span class="keyword">then</span></span><br><span class="line">                <span class="comment">--给控件设置onTouch事件并设置回调函数。</span></span><br><span class="line">                node:onTouch(handler(<span class="built_in">self</span>, <span class="built_in">self</span>[event.method]))</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">    *跳转场景（翻译：展示场景）</span></span><br><span class="line"><span class="comment">    *transition 衔接动画</span></span><br><span class="line"><span class="comment">    *time  衔接动画播放时间</span></span><br><span class="line"><span class="comment">    *more  动画类型</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ViewBase:showWithScene</span><span class="params">(transition, time, more)</span></span></span><br><span class="line">    <span class="built_in">self</span>:setVisible(<span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">local</span> scene = display.newScene(<span class="built_in">self</span>.name_)</span><br><span class="line">    scene:addChild(<span class="built_in">self</span>)</span><br><span class="line">    display.runScene(scene, transition, <span class="built_in">time</span>, more)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">self</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ViewBase</span><br></pre></td></tr></table></figure>
<p>修改<code>createResourceBinding</code>方法，达到可以使用<code>RESOURCE_BINDING</code>来绑定控件事件的目的（修复原生方法不能绑定使用容器包裹的控件的问题。）</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--新增一个dom树表，用于存储dom树各个节点</span></span><br><span class="line">ViewBase.dom = &#123;&#125;</span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">    *递归遍历整个场景树中的容器和控件，将容器和控件存入dom表中</span></span><br><span class="line"><span class="comment">    *rootNode 节点类型</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">recursionChlidNOde</span><span class="params">(rootNode)</span></span></span><br><span class="line">    <span class="keyword">local</span>  children = rootNode:getChildren()</span><br><span class="line">    <span class="keyword">for</span> _,childNOde <span class="keyword">in</span> <span class="built_in">ipairs</span>(children <span class="keyword">or</span> &#123;&#125;) <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">local</span> name =childNOde:getName()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;name &quot;</span>,name)</span><br><span class="line">        ViewBase.dom[name]=childNOde</span><br><span class="line">        recursionChlidNOde(childNOde)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ViewBase:createResourceBinding</span><span class="params">(binding)</span></span></span><br><span class="line">    <span class="built_in">assert</span>(<span class="built_in">self</span>.resourceNode_, <span class="string">&quot;ViewBase:createResourceBinding() - not load resource node&quot;</span>)</span><br><span class="line">    recursionChlidNOde(<span class="built_in">self</span>.resourceNode_)</span><br><span class="line">    <span class="keyword">for</span> bindWidgetName, ruleTable <span class="keyword">in</span> <span class="built_in">pairs</span>(binding) <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">for</span> widgetName,node <span class="keyword">in</span> <span class="built_in">pairs</span>(ViewBase.dom) <span class="keyword">do</span></span><br><span class="line">            <span class="built_in">print</span>(widgetName,tolua.<span class="built_in">type</span>(node)) </span><br><span class="line">            <span class="keyword">if</span> ruleTable.varname <span class="keyword">and</span> widgetName==bindWidgetName <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">self</span>[ruleTable.varname] = node</span><br><span class="line">                <span class="keyword">for</span> _, event <span class="keyword">in</span> <span class="built_in">ipairs</span>(ruleTable.events <span class="keyword">or</span> &#123;&#125;) <span class="keyword">do</span></span><br><span class="line">                    <span class="keyword">if</span> event.event == <span class="string">&quot;touch&quot;</span> <span class="keyword">then</span></span><br><span class="line">                        node:onTouch(handler(<span class="built_in">self</span>, <span class="built_in">self</span>[event.method]))</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>游戏开发</category>
      </categories>
      <tags>
        <tag>Lua</tag>
        <tag>cocos2dx</tag>
      </tags>
  </entry>
  <entry>
    <title>1024程序员节，致敬编码的艺术之美</title>
    <url>/65bbb015.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>今天是10月24日，星期一。在网上无意间看到说什么今天是什么1024程序员节。<br>说实话，挺诧异的，没想到程序员还有自己的节日。</p>
<h3 id="程序员节的来历"><a href="#程序员节的来历" class="headerlink" title="程序员节的来历"></a>程序员节的来历</h3><p>抱着好奇的心在网上查了下程序员节的来历，居然还挺有意义的。因为<br>1024 其实就是 2 的十次方，二进制计数的基本计量单位之一，是程序员每天都在打交道的数字。<br>其次，每年10月24日是”联合国日”（1947 年起），也是世界发展信息日，所以这一天对于程序员来说非常有纪念意义。</p>
<p>既然知道了，那么就祝天下所有程序员们节日快乐，写代码无bug，头发一直茂盛~</p>
<h3 id="大佬寄语"><a href="#大佬寄语" class="headerlink" title="大佬寄语"></a>大佬寄语</h3><ul>
<li>程序员应该是艺术家（Artist），而非匠人（Worker）——后者只会堆砌代码，而前者能创造出美好的作品  –C++之父Bjarne Stroustrup</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>1024程序员节</tag>
        <tag>编码</tag>
        <tag>节日</tag>
        <tag>致敬</tag>
      </tags>
  </entry>
  <entry>
    <title>cocos2dx中Sprite和ImageView的使用</title>
    <url>/e883772a.html</url>
    <content><![CDATA[<p>开发环境：<br>cocos studio 3.10<br>quick-cocos2dx 3.7.8<br>windows11</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在使用的时候一定要注意节点属性，是精灵Sprite还是图片ImageView<br>因为Sprite和ImageView设置图片的方法是不一样的，如果是用代码创建的，那就不用说了，如果是使用cocos studio创建，可以在图片所示位置查看属性。<br><img data-src="https://s1.ax1x.com/2022/11/21/zQ6Gb6.png" alt="" /><br><img data-src="https://s1.ax1x.com/2022/11/21/zQ6YVK.png" alt="" /></p>
<h2 id="异同"><a href="#异同" class="headerlink" title="异同"></a>异同</h2><h3 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h3><ul>
<li>Sprite 和ImageView 都可以作为容器显示一张图片</li>
<li>ImageView实质为一个九宫精灵</li>
</ul>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul>
<li>Sprite：继承自Node，是Cocos当中的渲染基类</li>
<li>ImageView:继承自Widget,Widget是Cocos当中所有UI组件的基类。</li>
<li>ImageView拥有UI组件封装好的一些功能，例如事件的监听。</li>
<li>在对图片不做特殊处理的情况下，用Sprite和ImageView没什么区别，如果要对图片进行进一步操作，那就需要根据实际情况选择。</li>
</ul>
<h2 id="更换图片"><a href="#更换图片" class="headerlink" title="更换图片"></a>更换图片</h2><h3 id="Sprite"><a href="#Sprite" class="headerlink" title="Sprite"></a>Sprite</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> frame = cc.SpriteFrameCache:getInstance():getSpriteFrame(pathImg)</span><br><span class="line"><span class="keyword">if</span> frame <span class="keyword">then</span> </span><br><span class="line">    sprite:setSpriteFrame (frame) <span class="comment">-- 这里判断可以不用加，看个人习惯，加个判断可以判定图片是否存在</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="ImageView"><a href="#ImageView" class="headerlink" title="ImageView"></a>ImageView</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">ImageView:loadTexture(pathImg)</span><br></pre></td></tr></table></figure>

<h2 id="使用图集"><a href="#使用图集" class="headerlink" title="使用图集"></a>使用图集</h2><p>上面介绍的方法是使用单张图片，下面介绍使用图集的方法<br>首先加载图集</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">display.addSpriteFrames(<span class="string">&quot;img.plist&quot;</span>,<span class="string">&quot;img.png&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="Sprite-1"><a href="#Sprite-1" class="headerlink" title="Sprite"></a>Sprite</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">sprite:setSpriteFrame(cc.SpriteFrameCache:getInstance():getSpriteFrame(<span class="string">&quot;imgName.png&quot;</span>))  <span class="comment">-- 图集中图片的名字</span></span><br></pre></td></tr></table></figure>
<h3 id="ImageView-1"><a href="#ImageView-1" class="headerlink" title="ImageView"></a>ImageView</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">ImageView:loadTexture(imgName,<span class="number">1</span>) <span class="comment">--后面参数1表示使用图集中的图片</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>游戏开发</category>
      </categories>
      <tags>
        <tag>Lua</tag>
        <tag>cocos2dx</tag>
        <tag>Sprite</tag>
        <tag>ImageView</tag>
      </tags>
  </entry>
  <entry>
    <title>cocos2dx_lua键盘监听</title>
    <url>/28873.html</url>
    <content><![CDATA[<p>开发环境：cocos2dx 3.17<br>开发语言：lua<br>这里用lua实现对键盘的监听</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>下面直接上代码吧</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">keyboardPressed</span><span class="params">(KeyCode,event)</span></span></span><br><span class="line">        <span class="built_in">print</span>(KeyCode)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">keyboardReleased</span><span class="params">(KeyCode,event)</span></span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">local</span> listener = cc.EventListenerKeyboard:<span class="built_in">create</span>()  </span><br><span class="line">    listener:registerScriptHandler(keyboardPressed, cc.Handler.EVENT_KEYBOARD_PRESSED)  </span><br><span class="line">    listener:registerScriptHandler(keyboardReleased, cc.Handler.EVENT_KEYBOARD_RELEASED)  </span><br><span class="line">    <span class="keyword">local</span> eventDispatcher = <span class="built_in">self</span>:getEventDispatcher()  </span><br><span class="line">    eventDispatcher:addEventListenerWithSceneGraphPriority(listener,<span class="built_in">self</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>游戏开发</category>
      </categories>
      <tags>
        <tag>Lua</tag>
        <tag>cocos2dx</tag>
      </tags>
  </entry>
  <entry>
    <title>cocos2dx纹理源码分析</title>
    <url>/5380d61b.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>当一张图片被加载到内存后，它是以纹理的形式存在的。纹理是什么东西呢？纹理就是一块内存，这块内存中存放的是按照指定的像素格式填充的图片像素信息。它被最终作为三角面着色所依据的数据源。<br>我们来看一下cocos2d-x中的libcocos2d库，其下有许多目录，找到textures展开，我们找到<strong>CCTexture2D</strong>,<strong>CCTextureAtlas</strong>,<strong>CCTextureCache</strong>,<strong>CCTexturePVR</strong>四个类。</p>
<h2 id="四个类的功能："><a href="#四个类的功能：" class="headerlink" title="四个类的功能："></a>四个类的功能：</h2><p><strong>CCTexture2D:</strong>  纹理，即图片加载入内存后供CPU和GPU操作的贴图对象。<br><strong>CCTexturePVR:</strong> 处理PVR文件生成纹理的类，大家可以用它解析愤怒的小鸟中的图片。<br><strong>CCTextureCache:</strong> 纹理管理器，负责加载图片并对生成的纹理进行管理。通过“字典”来进行快速的查询。<br><strong>CCTextureAtlas:</strong> 纹理块管理器，如果图片是由多个小图块组成的，则纹理块管理器用来存储这些小图块的相关信息，以方便绘制相应图块。</p>
<h3 id="CCTexture2D"><a href="#CCTexture2D" class="headerlink" title="CCTexture2D"></a>CCTexture2D</h3><p>好，咱们现在开始看<code>CCTexture2D</code>:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __CCTEXTURE2D_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __CCTEXTURE2D_H__</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cocoa/CCObject.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cocoa/CCGeometry.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ccTypes.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//Cocos2d命名空间</span></span><br><span class="line">NS_CC_BEGIN</span><br><span class="line"><span class="comment">//需要用到CCImage，这里声明一下。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CCImage</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//纹理格式:即每个纹理中的像素单位分别是怎么为颜色值进行实际内存分配的。这个非常重要，我们在进行游戏开发的过程中，会常常与各种图片类型打交通。每种图片往往也有各自的像素格式。但当它们一旦加载到游戏中后，就会根据我们的要求变成以下某种类型的纹理。不同的纹理格式所占据的内存大小可能不同，我们要根据实际情况和需求来选择相应的纹理格式。比如我们用RGBA8888纹理格式来创建纹理，它占据的内存容量很大，如果我们要显示的纹理中没有ALPHA值，那就不应该使用带ALPHA通道的纹理格式。我们就可以改成RGB565像素格式。</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//32位真彩色，最真但最耗内存</span></span><br><span class="line">    kCCTexture2DPixelFormat_RGBA8888,</span><br><span class="line">    <span class="comment">//24位真彩色，去掉了ALPHA通道</span></span><br><span class="line">    kCCTexture2DPixelFormat_RGB888,</span><br><span class="line">    <span class="comment">//16位色，将RGB压缩在一个字中。绿色多了1位，因为人眼对绿色更敏感。</span></span><br><span class="line">    kCCTexture2DPixelFormat_RGB565,</span><br><span class="line">    <span class="comment">//8位色，只存ALPHA值，做遮罩图用</span></span><br><span class="line">    kCCTexture2DPixelFormat_A8,</span><br><span class="line">    <span class="comment">//8位色，只存灰度或者强度值，做灰度图用</span></span><br><span class="line">    kCCTexture2DPixelFormat_I8,</span><br><span class="line">    <span class="comment">//16位色，只存ALPHA值与强度值，双功能</span></span><br><span class="line">    kCCTexture2DPixelFormat_AI88,</span><br><span class="line">    <span class="comment">//16位色，RGBA四通道各占4位。</span></span><br><span class="line">    kCCTexture2DPixelFormat_RGBA4444,</span><br><span class="line">    <span class="comment">//16位色，RGB三通道各占5位，多1位留做ALPHA镂空使用</span></span><br><span class="line">    kCCTexture2DPixelFormat_RGB5A1,</span><br><span class="line">    <span class="comment">// PVR的PVRTC4压缩格式</span></span><br><span class="line">    kCCTexture2DPixelFormat_PVRTC4,</span><br><span class="line">    <span class="comment">// PVRTC的PVRTC2压缩格式</span></span><br><span class="line">    kCCTexture2DPixelFormat_PVRTC2,</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//默认格式RGBA8888</span></span><br><span class="line">    kCCTexture2DPixelFormat_Default = kCCTexture2DPixelFormat_RGBA8888,</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 为了兼容性而保留的枚举值</span></span><br><span class="line">    kTexture2DPixelFormat_RGBA8888 = kCCTexture2DPixelFormat_RGBA8888,</span><br><span class="line">    kTexture2DPixelFormat_RGB888 = kCCTexture2DPixelFormat_RGB888,</span><br><span class="line">    kTexture2DPixelFormat_RGB565 = kCCTexture2DPixelFormat_RGB565,</span><br><span class="line">    kTexture2DPixelFormat_A8 = kCCTexture2DPixelFormat_A8,</span><br><span class="line">    kTexture2DPixelFormat_RGBA4444 = kCCTexture2DPixelFormat_RGBA4444,</span><br><span class="line">    kTexture2DPixelFormat_RGB5A1 = kCCTexture2DPixelFormat_RGB5A1,</span><br><span class="line">    kTexture2DPixelFormat_Default = kCCTexture2DPixelFormat_Default</span><br><span class="line"> </span><br><span class="line">&#125; CCTexture2DPixelFormat;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//需要使用Shader代码片段，这里声明一下</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CCGLProgram</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//定义了纹理的一些参数</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_ccTexParams</span> &#123;</span><br><span class="line">    GLuint    minFilter;<span class="comment">//纹理过滤器：缩小过滤器</span></span><br><span class="line">    GLuint    magFilter;<span class="comment">//纹理过滤器：放大过滤器</span></span><br><span class="line">    GLuint    wrapS;<span class="comment">//横向纹理寻址模式</span></span><br><span class="line">    GLuint    wrapT;<span class="comment">//纵向纹理寻址模式</span></span><br><span class="line">&#125; ccTexParams;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// CCTexture2D类可以方便的从图片，文本或raw数据文件中创建OpenGL所用贴图，创建的贴图会自动转为2的幂次方大小，所以要注意对于贴图坐标的影响。</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CC_DLL</span> CCTexture2D : <span class="keyword">public</span> CCObject</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//构造</span></span><br><span class="line"><span class="built_in">CCTexture2D</span>();</span><br><span class="line"><span class="comment">//析构</span></span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">CCTexture2D</span>();</span><br><span class="line">    <span class="comment">//取得纹理的描述</span></span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">description</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//释放数据</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">releaseData</span><span class="params">(<span class="type">void</span> *data)</span></span>;</span><br><span class="line"> <span class="comment">//保存数据</span></span><br><span class="line">    <span class="function"><span class="type">void</span>* <span class="title">keepData</span><span class="params">(<span class="type">void</span> *data, <span class="type">unsigned</span> <span class="type">int</span> length)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//由数据指针和指定的像素格式，图片宽高，来生成OpenGL贴图。</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">initWithData</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* data, CCTexture2DPixelFormat pixelFormat, <span class="type">unsigned</span> <span class="type">int</span> pixelsWide, <span class="type">unsigned</span> <span class="type">int</span> pixelsHigh, <span class="type">const</span> CCSize&amp; contentSize)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//在指定的位置绘制贴图</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">drawAtPoint</span><span class="params">(<span class="type">const</span> CCPoint&amp; point)</span></span>;</span><br><span class="line">    <span class="comment">//纹制贴图上的一个图像块</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">drawInRect</span><span class="params">(<span class="type">const</span> CCRect&amp; rect)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//由CCImage指针生成OpenGL贴图</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">initWithImage</span><span class="params">(CCImage * uiImage)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//由一个字符串生成OpenGL贴图。</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">initWithString</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *text, <span class="type">const</span> CCSize&amp; dimensions, CCTextAlignment hAlignment, CCVerticalTextAlignment vAlignment, <span class="type">const</span> <span class="type">char</span> *fontName, <span class="type">float</span> fontSize)</span></span>;</span><br><span class="line">    <span class="comment">//由一个字符串和指定的字体与大小生成OpenGL贴图</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">initWithString</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *text, <span class="type">const</span> <span class="type">char</span> *fontName, <span class="type">float</span> fontSize)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//如果支持PVR的压缩格式</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CC_SUPPORT_PVRTC</span></span><br><span class="line">    <span class="comment">//由一个PVR压缩格式的数据生成OpenGL贴图</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">initWithPVRTCData</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *data, <span class="type">int</span> level, <span class="type">int</span> bpp, <span class="type">bool</span> hasAlpha, <span class="type">int</span> length, CCTexture2DPixelFormat pixelFormat)</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// CC_SUPPORT_PVRTC</span></span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">//从普通PVR文件生成OpenGL贴图</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">initWithPVRFile</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* file)</span></span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//设置贴图参数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setTexParameters</span><span class="params">(ccTexParams* texParams)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//设置为抗锯齿的贴图过滤方式（线性过滤）</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setAntiAliasTexParameters</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//设置为非抗锯齿的贴图过滤方式（最近点采样）</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setAliasTexParameters</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//生成多级贴图: 由图片数据生成一系列尺寸为2的幂次方直至当前贴图大小的贴图。系统会根据距离自动选择纹理图片。可以解决大图片显示在小空间时的闪烁问题。</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">generateMipmap</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//取得像素格式名称</span></span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">stringForFormat</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//返回当前贴图色深，即每个像素占多少位</span></span><br><span class="line">    <span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">bitsPerPixelForFormat</span><span class="params">()</span></span>;  </span><br><span class="line"> </span><br><span class="line"><span class="comment">//通过参数贴图格式返回纹理色深</span></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">bitsPerPixelForFormat</span><span class="params">(CCTexture2DPixelFormat format)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//静态函数，用于设置默认带ALPHA通道的贴图像素格式。则图片创建为贴图时，如果有ALPHA通道，则生成此默认贴图像素格式。</span></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">setDefaultAlphaPixelFormat</span><span class="params">(CCTexture2DPixelFormat format)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//静态函数，取得默认带ALPHA通道的贴图像素格式。</span></span><br><span class="line">    <span class="function"><span class="type">static</span> CCTexture2DPixelFormat <span class="title">defaultAlphaPixelFormat</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//静态函数，设置载入PVR时是否开启ALPHA渐变，默认不开启，则ALPHA值只有是与否，无渐变。</span></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">PVRImagesHavePremultipliedAlpha</span><span class="params">(<span class="type">bool</span> haveAlphaPremultiplied)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//取得图片大小（以像素为单位）</span></span><br><span class="line">    <span class="function"><span class="type">const</span> CCSize&amp; <span class="title">getContentSizeInPixels</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//是否有ALPHA渐变值</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">hasPremultipliedAlpha</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//是否有多级贴图</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasMipmaps</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//加载一个带ALPHA渐变的图片生成OpenGL贴图</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">initPremultipliedATextureWithImage</span><span class="params">(CCImage * image, <span class="type">unsigned</span> <span class="type">int</span> pixelsWide, <span class="type">unsigned</span> <span class="type">int</span> pixelsHigh)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//ALPHA渐变开关</span></span><br><span class="line">    <span class="type">bool</span> m_bPVRHaveAlphaPremultiplied;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//贴图格式变量及get接口</span></span><br><span class="line">    <span class="built_in">CC_PROPERTY_READONLY</span>(CCTexture2DPixelFormat, m_ePixelFormat, PixelFormat)</span><br><span class="line">    <span class="comment">//贴图宽度及get接口</span></span><br><span class="line">    <span class="built_in">CC_PROPERTY_READONLY</span>(<span class="type">unsigned</span> <span class="type">int</span>, m_uPixelsWide, PixelsWide)</span><br><span class="line">    <span class="comment">//贴图高度及get接口</span></span><br><span class="line">    <span class="built_in">CC_PROPERTY_READONLY</span>(<span class="type">unsigned</span> <span class="type">int</span>, m_uPixelsHigh, PixelsHigh)</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//OpenGL贴图索引及get接口</span></span><br><span class="line">    <span class="built_in">CC_PROPERTY_READONLY</span>(GLuint, m_uName, Name)</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//横向贴图坐标终点。因为图片如果不是2的幂次方，图片大小会小于贴图的大小，贴图一定是2的幂次方嘛，这时候横向的贴图坐标终点不是1.0。</span></span><br><span class="line">    <span class="built_in">CC_PROPERTY</span>(GLfloat, m_fMaxS, MaxS)</span><br><span class="line">    <span class="comment">//纵向贴图坐标终点。</span></span><br><span class="line">    <span class="built_in">CC_PROPERTY</span>(GLfloat, m_fMaxT, MaxT)</span><br><span class="line">    <span class="comment">//图片大小及get接口</span></span><br><span class="line">    <span class="built_in">CC_PROPERTY_READONLY</span>(CCSize, m_tContentSize, ContentSize)</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// ALPHA渐变开关</span></span><br><span class="line">    <span class="type">bool</span> m_bHasPremultipliedAlpha;</span><br><span class="line">    <span class="comment">// 多级纹理开关</span></span><br><span class="line">    <span class="type">bool</span> m_bHasMipmaps;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//Shader代码片段指针</span></span><br><span class="line">    <span class="built_in">CC_PROPERTY</span>(CCGLProgram*, m_pShaderProgram, ShaderProgram);</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">NS_CC_END</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//__CCTEXTURE2D_H__</span></span></span><br></pre></td></tr></table></figure>
<p>再来看<code>CCTexture2D.cpp:</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CCTexture2D.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ccConfig.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ccMacros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CCConfiguration.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;platform/platform.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;platform/CCImage.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CCGL.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;support/ccUtils.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;platform/CCPlatformMacros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;textures/CCTexturePVR.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CCDirector.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;shaders/CCGLProgram.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;shaders/ccGLStateCache.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;shaders/CCShaderCache.h&quot;</span></span></span><br><span class="line"><span class="comment">//这里定义是否使用可变纹理</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> CC_ENABLE_CACHE_TEXTURE_DATA</span></span><br><span class="line">    <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CCTextureCache.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">//Cocos2d-x命名空间</span></span><br><span class="line">NS_CC_BEGIN</span><br><span class="line"> </span><br><span class="line"><span class="comment">//静态全局的默认贴图像素格式。缺省为kCCTexture2DPixelFormat_Default，即RGBA8888。</span></span><br><span class="line"><span class="type">static</span> CCTexture2DPixelFormat g_defaultAlphaPixelFormat = kCCTexture2DPixelFormat_Default;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//静态全局的PVR是否有ALPHA渐变的开关变量，默认为否。</span></span><br><span class="line"><span class="type">static</span> <span class="type">bool</span> PVRHaveAlphaPremultiplied_ = <span class="literal">false</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//构造函数。</span></span><br><span class="line">CCTexture2D::<span class="built_in">CCTexture2D</span>()</span><br><span class="line">: <span class="built_in">m_uPixelsWide</span>()</span><br><span class="line">, <span class="built_in">m_uPixelsHigh</span>()</span><br><span class="line">, <span class="built_in">m_uName</span>()</span><br><span class="line">, <span class="built_in">m_fMaxS</span>(<span class="number">0.0</span>)</span><br><span class="line">, <span class="built_in">m_fMaxT</span>(<span class="number">0.0</span>)</span><br><span class="line">, <span class="built_in">m_bHasPremultipliedAlpha</span>(<span class="literal">false</span>)</span><br><span class="line">, <span class="built_in">m_bHasMipmaps</span>(<span class="literal">false</span>)</span><br><span class="line">, <span class="built_in">m_bPVRHaveAlphaPremultiplied</span>(<span class="literal">true</span>)</span><br><span class="line">, <span class="built_in">m_pShaderProgram</span>(<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//析构</span></span><br><span class="line">CCTexture2D::~<span class="built_in">CCTexture2D</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果使用可变纹理，删除此可变纹理中的数据。</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> CC_ENABLE_CACHE_TEXTURE_DATA</span></span><br><span class="line">    VolatileTexture::<span class="built_in">removeTexture</span>(<span class="keyword">this</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">//打印日志。</span></span><br><span class="line"><span class="built_in">CCLOGINFO</span>(<span class="string">&quot;cocos2d: deallocing CCTexture2D %u.&quot;</span>, m_uName);</span><br><span class="line"><span class="comment">//释放所用到的Shader代码片段</span></span><br><span class="line">    <span class="built_in">CC_SAFE_RELEASE</span>(m_pShaderProgram);</span><br><span class="line"><span class="comment">//释放OpenGL所用到的贴图。</span></span><br><span class="line">    <span class="keyword">if</span>(m_uName)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">ccGLDeleteTexture</span>(m_uName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取得当前纹理的贴图像素格式。</span></span><br><span class="line"><span class="function">CCTexture2DPixelFormat <span class="title">CCTexture2D::getPixelFormat</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_ePixelFormat;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取得贴图宽度。</span></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">CCTexture2D::getPixelsWide</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_uPixelsWide;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取得贴图高度。</span></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">CCTexture2D::getPixelsHigh</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_uPixelsHigh;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取得贴图索引。</span></span><br><span class="line"><span class="function">GLuint <span class="title">CCTexture2D::getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_uName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取得图片大小（以点为单位）</span></span><br><span class="line"><span class="function">CCSize <span class="title">CCTexture2D::getContentSize</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// CC_CONTENT_SCALE_FACTOR宏返回的是在不同屏幕下的点与像素的比率。Mac电脑上返回1.而使用Retina显示屏的iphone上返回2。</span></span><br><span class="line">    CCSize ret;</span><br><span class="line">    ret.width = m_tContentSize.width / <span class="built_in">CC_CONTENT_SCALE_FACTOR</span>();</span><br><span class="line">    ret.height = m_tContentSize.height / <span class="built_in">CC_CONTENT_SCALE_FACTOR</span>();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取得图片大小（以像素为单位）</span></span><br><span class="line"><span class="function"><span class="type">const</span> CCSize&amp; <span class="title">CCTexture2D::getContentSizeInPixels</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_tContentSize;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取得横向的贴图坐标终点</span></span><br><span class="line"><span class="function">GLfloat <span class="title">CCTexture2D::getMaxS</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_fMaxS;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置横向的贴图坐标终点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CCTexture2D::setMaxS</span><span class="params">(GLfloat maxS)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_fMaxS = maxS;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取得纵向的贴图坐标终点</span></span><br><span class="line"><span class="function">GLfloat <span class="title">CCTexture2D::getMaxT</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_fMaxT;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置纵向的贴图坐标终点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CCTexture2D::setMaxT</span><span class="params">(GLfloat maxT)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_fMaxT = maxT;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//所用到的Shader代码片段。</span></span><br><span class="line"><span class="function">CCGLProgram* <span class="title">CCTexture2D::getShaderProgram</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_pShaderProgram;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置用到的Shader代码片段。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CCTexture2D::setShaderProgram</span><span class="params">(CCGLProgram* pShaderProgram)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">CC_SAFE_RETAIN</span>(pShaderProgram);</span><br><span class="line">    <span class="built_in">CC_SAFE_RELEASE</span>(m_pShaderProgram);</span><br><span class="line">    m_pShaderProgram = pShaderProgram;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//释放数据</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CCTexture2D::releaseData</span><span class="params">(<span class="type">void</span> *data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">free</span>(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//保存数据</span></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">CCTexture2D::keepData</span><span class="params">(<span class="type">void</span> *data, <span class="type">unsigned</span> <span class="type">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//这里只是使用CC_UNUSED_PARAM宏用一下length，没什么实际功能。作者给出这个函数是预备未来供子类重载。</span></span><br><span class="line">    <span class="built_in">CC_UNUSED_PARAM</span>(length);</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//是否有ALPHA渐变的通道数据。</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">CCTexture2D::hasPremultipliedAlpha</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_bHasPremultipliedAlpha;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//由数据指针创建指定大小和格式的贴图。取得创建成功后图片在贴图中的实际区域 。</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">CCTexture2D::initWithData</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *data, CCTexture2DPixelFormat pixelFormat, <span class="type">unsigned</span> <span class="type">int</span> pixelsWide, <span class="type">unsigned</span> <span class="type">int</span> pixelsHigh, <span class="type">const</span> CCSize&amp; contentSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//如果是RGBA8888格式或者大小正好就是2的幂次方。像素数据按四字节(DWORD)对齐。否则按1字节(BYTE)进行对齐。</span></span><br><span class="line">    <span class="keyword">if</span>( pixelFormat == kCCTexture2DPixelFormat_RGBA8888 || ( <span class="built_in">ccNextPOT</span>(pixelsWide)==pixelsWide &amp;&amp; <span class="built_in">ccNextPOT</span>(pixelsHigh)==pixelsHigh) )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">glPixelStorei</span>(GL_UNPACK_ALIGNMENT,);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">glPixelStorei</span>(GL_UNPACK_ALIGNMENT,);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//产生一个OpenGL的贴图索引。</span></span><br><span class="line"><span class="built_in">glGenTextures</span>(, &amp;m_uName);</span><br><span class="line"><span class="comment">//将此贴图绑定为GL_TEXTURE_2D纹理。</span></span><br><span class="line">    <span class="built_in">ccGLBindTexture2D</span>(m_uName);</span><br><span class="line"><span class="comment">//设置OpenGL中的贴图的过滤参数。</span></span><br><span class="line">    <span class="built_in">glTexParameteri</span>( GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR );</span><br><span class="line"><span class="built_in">glTexParameteri</span>( GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR );</span><br><span class="line"><span class="comment">//设置贴图的横向纹理寻址模式为边缘截取模式。总是忽略边界。</span></span><br><span class="line"><span class="built_in">glTexParameteri</span>( GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE );</span><br><span class="line"><span class="comment">//设置贴图的纵向纹理寻址模式为边缘截取模式。总是忽略边界。</span></span><br><span class="line">    <span class="built_in">glTexParameteri</span>( GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE );</span><br><span class="line"> </span><br><span class="line"><span class="comment">//这里根据不同的像素格式来生成不同的OpenGL所用的贴图。注意：传入的宽和高在成功生成贴图后会返回实际贴图的宽和高。如果图片不是2的幂次方，这个数值会改成2的幂次方。比如你传入的图片宽高是148x245，则调用完成后宽高会转成256x256。</span></span><br><span class="line">    <span class="keyword">switch</span>(pixelFormat)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> kCCTexture2DPixelFormat_RGBA8888:</span><br><span class="line">        <span class="built_in">glTexImage2D</span>(GL_TEXTURE_2D, , GL_RGBA, (GLsizei)pixelsWide, (GLsizei)pixelsHigh, , GL_RGBA, GL_UNSIGNED_BYTE, data);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> kCCTexture2DPixelFormat_RGB888:</span><br><span class="line">        <span class="built_in">glTexImage2D</span>(GL_TEXTURE_2D, , GL_RGB, (GLsizei)pixelsWide, (GLsizei)pixelsHigh, , GL_RGB, GL_UNSIGNED_BYTE, data);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> kCCTexture2DPixelFormat_RGBA4444:</span><br><span class="line">        <span class="built_in">glTexImage2D</span>(GL_TEXTURE_2D, , GL_RGBA, (GLsizei)pixelsWide, (GLsizei)pixelsHigh, , GL_RGBA, GL_UNSIGNED_SHORT_4_4_4_4, data);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> kCCTexture2DPixelFormat_RGB5A1:</span><br><span class="line">        <span class="built_in">glTexImage2D</span>(GL_TEXTURE_2D, , GL_RGBA, (GLsizei)pixelsWide, (GLsizei)pixelsHigh, , GL_RGBA, GL_UNSIGNED_SHORT_5_5_5_1, data);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> kCCTexture2DPixelFormat_RGB565:</span><br><span class="line">        <span class="built_in">glTexImage2D</span>(GL_TEXTURE_2D, , GL_RGB, (GLsizei)pixelsWide, (GLsizei)pixelsHigh, , GL_RGB, GL_UNSIGNED_SHORT_5_6_5, data);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> kCCTexture2DPixelFormat_AI88:</span><br><span class="line">        <span class="built_in">glTexImage2D</span>(GL_TEXTURE_2D, , GL_LUMINANCE_ALPHA, (GLsizei)pixelsWide, (GLsizei)pixelsHigh, , GL_LUMINANCE_ALPHA, GL_UNSIGNED_BYTE, data);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> kCCTexture2DPixelFormat_A8:</span><br><span class="line">        <span class="built_in">glTexImage2D</span>(GL_TEXTURE_2D, , GL_ALPHA, (GLsizei)pixelsWide, (GLsizei)pixelsHigh, , GL_ALPHA, GL_UNSIGNED_BYTE, data);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> kCCTexture2DPixelFormat_I8:</span><br><span class="line">        <span class="built_in">glTexImage2D</span>(GL_TEXTURE_2D, , GL_LUMINANCE, (GLsizei)pixelsWide, (GLsizei)pixelsHigh, , GL_LUMINANCE, GL_UNSIGNED_BYTE, data);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">CCAssert</span>(, <span class="string">&quot;NSInternalInconsistencyException&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//图片大小</span></span><br><span class="line">    m_tContentSize = contentSize;</span><br><span class="line"><span class="comment">//保存实际的贴图宽高</span></span><br><span class="line">m_uPixelsWide = pixelsWide;</span><br><span class="line">m_uPixelsHigh = pixelsHigh;</span><br><span class="line"><span class="comment">//保存贴图的像素格式</span></span><br><span class="line">m_ePixelFormat = pixelFormat;</span><br><span class="line"><span class="comment">//计算图片处于贴图中的横向和纵向的纹理坐标终点。</span></span><br><span class="line">    m_fMaxS = contentSize.width / (<span class="type">float</span>)(pixelsWide);</span><br><span class="line">    m_fMaxT = contentSize.height / (<span class="type">float</span>)(pixelsHigh);</span><br><span class="line"><span class="comment">//默认不使用ALPHA渐变通道。</span></span><br><span class="line">m_bHasPremultipliedAlpha = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//默认不使用多级纹理。</span></span><br><span class="line">    m_bHasMipmaps = <span class="literal">false</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//设置使用kCCShader_PositionTexture对应类型的Shader。此Shader的顶点格式由位置和纹理坐标组成。</span></span><br><span class="line"><span class="built_in">setShaderProgram</span>(CCShaderCache::<span class="built_in">sharedShaderCache</span>()-&gt;<span class="built_in">programForKey</span>(kCCShader_PositionTexture));</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//取得纹理的描述</span></span><br><span class="line"><span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">CCTexture2D::description</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> CCString::<span class="built_in">createWithFormat</span>(<span class="string">&quot;&lt;CCTexture2D | Name = %u | Dimensions = %u x %u | Coordinates = (%.2f, %.2f)&gt;&quot;</span>, m_uName, m_uPixelsWide, m_uPixelsHigh, m_fMaxS, m_fMaxT)-&gt;<span class="built_in">getCString</span>();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 由CCImage对象来初始化纹理生成OpenGL贴图。</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">CCTexture2D::initWithImage</span><span class="params">(CCImage *uiImage)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//参数有效性判断。</span></span><br><span class="line">    <span class="keyword">if</span> (uiImage == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">CCLOG</span>(<span class="string">&quot;cocos2d: CCTexture2D. Can&#x27;t create Texture. UIImage is nil&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>-&gt;<span class="built_in">release</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//取得图片的宽高</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> imageWidth = uiImage-&gt;<span class="built_in">getWidth</span>();</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> imageHeight = uiImage-&gt;<span class="built_in">getHeight</span>();</span><br><span class="line">    <span class="comment">//取得引擎的配置信息</span></span><br><span class="line">    CCConfiguration *conf = CCConfiguration::<span class="built_in">sharedConfiguration</span>();</span><br><span class="line">    <span class="comment">//取得配置信息中指定的最大纹理大小</span></span><br><span class="line"><span class="type">unsigned</span> maxTextureSize = conf-&gt;<span class="built_in">getMaxTextureSize</span>();</span><br><span class="line"><span class="comment">//如果当前图片大于指定的最大纹理大小，提示错误警告交释放当前纹理返回NULL。</span></span><br><span class="line">    <span class="keyword">if</span> (imageWidth &gt; maxTextureSize || imageHeight &gt; maxTextureSize)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">CCLOG</span>(<span class="string">&quot;cocos2d: WARNING: Image (%u x %u) is bigger than the supported %u x %u&quot;</span>, imageWidth, imageHeight, maxTextureSize, maxTextureSize);</span><br><span class="line">        <span class="keyword">this</span>-&gt;<span class="built_in">release</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//总是按加载ALPHA渐变的图片方式来生成OpenGL贴图</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">initPremultipliedATextureWithImage</span>(uiImage, imageWidth, imageHeight);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//加载一个带ALPHA渐变的图片生成OpenGL贴图</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">CCTexture2D::initPremultipliedATextureWithImage</span><span class="params">(CCImage *image, <span class="type">unsigned</span> <span class="type">int</span> width, <span class="type">unsigned</span> <span class="type">int</span> height)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//取得图片的相关信息</span></span><br><span class="line"><span class="comment">//定义指针变量指向图片像素数据。</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span>*            tempData = image-&gt;<span class="built_in">getData</span>();</span><br><span class="line">    <span class="comment">//定义无符号int指针变量，也是为了指向32位色深的图片像素数据，以便使指针直接对应指定的一个像素数据位置。</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span>*             inPixel32 = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//定义无符号char指针变量，也是为了指向8位色深的图片像素数据，以便使指针直接对应指定的一个像素数据位置。</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span>*            inPixel8 = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//定义无符号short指针变量，指向16位色深的贴图像素数据，以便使指针直接对应指定的一个像素数据位置。</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span>*           outPixel16 = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//定义bool变量hasAlpha取得图片是否有Alpha通道。</span></span><br><span class="line">    <span class="type">bool</span>                      hasAlpha = image-&gt;<span class="built_in">hasAlpha</span>();</span><br><span class="line">    <span class="comment">//定义变量imageSize保存图片大小。</span></span><br><span class="line">    CCSize                    imageSize = <span class="built_in">CCSizeMake</span>((<span class="type">float</span>)(image-&gt;<span class="built_in">getWidth</span>()), (<span class="type">float</span>)(image-&gt;<span class="built_in">getHeight</span>()));</span><br><span class="line">    <span class="comment">//定义变量pixelFormat用来保存贴图的像素格式。</span></span><br><span class="line">    CCTexture2DPixelFormat    pixelFormat;</span><br><span class="line">    <span class="comment">//定义变量bpp保存图片的色深。</span></span><br><span class="line">    <span class="type">size_t</span>                    bpp = image-&gt;<span class="built_in">getBitsPerComponent</span>();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 如果有ALPHA通道，使用默认的RGBA8888格式。</span></span><br><span class="line"><span class="keyword">if</span>(hasAlpha)</span><br><span class="line">    &#123;</span><br><span class="line">        pixelFormat = g_defaultAlphaPixelFormat;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;     <span class="comment">//如果没有ALPHA通道</span></span><br><span class="line">         <span class="comment">//如果色深大于等于8，则转为RGB888格式，否则转为RGB565格式。这里有点问题，感觉应该按色深大于16来进行判断。即24和32位都转为RGB888，而16位及以下转为RGB565。</span></span><br><span class="line">        <span class="keyword">if</span> (bpp &gt;= )</span><br><span class="line">        &#123;</span><br><span class="line">            pixelFormat = kCCTexture2DPixelFormat_RGB888;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            pixelFormat = kCCTexture2DPixelFormat_RGB565;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 取得数据的长度</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> length = width * height;</span><br><span class="line">    <span class="comment">//根据图片的不同格式和要创建的纹理格式，将数据填充到纹理中。</span></span><br><span class="line">    <span class="keyword">if</span> (pixelFormat == kCCTexture2DPixelFormat_RGB565)</span><br><span class="line">&#123;</span><br><span class="line"> <span class="comment">//根据是否有ALPHA通道来分别进行填充处理</span></span><br><span class="line">        <span class="keyword">if</span> (hasAlpha)</span><br><span class="line">        &#123;</span><br><span class="line">             <span class="comment">// 转换RGBA8888到RGB565</span></span><br><span class="line">            <span class="comment">// Convert &quot;RRRRRRRRRGGGGGGGGBBBBBBBBAAAAAAAA&quot; to &quot;RRRRRGGGGGGBBBBB&quot;</span></span><br><span class="line">            <span class="comment">//一个像素占2个字节，所以图像中所有像素占用的字节数为width*height*2。由此大小申请内存作为贴图的像素数据。</span></span><br><span class="line">            tempData = <span class="keyword">new</span> <span class="type">unsigned</span> <span class="type">char</span>[width * height * ];</span><br><span class="line">             <span class="comment">//将贴图像素数据的地址返回给unsigned short指针。这样outPixel16就指向了贴图中的第一个像素的数据位置。</span></span><br><span class="line">            outPixel16 = (<span class="type">unsigned</span> <span class="type">short</span>*)tempData;</span><br><span class="line">             <span class="comment">//因为有alpha，则图片是32位RGBA8888格式。取得图像的像素数据地址返回给unsigned int指针，则inPixel32指向了贴图中第一个像素的数据位置。</span></span><br><span class="line">            inPixel32 = (<span class="type">unsigned</span> <span class="type">int</span>*)image-&gt;<span class="built_in">getData</span>();</span><br><span class="line">            <span class="comment">//遍历图片中所有的像素，逐像素处理。</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">unsigned</span> <span class="type">int</span> i = ; i &lt; length; ++i, ++inPixel32)</span><br><span class="line">            &#123;   <span class="comment">//将inPixel32指向的unsigned int数据通过取出R,G,B各8位数据值，然后组成RGB565值。放入outPixel16指向的unsigned short数据中。</span></span><br><span class="line">                *outPixel16++ =</span><br><span class="line">                ((((*inPixel32 &gt;&gt;  ) &amp; <span class="number">0xFF</span>) &gt;&gt; ) &lt;&lt; ) |  <span class="comment">// R</span></span><br><span class="line">                ((((*inPixel32 &gt;&gt;  ) &amp; <span class="number">0xFF</span>) &gt;&gt; ) &lt;&lt; )  |  <span class="comment">// G</span></span><br><span class="line">                ((((*inPixel32 &gt;&gt; ) &amp; <span class="number">0xFF</span>) &gt;&gt; ) &lt;&lt; );    <span class="comment">// B</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;    <span class="comment">// 转换RGB888到RGB565</span></span><br><span class="line">            <span class="comment">// Convert &quot;RRRRRRRRRGGGGGGGGBBBBBBBB&quot; to &quot;RRRRRGGGGGGBBBBB&quot;</span></span><br><span class="line">            <span class="comment">//一个像素占2个字节，所以图像中所有像素占用的字节数为width*height*2。由此大小申请内存作为贴图的像素数据。</span></span><br><span class="line">            tempData = <span class="keyword">new</span> <span class="type">unsigned</span> <span class="type">char</span>[width * height * ];</span><br><span class="line">            <span class="comment">//将贴图像素数据的地址返回给unsigned short指针。这样outPixel16就指向了贴图中的第一个像素的数据位置。</span></span><br><span class="line">            outPixel16 = (<span class="type">unsigned</span> <span class="type">short</span>*)tempData;</span><br><span class="line">            <span class="comment">//如果图像的格式为RGB888。取得图像的像素数据地址返回给unsigned char指针，则inPixel8指向了贴图中第一个像素的R值位置。</span></span><br><span class="line">            inPixel8 = (<span class="type">unsigned</span> <span class="type">char</span>*)image-&gt;<span class="built_in">getData</span>();</span><br><span class="line">            <span class="comment">//遍历图片中所有的像素，逐像素处理。</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">unsigned</span> <span class="type">int</span> i = ; i &lt; length; ++i)</span><br><span class="line">            &#123;   <span class="comment">//inPixel8指向的是unsigned char值，通过++操作来取出R,G,B数据值，然后组成RGB565值。放入outPixel16指向的unsigned short数据中。</span></span><br><span class="line"> </span><br><span class="line">                *outPixel16++ =</span><br><span class="line">                (((*inPixel8++ &amp; <span class="number">0xFF</span>) &gt;&gt; ) &lt;&lt; ) |  <span class="comment">// R</span></span><br><span class="line">                (((*inPixel8++ &amp; <span class="number">0xFF</span>) &gt;&gt; ) &lt;&lt; )  |  <span class="comment">// G</span></span><br><span class="line">                (((*inPixel8++ &amp; <span class="number">0xFF</span>) &gt;&gt; ) &lt;&lt; );    <span class="comment">// B</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (pixelFormat == kCCTexture2DPixelFormat_RGBA4444)</span><br><span class="line">    &#123;   <span class="comment">// 转换RGBA8888到RGBA4444</span></span><br><span class="line">        <span class="comment">// Convert &quot;RRRRRRRRRGGGGGGGGBBBBBBBBAAAAAAAA&quot; to &quot;RRRRGGGGBBBBAAAA&quot;</span></span><br><span class="line">        <span class="comment">//取得图像的像素数据地址返回给unsigned int指针，则inPixel32指向了贴图中第一个像素的数据位置。</span></span><br><span class="line">        inPixel32 = (<span class="type">unsigned</span> <span class="type">int</span>*)image-&gt;<span class="built_in">getData</span>();</span><br><span class="line">         <span class="comment">//一个像素占2个字节，所以图像中所有像素占用的字节数为width*height*2。由此大小申请内存作为贴图的像素数据。</span></span><br><span class="line">        tempData = <span class="keyword">new</span> <span class="type">unsigned</span> <span class="type">char</span>[width * height * ];</span><br><span class="line">        <span class="comment">//将贴图像素数据的地址返回给unsigned short指针。这样outPixel16就指向了贴图中的第一个像素的数据位置。</span></span><br><span class="line">        outPixel16 = (<span class="type">unsigned</span> <span class="type">short</span>*)tempData;</span><br><span class="line">        <span class="comment">//遍历图片中所有的像素，逐像素处理。</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">unsigned</span> <span class="type">int</span> i = ; i &lt; length; ++i, ++inPixel32)</span><br><span class="line">        &#123;   <span class="comment">//将inPixel32指向的unsigned int数据通过取出R,G,B,A各8位数据值，然后组成RGBA4444值。放入outPixel16指向的unsigned short数据中。</span></span><br><span class="line">            *outPixel16++ =</span><br><span class="line">            ((((*inPixel32 &gt;&gt; ) &amp; <span class="number">0xFF</span>) &gt;&gt; ) &lt;&lt; ) | <span class="comment">// R</span></span><br><span class="line">            ((((*inPixel32 &gt;&gt; ) &amp; <span class="number">0xFF</span>) &gt;&gt; ) &lt;&lt;  ) | <span class="comment">// G</span></span><br><span class="line">            ((((*inPixel32 &gt;&gt; ) &amp; <span class="number">0xFF</span>) &gt;&gt; ) &lt;&lt; ) | <span class="comment">// B</span></span><br><span class="line">            ((((*inPixel32 &gt;&gt; ) &amp; <span class="number">0xFF</span>) &gt;&gt; ) &lt;&lt; );  <span class="comment">// A</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (pixelFormat == kCCTexture2DPixelFormat_RGB5A1)</span><br><span class="line">    &#123;   <span class="comment">// 转换RGBA8888到RGBA5551</span></span><br><span class="line">        <span class="comment">// Convert &quot;RRRRRRRRRGGGGGGGGBBBBBBBBAAAAAAAA&quot; to &quot;RRRRRGGGGGBBBBBA&quot;</span></span><br><span class="line">        inPixel32 = (<span class="type">unsigned</span> <span class="type">int</span>*)image-&gt;<span class="built_in">getData</span>();</span><br><span class="line">         <span class="comment">//一个像素占2个字节，所以图像中所有像素占用的字节数为width*height*2。由此大小申请内存作为贴图的像素数据。</span></span><br><span class="line">        tempData = <span class="keyword">new</span> <span class="type">unsigned</span> <span class="type">char</span>[width * height * ];</span><br><span class="line">        <span class="comment">//将贴图像素数据的地址返回给unsigned short指针。这样outPixel16就指向了贴图中的第一个像素的数据位置。</span></span><br><span class="line">        outPixel16 = (<span class="type">unsigned</span> <span class="type">short</span>*)tempData;</span><br><span class="line">        <span class="comment">//遍历图片中所有的像素，逐像素处理。</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">unsigned</span> <span class="type">int</span> i = ; i &lt; length; ++i, ++inPixel32)</span><br><span class="line">        &#123;   <span class="comment">//将inPixel32指向的unsigned int数据通过取出R,G,B,A各8位数据值，然后组成RGB5A1值。放入outPixel16指向的unsigned short数据中。</span></span><br><span class="line">            *outPixel16++ =</span><br><span class="line">            ((((*inPixel32 &gt;&gt; ) &amp; <span class="number">0xFF</span>) &gt;&gt; ) &lt;&lt; ) | <span class="comment">// R</span></span><br><span class="line">            ((((*inPixel32 &gt;&gt; ) &amp; <span class="number">0xFF</span>) &gt;&gt; ) &lt;&lt;  ) | <span class="comment">// G</span></span><br><span class="line">            ((((*inPixel32 &gt;&gt; ) &amp; <span class="number">0xFF</span>) &gt;&gt; ) &lt;&lt; ) | <span class="comment">// B</span></span><br><span class="line">            ((((*inPixel32 &gt;&gt; ) &amp; <span class="number">0xFF</span>) &gt;&gt; ) &lt;&lt; );  <span class="comment">// A</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (pixelFormat == kCCTexture2DPixelFormat_A8)</span><br><span class="line">    &#123;   <span class="comment">// 转换RGBA8888到A8，同理，不再赘述</span></span><br><span class="line">        <span class="comment">// Convert &quot;RRRRRRRRRGGGGGGGGBBBBBBBBAAAAAAAA&quot; to &quot;AAAAAAAA&quot;</span></span><br><span class="line">        inPixel32 = (<span class="type">unsigned</span> <span class="type">int</span>*)image-&gt;<span class="built_in">getData</span>();</span><br><span class="line">        tempData = <span class="keyword">new</span> <span class="type">unsigned</span> <span class="type">char</span>[width * height];</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> *outPixel8 = tempData;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">unsigned</span> <span class="type">int</span> i = ; i &lt; length; ++i, ++inPixel32)</span><br><span class="line">        &#123;</span><br><span class="line">            *outPixel8++ = (*inPixel32 &gt;&gt; ) &amp; <span class="number">0xFF</span>;  <span class="comment">// A</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (hasAlpha &amp;&amp; pixelFormat == kCCTexture2DPixelFormat_RGB888)</span><br><span class="line">    &#123;   <span class="comment">// 转换RGBA8888到RGB888，同理，不再赘述</span></span><br><span class="line">        <span class="comment">// Convert &quot;RRRRRRRRRGGGGGGGGBBBBBBBBAAAAAAAA&quot; to &quot;RRRRRRRRGGGGGGGGBBBBBBBB&quot;</span></span><br><span class="line">        inPixel32 = (<span class="type">unsigned</span> <span class="type">int</span>*)image-&gt;<span class="built_in">getData</span>();</span><br><span class="line">        tempData = <span class="keyword">new</span> <span class="type">unsigned</span> <span class="type">char</span>[width * height * ];</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> *outPixel8 = tempData;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">unsigned</span> <span class="type">int</span> i = ; i &lt; length; ++i, ++inPixel32)</span><br><span class="line">        &#123;</span><br><span class="line">            *outPixel8++ = (*inPixel32 &gt;&gt; ) &amp; <span class="number">0xFF</span>; <span class="comment">// R</span></span><br><span class="line">            *outPixel8++ = (*inPixel32 &gt;&gt; ) &amp; <span class="number">0xFF</span>; <span class="comment">// G</span></span><br><span class="line">            *outPixel8++ = (*inPixel32 &gt;&gt; ) &amp; <span class="number">0xFF</span>; <span class="comment">// B</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//因为最终相应像素格式的数据都存放在tempData中，所以这里通过像素数据来生成OpenGL贴图。</span></span><br><span class="line">    <span class="built_in">initWithData</span>(tempData, pixelFormat, width, height, imageSize);</span><br><span class="line">    <span class="comment">//如果是以上相应格式，则tempData都是新申请的内存块，则在这里释放申请的内存。</span></span><br><span class="line">    <span class="keyword">if</span> (tempData != image-&gt;<span class="built_in">getData</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> [] tempData;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//取得是否有ALPHA渐变通道数据</span></span><br><span class="line">    m_bHasPremultipliedAlpha = image-&gt;<span class="built_in">isPremultipliedAlpha</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 从字符串中创建OpenGL 贴图。</span></span><br><span class="line"><span class="comment">//参1:字符串</span></span><br><span class="line"><span class="comment">//参2:字体名称</span></span><br><span class="line"><span class="comment">//参3:字体大小</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">CCTexture2D::initWithString</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *text, <span class="type">const</span> <span class="type">char</span> *fontName, <span class="type">float</span> fontSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">initWithString</span>(text, <span class="built_in">CCSizeMake</span>(,), kCCTextAlignmentCenter, kCCVerticalTextAlignmentTop, fontName, fontSize);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 从字符串中创建OpenGL 贴图,可指定更多参数。</span></span><br><span class="line"><span class="comment">//参1:字符串</span></span><br><span class="line"><span class="comment">//参2:返回参数，代表在屏幕上占用的区域大小</span></span><br><span class="line"><span class="comment">//参3:文字的横向对齐方式</span></span><br><span class="line"><span class="comment">//参4:文字的纵向对齐方式</span></span><br><span class="line"><span class="comment">//参5:字体名称</span></span><br><span class="line"><span class="comment">//参6:字体大小</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">CCTexture2D::initWithString</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *text, <span class="type">const</span> CCSize&amp; dimensions, CCTextAlignment hAlignment, CCVerticalTextAlignment vAlignment, <span class="type">const</span> <span class="type">char</span> *fontName, <span class="type">float</span> fontSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//如果定义使用可变纹理</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> CC_ENABLE_CACHE_TEXTURE_DATA</span></span><br><span class="line">    <span class="comment">// cache the texture data</span></span><br><span class="line">    VolatileTexture::<span class="built_in">addStringTexture</span>(<span class="keyword">this</span>, text, dimensions, hAlignment, vAlignment, fontName, fontSize);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="comment">//定义一个CCImage实例对象</span></span><br><span class="line">    CCImage image;</span><br><span class="line">    <span class="comment">//定义一个CCImage进行由字符串创建图片时指定的文字对齐方式的变量eAlign</span></span><br><span class="line">    CCImage::ETextAlign eAlign;</span><br><span class="line">    <span class="comment">//如果文字纵向对齐方式为顶部对齐。</span></span><br><span class="line">    <span class="keyword">if</span> (kCCVerticalTextAlignmentTop == vAlignment)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//根据文字横向对齐方式的不同分别对eAlign进行设置。</span></span><br><span class="line">        eAlign = (kCCTextAlignmentCenter == hAlignment) ? CCImage::kAlignTop</span><br><span class="line">            : (kCCTextAlignmentLeft == hAlignment) ? CCImage::kAlignTopLeft : CCImage::kAlignTopRight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果文字纵向对齐方式为居中对齐。</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (kCCVerticalTextAlignmentCenter == vAlignment)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//根据文字横向对齐方式的不同分别对eAlign进行设置。</span></span><br><span class="line">        eAlign = (kCCTextAlignmentCenter == hAlignment) ? CCImage::kAlignCenter</span><br><span class="line">            : (kCCTextAlignmentLeft == hAlignment) ? CCImage::kAlignLeft : CCImage::kAlignRight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果文字纵向对齐方式为底部对齐。</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (kCCVerticalTextAlignmentBottom == vAlignment)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//根据文字横向对齐方式的不同分别对eAlign进行设置。</span></span><br><span class="line">        eAlign = (kCCTextAlignmentCenter == hAlignment) ? CCImage::kAlignBottom</span><br><span class="line">            : (kCCTextAlignmentLeft == hAlignment) ? CCImage::kAlignBottomLeft : CCImage::kAlignBottomRight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//其它对齐方式不应存在，故打印错误。</span></span><br><span class="line">        <span class="built_in">CCAssert</span>(<span class="literal">false</span>, <span class="string">&quot;Not supported alignment format!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//调用CCImage的成员函数由字符串创建出图片数据。</span></span><br><span class="line">    <span class="keyword">if</span> (!image.<span class="built_in">initWithString</span>(text, (<span class="type">int</span>)dimensions.width, (<span class="type">int</span>)dimensions.height, eAlign, fontName, (<span class="type">int</span>)fontSize))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//再由CCImage实例对象来创建出OpenGL贴图，初始化纹理。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">initWithImage</span>(&amp;image);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 在指定的位置绘制贴图。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CCTexture2D::drawAtPoint</span><span class="params">(<span class="type">const</span> CCPoint&amp; point)</span></span></span><br><span class="line"><span class="function"></span>&#123;    <span class="comment">//定义贴图中图像区域的UV坐标。从左上至右下。</span></span><br><span class="line">    GLfloat    coordinates[] = &#123;</span><br><span class="line">        <span class="number">0.0f</span>,    m_fMaxT,</span><br><span class="line">        m_fMaxS,m_fMaxT,</span><br><span class="line">        <span class="number">0.0f</span>,    <span class="number">0.0f</span>,</span><br><span class="line">        m_fMaxS,<span class="number">0.0f</span> &#125;;</span><br><span class="line">    <span class="comment">//取得贴图中图像区域的宽高</span></span><br><span class="line">    GLfloat    width = (GLfloat)m_uPixelsWide * m_fMaxS,</span><br><span class="line">        height = (GLfloat)m_uPixelsHigh * m_fMaxT;</span><br><span class="line">    <span class="comment">//定义对应的顶点坐标</span></span><br><span class="line">    GLfloat        vertices[] = &#123;</span><br><span class="line">        point.x,            point.y,</span><br><span class="line">        width + point.x,    point.y,</span><br><span class="line">        point.x,            height  + point.y,</span><br><span class="line">        width + point.x,    height  + point.y &#125;;</span><br><span class="line">    <span class="comment">//Shader中使用位置和纹理坐标通道。</span></span><br><span class="line">    <span class="built_in">ccGLEnableVertexAttribs</span>( kCCVertexAttribFlag_Position | kCCVertexAttribFlag_TexCoords );</span><br><span class="line">    <span class="comment">//后面的代码便用Shader进行渲染</span></span><br><span class="line">    m_pShaderProgram-&gt;<span class="built_in">use</span>();</span><br><span class="line">    <span class="comment">//设置Shader使用的最终结果矩阵</span></span><br><span class="line">    m_pShaderProgram-&gt;<span class="built_in">setUniformForModelViewProjectionMatrix</span>();</span><br><span class="line">    <span class="comment">//将贴图绑定</span></span><br><span class="line">    <span class="built_in">ccGLBindTexture2D</span>( m_uName );</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//将vertices设置为顶点位置参数</span></span><br><span class="line">    <span class="built_in">glVertexAttribPointer</span>(kCCVertexAttrib_Position, , GL_FLOAT, GL_FALSE, , vertices);</span><br><span class="line">    <span class="comment">//将coordinates设置为顶点的纹理坐标参数</span></span><br><span class="line">    <span class="built_in">glVertexAttribPointer</span>(kCCVertexAttrib_TexCoords, , GL_FLOAT, GL_FALSE, , coordinates);</span><br><span class="line">    <span class="comment">//绘制三角形，参1为绘图方式，参2为顶点起始索引，参3为三角形面数。</span></span><br><span class="line">    <span class="built_in">glDrawArrays</span>(GL_TRIANGLE_STRIP, , );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//绘制纹理上的一个区域。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CCTexture2D::drawInRect</span><span class="params">(<span class="type">const</span> CCRect&amp; rect)</span></span></span><br><span class="line"><span class="function"></span>&#123;    <span class="comment">//定义贴图中图像区域的UV坐标。从左上至右下。</span></span><br><span class="line">    GLfloat    coordinates[] = &#123;</span><br><span class="line">        <span class="number">0.0f</span>,    m_fMaxT,</span><br><span class="line">        m_fMaxS,m_fMaxT,</span><br><span class="line">        <span class="number">0.0f</span>,    <span class="number">0.0f</span>,</span><br><span class="line">        m_fMaxS,<span class="number">0.0f</span> &#125;;</span><br><span class="line">    <span class="comment">//绘制到的区域</span></span><br><span class="line">    GLfloat    vertices[] = &#123;    rect.origin.x,        rect.origin.y,                            <span class="comment">/*0.0f,*/</span></span><br><span class="line">        rect.origin.x + rect.size.width,        rect.origin.y,                            <span class="comment">/*0.0f,*/</span></span><br><span class="line">        rect.origin.x,                            rect.origin.y + rect.size.height,        <span class="comment">/*0.0f,*/</span></span><br><span class="line">        rect.origin.x + rect.size.width,        rect.origin.y + rect.size.height,        <span class="comment">/*0.0f*/</span> &#125;;</span><br><span class="line">    <span class="comment">//Shader中使用位置和纹理坐标通道。</span></span><br><span class="line">    <span class="built_in">ccGLEnableVertexAttribs</span>( kCCVertexAttribFlag_Position | kCCVertexAttribFlag_TexCoords );</span><br><span class="line">    <span class="comment">//后面的代码便用Shader进行渲染</span></span><br><span class="line">    m_pShaderProgram-&gt;<span class="built_in">use</span>();</span><br><span class="line">    <span class="comment">//设置Shader使用的最终结果矩阵</span></span><br><span class="line">    m_pShaderProgram-&gt;<span class="built_in">setUniformForModelViewProjectionMatrix</span>();</span><br><span class="line">    <span class="comment">//将贴图绑定</span></span><br><span class="line">    <span class="built_in">ccGLBindTexture2D</span>( m_uName );</span><br><span class="line">    <span class="comment">//将vertices设置为顶点位置参数</span></span><br><span class="line">    <span class="built_in">glVertexAttribPointer</span>(kCCVertexAttrib_Position, , GL_FLOAT, GL_FALSE, , vertices);</span><br><span class="line">    <span class="comment">//将coordinates设置为顶点的纹理坐标参数</span></span><br><span class="line">    <span class="built_in">glVertexAttribPointer</span>(kCCVertexAttrib_TexCoords, , GL_FLOAT, GL_FALSE, , coordinates);</span><br><span class="line">    <span class="comment">//绘制三角形，参1为绘图方式，参2为顶点起始索引，参3为三角形面数。</span></span><br><span class="line">    <span class="built_in">glDrawArrays</span>(GL_TRIANGLE_STRIP, , );</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CC_SUPPORT_PVRTC</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 如果支持PVR文件的压缩格式。提供的读取PVR压缩文件的函数。</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">CCTexture2D::initWithPVRTCData</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *data, <span class="type">int</span> level, <span class="type">int</span> bpp, <span class="type">bool</span> hasAlpha, <span class="type">int</span> length, CCTexture2DPixelFormat pixelFormat)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( !(CCConfiguration::<span class="built_in">sharedConfiguration</span>()-&gt;<span class="built_in">supportsPVRTC</span>()) )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">CCLOG</span>(<span class="string">&quot;cocos2d: WARNING: PVRTC images is not supported.&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>-&gt;<span class="built_in">release</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//产生一个OpenGL的贴图索引。</span></span><br><span class="line"><span class="built_in">glGenTextures</span>(, &amp;m_uName);</span><br><span class="line">    <span class="comment">//绑定纹理</span></span><br><span class="line">    <span class="built_in">glBindTexture</span>(GL_TEXTURE_2D, m_uName);</span><br><span class="line">    <span class="comment">//设置纹理抗锯齿</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">setAntiAliasTexParameters</span>();</span><br><span class="line">    <span class="comment">//贴图格式</span></span><br><span class="line">    GLenum format;</span><br><span class="line">    <span class="comment">//数据大小</span></span><br><span class="line">    GLsizei size = length * length * bpp / ;</span><br><span class="line">    <span class="comment">//根据是否有Alpha来取得贴图格式</span></span><br><span class="line">    <span class="keyword">if</span>(hasAlpha) &#123;</span><br><span class="line">        format = (bpp == ) ? GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG : GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        format = (bpp == ) ? GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG : GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(size &lt; ) &#123;</span><br><span class="line">        size = ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//加载压缩纹理。</span></span><br><span class="line">    <span class="built_in">glCompressedTexImage2D</span>(GL_TEXTURE_2D, level, format, length, length, , size, data);</span><br><span class="line">    <span class="comment">//设置其它属性。</span></span><br><span class="line">    m_tContentSize = <span class="built_in">CCSizeMake</span>((<span class="type">float</span>)(length), (<span class="type">float</span>)(length));</span><br><span class="line">    m_uPixelsWide = length;</span><br><span class="line">    m_uPixelsHigh = length;</span><br><span class="line">    m_fMaxS = <span class="number">1.0f</span>;</span><br><span class="line">    m_fMaxT = <span class="number">1.0f</span>;</span><br><span class="line">    m_bHasPremultipliedAlpha = PVRHaveAlphaPremultiplied_;</span><br><span class="line">    m_ePixelFormat = pixelFormat;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// CC_SUPPORT_PVRTC</span></span></span><br><span class="line"><span class="comment">//加载PVR普通文件的函数。</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">CCTexture2D::initWithPVRFile</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* file)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">bool</span> bRet = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// nothing to do with CCObject::init</span></span><br><span class="line"> </span><br><span class="line">    CCTexturePVR *pvr = <span class="keyword">new</span> CCTexturePVR;</span><br><span class="line">    bRet = pvr-&gt;<span class="built_in">initWithContentsOfFile</span>(file);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (bRet)</span><br><span class="line">    &#123;</span><br><span class="line">        pvr-&gt;<span class="built_in">setRetainName</span>(<span class="literal">true</span>); <span class="comment">// don&#x27;t dealloc texture on release</span></span><br><span class="line"> </span><br><span class="line">        m_uName = pvr-&gt;<span class="built_in">getName</span>();</span><br><span class="line">        m_fMaxS = <span class="number">1.0f</span>;</span><br><span class="line">        m_fMaxT = <span class="number">1.0f</span>;</span><br><span class="line">        m_uPixelsWide = pvr-&gt;<span class="built_in">getWidth</span>();</span><br><span class="line">        m_uPixelsHigh = pvr-&gt;<span class="built_in">getHeight</span>();</span><br><span class="line">        m_tContentSize = <span class="built_in">CCSizeMake</span>((<span class="type">float</span>)m_uPixelsWide, (<span class="type">float</span>)m_uPixelsHigh);</span><br><span class="line">        m_bHasPremultipliedAlpha = PVRHaveAlphaPremultiplied_;</span><br><span class="line">        m_ePixelFormat = pvr-&gt;<span class="built_in">getFormat</span>();</span><br><span class="line">        m_bHasMipmaps = pvr-&gt;<span class="built_in">getNumberOfMipmaps</span>() &gt; ;       </span><br><span class="line"> </span><br><span class="line">        pvr-&gt;<span class="built_in">release</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">CCLOG</span>(<span class="string">&quot;cocos2d: Couldn&#x27;t load PVR image %s&quot;</span>, file);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> bRet;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置PVR文件加载时是否使用ALPHA渐变。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CCTexture2D::PVRImagesHavePremultipliedAlpha</span><span class="params">(<span class="type">bool</span> haveAlphaPremultiplied)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PVRHaveAlphaPremultiplied_ = haveAlphaPremultiplied;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//生成多级纹理。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CCTexture2D::generateMipmap</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">CCAssert</span>( m_uPixelsWide == <span class="built_in">ccNextPOT</span>(m_uPixelsWide) &amp;&amp; m_uPixelsHigh == <span class="built_in">ccNextPOT</span>(m_uPixelsHigh), <span class="string">&quot;Mimpap texture only works in POT textures&quot;</span>);</span><br><span class="line">    <span class="built_in">ccGLBindTexture2D</span>( m_uName );</span><br><span class="line">    <span class="built_in">glGenerateMipmap</span>(GL_TEXTURE_2D);</span><br><span class="line">    m_bHasMipmaps = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//是否有多级纹理</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">CCTexture2D::hasMipmaps</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_bHasMipmaps;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置纹理参数。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CCTexture2D::setTexParameters</span><span class="params">(ccTexParams *texParams)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">CCAssert</span>( (m_uPixelsWide == <span class="built_in">ccNextPOT</span>(m_uPixelsWide) || texParams-&gt;wrapS == GL_CLAMP_TO_EDGE) &amp;&amp;</span><br><span class="line">        (m_uPixelsHigh == <span class="built_in">ccNextPOT</span>(m_uPixelsHigh) || texParams-&gt;wrapT == GL_CLAMP_TO_EDGE),</span><br><span class="line">        <span class="string">&quot;GL_CLAMP_TO_EDGE should be used in NPOT dimensions&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">ccGLBindTexture2D</span>( m_uName );</span><br><span class="line">    <span class="built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, texParams-&gt;minFilter );</span><br><span class="line">    <span class="built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, texParams-&gt;magFilter );</span><br><span class="line">    <span class="built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, texParams-&gt;wrapS );</span><br><span class="line">    <span class="built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, texParams-&gt;wrapT );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置为非抗锯齿纹理模式</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CCTexture2D::setAliasTexParameters</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;    <span class="comment">//绑定纹理</span></span><br><span class="line">    <span class="built_in">ccGLBindTexture2D</span>( m_uName );</span><br><span class="line">    <span class="comment">//设置多级纹理</span></span><br><span class="line">    <span class="keyword">if</span>( ! m_bHasMipmaps )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//设置最小滤波方式为最近点采样,这种方式最快，但有锯齿。</span></span><br><span class="line">        <span class="built_in">glTexParameteri</span>( GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;     <span class="comment">//设置最小滤波方式为多级纹理方式。</span></span><br><span class="line">        <span class="built_in">glTexParameteri</span>( GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST_MIPMAP_NEAREST );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置放大滤波方式为最近点采样</span></span><br><span class="line">    <span class="built_in">glTexParameteri</span>( GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置为抗锯齿纹理模式</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CCTexture2D::setAntiAliasTexParameters</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">//绑定纹理</span></span><br><span class="line">    <span class="built_in">ccGLBindTexture2D</span>( m_uName );</span><br><span class="line">    <span class="comment">//设置多级纹理</span></span><br><span class="line">    <span class="keyword">if</span>( ! m_bHasMipmaps )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//设置最小滤波方式为线性过滤,这种方式纹理会有一定程度模糊。</span></span><br><span class="line">        <span class="built_in">glTexParameteri</span>( GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;    <span class="comment">//设置最小滤波方式为多级纹理方式。</span></span><br><span class="line">        <span class="built_in">glTexParameteri</span>( GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_NEAREST );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置放大滤波方式为最近点采样</span></span><br><span class="line">    <span class="built_in">glTexParameteri</span>( GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取得纹理格式的名字字符串</span></span><br><span class="line"><span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">CCTexture2D::stringForFormat</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (m_ePixelFormat)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> kCCTexture2DPixelFormat_RGBA8888:</span><br><span class="line">            <span class="keyword">return</span>  <span class="string">&quot;RGBA8888&quot;</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">case</span> kCCTexture2DPixelFormat_RGB888:</span><br><span class="line">            <span class="keyword">return</span>  <span class="string">&quot;RGB888&quot;</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">case</span> kCCTexture2DPixelFormat_RGB565:</span><br><span class="line">            <span class="keyword">return</span>  <span class="string">&quot;RGB565&quot;</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">case</span> kCCTexture2DPixelFormat_RGBA4444:</span><br><span class="line">            <span class="keyword">return</span>  <span class="string">&quot;RGBA4444&quot;</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">case</span> kCCTexture2DPixelFormat_RGB5A1:</span><br><span class="line">            <span class="keyword">return</span>  <span class="string">&quot;RGB5A1&quot;</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">case</span> kCCTexture2DPixelFormat_AI88:</span><br><span class="line">            <span class="keyword">return</span>  <span class="string">&quot;AI88&quot;</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">case</span> kCCTexture2DPixelFormat_A8:</span><br><span class="line">            <span class="keyword">return</span>  <span class="string">&quot;A8&quot;</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">case</span> kCCTexture2DPixelFormat_I8:</span><br><span class="line">            <span class="keyword">return</span>  <span class="string">&quot;I8&quot;</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">case</span> kCCTexture2DPixelFormat_PVRTC4:</span><br><span class="line">            <span class="keyword">return</span>  <span class="string">&quot;PVRTC4&quot;</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">case</span> kCCTexture2DPixelFormat_PVRTC2:</span><br><span class="line">            <span class="keyword">return</span>  <span class="string">&quot;PVRTC2&quot;</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">CCAssert</span>(<span class="literal">false</span> , <span class="string">&quot;unrecognised pixel format&quot;</span>);</span><br><span class="line">            <span class="built_in">CCLOG</span>(<span class="string">&quot;stringForFormat: %ld, cannot give useful result&quot;</span>, (<span class="type">long</span>)m_ePixelFormat);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span>  <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//设置默认带ALPHA通道的纹理格式</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CCTexture2D::setDefaultAlphaPixelFormat</span><span class="params">(CCTexture2DPixelFormat format)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    g_defaultAlphaPixelFormat = format;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//取得默认带ALPHA通道的纹理格式</span></span><br><span class="line"><span class="function">CCTexture2DPixelFormat <span class="title">CCTexture2D::defaultAlphaPixelFormat</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> g_defaultAlphaPixelFormat;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取得相应纹理格式的色深。</span></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">CCTexture2D::bitsPerPixelForFormat</span><span class="params">(CCTexture2DPixelFormat format)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> ret=;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">switch</span> (format) &#123;</span><br><span class="line">        <span class="keyword">case</span> kCCTexture2DPixelFormat_RGBA8888:</span><br><span class="line">            ret = ;<span class="comment">//32位真彩色</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> kCCTexture2DPixelFormat_RGB888:</span><br><span class="line">            <span class="comment">// 看起来是用24位，但内部实际是用DWORD来存数据的，所以还是32位。只不过Alpha通道没用。</span></span><br><span class="line">            ret = ;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> kCCTexture2DPixelFormat_RGB565:</span><br><span class="line">            ret = ;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> kCCTexture2DPixelFormat_RGBA4444:</span><br><span class="line">            ret = ;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> kCCTexture2DPixelFormat_RGB5A1:</span><br><span class="line">            ret = ;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> kCCTexture2DPixelFormat_AI88:</span><br><span class="line">            ret = ;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> kCCTexture2DPixelFormat_A8:</span><br><span class="line">            ret = ;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> kCCTexture2DPixelFormat_I8:</span><br><span class="line">            ret = ;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> kCCTexture2DPixelFormat_PVRTC4:</span><br><span class="line">            ret = ;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> kCCTexture2DPixelFormat_PVRTC2:</span><br><span class="line">            ret = ;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            ret = -;</span><br><span class="line">            <span class="built_in">CCAssert</span>(<span class="literal">false</span> , <span class="string">&quot;unrecognised pixel format&quot;</span>);</span><br><span class="line">            <span class="built_in">CCLOG</span>(<span class="string">&quot;bitsPerPixelForFormat: %ld, cannot give useful result&quot;</span>, (<span class="type">long</span>)format);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取得当前纹理格式的色深。</span></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">CCTexture2D::bitsPerPixelForFormat</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>-&gt;<span class="built_in">bitsPerPixelForFormat</span>(m_ePixelFormat);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">NS_CC_END</span><br></pre></td></tr></table></figure>

<h3 id="CCTexturePVR"><a href="#CCTexturePVR" class="headerlink" title="CCTexturePVR"></a>CCTexturePVR</h3><p><code>CCTexturePVR.h</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __CCPVRTEXTURE_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __CCPVRTEXTURE_H__</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CCStdC.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CCGL.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cocoa/CCObject.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cocoa/CCArray.h&quot;</span></span></span><br><span class="line"><span class="comment">//Cocos2d命名空间</span></span><br><span class="line">NS_CC_BEGIN</span><br><span class="line"> </span><br><span class="line"><span class="comment">//用于多级纹理的结构</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">CCPVRMipmap</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *address;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> len;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//最大的多级纹理级数</span></span><br><span class="line"><span class="keyword">enum</span> &#123;</span><br><span class="line">    CC_PVRMIPMAP_MAX = ,</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//所支持的 PVR 图片格式:</span></span><br><span class="line">    - RGBA8888</span><br><span class="line">    - BGRA8888</span><br><span class="line">    - RGBA4444</span><br><span class="line">    - RGBA5551</span><br><span class="line">    - RGB565</span><br><span class="line">    - A8</span><br><span class="line">    - I8</span><br><span class="line">    - AI88</span><br><span class="line">    - PVRTC <span class="number">4B</span>PP</span><br><span class="line">    - PVRTC <span class="number">2B</span>PP</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CCTexturePVR</span> : <span class="keyword">public</span> CCObject</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//构造</span></span><br><span class="line">    <span class="built_in">CCTexturePVR</span>();</span><br><span class="line">    <span class="comment">//析构</span></span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">CCTexturePVR</span>();</span><br><span class="line">    <span class="comment">//成员函数：载入一个PVR图片文件</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">initWithContentsOfFile</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* path)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//导出的静态函数：载入一个PVR图片文件。此函数为可供js调用。</span></span><br><span class="line">    CC_DEPRECATED_ATTRIB一个<span class="function">UTE <span class="type">static</span> CCTexturePVR* <span class="title">pvrTextureWithContentsOfFile</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* path)</span></span>;</span><br><span class="line">    <span class="comment">//静态函数：载入一个PVR图片文件</span></span><br><span class="line">    <span class="function"><span class="type">static</span> CCTexturePVR* <span class="title">create</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* path)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//相关属性的获取</span></span><br><span class="line">    <span class="comment">//取得贴图索引</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">unsigned</span> <span class="type">int</span> <span class="title">getName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> m_uName; &#125;</span><br><span class="line">    <span class="comment">//取得</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">unsigned</span> <span class="type">int</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> m_uWidth; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">unsigned</span> <span class="type">int</span> <span class="title">getHeight</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> m_uHeight; &#125;</span><br><span class="line">    <span class="comment">//取得是否有ALPHA通道</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">hasAlpha</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> m_bHasAlpha; &#125;</span><br><span class="line">    <span class="comment">//取得多级纹理的级数</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">unsigned</span> <span class="type">int</span> <span class="title">getNumberOfMipmaps</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> m_uNumberOfMipmaps; &#125;</span><br><span class="line">    <span class="comment">//取得图片格式</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> CCTexture2DPixelFormat <span class="title">getFormat</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> m_eFormat; &#125;</span><br><span class="line">    <span class="comment">//取得是否是供Retain显示屏使用的高清图片 。</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">isRetainName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> m_bRetainName; &#125;</span><br><span class="line">    <span class="comment">//设置为供Retain显示屏使用的高清图片。</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">setRetainName</span><span class="params">(<span class="type">bool</span> retainName)</span> </span>&#123; m_bRetainName = retainName; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//解压PVR图片数据</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">unpackPVRData</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* data, <span class="type">unsigned</span> <span class="type">int</span> len)</span></span>;</span><br><span class="line">    <span class="comment">//创建OpenGL纹理</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">createGLTexture</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="comment">//多级纹理的各级信息结构。</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">CCPVRMipmap</span> m_asMipmaps[CC_PVRMIPMAP_MAX];   <span class="comment">// pointer to mipmap images</span></span><br><span class="line">    <span class="comment">//多级纹理的最大级别数</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> m_uNumberOfMipmaps;                    <span class="comment">// number of mipmap used</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> m_uTableFormatIndex;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> m_uWidth, m_uHeight;</span><br><span class="line">    <span class="comment">//贴图索引</span></span><br><span class="line">    GLuint m_uName;</span><br><span class="line">    <span class="comment">//是否有Alpha通道</span></span><br><span class="line">    <span class="type">bool</span> m_bHasAlpha;</span><br><span class="line">    <span class="comment">//是否是供Retain显示屏使用的高清图片 。</span></span><br><span class="line">    <span class="type">bool</span> m_bRetainName;</span><br><span class="line">    <span class="comment">//图片格式</span></span><br><span class="line">    CCTexture2DPixelFormat m_eFormat;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">NS_CC_END</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//__CCPVRTEXTURE_H__</span></span></span><br></pre></td></tr></table></figure>
<p><code>CCTexturePVR.cpp:</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CCTexture2D.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CCTexturePVR.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ccMacros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CCConfiguration.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;support/ccUtils.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CCStdC.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;platform/CCFileUtils.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;support/zip_support/ZipUtils.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;shaders/ccGLStateCache.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="comment">//Cocos2d命名空间</span></span><br><span class="line">NS_CC_BEGIN</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PVR_TEXTURE_FLAG_TYPE_MASK    0xff</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//PVR文件的信息标志位的各bit位意义</span></span><br><span class="line"><span class="keyword">enum</span> &#123;</span><br><span class="line">    kPVRTextureFlagMipmap         = (&lt;&lt;),        <span class="comment">// 有多级纹理</span></span><br><span class="line">    kPVRTextureFlagTwiddle        = (&lt;&lt;),        <span class="comment">// is twiddled</span></span><br><span class="line">    kPVRTextureFlagBumpmap        = (&lt;&lt;),       <span class="comment">// 是法线贴图（用于产生凹凸感）</span></span><br><span class="line">    kPVRTextureFlagTiling         = (&lt;&lt;),       <span class="comment">// is bordered for tiled pvr</span></span><br><span class="line">    kPVRTextureFlagCubemap        = (&lt;&lt;),       <span class="comment">// 是立方体环境映射贴图（一般用于做天空盒）</span></span><br><span class="line">    kPVRTextureFlagFalseMipCol    = (&lt;&lt;),       <span class="comment">// are there false coloured MIP levels</span></span><br><span class="line">    kPVRTextureFlagVolume         = (&lt;&lt;),       <span class="comment">// 立体纹理，相当于有多层的纹理。</span></span><br><span class="line">    kPVRTextureFlagAlpha          = (&lt;&lt;),       <span class="comment">// v2.1 is there transparency info in the texture</span></span><br><span class="line">    kPVRTextureFlagVerticalFlip   = (&lt;&lt;),       <span class="comment">// v2.1 is the texture vertically flipped</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//PVR文件头标识</span></span><br><span class="line"><span class="type">static</span> <span class="type">char</span> gPVRTexIdentifier[] = <span class="string">&quot;PVR!&quot;</span>;</span><br><span class="line"><span class="comment">//所有PVR文件的格式</span></span><br><span class="line"><span class="keyword">enum</span></span><br><span class="line">&#123;</span><br><span class="line">    kPVRTexturePixelTypeRGBA_4444= <span class="number">0x10</span>,</span><br><span class="line">    kPVRTexturePixelTypeRGBA_5551,</span><br><span class="line">    kPVRTexturePixelTypeRGBA_8888,</span><br><span class="line">    kPVRTexturePixelTypeRGB_565,</span><br><span class="line">    kPVRTexturePixelTypeRGB_555,                <span class="comment">// 这个Cocos2d-x暂不支持</span></span><br><span class="line">    kPVRTexturePixelTypeRGB_888,</span><br><span class="line">    kPVRTexturePixelTypeI_8,</span><br><span class="line">    kPVRTexturePixelTypeAI_88,</span><br><span class="line">    kPVRTexturePixelTypePVRTC_2,</span><br><span class="line">    kPVRTexturePixelTypePVRTC_4,</span><br><span class="line">    kPVRTexturePixelTypeBGRA_8888,</span><br><span class="line">    kPVRTexturePixelTypeA_8,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//信息数组</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">unsigned</span> <span class="type">int</span> tableFormats[][] = &#123;</span><br><span class="line">    <span class="comment">//数组元素的结构为：</span></span><br><span class="line">    <span class="comment">// 1- PVR 文件格式</span></span><br><span class="line">    <span class="comment">// 2- OpenGL 内部格式</span></span><br><span class="line">    <span class="comment">// 3- OpenGL 格式</span></span><br><span class="line">    <span class="comment">// 4- OpenGL 数据类型</span></span><br><span class="line">    <span class="comment">// 5- 色深</span></span><br><span class="line">    <span class="comment">// 6- 是否压缩</span></span><br><span class="line">    <span class="comment">// 7- Cocos2d 像素格式</span></span><br><span class="line">    &#123; kPVRTexturePixelTypeRGBA_4444, GL_RGBA,    GL_RGBA, GL_UNSIGNED_SHORT_4_4_4_4,            , <span class="literal">false</span>, kCCTexture2DPixelFormat_RGBA4444    &#125;,</span><br><span class="line">    &#123; kPVRTexturePixelTypeRGBA_5551, GL_RGBA,    GL_RGBA, GL_UNSIGNED_SHORT_5_5_5_1,            , <span class="literal">false</span>, kCCTexture2DPixelFormat_RGB5A1    &#125;,</span><br><span class="line">    &#123; kPVRTexturePixelTypeRGBA_8888, GL_RGBA,    GL_RGBA, GL_UNSIGNED_BYTE,                    , <span class="literal">false</span>, kCCTexture2DPixelFormat_RGBA8888    &#125;,</span><br><span class="line">    &#123; kPVRTexturePixelTypeRGB_565,     GL_RGB,    GL_RGB,     GL_UNSIGNED_SHORT_5_6_5,            , <span class="literal">false</span>, kCCTexture2DPixelFormat_RGB565    &#125;,</span><br><span class="line">    &#123; kPVRTexturePixelTypeRGB_888,     GL_RGB,    GL_RGB,     GL_UNSIGNED_BYTE,                    , <span class="literal">false</span>,    kCCTexture2DPixelFormat_RGB888    &#125;,</span><br><span class="line">    &#123; kPVRTexturePixelTypeA_8,         GL_ALPHA,    GL_ALPHA,    GL_UNSIGNED_BYTE,                ,    <span class="literal">false</span>, kCCTexture2DPixelFormat_A8        &#125;,</span><br><span class="line">    &#123; kPVRTexturePixelTypeI_8,         GL_LUMINANCE,    GL_LUMINANCE,    GL_UNSIGNED_BYTE,        ,    <span class="literal">false</span>, kCCTexture2DPixelFormat_I8        &#125;,</span><br><span class="line">    &#123; kPVRTexturePixelTypeAI_88,     GL_LUMINANCE_ALPHA,    GL_LUMINANCE_ALPHA, GL_UNSIGNED_BYTE,,    <span class="literal">false</span>, kCCTexture2DPixelFormat_AI88    &#125;,</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> (CC_TARGET_PLATFORM == CC_PLATFORM_IOS)</span></span><br><span class="line">    <span class="comment">//如果程序运行在IOS上，还可支持以下信息</span></span><br><span class="line">    &#123; kPVRTexturePixelTypePVRTC_2,     GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG, (<span class="type">unsigned</span> <span class="type">int</span>)-, (<span class="type">unsigned</span> <span class="type">int</span>)-,            ,    <span class="literal">true</span>, kCCTexture2DPixelFormat_PVRTC2    &#125;,</span><br><span class="line">    &#123; kPVRTexturePixelTypePVRTC_4,     GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG, (<span class="type">unsigned</span> <span class="type">int</span>)-, (<span class="type">unsigned</span> <span class="type">int</span>)-,            ,    <span class="literal">true</span>, kCCTexture2DPixelFormat_PVRTC4    &#125;,</span><br><span class="line"> </span><br><span class="line">    &#123; kPVRTexturePixelTypeBGRA_8888, GL_RGBA,    GL_BGRA, GL_UNSIGNED_BYTE,                    ,    <span class="literal">false</span>, kCCTexture2DPixelFormat_RGBA8888    &#125;,</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//信息表的元素数量</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_TABLE_ELEMENTS (sizeof(tableFormats) / sizeof(tableFormats[0]))</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">enum</span> &#123;</span><br><span class="line">    kCCInternalPVRTextureFormat,</span><br><span class="line">    kCCInternalOpenGLInternalFormat,</span><br><span class="line">    kCCInternalOpenGLFormat,</span><br><span class="line">    kCCInternalOpenGLType,</span><br><span class="line">    kCCInternalBPP,</span><br><span class="line">    kCCInternalCompressedImage,</span><br><span class="line">    kCCInternalCCTexture2DPixelFormat,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//PVR文件头信息结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_PVRTexHeader</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> headerLength;    <span class="comment">//头信息长度</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> height;            <span class="comment">//高</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> width;            <span class="comment">//宽</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> numMipmaps;    <span class="comment">//是否有多级纹理</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> flags;            <span class="comment">//标记位</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> dataLength;    <span class="comment">//后面的像素数据长度</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> bpp;            <span class="comment">//色深</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> bitmaskRed;    <span class="comment">//对应红色的像素位</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> bitmaskGreen;    <span class="comment">//对应绿色的像素位</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> bitmaskBlue;     <span class="comment">//对应蓝色的像素位</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> bitmaskAlpha; <span class="comment">//对应ALPHA色的像素位</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> pvrTag;            <span class="comment">//</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> numSurfs;        <span class="comment">//是否有多层</span></span><br><span class="line">&#125; PVRTexHeader;</span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">CCTexturePVR::<span class="built_in">CCTexturePVR</span>()</span><br><span class="line">: <span class="built_in">m_uTableFormatIndex</span>()</span><br><span class="line">, <span class="built_in">m_uNumberOfMipmaps</span>()</span><br><span class="line">, <span class="built_in">m_uWidth</span>()</span><br><span class="line">, <span class="built_in">m_uHeight</span>()</span><br><span class="line">, <span class="built_in">m_bRetainName</span>(<span class="literal">false</span>)</span><br><span class="line">, <span class="built_in">m_bHasAlpha</span>(<span class="literal">false</span>)</span><br><span class="line">, <span class="built_in">m_uName</span>()</span><br><span class="line">, <span class="built_in">m_eFormat</span>(kCCTexture2DPixelFormat_Default)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//析构函数</span></span><br><span class="line">CCTexturePVR::~<span class="built_in">CCTexturePVR</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">CCLOGINFO</span>( <span class="string">&quot;cocos2d: deallocing CCTexturePVR&quot;</span> );</span><br><span class="line">    <span class="comment">//释放OpenGL贴图</span></span><br><span class="line">    <span class="keyword">if</span> (m_uName !=  &amp;&amp; ! m_bRetainName)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">ccGLDeleteTexture</span>(m_uName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//解压PVR像素数据</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">CCTexturePVR::unpackPVRData</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* data, <span class="type">unsigned</span> <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">bool</span> success = <span class="literal">false</span>;</span><br><span class="line">    PVRTexHeader *header = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> flags, pvrTag;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> dataLength = , dataOffset = , dataSize = ;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> blockSize = , widthBlocks = , heightBlocks = ;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> width = , height = , bpp = ;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *bytes = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> formatFlags;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//将数据地址转为头信息指针，这个就可以直接通过结构指针进行存取。</span></span><br><span class="line">    header = (PVRTexHeader *)data;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//格式有效性检查</span></span><br><span class="line">    pvrTag = <span class="built_in">CC_SWAP_INT32_LITTLE_TO_HOST</span>(header-&gt;pvrTag);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Check that given data really represents pvrtexture</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">        [0] = &#x27;P&#x27;</span></span><br><span class="line"><span class="comment">        [1] = &#x27;V&#x27;</span></span><br><span class="line"><span class="comment">        [2] = &#x27;R&#x27;</span></span><br><span class="line"><span class="comment">        [3] = &#x27;!&#x27;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> (gPVRTexIdentifier[] != ((pvrTag &gt;&gt;  ) &amp; <span class="number">0xff</span>) ||</span><br><span class="line">        gPVRTexIdentifier[] != ((pvrTag &gt;&gt;  ) &amp; <span class="number">0xff</span>) ||</span><br><span class="line">        gPVRTexIdentifier[] != ((pvrTag &gt;&gt; ) &amp; <span class="number">0xff</span>) ||</span><br><span class="line">        gPVRTexIdentifier[] != ((pvrTag &gt;&gt; ) &amp; <span class="number">0xff</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">CCLOG</span>(<span class="string">&quot;Unsupported PVR format. Use the Legacy format until the new format is supported&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//取得配置信息</span></span><br><span class="line">    CCConfiguration *configuration = CCConfiguration::<span class="built_in">sharedConfiguration</span>();</span><br><span class="line">    <span class="comment">//取得标记</span></span><br><span class="line">    flags = <span class="built_in">CC_SWAP_INT32_LITTLE_TO_HOST</span>(header-&gt;flags);</span><br><span class="line">    formatFlags = flags &amp; PVR_TEXTURE_FLAG_TYPE_MASK;</span><br><span class="line">    <span class="type">bool</span> flipped = (flags &amp; kPVRTextureFlagVerticalFlip) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (flipped)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">CCLOG</span>(<span class="string">&quot;cocos2d: WARNING: Image is flipped. Regenerate it using PVRTexTool&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查看是否支持非2的幂次方大小的纹理</span></span><br><span class="line">    <span class="keyword">if</span> (! configuration-&gt;<span class="built_in">supportsNPOT</span>() &amp;&amp;</span><br><span class="line">        (header-&gt;width != <span class="built_in">ccNextPOT</span>(header-&gt;width) || header-&gt;height != <span class="built_in">ccNextPOT</span>(header-&gt;height)))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">CCLOG</span>(<span class="string">&quot;cocos2d: ERROR: Loding an NPOT texture (%dx%d) but is not supported on this device&quot;</span>, header-&gt;width, header-&gt;height);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历所有的格式信息数据，找到对应的格式信息。</span></span><br><span class="line">    <span class="keyword">for</span> (m_uTableFormatIndex = ; m_uTableFormatIndex &lt; (<span class="type">unsigned</span> <span class="type">int</span>)MAX_TABLE_ELEMENTS; m_uTableFormatIndex++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (tableFormats[m_uTableFormatIndex][kCCInternalPVRTextureFormat] == formatFlags)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//Reset num of mipmaps</span></span><br><span class="line">            m_uNumberOfMipmaps = ;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//取得图片大小</span></span><br><span class="line">            m_uWidth = width = <span class="built_in">CC_SWAP_INT32_LITTLE_TO_HOST</span>(header-&gt;width);</span><br><span class="line">            m_uHeight = height = <span class="built_in">CC_SWAP_INT32_LITTLE_TO_HOST</span>(header-&gt;height);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//检查是否有ALPHA通道</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">CC_SWAP_INT32_LITTLE_TO_HOST</span>(header-&gt;bitmaskAlpha))</span><br><span class="line">            &#123;</span><br><span class="line">                m_bHasAlpha = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                m_bHasAlpha = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//取得数据长度</span></span><br><span class="line">            dataLength = <span class="built_in">CC_SWAP_INT32_LITTLE_TO_HOST</span>(header-&gt;dataLength);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//将数据指针偏移到头信息之后，即像素数据所在位置</span></span><br><span class="line">            bytes = ((<span class="type">unsigned</span> <span class="type">char</span> *)data) + <span class="built_in">sizeof</span>(PVRTexHeader);</span><br><span class="line">            m_eFormat = (CCTexture2DPixelFormat)(tableFormats[m_uTableFormatIndex][kCCInternalCCTexture2DPixelFormat]);</span><br><span class="line">            bpp = tableFormats[m_uTableFormatIndex][kCCInternalBPP];</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 遍历每个多级纹理图像块</span></span><br><span class="line">            <span class="keyword">while</span> (dataOffset &lt; dataLength)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">switch</span> (formatFlags) &#123;</span><br><span class="line">                    <span class="keyword">case</span> kPVRTexturePixelTypePVRTC_2:</span><br><span class="line">                        blockSize =  * ; <span class="comment">// Pixel by pixel block size for 2bpp</span></span><br><span class="line">                        widthBlocks = width / ;</span><br><span class="line">                        heightBlocks = height / ;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> kPVRTexturePixelTypePVRTC_4:</span><br><span class="line">                        blockSize =  * ; <span class="comment">// Pixel by pixel block size for 4bpp</span></span><br><span class="line">                        widthBlocks = width / ;</span><br><span class="line">                        heightBlocks = height / ;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> kPVRTexturePixelTypeBGRA_8888:</span><br><span class="line">                        <span class="keyword">if</span> (CCConfiguration::<span class="built_in">sharedConfiguration</span>()-&gt;<span class="built_in">supportsBGRA8888</span>() == <span class="literal">false</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">CCLOG</span>(<span class="string">&quot;cocos2d: TexturePVR. BGRA8888 not supported on this device&quot;</span>);</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        blockSize = ;</span><br><span class="line">                        widthBlocks = width;</span><br><span class="line">                        heightBlocks = height;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">                <span class="comment">// Clamp to minimum number of blocks</span></span><br><span class="line">                <span class="keyword">if</span> (widthBlocks &lt; )</span><br><span class="line">                &#123;</span><br><span class="line">                    widthBlocks = ;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (heightBlocks &lt; )</span><br><span class="line">                &#123;</span><br><span class="line">                    heightBlocks = ;</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">                dataSize = widthBlocks * heightBlocks * ((blockSize  * bpp) / );</span><br><span class="line">                <span class="type">unsigned</span> <span class="type">int</span> packetLength = (dataLength - dataOffset);</span><br><span class="line">                packetLength = packetLength &gt; dataSize ? dataSize : packetLength;</span><br><span class="line"> </span><br><span class="line">                <span class="comment">//记录每个多级纹理图像块的像素数据地址和长度。</span></span><br><span class="line">                m_asMipmaps[m_uNumberOfMipmaps].address = bytes + dataOffset;</span><br><span class="line">                m_asMipmaps[m_uNumberOfMipmaps].len = packetLength;</span><br><span class="line">                m_uNumberOfMipmaps++;</span><br><span class="line"> </span><br><span class="line">                <span class="comment">//检查是否超出最大级数</span></span><br><span class="line">                <span class="built_in">CCAssert</span>(m_uNumberOfMipmaps &lt; CC_PVRMIPMAP_MAX,</span><br><span class="line">                         <span class="string">&quot;TexturePVR: Maximum number of mimpaps reached. Increate the CC_PVRMIPMAP_MAX value&quot;</span>);</span><br><span class="line">                <span class="comment">//偏移到下一个多级纹理图像块。</span></span><br><span class="line">                dataOffset += packetLength;</span><br><span class="line"> </span><br><span class="line">                <span class="comment">//大小减为原来1/2。</span></span><br><span class="line">                width = <span class="built_in">MAX</span>(width &gt;&gt; , );</span><br><span class="line">                height = <span class="built_in">MAX</span>(height &gt;&gt; , );</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//读取完成</span></span><br><span class="line">            success = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//成功判断</span></span><br><span class="line">    <span class="keyword">if</span> (! success)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">CCLOG</span>(<span class="string">&quot;cocos2d: WARNING: Unsupported PVR Pixel Format: 0x%2x. Re-encode it with a OpenGL pixel format variant&quot;</span>, formatFlags);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> success;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建OpenGL贴图</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">CCTexturePVR::createGLTexture</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//保存宽高</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> width = m_uWidth;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> height = m_uHeight;</span><br><span class="line">    GLenum err;</span><br><span class="line">    <span class="comment">//如果文件中有多级纹理</span></span><br><span class="line">    <span class="keyword">if</span> (m_uNumberOfMipmaps &gt; )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//先释放原来的纹理</span></span><br><span class="line">        <span class="keyword">if</span> (m_uName != )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">ccGLDeleteTexture</span>(m_uName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//像素数据每字节对齐</span></span><br><span class="line">        <span class="built_in">glPixelStorei</span>(GL_UNPACK_ALIGNMENT,);</span><br><span class="line">        <span class="comment">//产生OpenGL贴图</span></span><br><span class="line">        <span class="built_in">glGenTextures</span>(, &amp;m_uName);</span><br><span class="line">        <span class="built_in">glBindTexture</span>(GL_TEXTURE_2D, m_uName);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 如果无多级纹理，设置最小滤波方式为线性过滤，产生抗锯齿效果。</span></span><br><span class="line">        <span class="keyword">if</span> (m_uNumberOfMipmaps == )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;  <span class="comment">//设置最小滤波方式为最近点采样,这种方式有锯齿。</span></span><br><span class="line">            <span class="built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_NEAREST);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置最大滤波方式为线性过滤</span></span><br><span class="line">        <span class="built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);</span><br><span class="line">    <span class="comment">//设置贴图的横向纹理寻址模式为边缘截取模式。总是忽略边界。</span></span><br><span class="line">        <span class="built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);</span><br><span class="line">        <span class="comment">//设置贴图的纵向纹理寻址模式为边缘截取模式。总是忽略边界。</span></span><br><span class="line">        <span class="built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//检错</span></span><br><span class="line">    <span class="built_in">CHECK_GL_ERROR_DEBUG</span>(); <span class="comment">// clean possible GL error</span></span><br><span class="line">    <span class="comment">//取得对应格式的相关信息。</span></span><br><span class="line">    GLenum internalFormat = tableFormats[m_uTableFormatIndex][kCCInternalOpenGLInternalFormat];</span><br><span class="line">    GLenum format = tableFormats[m_uTableFormatIndex][kCCInternalOpenGLFormat];</span><br><span class="line">    GLenum type = tableFormats[m_uTableFormatIndex][kCCInternalOpenGLType];</span><br><span class="line">    <span class="type">bool</span> compressed = ( == tableFormats[m_uTableFormatIndex][kCCInternalCompressedImage]) ? <span class="literal">false</span> : <span class="literal">true</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 循环产生多级纹理贴图。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> i = ; i &lt; m_uNumberOfMipmaps; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//检查配置信息是否支持压缩格式。</span></span><br><span class="line">        <span class="keyword">if</span> (compressed &amp;&amp; ! CCConfiguration::<span class="built_in">sharedConfiguration</span>()-&gt;<span class="built_in">supportsPVRTC</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">CCLOG</span>(<span class="string">&quot;cocos2d: WARNING: PVRTC images are not supported&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//取得当前级别的图像块的像素数据地址和长度。</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> *data = m_asMipmaps[i].address;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> datalen = m_asMipmaps[i].len;</span><br><span class="line">        <span class="comment">//如果是压缩格式，则产生压缩格式的贴图。</span></span><br><span class="line">        <span class="keyword">if</span> (compressed)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">glCompressedTexImage2D</span>(GL_TEXTURE_2D, i, internalFormat, width, height, , datalen, data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;<span class="comment">//产生一般格式的贴图。</span></span><br><span class="line">            <span class="built_in">glTexImage2D</span>(GL_TEXTURE_2D, i, internalFormat, width, height, , format, type, data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果是非2的幂次方大小，则提示。</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt;  &amp;&amp; (width != height || <span class="built_in">ccNextPOT</span>(width) != width ))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">CCLOG</span>(<span class="string">&quot;cocos2d: TexturePVR. WARNING. Mipmap level %u is not squared. Texture won&#x27;t render correctly. width=%u != height=%u&quot;</span>, i, width, height);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//检错</span></span><br><span class="line">        err = <span class="built_in">glGetError</span>();</span><br><span class="line">        <span class="keyword">if</span> (err != GL_NO_ERROR)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">CCLOG</span>(<span class="string">&quot;cocos2d: TexturePVR: Error uploading compressed texture level: %u . glError: 0x%04X&quot;</span>, i, err);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//变为原来大小的1/2。</span></span><br><span class="line">        width = <span class="built_in">MAX</span>(width &gt;&gt; , );</span><br><span class="line">        height = <span class="built_in">MAX</span>(height &gt;&gt; , );</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//成员函数：加载PVR图片</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">CCTexturePVR::initWithContentsOfFile</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span>* pvrdata = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> pvrlen = ;</span><br><span class="line">     <span class="comment">//定义字符串变量，存储转换为小写的路径字符串。</span></span><br><span class="line">    <span class="function">std::string <span class="title">lowerCase</span><span class="params">(path)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> i = ; i &lt; lowerCase.<span class="built_in">length</span>(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        lowerCase[i] = <span class="built_in">tolower</span>(lowerCase[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//检查是否是ccz格式。</span></span><br><span class="line">    <span class="keyword">if</span> (lowerCase.<span class="built_in">find</span>(<span class="string">&quot;.ccz&quot;</span>) != std::string::npos)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//调用压缩库函数将文件数据读取到为pvrdata申请的内存中。取得其大小存入pvrlen变量中。</span></span><br><span class="line">        pvrlen = ZipUtils::<span class="built_in">ccInflateCCZFile</span>(path, &amp;pvrdata);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//检查是否是gz格式。</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (lowerCase.<span class="built_in">find</span>(<span class="string">&quot;.gz&quot;</span>) != std::string::npos)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//调用压缩库函数将文件数据读取到为pvrdata申请的内存中。取得其大小存入pvrlen变量中。</span></span><br><span class="line">        pvrlen = ZipUtils::<span class="built_in">ccInflateGZipFile</span>(path, &amp;pvrdata);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//普通PVR文件，将文件数据读取到一块内存中返回给pvrdata。取得其大小存入pvrlen变量中。</span></span><br><span class="line">        pvrdata = CCFileUtils::<span class="built_in">sharedFileUtils</span>()-&gt;<span class="built_in">getFileData</span>(path, <span class="string">&quot;rb&quot;</span>, (<span class="type">unsigned</span> <span class="type">long</span> *)(&amp;pvrlen));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果读取失败则返回</span></span><br><span class="line">    <span class="keyword">if</span> (pvrlen &lt; )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;<span class="built_in">release</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    m_uNumberOfMipmaps = ;</span><br><span class="line"> </span><br><span class="line">    m_uName = ;</span><br><span class="line">    m_uWidth = m_uHeight = ;</span><br><span class="line">    m_bHasAlpha = <span class="literal">false</span>;</span><br><span class="line"> </span><br><span class="line">    m_bRetainName = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//如果解压数据失败则返回。</span></span><br><span class="line">    <span class="comment">//解压后，如果创建贴图失败则返回。</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">unpackPVRData</span>(pvrdata, pvrlen)  || !<span class="built_in">createGLTexture</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">CC_SAFE_DELETE_ARRAY</span>(pvrdata);</span><br><span class="line">        <span class="keyword">this</span>-&gt;<span class="built_in">release</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放数据占用的内存。</span></span><br><span class="line">    <span class="built_in">CC_SAFE_DELETE_ARRAY</span>(pvrdata);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//导出的静态函数：加载PVR图片</span></span><br><span class="line"><span class="function">CCTexturePVR * <span class="title">CCTexturePVR::pvrTextureWithContentsOfFile</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> CCTexturePVR::<span class="built_in">create</span>(path);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//静态函数：加载PVR图片</span></span><br><span class="line"><span class="function">CCTexturePVR * <span class="title">CCTexturePVR::create</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//new 一个新的CCTexturePVR</span></span><br><span class="line">    CCTexturePVR * pTexture = <span class="keyword">new</span> <span class="built_in">CCTexturePVR</span>();</span><br><span class="line">    <span class="keyword">if</span> (pTexture)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//调用成员函数加载PVR图片</span></span><br><span class="line">        <span class="keyword">if</span> (pTexture-&gt;<span class="built_in">initWithContentsOfFile</span>(path))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果成功,设置交由内存管理器使用引用计数器进行内存管理。</span></span><br><span class="line">            pTexture-&gt;<span class="built_in">autorelease</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">              <span class="comment">//否则释放纹理</span></span><br><span class="line">            <span class="keyword">delete</span> pTexture;</span><br><span class="line">            pTexture = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回这个CCTexturePVR</span></span><br><span class="line">    <span class="keyword">return</span> pTexture;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">NS_CC_END</span><br></pre></td></tr></table></figure>

<h3 id="CCTextureCache"><a href="#CCTextureCache" class="headerlink" title="CCTextureCache"></a>CCTextureCache</h3><p><code>CCTextureCache.h:</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __CCTEXTURE_CACHE_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __CCTEXTURE_CACHE_H__</span></span><br><span class="line"><span class="comment">//由CCObject派生</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cocoa/CCObject.h&quot;</span></span></span><br><span class="line"><span class="comment">//需要用到字典</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cocoa/CCDictionary.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;textures/CCTexture2D.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//这里用到CCImage类和STL容器之一list</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> CC_ENABLE_CACHE_TEXTURE_DATA</span></span><br><span class="line">    <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;platform/CCImage.h&quot;</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//Cocos2d命名空间</span></span><br><span class="line">NS_CC_BEGIN</span><br><span class="line"><span class="comment">//用到线程锁</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CCLock</span>;</span><br><span class="line"><span class="comment">//用到CCImage处理图片</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CCImage</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//纹理管理器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CC_DLL</span> CCTextureCache : <span class="keyword">public</span> CCObject</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="comment">//字典对象指针。</span></span><br><span class="line">CCDictionary*                 m_pTextures;</span><br><span class="line"><span class="comment">//线程临界区。用于锁定字典访问，貌似用不到。这里屏蔽了~</span></span><br><span class="line">    <span class="comment">//pthread_mutex_t          *m_pDictLock;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 设置多线程加载图片时的回调函数。</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addImageAsyncCallBack</span><span class="params">(<span class="type">float</span> dt)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line"><span class="built_in">CCTextureCache</span>();</span><br><span class="line"><span class="comment">//析构函数</span></span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">CCTextureCache</span>();</span><br><span class="line">    <span class="comment">//取得当前类描述</span></span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">description</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line">    <span class="comment">//取得当前字典的快照（拷贝）</span></span><br><span class="line">    <span class="function">CCDictionary* <span class="title">snapshotTextures</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//返回唯一纹理管理器的实例指针</span></span><br><span class="line">    <span class="function"><span class="type">static</span> CCTextureCache * <span class="title">sharedTextureCache</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//销毁唯一纹理管理器的实例指针</span></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">purgeSharedTextureCache</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//加载一个图片生成纹理，文件名做为字典的查询对应关键字。返回生成的纹理指针，支持png,bmp,tiff,jpeg,pvr,gif等格式。</span></span><br><span class="line">    <span class="function">CCTexture2D* <span class="title">addImage</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* fileimage)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//此函数可以支持多线程载入图片，调用时会创建一个线程进行异步加载，加载成功后由主线程调用设置的回调函数，当然创建的纹理会做为参数传递。支持png和jpg</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addImageAsync</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path, CCObject *target, SEL_CallFuncO selector)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//加载一个图片生成纹理，指定参数key（其实要求是图片的相对路径字符串）做为字典的查询对应关键字。</span></span><br><span class="line">    <span class="function">CCTexture2D* <span class="title">addUIImage</span><span class="params">(CCImage *image, <span class="type">const</span> <span class="type">char</span> *key)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//通过查询关键字（其实要求是图片的相对路径字符串）从字典里找到对应的纹理。</span></span><br><span class="line"><span class="function">CCTexture2D* <span class="title">textureForKey</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* key)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//清空字典，释放所有纹理。</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">removeAllTextures</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//清除未被外部使用的纹理。怎么知道未使用呢？因为在Cocos2d-x中使用“引用计数器”来管理各种资源的使用情况，纹理也不例外。在资源类构造时，纹理的计数器值为0，但由CCTextureCache来创建完成后，会对纹理的资源计数器做加1操作以通知纹理说“你现在被我占用呢”。如果纹理被外部使用，应该再次调用其资源计数器做加1操作，退出使用时做减1操作通知其“我现在不用你了”。所以这里只需要遍历下计数器值为1的纹理即未被外部使用的纹理进行释放即可。</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">removeUnusedTextures</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//移除一个纹理</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">removeTexture</span><span class="params">(CCTexture2D* texture)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//由字典查询关键字找到相应纹理并移除。</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">removeTextureForKey</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *textureKeyName)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//打印出当前管理的纹理信息，包括现在纹理占用的内存和总的纹理内存。</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dumpCachedTextureInfo</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CC_SUPPORT_PVRTC</span></span><br><span class="line"><span class="comment">//如果开启支持PVR的压缩格式，这里提供加载PVR压缩文件生成纹理的函数。</span></span><br><span class="line"><span class="comment">//参1:PVR压缩文件名</span></span><br><span class="line"><span class="comment">//参2:压缩质量参数，只能设为2或4，4比2质量高，但压缩比低。2则相反。</span></span><br><span class="line"><span class="comment">//参3:是否有Alpha通道。这里会根据是否有ALPHA通道以生成相应的默认纹理格式。</span></span><br><span class="line"><span class="comment">//参4:图片必须是2的幂次方大小的正方形，所以这里只需要填写一下宽度，也就是图片大小。</span></span><br><span class="line">    <span class="function">CCTexture2D* <span class="title">addPVRTCImage</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* fileimage, <span class="type">int</span> bpp, <span class="type">bool</span> hasAlpha, <span class="type">int</span> width)</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// CC_SUPPORT_PVRTC</span></span></span><br><span class="line"> </span><br><span class="line">   <span class="comment">//加载普通的PVR图片文件生成纹理。</span></span><br><span class="line">    <span class="function">CCTexture2D* <span class="title">addPVRImage</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* filename)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//如果CC_ENABLE_CACHE_TEXTURE_DATA宏定义为可用（即值为1），则调用此函数会将所有的纹理都预加载进内存生成相应纹理。</span></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">reloadAllTextures</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//如果定义了CC_ENABLE_CACHE_TEXTURE_DATA，这里定义一个新的类</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> CC_ENABLE_CACHE_TEXTURE_DATA</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//新定义的类名称为VolatileTexture，意思是多变纹理。这里代表了多种数据源生成的纹理的管理器。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VolatileTexture</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//这里声明了一个枚举，代表了多变纹理对应的几种数据源类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123;</span><br><span class="line">    kInvalid = ,<span class="comment">//无效未加载任何数据的状态</span></span><br><span class="line">    kImageFile,  <span class="comment">//图片文件</span></span><br><span class="line">    kImageData,  <span class="comment">//内存中的图片数据</span></span><br><span class="line">    kString,     <span class="comment">//字符串</span></span><br><span class="line">    kImage,      <span class="comment">//图片对象(CCImage)</span></span><br><span class="line">&#125;ccCachedImageType;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//构造</span></span><br><span class="line"><span class="built_in">VolatileTexture</span>(CCTexture2D *t);</span><br><span class="line"><span class="comment">//析构</span></span><br><span class="line">    ~<span class="built_in">VolatileTexture</span>();</span><br><span class="line">     <span class="comment">//静态函数：通过图片文件生成的纹理及相关信息生成一个多变纹理并将其指针放入容器。</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">addImageTexture</span><span class="params">(CCTexture2D *tt, <span class="type">const</span> <span class="type">char</span>* imageFileName, CCImage::EImageFormat format)</span></span>;</span><br><span class="line"><span class="comment">//静态函数：通过字符串生成的纹理及相关信息生成一个多变纹理并将其指针放入容器。</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">addStringTexture</span><span class="params">(CCTexture2D *tt, <span class="type">const</span> <span class="type">char</span>* text, <span class="type">const</span> CCSize&amp; dimensions, CCTextAlignment alignment,</span></span></span><br><span class="line"><span class="params"><span class="function">                                 CCVerticalTextAlignment vAlignment, <span class="type">const</span> <span class="type">char</span> *fontName, <span class="type">float</span> fontSize)</span></span>;</span><br><span class="line">    <span class="comment">//通过图片数据生成的纹理及相关信息生成一个多变纹理并将其指针放入容器。</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">addDataTexture</span><span class="params">(CCTexture2D *tt, <span class="type">void</span>* data, CCTexture2DPixelFormat pixelFormat, <span class="type">const</span> CCSize&amp; contentSize)</span></span>;</span><br><span class="line"><span class="comment">//通过图片对象生成的纹理及相关信息生成一个多变纹理并将其指针放入容器。</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">addCCImage</span><span class="params">(CCTexture2D *tt, CCImage *image)</span></span>;</span><br><span class="line">    <span class="comment">//通过纹理指针参数从容器中删除对应的多变纹理</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">removeTexture</span><span class="params">(CCTexture2D *t)</span></span>;</span><br><span class="line"><span class="comment">//重新载入所有的纹理</span></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">reloadAllTextures</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//静态多变纹理指针容器，用来存储所有的多变纹理对象指针。</span></span><br><span class="line"><span class="type">static</span> std::list&lt;VolatileTexture*&gt; textures;</span><br><span class="line"><span class="comment">//是否正在进行全部重新载入</span></span><br><span class="line">    <span class="type">static</span> <span class="type">bool</span> isReloading;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//通过纹理指针参数从容器找到对应的多变纹理对象指针</span></span><br><span class="line">    <span class="function"><span class="type">static</span> VolatileTexture* <span class="title">findVolotileTexture</span><span class="params">(CCTexture2D *tt)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="comment">//与当前多变纹理对应的纹理指针</span></span><br><span class="line">    CCTexture2D *texture;</span><br><span class="line">    <span class="comment">//对应的图片对象</span></span><br><span class="line">    CCImage *uiImage;</span><br><span class="line"><span class="comment">//数据源类型</span></span><br><span class="line">    ccCachedImageType m_eCashedImageType;</span><br><span class="line"><span class="comment">//纹理数据指针</span></span><br><span class="line"><span class="type">void</span> *m_pTextureData;</span><br><span class="line"><span class="comment">//纹理的实际大小</span></span><br><span class="line">CCSize m_TextureSize;</span><br><span class="line"><span class="comment">//纹理的像素格式</span></span><br><span class="line">    CCTexture2DPixelFormat m_PixelFormat;</span><br><span class="line"><span class="comment">//对应的图片名称</span></span><br><span class="line">std::string m_strFileName;</span><br><span class="line"><span class="comment">//图片的像素格式</span></span><br><span class="line">    CCImage::EImageFormat m_FmtImage;</span><br><span class="line"><span class="comment">//图片的大小</span></span><br><span class="line">    CCSize          m_size;</span><br><span class="line">    <span class="comment">//横向文字的对齐方式</span></span><br><span class="line">CCTextAlignment m_alignment;</span><br><span class="line"> <span class="comment">//纵向文字的对齐方式</span></span><br><span class="line">CCVerticalTextAlignment m_vAlignment;</span><br><span class="line"><span class="comment">//字体名称</span></span><br><span class="line">std::string     m_strFontName;</span><br><span class="line"><span class="comment">//文字</span></span><br><span class="line">std::string     m_strText;</span><br><span class="line"><span class="comment">//字体大小</span></span><br><span class="line">    <span class="type">float</span>           m_fFontSize;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line">NS_CC_END</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//__CCTEXTURE_CACHE_H__</span></span></span><br></pre></td></tr></table></figure>
<p><code>CCTextureCache.cpp:</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CCTextureCache.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CCTexture2D.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ccMacros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CCDirector.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;platform/platform.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;platform/CCFileUtils.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;platform/CCThread.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;platform/CCImage.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;support/ccUtils.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CCScheduler.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cocoa/CCString.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="comment">//使用标准库命名空间</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//使用Cocos2d命名空间</span></span><br><span class="line">NS_CC_BEGIN</span><br><span class="line"><span class="comment">//异步加载所用的消息结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_AsyncStruct</span></span><br><span class="line">&#123;</span><br><span class="line">    std::string          filename;<span class="comment">//文件名</span></span><br><span class="line">    CCObject                *target;  <span class="comment">//调用者</span></span><br><span class="line">    SEL_CallFuncO        selector; <span class="comment">//载回完的回调函数</span></span><br><span class="line">&#125; AsyncStruct;</span><br><span class="line"><span class="comment">//图片信息</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_ImageInfo</span></span><br><span class="line">&#123;</span><br><span class="line">    AsyncStruct    *asyncStruct;    <span class="comment">//异步加载消息结构</span></span><br><span class="line">    CCImage        *image;         <span class="comment">//图片指针</span></span><br><span class="line">    CCImage::EImageFormat imageType<span class="comment">//图片类型</span></span><br><span class="line">&#125; ImageInfo;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//加载图片的线程</span></span><br><span class="line"><span class="type">static</span> <span class="type">pthread_t</span> s_loadingThread;</span><br><span class="line"><span class="comment">//用于读取异步消息队列的线程临界区</span></span><br><span class="line"><span class="type">static</span> <span class="type">pthread_mutex_t</span>      s_asyncStructQueueMutex;</span><br><span class="line"><span class="comment">//用于存储图片信息结构处理的临界区</span></span><br><span class="line"><span class="type">static</span> <span class="type">pthread_mutex_t</span>      s_ImageInfoMutex;</span><br><span class="line"><span class="comment">//信号量指针。信号量是当前进程中的多个线程通信的一种方式。</span></span><br><span class="line"><span class="type">static</span> <span class="type">sem_t</span>* s_pSem = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//多线程加载图片的数量。</span></span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">long</span> s_nAsyncRefCount = ;</span><br><span class="line"><span class="comment">//如果是IOS平台，则定义是否使用信号量命名。</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> CC_TARGET_PLATFORM == CC_PLATFORM_IOS</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> CC_ASYNC_TEXTURE_CACHE_USE_NAMED_SEMAPHORE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> CC_ASYNC_TEXTURE_CACHE_USE_NAMED_SEMAPHORE 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//如果使用信号量命名，则定义命名的字符串宏，否则定义静态全局的信号量结构。</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> CC_ASYNC_TEXTURE_CACHE_USE_NAMED_SEMAPHORE</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> CC_ASYNC_TEXTURE_CACHE_SEMAPHORE <span class="string">&quot;ccAsync&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="type">static</span> <span class="type">sem_t</span> s_sem;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//是否在当前加载线程处理完手上的活儿就退出。</span></span><br><span class="line"><span class="type">static</span> <span class="type">bool</span> need_quit = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//异步加载图片的消息结构指针容器，即消息队列。</span></span><br><span class="line"><span class="type">static</span> std::queue&lt;AsyncStruct*&gt;* s_pAsyncStructQueue = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//异步存储图片信息结构指针的容器。</span></span><br><span class="line"><span class="type">static</span> std::queue&lt;ImageInfo*&gt;*   s_pImageQueue = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//通过文件扩展名取得图片格式</span></span><br><span class="line"><span class="function"><span class="type">static</span> CCImage::EImageFormat <span class="title">computeImageFormatType</span><span class="params">(string&amp; filename)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CCImage::EImageFormat ret = CCImage::kFmtUnKnown;</span><br><span class="line">    <span class="comment">//JPG</span></span><br><span class="line">    <span class="keyword">if</span> ((std::string::npos != filename.<span class="built_in">find</span>(<span class="string">&quot;.jpg&quot;</span>)) || (std::string::npos != filename.<span class="built_in">find</span>(<span class="string">&quot;.jpeg&quot;</span>)))</span><br><span class="line">    &#123;</span><br><span class="line">        ret = CCImage::kFmtJpg;</span><br><span class="line">    &#125;<span class="comment">//PNG</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((std::string::npos != filename.<span class="built_in">find</span>(<span class="string">&quot;.png&quot;</span>)) || (std::string::npos != filename.<span class="built_in">find</span>(<span class="string">&quot;.PNG&quot;</span>)))</span><br><span class="line">    &#123;</span><br><span class="line">        ret = CCImage::kFmtPng;</span><br><span class="line">    &#125;<span class="comment">//TIFF</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((std::string::npos != filename.<span class="built_in">find</span>(<span class="string">&quot;.tiff&quot;</span>)) || (std::string::npos != filename.<span class="built_in">find</span>(<span class="string">&quot;.TIFF&quot;</span>)))</span><br><span class="line">    &#123;</span><br><span class="line">        ret = CCImage::kFmtTiff;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//加载图片的线程函数</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">loadImage</span><span class="params">(<span class="type">void</span>* data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个线程信息对象</span></span><br><span class="line">    CCThread thread;</span><br><span class="line">    thread.<span class="built_in">createAutoreleasePool</span>();</span><br><span class="line">    <span class="comment">//多线程加载消息结构</span></span><br><span class="line">    AsyncStruct *pAsyncStruct = <span class="literal">NULL</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//线程将处理所有随时要进行多线程加载的图片，所以会有一个While循环。</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//当前线程等待信号量变为非零值，并减1。</span></span><br><span class="line">        <span class="type">int</span> semWaitRet = <span class="built_in">sem_wait</span>(s_pSem);</span><br><span class="line">         <span class="comment">//如果信号量为负值，打印出错信息并中断。</span></span><br><span class="line">        <span class="keyword">if</span>( semWaitRet &lt;  )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">CCLOG</span>( <span class="string">&quot;CCTextureCache async thread semaphore error: %s\n&quot;</span>, <span class="built_in">strerror</span>( errno ) );</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//取得全局的异步加载信息结构指针容器</span></span><br><span class="line">        std::queue&lt;AsyncStruct*&gt; *pQueue = s_pAsyncStructQueue;</span><br><span class="line">         <span class="comment">//下面代码作为临界区上锁</span></span><br><span class="line">        <span class="built_in">pthread_mutex_lock</span>(&amp;s_asyncStructQueueMutex);</span><br><span class="line">        <span class="comment">//如果没有需要异步加载的图片</span></span><br><span class="line">        <span class="keyword">if</span> (pQueue-&gt;<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">              <span class="comment">//解锁临界区</span></span><br><span class="line">            <span class="built_in">pthread_mutex_unlock</span>(&amp;s_asyncStructQueueMutex);</span><br><span class="line">            <span class="comment">//如果退出线程标记为true则中断退出，否则继续。</span></span><br><span class="line">            <span class="keyword">if</span> (need_quit)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">              <span class="comment">//如果有需要异步加载的图片，则从队列中取第一个消息指针保存在变量pAsyncStruct中随后将其从队列中移除。</span></span><br><span class="line">            pAsyncStruct = pQueue-&gt;<span class="built_in">front</span>();</span><br><span class="line">            pQueue-&gt;<span class="built_in">pop</span>();</span><br><span class="line">             <span class="comment">//解锁临界区</span></span><br><span class="line">            <span class="built_in">pthread_mutex_unlock</span>(&amp;s_asyncStructQueueMutex);</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="comment">//取得要进行异步加载的图片名称</span></span><br><span class="line">        <span class="type">const</span> <span class="type">char</span> *filename = pAsyncStruct-&gt;filename.<span class="built_in">c_str</span>();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//取得图片类型</span></span><br><span class="line">        CCImage::EImageFormat imageType = <span class="built_in">computeImageFormatType</span>(pAsyncStruct-&gt;filename);</span><br><span class="line">         <span class="comment">//如果不是PNG,JPG或TIFF就不支持了。打印错误后进行相应处理。</span></span><br><span class="line">        <span class="keyword">if</span> (imageType == CCImage::kFmtUnKnown)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">CCLOG</span>(<span class="string">&quot;unsupportted format %s&quot;</span>,filename);</span><br><span class="line">            <span class="keyword">delete</span> pAsyncStruct;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 如果是有效格式，生成一个新的CCImage对象</span></span><br><span class="line">        CCImage *pImage = <span class="keyword">new</span> <span class="built_in">CCImage</span>();</span><br><span class="line">        <span class="comment">// 由文件名和图片格式将图片加载到CCImage中。</span></span><br><span class="line">        <span class="keyword">if</span> (! pImage-&gt;<span class="built_in">initWithImageFileThreadSafe</span>(filename, imageType))</span><br><span class="line">        &#123;     <span class="comment">//如果失败，释放CCImage对象并打印错误。</span></span><br><span class="line">            <span class="keyword">delete</span> pImage;</span><br><span class="line">            <span class="built_in">CCLOG</span>(<span class="string">&quot;can not load %s&quot;</span>, filename);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 动态创建一个新的图片信息结构并填充相应信息</span></span><br><span class="line">        ImageInfo *pImageInfo = <span class="keyword">new</span> <span class="built_in">ImageInfo</span>();</span><br><span class="line">        pImageInfo-&gt;asyncStruct = pAsyncStruct;</span><br><span class="line">        pImageInfo-&gt;image = pImage;</span><br><span class="line">        pImageInfo-&gt;imageType = imageType;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//下面代码作为临界区上锁</span></span><br><span class="line">        <span class="built_in">pthread_mutex_lock</span>(&amp;s_ImageInfoMutex);</span><br><span class="line">        <span class="comment">//将新的图片信息放入图片信息结构容器。</span></span><br><span class="line">        s_pImageQueue-&gt;<span class="built_in">push</span>(pImageInfo);</span><br><span class="line">        <span class="comment">//解锁临界区</span></span><br><span class="line">        <span class="built_in">pthread_mutex_unlock</span>(&amp;s_ImageInfoMutex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果退出循环，释放信号量</span></span><br><span class="line">    <span class="keyword">if</span>( s_pSem != <span class="literal">NULL</span> )</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> CC_ASYNC_TEXTURE_CACHE_USE_NAMED_SEMAPHORE</span></span><br><span class="line">        <span class="built_in">sem_unlink</span>(CC_ASYNC_TEXTURE_CACHE_SEMAPHORE);</span><br><span class="line">        <span class="built_in">sem_close</span>(s_pSem);</span><br><span class="line">    <span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">        <span class="built_in">sem_destroy</span>(s_pSem);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        s_pSem = <span class="literal">NULL</span>;</span><br><span class="line">         <span class="comment">//释放多线程加载所用的消息队列和与之对应的图片信息队列。</span></span><br><span class="line">        <span class="keyword">delete</span> s_pAsyncStructQueue;</span><br><span class="line">        <span class="keyword">delete</span> s_pImageQueue;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 唯一的全局纹理数据缓冲区对象指针</span></span><br><span class="line"><span class="type">static</span> CCTextureCache *g_sharedTextureCache = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//取得唯一的全局纹理数据缓冲区对象指针</span></span><br><span class="line"><span class="function">CCTextureCache * <span class="title">CCTextureCache::sharedTextureCache</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!g_sharedTextureCache)</span><br><span class="line">    &#123;</span><br><span class="line">        g_sharedTextureCache = <span class="keyword">new</span> <span class="built_in">CCTextureCache</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> g_sharedTextureCache;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">CCTextureCache::<span class="built_in">CCTextureCache</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">CCAssert</span>(g_sharedTextureCache == <span class="literal">NULL</span>, <span class="string">&quot;Attempted to allocate a second instance of a singleton.&quot;</span>);</span><br><span class="line">      <span class="comment">//生成一个字典</span></span><br><span class="line">    m_pTextures = <span class="keyword">new</span> <span class="built_in">CCDictionary</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//析构函数</span></span><br><span class="line">CCTextureCache::~<span class="built_in">CCTextureCache</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">CCLOGINFO</span>(<span class="string">&quot;cocos2d: deallocing CCTextureCache.&quot;</span>);</span><br><span class="line">    need_quit = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (s_pSem != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sem_post</span>(s_pSem);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放字典</span></span><br><span class="line">    <span class="built_in">CC_SAFE_RELEASE</span>(m_pTextures);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//释放唯一的全局纹理数据缓冲区对象</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CCTextureCache::purgeSharedTextureCache</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">CC_SAFE_RELEASE_NULL</span>(g_sharedTextureCache);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取得当前类描述</span></span><br><span class="line"><span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">CCTextureCache::description</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> CCString::<span class="built_in">createWithFormat</span>(<span class="string">&quot;&lt;CCTextureCache | Number of textures = %u&gt;&quot;</span>, m_pTextures-&gt;<span class="built_in">count</span>())-&gt;<span class="built_in">getCString</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取得当前字典的快照</span></span><br><span class="line"><span class="function">CCDictionary* <span class="title">CCTextureCache::snapshotTextures</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//动态创建一个新的字典</span></span><br><span class="line">    CCDictionary* pRet = <span class="keyword">new</span> <span class="built_in">CCDictionary</span>();</span><br><span class="line">CCDictElement* pElement = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//遍历原来字典将数据填充到新字典中</span></span><br><span class="line">    <span class="built_in">CCDICT_FOREACH</span>(m_pTextures, pElement)</span><br><span class="line">    &#123;</span><br><span class="line">        pRet-&gt;<span class="built_in">setObject</span>(pElement-&gt;<span class="built_in">getObject</span>(), pElement-&gt;<span class="built_in">getStrKey</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pRet;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用多线程载入图片。</span></span><br><span class="line"><span class="comment">//参1:图片相对路径名。</span></span><br><span class="line"><span class="comment">//参2:载入完成后要通知的对象。</span></span><br><span class="line"><span class="comment">//参3:载入完成后要通知对象调用的函数。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CCTextureCache::addImageAsync</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path, CCObject *target, SEL_CallFuncO selector)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//文件名不能为空</span></span><br><span class="line">    <span class="built_in">CCAssert</span>(path != <span class="literal">NULL</span>, <span class="string">&quot;TextureCache: fileimage MUST not be NULL&quot;</span>);</span><br><span class="line"><span class="comment">//定义一个纹理指针并置空</span></span><br><span class="line">    CCTexture2D *texture = <span class="literal">NULL</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//创建字符串pathKey做为字典查询关键字。</span></span><br><span class="line">    std::string pathKey = path;</span><br><span class="line"><span class="comment">//取得图片所在位置的全路径名</span></span><br><span class="line">pathKey = CCFileUtils::<span class="built_in">sharedFileUtils</span>()-&gt;<span class="built_in">fullPathFromRelativePath</span>(pathKey.<span class="built_in">c_str</span>());</span><br><span class="line"><span class="comment">//先查询一下是否字典里已经有了此纹理。</span></span><br><span class="line">    texture = (CCTexture2D*)m_pTextures-&gt;<span class="built_in">objectForKey</span>(pathKey.<span class="built_in">c_str</span>());</span><br><span class="line"> </span><br><span class="line">    std::string fullpath = pathKey;</span><br><span class="line"><span class="comment">//如果已经有了，则直接把纹理做为参数调用要通知的对象的函数。</span></span><br><span class="line"><span class="keyword">if</span> (texture != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (target &amp;&amp; selector)</span><br><span class="line">        &#123;</span><br><span class="line">            (target-&gt;*selector)(texture);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//如果是第一次调用多线程载入，创建信号量并进行相应初始化。</span></span><br><span class="line"><span class="keyword">if</span> (s_pSem == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//判断是否使用信号量命名，如果是，创建一个信号量返回其地址给指针s_pSem。</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> CC_ASYNC_TEXTURE_CACHE_USE_NAMED_SEMAPHORE</span></span><br><span class="line">        s_pSem = <span class="built_in">sem_open</span>(CC_ASYNC_TEXTURE_CACHE_SEMAPHORE, O_CREAT, , );</span><br><span class="line">        <span class="keyword">if</span>( s_pSem == SEM_FAILED )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">CCLOG</span>( <span class="string">&quot;CCTextureCache async thread semaphore init error: %s\n&quot;</span>, <span class="built_in">strerror</span>( errno ) );</span><br><span class="line">            s_pSem = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">         <span class="comment">//如果不使用信号量命名，直接用sem_init来初始化信号量对象s_sem。</span></span><br><span class="line">        <span class="type">int</span> semInitRet = <span class="built_in">sem_init</span>(&amp;s_sem, , );</span><br><span class="line">        <span class="keyword">if</span>( semInitRet &lt;  )</span><br><span class="line">        &#123;</span><br><span class="line">              <span class="comment">//如果失败，打印出错并退出。</span></span><br><span class="line">            <span class="built_in">CCLOG</span>( <span class="string">&quot;CCTextureCache async thread semaphore init error: %s\n&quot;</span>, <span class="built_in">strerror</span>( errno ) );</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="comment">//如果成功，将信号量对象地址给指针s_pSem。</span></span><br><span class="line">        s_pSem = &amp;s_sem;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> <span class="comment">//建立加载消息队列</span></span><br><span class="line">        s_pAsyncStructQueue = <span class="keyword">new</span> <span class="built_in">queue</span>&lt;AsyncStruct*&gt;();</span><br><span class="line">        <span class="comment">//建立加载的图片信息结构队列</span></span><br><span class="line">        s_pImageQueue = <span class="keyword">new</span> <span class="built_in">queue</span>&lt;ImageInfo*&gt;();</span><br><span class="line">        <span class="comment">//线程锁初始化</span></span><br><span class="line">        <span class="built_in">pthread_mutex_init</span>(&amp;s_asyncStructQueueMutex, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">pthread_mutex_init</span>(&amp;s_ImageInfoMutex, <span class="literal">NULL</span>);</span><br><span class="line"> <span class="comment">//创建加载线程。</span></span><br><span class="line">        <span class="built_in">pthread_create</span>(&amp;s_loadingThread, <span class="literal">NULL</span>, loadImage, <span class="literal">NULL</span>);</span><br><span class="line">         <span class="comment">//将退出指令设为false。</span></span><br><span class="line">        need_quit = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//多线程加载图片的引用计数器如果为0，</span></span><br><span class="line">    <span class="keyword">if</span> ( == s_nAsyncRefCount)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//将addImageAsyncCallBack函数加入显示设备上的回调函数处理器中。</span></span><br><span class="line">CCDirector::<span class="built_in">sharedDirector</span>()-&gt;<span class="built_in">getScheduler</span>()-&gt;<span class="built_in">scheduleSelector</span>(<span class="built_in">schedule_selector</span>(CCTextureCache::addImageAsyncCallBack), <span class="keyword">this</span>, , <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//计数器加1</span></span><br><span class="line">    ++s_nAsyncRefCount;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">    <span class="keyword">if</span> (target)</span><br><span class="line">    &#123;</span><br><span class="line">        target-&gt;<span class="built_in">retain</span>();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 产生一个新的加载消息，放入加载消息队列中。</span></span><br><span class="line">    AsyncStruct *data = <span class="keyword">new</span> <span class="built_in">AsyncStruct</span>();</span><br><span class="line">    data-&gt;filename = fullpath.<span class="built_in">c_str</span>();</span><br><span class="line">    data-&gt;target = target;</span><br><span class="line">    data-&gt;selector = selector;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 当然，放入时得锁一下，放入后再解锁。</span></span><br><span class="line">    <span class="built_in">pthread_mutex_lock</span>(&amp;s_asyncStructQueueMutex);</span><br><span class="line">    s_pAsyncStructQueue-&gt;<span class="built_in">push</span>(data);</span><br><span class="line">    <span class="built_in">pthread_mutex_unlock</span>(&amp;s_asyncStructQueueMutex);</span><br><span class="line"><span class="comment">//给信号量加1，sem_post是原子操作，即多个线程同时调用并不会产生冲突。</span></span><br><span class="line">    <span class="built_in">sem_post</span>(s_pSem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//多线程加载图片时的回调函数。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CCTextureCache::addImageAsyncCallBack</span><span class="params">(<span class="type">float</span> dt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 取得多线程加载的图片信息队列</span></span><br><span class="line">    std::queue&lt;ImageInfo*&gt; *imagesQueue = s_pImageQueue;</span><br><span class="line">    <span class="comment">//下面代码作为临界区上锁</span></span><br><span class="line"><span class="built_in">pthread_mutex_lock</span>(&amp;s_ImageInfoMutex);</span><br><span class="line"><span class="comment">//如果图片信息队列为空直接解锁，否则进行处理</span></span><br><span class="line">    <span class="keyword">if</span> (imagesQueue-&gt;<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">pthread_mutex_unlock</span>(&amp;s_ImageInfoMutex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="comment">//取出图片信息队列的头一个信息从队列中弹出。</span></span><br><span class="line">        ImageInfo *pImageInfo = imagesQueue-&gt;<span class="built_in">front</span>();</span><br><span class="line">        imagesQueue-&gt;<span class="built_in">pop</span>();</span><br><span class="line">        <span class="comment">//解锁临界区</span></span><br><span class="line">        <span class="built_in">pthread_mutex_unlock</span>(&amp;s_ImageInfoMutex);</span><br><span class="line">        <span class="comment">//取得信息中的加载消息。</span></span><br><span class="line">        AsyncStruct *pAsyncStruct = pImageInfo-&gt;asyncStruct;</span><br><span class="line">         <span class="comment">//取得图片信息中的CCImage指针。</span></span><br><span class="line">        CCImage *pImage = pImageInfo-&gt;image;</span><br><span class="line">         <span class="comment">//取得加载完成后要通知的对象以及要调用的函数。</span></span><br><span class="line">        CCObject *target = pAsyncStruct-&gt;target;</span><br><span class="line">        SEL_CallFuncO selector = pAsyncStruct-&gt;selector;</span><br><span class="line">         <span class="comment">//取得图片文件名</span></span><br><span class="line">        <span class="type">const</span> <span class="type">char</span>* filename = pAsyncStruct-&gt;filename.<span class="built_in">c_str</span>();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 新建一个纹理。</span></span><br><span class="line">        CCTexture2D *texture = <span class="keyword">new</span> <span class="built_in">CCTexture2D</span>();</span><br><span class="line">        <span class="comment">//使用CCImage指针pImage来初始化纹理生成OpenGL贴图。</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0 <span class="comment">//<span class="doctag">TODO:</span> (CC_TARGET_PLATFORM == CC_PLATFORM_IOS)</span></span></span><br><span class="line">        texture-&gt;<span class="built_in">initWithImage</span>(pImage, kCCResolutioniPhone);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">        texture-&gt;<span class="built_in">initWithImage</span>(pImage);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">if</span> CC_ENABLE_CACHE_TEXTURE_DATA</span></span><br><span class="line">       <span class="comment">//使用纹理和图片信息生成相应的可变纹理</span></span><br><span class="line">       VolatileTexture::<span class="built_in">addImageTexture</span>(texture, filename, pImageInfo-&gt;imageType);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">//使用文件名做为查询关键字将纹理存入字典</span></span><br><span class="line">        m_pTextures-&gt;<span class="built_in">setObject</span>(texture, filename);</span><br><span class="line">        texture-&gt;<span class="built_in">autorelease</span>();</span><br><span class="line">        <span class="comment">//调用通知目标的相应函数。</span></span><br><span class="line">        <span class="keyword">if</span> (target &amp;&amp; selector)</span><br><span class="line">        &#123;</span><br><span class="line">            (target-&gt;*selector)(texture);</span><br><span class="line">            target-&gt;<span class="built_in">release</span>();</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="comment">//释放CCImage对象。</span></span><br><span class="line">        pImage-&gt;<span class="built_in">release</span>();</span><br><span class="line">         <span class="comment">//释放new出来的消息结构和图片信息结构。</span></span><br><span class="line">        <span class="keyword">delete</span> pAsyncStruct;</span><br><span class="line">        <span class="keyword">delete</span> pImageInfo;</span><br><span class="line">        <span class="comment">//多线程加载引用计数器减1，</span></span><br><span class="line">        --s_nAsyncRefCount;</span><br><span class="line">        <span class="keyword">if</span> ( == s_nAsyncRefCount)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">//从显示设备上的回调函数处理器中移除加载回调函数。</span></span><br><span class="line">CCDirector::<span class="built_in">sharedDirector</span>()-&gt;<span class="built_in">getScheduler</span>()-&gt;<span class="built_in">unscheduleSelector</span>(<span class="built_in">schedule_selector</span>(CCTextureCache::addImageAsyncCallBack), <span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//加载一个图片生成纹理。</span></span><br><span class="line"><span class="function">CCTexture2D * <span class="title">CCTextureCache::addImage</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//参数有效性判断</span></span><br><span class="line">    <span class="built_in">CCAssert</span>(path != <span class="literal">NULL</span>, <span class="string">&quot;TextureCache: fileimage MUST not be NULL&quot;</span>);</span><br><span class="line"><span class="comment">//定义纹理指针变量并置空</span></span><br><span class="line">    CCTexture2D * texture = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//非多线程，故屏蔽，如果addImageAsync在其它线程调用此函数，则打开这段代码。</span></span><br><span class="line">    <span class="comment">//pthread_mutex_lock(m_pDictLock);</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//创建字符串pathKey做为字典查询关键字。</span></span><br><span class="line">    std::string pathKey = path;</span><br><span class="line"><span class="comment">//取得图片所在位置的全路径名</span></span><br><span class="line">pathKey = CCFileUtils::<span class="built_in">sharedFileUtils</span>()-&gt;<span class="built_in">fullPathFromRelativePath</span>(pathKey.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="comment">//用pathKey查询字典中是否有此纹理。</span></span><br><span class="line">    texture = (CCTexture2D*)m_pTextures-&gt;<span class="built_in">objectForKey</span>(pathKey.<span class="built_in">c_str</span>());</span><br><span class="line"><span class="comment">//新建字符串fullpath存储全路径。</span></span><br><span class="line">std::string fullpath = pathKey;</span><br><span class="line"><span class="comment">//如果没有找到，</span></span><br><span class="line">    <span class="keyword">if</span>( ! texture )</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//将文件路径放入新字符串lowerCase。并将字符串中的所有字母转为小写。</span></span><br><span class="line">        <span class="function">std::string <span class="title">lowerCase</span><span class="params">(path)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> i = ; i &lt; lowerCase.<span class="built_in">length</span>(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            lowerCase[i] = <span class="built_in">tolower</span>(lowerCase[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line"> <span class="comment">//如果字符串能够找到&quot;.pvr&quot;，则代表是pvr文件。调用相应函数将其载入。</span></span><br><span class="line">            <span class="keyword">if</span> (std::string::npos != lowerCase.<span class="built_in">find</span>(<span class="string">&quot;.pvr&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                texture = <span class="keyword">this</span>-&gt;<span class="built_in">addPVRImage</span>(fullpath.<span class="built_in">c_str</span>());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//否则分别取得文件的格式。</span></span><br><span class="line">                CCImage::EImageFormat eImageFormat = CCImage::kFmtUnKnown;</span><br><span class="line">                <span class="keyword">if</span> (std::string::npos != lowerCase.<span class="built_in">find</span>(<span class="string">&quot;.png&quot;</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    eImageFormat = CCImage::kFmtPng;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (std::string::npos != lowerCase.<span class="built_in">find</span>(<span class="string">&quot;.jpg&quot;</span>) || std::string::npos != lowerCase.<span class="built_in">find</span>(<span class="string">&quot;.jpeg&quot;</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    eImageFormat = CCImage::kFmtJpg;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (std::string::npos != lowerCase.<span class="built_in">find</span>(<span class="string">&quot;.tif&quot;</span>) || std::string::npos != lowerCase.<span class="built_in">find</span>(<span class="string">&quot;.tiff&quot;</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    eImageFormat = CCImage::kFmtTiff;</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">                  <span class="comment">//创建CCImage对象，从文件中读取文件的数据并初始化CCImage对象。</span></span><br><span class="line">                CCImage image;</span><br><span class="line">                <span class="comment">//取得文件大小</span></span><br><span class="line">                <span class="type">unsigned</span> <span class="type">long</span> nSize = ;</span><br><span class="line">                  <span class="comment">//读入数据返回给BYTE类型指针。</span></span><br><span class="line">                <span class="type">unsigned</span> <span class="type">char</span>* pBuffer = CCFileUtils::<span class="built_in">sharedFileUtils</span>()-&gt;<span class="built_in">getFileData</span>(fullpath.<span class="built_in">c_str</span>(), <span class="string">&quot;rb&quot;</span>, &amp;nSize);</span><br><span class="line">                <span class="comment">//使用读入的数据初始化相应的图片对象。</span></span><br><span class="line">                <span class="built_in">CC_BREAK_IF</span>(! image.<span class="built_in">initWithImageData</span>((<span class="type">void</span>*)pBuffer, nSize, eImageFormat));</span><br><span class="line">                <span class="comment">//读完后释放数据占用的内存。</span></span><br><span class="line">                <span class="built_in">CC_SAFE_DELETE_ARRAY</span>(pBuffer);</span><br><span class="line">  <span class="comment">//创建一个纹理。</span></span><br><span class="line">                texture = <span class="keyword">new</span> <span class="built_in">CCTexture2D</span>();</span><br><span class="line">                <span class="comment">//使用图片对象创建纹理。</span></span><br><span class="line">                <span class="keyword">if</span>( texture &amp;&amp;</span><br><span class="line">                    texture-&gt;<span class="built_in">initWithImage</span>(&amp;image) )</span><br><span class="line">                &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> CC_ENABLE_CACHE_TEXTURE_DATA</span></span><br><span class="line">                    <span class="comment">// 使用图片对象生成可变纹理</span></span><br><span class="line">                    VolatileTexture::<span class="built_in">addImageTexture</span>(texture, fullpath.<span class="built_in">c_str</span>(), eImageFormat);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">                    <span class="comment">//利用路径名做为查询关键字将纹理存入字典。</span></span><br><span class="line">                    m_pTextures-&gt;<span class="built_in">setObject</span>(texture, pathKey.<span class="built_in">c_str</span>());</span><br><span class="line">                    <span class="comment">//计数器减1。则刚存入字典的纹理的引用计数器值标记为尚未使用。</span></span><br><span class="line">                    texture-&gt;<span class="built_in">release</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//失败则打印错误。</span></span><br><span class="line">                    <span class="built_in">CCLOG</span>(<span class="string">&quot;cocos2d: Couldn&#x27;t add image:%s in CCTextureCache&quot;</span>, path);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> ();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//与上面屏蔽加锁一样，这里屏蔽解锁。</span></span><br><span class="line">    <span class="comment">//pthread_mutex_unlock(m_pDictLock);</span></span><br><span class="line">    <span class="keyword">return</span> texture;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//如果支持PVR的压缩格式。</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CC_SUPPORT_PVRTC</span></span><br><span class="line"><span class="comment">//加载一个PVR的压缩格式的图片。</span></span><br><span class="line"><span class="function">CCTexture2D* <span class="title">CCTextureCache::addPVRTCImage</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* path, <span class="type">int</span> bpp, <span class="type">bool</span> hasAlpha, <span class="type">int</span> width)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//参数有效性判断</span></span><br><span class="line"><span class="built_in">CCAssert</span>(path != <span class="literal">NULL</span>, <span class="string">&quot;TextureCache: fileimage MUST not be nill&quot;</span>);</span><br><span class="line"><span class="comment">//压缩类型参数有效性判断，只能为2或4</span></span><br><span class="line">    <span class="built_in">CCAssert</span>( bpp== || bpp==, <span class="string">&quot;TextureCache: bpp must be either 2 or 4&quot;</span>);</span><br><span class="line"><span class="comment">//定义一个新的纹理指针</span></span><br><span class="line">    CCTexture2D * texture;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//定义临时字符串存储相对路径名。</span></span><br><span class="line">    <span class="function">std::string <span class="title">temp</span><span class="params">(path)</span></span>;</span><br><span class="line">    <span class="comment">//查询字典中是否已经有此纹理。有则取得并直接返回纹理。</span></span><br><span class="line">    <span class="keyword">if</span> ( (texture = (CCTexture2D*)m_pTextures-&gt;<span class="built_in">objectForKey</span>(temp.<span class="built_in">c_str</span>())) )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> texture;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 取得文件的全路径字符串。</span></span><br><span class="line">    <span class="function">std::string <span class="title">fullpath</span><span class="params">( CCFileUtils::sharedFileUtils()-&gt;fullPathFromRelativePath(path) )</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//新建变量nLeng用于存储读取到的数据大小。初始化为0。</span></span><br><span class="line"> <span class="type">unsigned</span> <span class="type">long</span> nLen = ;</span><br><span class="line"><span class="comment">//新建字符指针pData用于存储读取到的数据并实际读取文件数据。</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span>* pData = CCFileUtils::<span class="built_in">sharedFileUtils</span>()-&gt;<span class="built_in">getFileData</span>(fullpath.<span class="built_in">c_str</span>(), <span class="string">&quot;rb&quot;</span>, &amp;nLen);</span><br><span class="line"> <span class="comment">//新建创一个纹理。</span></span><br><span class="line">    texture = <span class="keyword">new</span> <span class="built_in">CCTexture2D</span>();</span><br><span class="line">    <span class="comment">//使用读取到的数据创建纹理。</span></span><br><span class="line">    <span class="keyword">if</span>( texture-&gt;<span class="built_in">initWithPVRTCData</span>(pData, , bpp, hasAlpha, width,</span><br><span class="line">                                   (bpp== ? kCCTexture2DPixelFormat_PVRTC2 : kCCTexture2DPixelFormat_PVRTC4)))</span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">//将纹理以文件名做为关键字存入字典。</span></span><br><span class="line">        m_pTextures-&gt;<span class="built_in">setObject</span>(texture, temp.<span class="built_in">c_str</span>());</span><br><span class="line"> <span class="comment">//将纹理交由内存管理器处理。</span></span><br><span class="line">        texture-&gt;<span class="built_in">autorelease</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//如果创建失败或读取PVR文件失败，打印错误日志。\</span></span><br><span class="line"><span class="comment">        CCLOG(&quot;cocos2d: Couldn&#x27;t add PVRTCImage:%s in CCTextureCache&quot;,path);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//释放读取文件的数据所占用的内存。</span></span><br><span class="line">    <span class="built_in">CC_SAFE_DELETE_ARRAY</span>(pData);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> texture;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// CC_SUPPORT_PVRTC</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//加载一个普通的PVR图片文件</span></span><br><span class="line"><span class="function">CCTexture2D * <span class="title">CCTextureCache::addPVRImage</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//文件名参数有效性判断。</span></span><br><span class="line">    <span class="built_in">CCAssert</span>(path != <span class="literal">NULL</span>, <span class="string">&quot;TextureCache: fileimage MUST not be nill&quot;</span>);</span><br><span class="line"><span class="comment">//新建纹理指针变量置空。</span></span><br><span class="line">CCTexture2D* texture = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//定义临时字符串存储相对路径名。</span></span><br><span class="line">    <span class="function">std::string <span class="title">key</span><span class="params">(path)</span></span>;</span><br><span class="line">    <span class="comment">//先使用文件名查询是否字典中已经有此纹理了。如果有直接取得并返回纹理。</span></span><br><span class="line">    <span class="keyword">if</span>( (texture = (CCTexture2D*)m_pTextures-&gt;<span class="built_in">objectForKey</span>(key.<span class="built_in">c_str</span>())) )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> texture;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 由文件名字符串取得图片的全路径字符串。</span></span><br><span class="line">std::string fullpath = CCFileUtils::<span class="built_in">sharedFileUtils</span>()-&gt;<span class="built_in">fullPathFromRelativePath</span>(key.<span class="built_in">c_str</span>());</span><br><span class="line"><span class="comment">//动态创建一个纹理。</span></span><br><span class="line">    texture = <span class="keyword">new</span> <span class="built_in">CCTexture2D</span>();</span><br><span class="line">     <span class="comment">//如果创建成功，则读取相应的PVR文件来初始化纹理。</span></span><br><span class="line">    <span class="keyword">if</span>(texture != <span class="literal">NULL</span> &amp;&amp; texture-&gt;<span class="built_in">initWithPVRFile</span>(fullpath.<span class="built_in">c_str</span>()) )</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//初始化成功。</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> CC_ENABLE_CACHE_TEXTURE_DATA</span></span><br><span class="line">        <span class="comment">// 使用纹理和图片信息生成可变纹理。</span></span><br><span class="line">        VolatileTexture::<span class="built_in">addImageTexture</span>(texture, fullpath.<span class="built_in">c_str</span>(), CCImage::kFmtRawData);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">//将纹理以文件名做为查询关键字存入字典。</span></span><br><span class="line">        m_pTextures-&gt;<span class="built_in">setObject</span>(texture, key.<span class="built_in">c_str</span>());</span><br><span class="line">        texture-&gt;<span class="built_in">autorelease</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">//如果创建失败或读取PVR文件失败，打印错误日志。</span></span><br><span class="line">        <span class="built_in">CCLOG</span>(<span class="string">&quot;cocos2d: Couldn&#x27;t add PVRImage:%s in CCTextureCache&quot;</span>,key.<span class="built_in">c_str</span>());</span><br><span class="line">        <span class="built_in">CC_SAFE_DELETE</span>(texture);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> texture;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//加载一个图片生成纹理，指定参数key做为字典的查询对应关键字。</span></span><br><span class="line"><span class="function">CCTexture2D* <span class="title">CCTextureCache::addUIImage</span><span class="params">(CCImage *image, <span class="type">const</span> <span class="type">char</span> *key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//参数有效性判断</span></span><br><span class="line">    <span class="built_in">CCAssert</span>(image != <span class="literal">NULL</span>, <span class="string">&quot;TextureCache: image MUST not be nill&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//定义纹理指针变量texure做为返回值。这里初始化为空。</span></span><br><span class="line">    CCTexture2D * texture = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//定义字符串变量forKey用来存储完整的图片路径名称。</span></span><br><span class="line">    std::string forKey;</span><br><span class="line">    <span class="keyword">if</span> (key)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//取得文件名所对应的全路径名，呵呵，这个key也还是个相对路径名啊。</span></span><br><span class="line">        forKey = CCFileUtils::<span class="built_in">sharedFileUtils</span>()-&gt;<span class="built_in">fullPathFromRelativePath</span>(key);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 查询字典是否已经有此纹理了。如果有，取出纹理返回给texture，中断退出。</span></span><br><span class="line">        <span class="keyword">if</span>(key &amp;&amp; (texture = (CCTexture2D *)m_pTextures-&gt;<span class="built_in">objectForKey</span>(forKey.<span class="built_in">c_str</span>())))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//动态创建一个纹理对象.返回给texture。</span></span><br><span class="line">        texture = <span class="keyword">new</span> <span class="built_in">CCTexture2D</span>();</span><br><span class="line">        <span class="comment">//使用image来初始化纹理.注意:这一句应该移到下面的if中。</span></span><br><span class="line">        texture-&gt;<span class="built_in">initWithImage</span>(image);</span><br><span class="line">         <span class="comment">//初始化完成后以路径名做为查询关键字将纹理存入字典。</span></span><br><span class="line">        <span class="keyword">if</span>(key &amp;&amp; texture)</span><br><span class="line">        &#123;</span><br><span class="line">            m_pTextures-&gt;<span class="built_in">setObject</span>(texture, forKey.<span class="built_in">c_str</span>());</span><br><span class="line">            texture-&gt;<span class="built_in">autorelease</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">             <span class="comment">//如果key为空或texture为空打印错误</span></span><br><span class="line">            <span class="built_in">CCLOG</span>(<span class="string">&quot;cocos2d: Couldn&#x27;t add UIImage in CCTextureCache&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125; <span class="keyword">while</span> ();</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">if</span> CC_ENABLE_CACHE_TEXTURE_DATA</span></span><br><span class="line">    <span class="comment">//使用纹理和CCImage对象生成可变纹理。</span></span><br><span class="line">    VolatileTexture::<span class="built_in">addCCImage</span>(texture, image);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> texture;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//清空字典，释放所有纹理。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CCTextureCache::removeAllTextures</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_pTextures-&gt;<span class="built_in">removeAllObjects</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//清除未被外部使用的纹理</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CCTextureCache::removeUnusedTextures</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/*原来的做法，因为有问题给屏蔽了，仍然解释下：</span></span><br><span class="line"><span class="comment">//定义字典词汇指针变量pElement。</span></span><br><span class="line"><span class="comment">CCDictElement* pElement = NULL;</span></span><br><span class="line"><span class="comment">//遍历字典</span></span><br><span class="line"><span class="comment">    CCDICT_FOREACH(m_pTextures, pElement)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    //打印词汇信息</span></span><br><span class="line"><span class="comment">        CCLOG(&quot;cocos2d: CCTextureCache: texture: %s&quot;, pElement-&gt;getStrKey());</span></span><br><span class="line"><span class="comment">        //取得词汇对应的纹理</span></span><br><span class="line"><span class="comment">        CCTexture2D *value = (CCTexture2D*)pElement-&gt;getObject();</span></span><br><span class="line"><span class="comment">         //如果引用计数器值为1，从字典中删除。</span></span><br><span class="line"><span class="comment">        if (value-&gt;retainCount() == 1)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            CCLOG(&quot;cocos2d: CCTextureCache: removing unused texture: %s&quot;, pElement-&gt;getStrKey());</span></span><br><span class="line"><span class="comment">            m_pTextures-&gt;removeObjectForElememt(pElement);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">//现在的做法</span></span><br><span class="line">    <span class="comment">// 判断字典不为空</span></span><br><span class="line">    <span class="keyword">if</span> (m_pTextures-&gt;<span class="built_in">count</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//定义字典词汇指针变量pElement。</span></span><br><span class="line">CCDictElement* pElement = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//定义一个list容器用来存储未被外部使用的纹理指针。</span></span><br><span class="line">        list&lt;CCDictElement*&gt; elementToRemove;</span><br><span class="line">        <span class="comment">//遍历字典</span></span><br><span class="line">        <span class="built_in">CCDICT_FOREACH</span>(m_pTextures, pElement)</span><br><span class="line">        &#123;</span><br><span class="line">             <span class="comment">//打印词汇信息</span></span><br><span class="line">            <span class="built_in">CCLOG</span>(<span class="string">&quot;cocos2d: CCTextureCache: texture: %s&quot;</span>, pElement-&gt;<span class="built_in">getStrKey</span>());</span><br><span class="line">            <span class="comment">//取得词汇对应的纹理</span></span><br><span class="line">            CCTexture2D *value = (CCTexture2D*)pElement-&gt;<span class="built_in">getObject</span>();</span><br><span class="line">            <span class="keyword">if</span> (value-&gt;<span class="built_in">retainCount</span>() == )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//如果引用计数器值为1，先存入容器中。</span></span><br><span class="line">                elementToRemove.<span class="built_in">push_back</span>(pElement);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 遍历list中的元素从字典中删除</span></span><br><span class="line">        <span class="keyword">for</span> (list&lt;CCDictElement*&gt;::iterator iter = elementToRemove.<span class="built_in">begin</span>(); iter != elementToRemove.<span class="built_in">end</span>(); ++iter)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//打印删除元素日志。</span></span><br><span class="line">            <span class="built_in">CCLOG</span>(<span class="string">&quot;cocos2d: CCTextureCache: removing unused texture: %s&quot;</span>, (*iter)-&gt;<span class="built_in">getStrKey</span>());</span><br><span class="line">           <span class="comment">//从字典中删除</span></span><br><span class="line">            m_pTextures-&gt;<span class="built_in">removeObjectForElememt</span>(*iter);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//好吧，答案是因为CCDICT_FOREACH和removeObjectForElememt会互相影响，CCDICT_FOREACH中会调用HASH_ITER循环遍历。而循环的计数器是位置，通过地址对比来找下一个结点位置。而removeObjectForElememt会调用HASH_DELETE删除元素导致链表的重构。重构后会影响到HASK_ITER的查询。</span></span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//移除一个纹理</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CCTextureCache::removeTexture</span><span class="params">(CCTexture2D* texture)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//参数有效性判断</span></span><br><span class="line">    <span class="keyword">if</span>( ! texture )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查询所有对应此纹理的词汇</span></span><br><span class="line">CCArray* keys = m_pTextures-&gt;<span class="built_in">allKeysForObject</span>(texture);</span><br><span class="line"><span class="comment">//从字典中把这些词汇及相应纹理删除。</span></span><br><span class="line">    m_pTextures-&gt;<span class="built_in">removeObjectsForKeys</span>(keys);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//由字典查询关键字找到相应纹理并移除。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CCTextureCache::removeTextureForKey</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *textureKeyName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//参数有效性判断</span></span><br><span class="line">    <span class="keyword">if</span> (textureKeyName == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查询关键字实际是文件的相对路径，这里取得全路径。</span></span><br><span class="line">string fullPath = CCFileUtils::<span class="built_in">sharedFileUtils</span>()-&gt;<span class="built_in">fullPathFromRelativePath</span>(textureKeyName);</span><br><span class="line"><span class="comment">//将全路径做为查询关键字从字典中删除相应词汇及纹理</span></span><br><span class="line">    m_pTextures-&gt;<span class="built_in">removeObjectForKey</span>(fullPath.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//由字典查询关键字找到相应纹理</span></span><br><span class="line"><span class="function">CCTexture2D* <span class="title">CCTextureCache::textureForKey</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (CCTexture2D*)m_pTextures-&gt;<span class="built_in">objectForKey</span>(CCFileUtils::<span class="built_in">sharedFileUtils</span>()-&gt;<span class="built_in">fullPathFromRelativePath</span>(key));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重新载入所有的纹理</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CCTextureCache::reloadAllTextures</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> CC_ENABLE_CACHE_TEXTURE_DATA</span></span><br><span class="line">    <span class="comment">//调用可变纹理的静态函数重新载入所有的纹理</span></span><br><span class="line">    VolatileTexture::<span class="built_in">reloadAllTextures</span>();</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印字典中的纹理统计信息。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CCTextureCache::dumpCachedTextureInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> count = ;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> totalBytes = ;</span><br><span class="line"> </span><br><span class="line">CCDictElement* pElement = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//遍历字典中的所有词汇信息</span></span><br><span class="line">    <span class="built_in">CCDICT_FOREACH</span>(m_pTextures, pElement)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//取得词汇对应的纹理</span></span><br><span class="line">    CCTexture2D* tex = (CCTexture2D*)pElement-&gt;<span class="built_in">getObject</span>();</span><br><span class="line">     <span class="comment">//取得纹理对应贴图的色深</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> bpp = tex-&gt;<span class="built_in">bitsPerPixelForFormat</span>();</span><br><span class="line">        <span class="comment">// 生成贴图占用的内存大小(字节数量)</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> bytes = tex-&gt;<span class="built_in">getPixelsWide</span>() * tex-&gt;<span class="built_in">getPixelsHigh</span>() * bpp / ;</span><br><span class="line">         <span class="comment">// 统计内存总大小</span></span><br><span class="line">        totalBytes += bytes;</span><br><span class="line">        count++;</span><br><span class="line">         <span class="comment">//打印纹理信息</span></span><br><span class="line">        <span class="built_in">CCLOG</span>(<span class="string">&quot;cocos2d: \&quot;%s\&quot; rc=%lu id=%lu %lu x %lu @ %ld bpp =&gt; %lu KB&quot;</span>,</span><br><span class="line">               pElement-&gt;<span class="built_in">getStrKey</span>(),        <span class="comment">//查询关键字</span></span><br><span class="line">               (<span class="type">long</span>)tex-&gt;<span class="built_in">retainCount</span>(),    <span class="comment">//使用次数</span></span><br><span class="line">               (<span class="type">long</span>)tex-&gt;<span class="built_in">getName</span>(),        <span class="comment">//图片名称</span></span><br><span class="line">               (<span class="type">long</span>)tex-&gt;<span class="built_in">getPixelsWide</span>(),<span class="comment">//对应贴图的宽度</span></span><br><span class="line">               (<span class="type">long</span>)tex-&gt;<span class="built_in">getPixelsHigh</span>(),<span class="comment">//对应贴图的高度</span></span><br><span class="line">               (<span class="type">long</span>)bpp,                    <span class="comment">//对应贴图色深</span></span><br><span class="line">               (<span class="type">long</span>)bytes / );        <span class="comment">//占用内存大小(千字节数量)</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印总的数量数量，占用内存数量。</span></span><br><span class="line">    <span class="built_in">CCLOG</span>(<span class="string">&quot;cocos2d: CCTextureCache dumpDebugInfo: %ld textures, for %lu KB (%.2f MB)&quot;</span>, (<span class="type">long</span>)count, (<span class="type">long</span>)totalBytes / , totalBytes / (<span class="number">1024.0f</span>*<span class="number">1024.0f</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果开启了使用多变纹理</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> CC_ENABLE_CACHE_TEXTURE_DATA</span></span><br><span class="line"><span class="comment">//定义全局的list容器，用来存储产生的多变纹理对象指针</span></span><br><span class="line">std::list&lt;VolatileTexture*&gt; VolatileTexture::textures;</span><br><span class="line"><span class="comment">//定义布尔变量标记是否在全部重新载入</span></span><br><span class="line"><span class="type">bool</span> VolatileTexture::isReloading = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">VolatileTexture::<span class="built_in">VolatileTexture</span>(CCTexture2D *t)</span><br><span class="line">: <span class="built_in">texture</span>(t)</span><br><span class="line">, <span class="built_in">m_eCashedImageType</span>(kInvalid)</span><br><span class="line">, <span class="built_in">m_pTextureData</span>(<span class="literal">NULL</span>)</span><br><span class="line">, <span class="built_in">m_PixelFormat</span>(kTexture2DPixelFormat_RGBA8888)</span><br><span class="line">, <span class="built_in">m_strFileName</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">, <span class="built_in">m_FmtImage</span>(CCImage::kFmtPng)</span><br><span class="line">, <span class="built_in">m_alignment</span>(kCCTextAlignmentCenter)</span><br><span class="line">, <span class="built_in">m_vAlignment</span>(kCCVerticalTextAlignmentCenter)</span><br><span class="line">, <span class="built_in">m_strFontName</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">, <span class="built_in">m_strText</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">, <span class="built_in">uiImage</span>(<span class="literal">NULL</span>)</span><br><span class="line">, <span class="built_in">m_fFontSize</span>(<span class="number">0.0f</span>)</span><br><span class="line">&#123;</span><br><span class="line">    m_size = <span class="built_in">CCSizeMake</span>(, );</span><br><span class="line">    textures.<span class="built_in">push_back</span>(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//析构函数</span></span><br><span class="line">VolatileTexture::~<span class="built_in">VolatileTexture</span>()</span><br><span class="line">&#123;</span><br><span class="line">    textures.<span class="built_in">remove</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="built_in">CC_SAFE_RELEASE</span>(uiImage);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过纹理图片属性信息生成可变纹理。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">VolatileTexture::addImageTexture</span><span class="params">(CCTexture2D *tt, <span class="type">const</span> <span class="type">char</span>* imageFileName, CCImage::EImageFormat format)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//如果正在重新载入过程中，直接返回。</span></span><br><span class="line">    <span class="keyword">if</span> (isReloading)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通过纹理指针找到相应的可变纹理，如果没有则new一个返回其指针。</span></span><br><span class="line">    VolatileTexture *vt = <span class="built_in">findVolotileTexture</span>(tt);</span><br><span class="line">    <span class="comment">//设置相关属性，注意:这里最好对vt做下有效性检查，如果为NULL的话会崩溃的。</span></span><br><span class="line">    vt-&gt;m_eCashedImageType = kImageFile;</span><br><span class="line">    vt-&gt;m_strFileName = imageFileName;</span><br><span class="line">    vt-&gt;m_FmtImage    = format;</span><br><span class="line">    vt-&gt;m_PixelFormat = tt-&gt;<span class="built_in">getPixelFormat</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过CCImage对象生成可变纹理。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">VolatileTexture::addCCImage</span><span class="params">(CCTexture2D *tt, CCImage *image)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//通过纹理指针找到相应的可变纹理，如果没有则new一个返回其指针。</span></span><br><span class="line">    VolatileTexture *vt = <span class="built_in">findVolotileTexture</span>(tt);</span><br><span class="line">image-&gt;<span class="built_in">retain</span>();</span><br><span class="line"><span class="comment">//设置相关属性</span></span><br><span class="line">    vt-&gt;uiImage = image;</span><br><span class="line">    vt-&gt;m_eCashedImageType = kImage;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过纹理指针找到相应的可变纹理，如果没有则new出一个返回。</span></span><br><span class="line"><span class="function">VolatileTexture* <span class="title">VolatileTexture::findVolotileTexture</span><span class="params">(CCTexture2D *tt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">VolatileTexture *vt = ;</span><br><span class="line"><span class="comment">//遍历list容器，对比查询。</span></span><br><span class="line">    std::list&lt;VolatileTexture *&gt;::iterator i = textures.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">while</span> (i != textures.<span class="built_in">end</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        VolatileTexture *v = *i++;</span><br><span class="line">        <span class="keyword">if</span> (v-&gt;texture == tt)</span><br><span class="line">        &#123;</span><br><span class="line">            vt = v;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果没有找到，则由纹理参数new出一个可变纹理，new会调用其带参数的拷贝构造函数设置其对应纹理。</span></span><br><span class="line">    <span class="keyword">if</span> (! vt)</span><br><span class="line">    &#123;</span><br><span class="line">        vt = <span class="keyword">new</span> <span class="built_in">VolatileTexture</span>(tt);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> vt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过指定图像数据，像素格式和图片大小来生成可变纹理。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">VolatileTexture::addDataTexture</span><span class="params">(CCTexture2D *tt, <span class="type">void</span>* data, CCTexture2DPixelFormat pixelFormat, <span class="type">const</span> CCSize&amp; contentSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//如果正在重新载入过程中，直接返回。</span></span><br><span class="line">    <span class="keyword">if</span> (isReloading)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通过纹理指针找到相应的可变纹理，如果没有则new一个返回其指针。</span></span><br><span class="line">    VolatileTexture *vt = <span class="built_in">findVolotileTexture</span>(tt);</span><br><span class="line">    <span class="comment">//设置相关属性</span></span><br><span class="line">    vt-&gt;m_eCashedImageType = kImageData;</span><br><span class="line">    vt-&gt;m_pTextureData = data;</span><br><span class="line">    vt-&gt;m_PixelFormat = pixelFormat;</span><br><span class="line">    vt-&gt;m_TextureSize = contentSize;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//由字符串和相应信息生成可变纹理</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">VolatileTexture::addStringTexture</span><span class="params">(CCTexture2D *tt, <span class="type">const</span> <span class="type">char</span>* text, <span class="type">const</span> CCSize&amp; dimensions, CCTextAlignment alignment,</span></span></span><br><span class="line"><span class="params"><span class="function">                                       CCVerticalTextAlignment vAlignment, <span class="type">const</span> <span class="type">char</span> *fontName, <span class="type">float</span> fontSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//如果正在重新载入过程中，直接返回。</span></span><br><span class="line">    <span class="keyword">if</span> (isReloading)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通过纹理指针找到相应的可变纹理，如果没有则new一个返回其指针。</span></span><br><span class="line">    VolatileTexture *vt = <span class="built_in">findVolotileTexture</span>(tt);</span><br><span class="line">    <span class="comment">//设置相关属性</span></span><br><span class="line">    vt-&gt;m_eCashedImageType = kString;</span><br><span class="line">    vt-&gt;m_size        = dimensions;</span><br><span class="line">    vt-&gt;m_strFontName = fontName;</span><br><span class="line">    vt-&gt;m_alignment   = alignment;</span><br><span class="line">    vt-&gt;m_vAlignment  = vAlignment;</span><br><span class="line">    vt-&gt;m_fFontSize   = fontSize;</span><br><span class="line">    vt-&gt;m_strText     = text;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过纹理指针找到相应的可变纹理并删除。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">VolatileTexture::removeTexture</span><span class="params">(CCTexture2D *t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> </span><br><span class="line">    std::list&lt;VolatileTexture *&gt;::iterator i = textures.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">while</span> (i != textures.<span class="built_in">end</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        VolatileTexture *vt = *i++;</span><br><span class="line">        <span class="keyword">if</span> (vt-&gt;texture == t)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> vt;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重新载入所有的纹理。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">VolatileTexture::reloadAllTextures</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//设置开始进行重新载入所有纹理。</span></span><br><span class="line">    isReloading = <span class="literal">true</span>;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">CCLOG</span>(<span class="string">&quot;reload all texture&quot;</span>);</span><br><span class="line"><span class="comment">//通过迭代器遍历list容器</span></span><br><span class="line">    std::list&lt;VolatileTexture *&gt;::iterator iter = textures.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">while</span> (iter != textures.<span class="built_in">end</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        VolatileTexture *vt = *iter++;</span><br><span class="line">         <span class="comment">//根据不同的格式进行纹理的重建</span></span><br><span class="line">        <span class="keyword">switch</span> (vt-&gt;m_eCashedImageType)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> kImageFile:</span><br><span class="line">            &#123;</span><br><span class="line">                  <span class="comment">//这里定义一个CCImage对象image</span></span><br><span class="line">                CCImage image;</span><br><span class="line">                  <span class="comment">//先将路径名都变成小写字符串。</span></span><br><span class="line">                <span class="function">std::string <span class="title">lowerCase</span><span class="params">(vt-&gt;m_strFileName.c_str())</span></span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> i = ; i &lt; lowerCase.<span class="built_in">length</span>(); ++i)</span><br><span class="line">                &#123;</span><br><span class="line">                    lowerCase[i] = <span class="built_in">tolower</span>(lowerCase[i]);</span><br><span class="line">                &#125;</span><br><span class="line">                  <span class="comment">//扩展名对比，如果是PVR文件</span></span><br><span class="line">                <span class="keyword">if</span> (std::string::npos != lowerCase.<span class="built_in">find</span>(<span class="string">&quot;.pvr&quot;</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                      <span class="comment">//取得原来的默认带ALPHA通道的像素格式。</span></span><br><span class="line">                    CCTexture2DPixelFormat oldPixelFormat = CCTexture2D::<span class="built_in">defaultAlphaPixelFormat</span>();</span><br><span class="line">                    <span class="comment">//重设默认带ALPHA通道的像素格式。</span></span><br><span class="line">CCTexture2D::<span class="built_in">setDefaultAlphaPixelFormat</span>(vt-&gt;m_PixelFormat);</span><br><span class="line"> </span><br><span class="line">                    <span class="comment">//纹理重新由PVR文件进行初始化。会用到新的默认带ALPHA通道的像素格式。</span></span><br><span class="line">vt-&gt;texture-&gt;<span class="built_in">initWithPVRFile</span>(vt-&gt;m_strFileName.<span class="built_in">c_str</span>());</span><br><span class="line">                    <span class="comment">//重设原来的默认带ALPHA通道的像素格式。</span></span><br><span class="line">CCTexture2D::<span class="built_in">setDefaultAlphaPixelFormat</span>(oldPixelFormat);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                      <span class="comment">//如果是非PVR文件。</span></span><br><span class="line">                    <span class="type">unsigned</span> <span class="type">long</span> nSize = ;</span><br><span class="line">                      <span class="comment">//通过文件工具集中的接口读入图片文件并返回数据地址。</span></span><br><span class="line">                    <span class="type">unsigned</span> <span class="type">char</span>* pBuffer = CCFileUtils::<span class="built_in">sharedFileUtils</span>()-&gt;<span class="built_in">getFileData</span>(vt-&gt;m_strFileName.<span class="built_in">c_str</span>(), <span class="string">&quot;rb&quot;</span>, &amp;nSize);</span><br><span class="line">                       <span class="comment">//使用数据地址对前面定义的CCImage对象image进行初始化。</span></span><br><span class="line">                    <span class="keyword">if</span> (image.<span class="built_in">initWithImageData</span>((<span class="type">void</span>*)pBuffer, nSize, vt-&gt;m_FmtImage))</span><br><span class="line">                    &#123;</span><br><span class="line">                           <span class="comment">//取得原来的默认带ALPHA通道的像素格式。</span></span><br><span class="line">                        CCTexture2DPixelFormat oldPixelFormat = CCTexture2D::<span class="built_in">defaultAlphaPixelFormat</span>();</span><br><span class="line">                        <span class="comment">//重设默认带ALPHA通道的像素格式。CCTexture2D::setDefaultAlphaPixelFormat(vt-&gt;m_PixelFormat);</span></span><br><span class="line">                          <span class="comment">//纹理重新由图片对象初始化。会用到新的默认带ALPHA通道的像素格式。</span></span><br><span class="line"> </span><br><span class="line">                        vt-&gt;texture-&gt;<span class="built_in">initWithImage</span>(&amp;image);</span><br><span class="line">                        <span class="comment">//重设原来的默认带ALPHA通道的像素格式。</span></span><br><span class="line">CCTexture2D::<span class="built_in">setDefaultAlphaPixelFormat</span>(oldPixelFormat);</span><br><span class="line">                    &#125;</span><br><span class="line"> </span><br><span class="line">                    <span class="built_in">CC_SAFE_DELETE_ARRAY</span>(pBuffer);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> kImageData:</span><br><span class="line">            &#123;</span><br><span class="line">                  <span class="comment">//纹理重新由图片数据初始化。</span></span><br><span class="line">                vt-&gt;texture-&gt;<span class="built_in">initWithData</span>(vt-&gt;m_pTextureData,</span><br><span class="line">                                          vt-&gt;m_PixelFormat,</span><br><span class="line">                                          vt-&gt;m_TextureSize.width,</span><br><span class="line">                                          vt-&gt;m_TextureSize.height,</span><br><span class="line">                                          vt-&gt;m_TextureSize);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> kString:</span><br><span class="line">            &#123;</span><br><span class="line">                  <span class="comment">//纹理重新由字符串初始化。</span></span><br><span class="line">                vt-&gt;texture-&gt;<span class="built_in">initWithString</span>(vt-&gt;m_strText.<span class="built_in">c_str</span>(),</span><br><span class="line">                    vt-&gt;m_size,</span><br><span class="line">                    vt-&gt;m_alignment,</span><br><span class="line">                    vt-&gt;m_vAlignment,</span><br><span class="line">                    vt-&gt;m_strFontName.<span class="built_in">c_str</span>(),</span><br><span class="line">                    vt-&gt;m_fFontSize);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> kImage:</span><br><span class="line">            &#123;</span><br><span class="line">                  <span class="comment">//纹理重新由图片对象初始化。</span></span><br><span class="line">                vt-&gt;texture-&gt;<span class="built_in">initWithImage</span>(vt-&gt;uiImage);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置重新载入完成</span></span><br><span class="line">    isReloading = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// CC_ENABLE_CACHE_TEXTURE_DATA</span></span></span><br><span class="line"> </span><br><span class="line">NS_CC_END</span><br></pre></td></tr></table></figure>

<p>原文链接：<a href=",https://www.bbsmax.com/A/lk5aEAZa51/" title="" target="">BBSMAX</a></p>
]]></content>
      <categories>
        <category>游戏开发</category>
      </categories>
      <tags>
        <tag>cocos2dx</tag>
        <tag>游戏开发</tag>
        <tag>纹理</tag>
      </tags>
  </entry>
  <entry>
    <title>cocosCreator Shader 扑克牌的透视效果</title>
    <url>/bb4fae33.html</url>
    <content><![CDATA[<p>我这里用的是cocos creator 3.7.2版本，不同版本可能存在差异</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<blockquote>
<p>因为使用的第三方图床，导致文中图片丢失，看来以后还是得靠谱的图床了</p>
</blockquote>
<h2 id="顶点着色器"><a href="#顶点着色器" class="headerlink" title="顶点着色器"></a>顶点着色器</h2><p>开始实现这个功能，对定点着色器应该有了基本的了解，这里不过多说明。<br>这里我们先看下cocosCreator默认使用的着色器代码：<code>builtin-sprite.effect</code>,可以直接在资源管理器中搜索</p>
<h3 id="想要达到效果，其实修改就是扑克牌上边缘两个顶点的x轴坐标"><a href="#想要达到效果，其实修改就是扑克牌上边缘两个顶点的x轴坐标" class="headerlink" title="想要达到效果，其实修改就是扑克牌上边缘两个顶点的x轴坐标"></a>想要达到效果，其实修改就是扑克牌上边缘两个顶点的x轴坐标</h3><p>但是想要修改，最起码得知道现在的值，做个小测试看一下。让顶点坐标的x值+&#x3D;y值，观察x坐标的变化规律.<br>复制粘贴<code>builtin-sprite.effect</code>文件(必须要复制粘贴，系统最开始的不能被修改)，在复制出来的文件中搜索<code>vec4 pos = vec4(a_position, 1)</code><br>并在该代码后面添加代码<code>pos.x += pos.y;</code>,如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vec4 pos = vec4(a_position, 1);</span><br><span class="line">pos.x += pos.y;</span><br></pre></td></tr></table></figure>
<p>这里可以看到，蓝色框区域是牌原本显示的边框，底边的x轴没有变化，所以底边的+&#x3D;pos.y这里的y值为0。</p>
<p>调整下牌的位置，让牌的左上角顶点和画布左上角顶点重合<br>从图上可以看出，当牌的左上角顶点和画布左上角顶点重合时，上边两个顶点的值往右偏了屏幕高度那么多的值。看下蓝框，很直观，一个正方形，偏移宽度&#x3D;屏幕高度。</p>
<p>这说明顶点在画布上边缘位置时，顶点坐标y值是画布高。<br>这里测试x,y也是一样的（自己可以动手试下）其实片段着色器中我们拿到的<code>a_position</code>就是一个屏幕左下角<code>(0,0)</code> 到 屏幕右上角<code>(画布宽,画布高)</code>这样的vec2变量，有了定点的具体值，后面就好操作了。来看下顶点的屏幕坐标：</p>
<h3 id="顶部偏移"><a href="#顶部偏移" class="headerlink" title="顶部偏移"></a>顶部偏移</h3><p>我来定一个顶点<code>point</code>，我要让所有的扑克都往这个点变形。设定point坐标vec2(屏幕宽&#x2F;2,屏幕高*0.85).<br>对每个点来说，点的x轴偏移值 &#x3D; <code>（顶点x和pointx差值）* (顶点y和point.y的比例) 把前面的</code>pos.x +&#x3D; pos.y;&#96;代码改为下面2行:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vec2 point = vec2(1920. * .5,1080. * 0.85);</span><br><span class="line">pos.x += (point.x - pos.x) * (pos.y / point.y);</span><br></pre></td></tr></table></figure>

<p>图片会往箭头所指的方向偏移。</p>
<h3 id="修改起点y值"><a href="#修改起点y值" class="headerlink" title="修改起点y值"></a>修改起点y值</h3><p>有个问题，就是这里的计算 都是用屏幕底边y值0计算的，我牌桌变如果不在屏幕底边咋办呢，我要指定一个起点的y值可以计算这个三角形。</p>
<p>比如我牌摆在离底边100px的位置，将参与计算的y坐标 减100就行了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pos.x += (point.x - pos.x) * ((pos.y - 100.) / point.y);</span><br></pre></td></tr></table></figure>
<h3 id="shader代码"><a href="#shader代码" class="headerlink" title="shader代码"></a>shader代码</h3><p>放一下最终代码，让起点y值和终点坐标都用可变变量，从材质传值进来。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.</span><br><span class="line">CCEffect %&#123;</span><br><span class="line">  techniques:</span><br><span class="line">  - passes:</span><br><span class="line">    - vert: sprite-vs:vert</span><br><span class="line">      frag: sprite-fs:frag</span><br><span class="line">      depthStencilState:</span><br><span class="line">        depthTest: false</span><br><span class="line">        depthWrite: false</span><br><span class="line">      blendState:</span><br><span class="line">        targets:</span><br><span class="line">        - blend: true</span><br><span class="line">          blendSrc: src_alpha</span><br><span class="line">          blendDst: one_minus_src_alpha</span><br><span class="line">          blendDstAlpha: one_minus_src_alpha</span><br><span class="line">      rasterizerState:</span><br><span class="line">        cullMode: none</span><br><span class="line">      properties:</span><br><span class="line">        alphaThreshold: &#123; value: 0.5 &#125;</span><br><span class="line">        u_point: &#123; value: [1,1] &#125;</span><br><span class="line">        u_starty: &#123;value: 0 &#125;</span><br><span class="line">&#125;%</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CCProgram sprite-vs %&#123;</span><br><span class="line">  precision highp float;</span><br><span class="line">  #include &lt;builtin/uniforms/cc-global&gt;</span><br><span class="line">  #include &lt;builtin/internal/embedded-alpha&gt;</span><br><span class="line">  #if USE_LOCAL</span><br><span class="line">    #include &lt;builtin/uniforms/cc-local&gt;</span><br><span class="line">  #endif</span><br><span class="line">  #if SAMPLE_FROM_RT</span><br><span class="line">    #include &lt;common/common-define&gt;</span><br><span class="line">  #endif</span><br><span class="line">  in vec3 a_position;</span><br><span class="line">  in vec2 a_texCoord;</span><br><span class="line">  in vec4 a_color;</span><br><span class="line"></span><br><span class="line">  out vec4 color;</span><br><span class="line">  out vec2 uv0;</span><br><span class="line">  uniform Constant&#123;</span><br><span class="line">    vec2 u_point;   // 自己定义的顶点</span><br><span class="line">    float u_starty; // 扑克牌底边离屏幕下边的距离</span><br><span class="line">  &#125;;</span><br><span class="line">  vec4 vert () &#123;</span><br><span class="line">    vec4 pos = vec4(a_position, 1);</span><br><span class="line">    pos.x += (u_point.x - pos.x) * ((pos.y - u_starty) / u_point.y);</span><br><span class="line">    #if USE_LOCAL</span><br><span class="line">      pos = cc_matWorld * pos;</span><br><span class="line">    #endif</span><br><span class="line"></span><br><span class="line">    #if USE_PIXEL_ALIGNMENT</span><br><span class="line">      pos = cc_matView * pos;</span><br><span class="line">      pos.xyz = floor(pos.xyz);</span><br><span class="line">      pos = cc_matProj * pos;</span><br><span class="line">    #else</span><br><span class="line">      pos = cc_matViewProj * pos;</span><br><span class="line">    #endif</span><br><span class="line"></span><br><span class="line">    uv0 = a_texCoord;</span><br><span class="line">    #if SAMPLE_FROM_RT</span><br><span class="line">      CC_HANDLE_RT_SAMPLE_FLIP(uv0);</span><br><span class="line">    #endif</span><br><span class="line">    color = a_color;</span><br><span class="line"></span><br><span class="line">    return pos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;%</span><br><span class="line"></span><br><span class="line">CCProgram sprite-fs %&#123;</span><br><span class="line">  precision highp float;</span><br><span class="line">  #include &lt;builtin/internal/embedded-alpha&gt;</span><br><span class="line">  #include &lt;builtin/internal/alpha-test&gt;</span><br><span class="line"></span><br><span class="line">  in vec4 color;</span><br><span class="line"></span><br><span class="line">  #if USE_TEXTURE</span><br><span class="line">    in vec2 uv0;</span><br><span class="line">    #pragma builtin(local)</span><br><span class="line">    layout(set = 2, binding = 12) uniform sampler2D cc_spriteTexture;</span><br><span class="line">  #endif</span><br><span class="line"></span><br><span class="line">  vec4 frag () &#123;</span><br><span class="line">    vec4 o = vec4(1, 1, 1, 1);</span><br><span class="line"></span><br><span class="line">    #if USE_TEXTURE</span><br><span class="line">      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);</span><br><span class="line">      #if IS_GRAY</span><br><span class="line">        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;</span><br><span class="line">        o.r = o.g = o.b = gray;</span><br><span class="line">      #endif</span><br><span class="line">    #endif</span><br><span class="line"></span><br><span class="line">    o *= color;</span><br><span class="line">    ALPHA_TEST(o);</span><br><span class="line">    return o;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;%</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>在cocos creator 中找到精灵默认使用的材质<code>ui-sprite-material.mtl</code>，将材质拷贝出来放在自己的资源文件夹下（必须拷贝出来，不然无法修改）。将上面代码保存为<code>gradient.effect</code>，名字按照自己的想法来。最后修改下面4个地方即可</p>
<ol>
<li>将精灵的”CustomMaterial”属性设置为你刚刚拷贝出来的材质</li>
<li>将材质的<code>Effect</code>属性设置为刚刚保存的<code>gradient.effect</code>shader文件</li>
<li>这里<code>USE TEXTURE</code>一定要勾选上，不然没有纹理，只会显示一张空白图</li>
<li>调整这三个参数，获得自己想要的透视效果</li>
</ol>
]]></content>
      <categories>
        <category>cocos Creator</category>
      </categories>
      <tags>
        <tag>cocos Creator</tag>
        <tag>TypeScript</tag>
        <tag>shader</tag>
      </tags>
  </entry>
  <entry>
    <title>cocosCreator中PageView自动翻页</title>
    <url>/24427763.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> pageList = <span class="variable language_">this</span>.<span class="property">_view</span>.<span class="property">_PageC_List</span>;</span><br><span class="line"><span class="keyword">let</span> pageCount = pageList.<span class="title function_">getPages</span>().<span class="property">length</span>;   <span class="comment">// 获取翻页容器长度</span></span><br><span class="line"><span class="keyword">let</span> duration = <span class="number">3</span>;   <span class="comment">// 自动翻页时间,s</span></span><br><span class="line"><span class="keyword">let</span> currentPageIndex = <span class="number">0</span>;  <span class="comment">// 当前页数</span></span><br><span class="line"><span class="keyword">let</span> direction = <span class="number">1</span>;       <span class="comment">// 翻页方向</span></span><br><span class="line"><span class="keyword">let</span> scrollTiem = <span class="number">1</span>;      <span class="comment">//  翻页时间</span></span><br><span class="line">pageList.<span class="title function_">schedule</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(currentPageIndex === pageCount-<span class="number">1</span>)&#123;</span><br><span class="line">        direction = -<span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(currentPageIndex === <span class="number">0</span>)&#123;</span><br><span class="line">        direction = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    currentPageIndex += direction;</span><br><span class="line">    pageList.<span class="title function_">scrollToPage</span>(currentPageIndex,scrollTiem);</span><br><span class="line">&#125;,duration)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>cocos Creator</category>
      </categories>
      <tags>
        <tag>cocos Creator</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>cocos2dx使用帧动画</title>
    <url>/33452.html</url>
    <content><![CDATA[<p>开发环境：cocos2dx 3.17<br>开发语言：lua</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>一般来说，使用cocos2d_x开发游戏的时候都有两种做UI的方式，一种是用代码手写，一种是用cocos studio做UI，帧动画也一样，可以用这里两种方式，下面介绍博主常用的两种方法。</p>
<span id="more"></span>

<h3 id="代码手写帧动画"><a href="#代码手写帧动画" class="headerlink" title="代码手写帧动画"></a>代码手写帧动画</h3><blockquote>
<p>博主这里是先将用来做帧动画的图片合成plis合图，然后创建一个精灵。用plist合图中的图片不断的去替换原来精灵的图片。</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">cc.SpriteFrameCache:getInstance():addSpriteFrames(<span class="string">&quot;tupian.plist&quot;</span>)</span><br><span class="line">           <span class="keyword">local</span> Circle_sp = cc.Sprite:createWithSpriteFrameName(<span class="string">&quot;1.png&quot;</span>)</span><br><span class="line">           Circle_sp:move(a_x,a_y)</span><br><span class="line">           Circle_sp:addTo(<span class="built_in">self</span>._lr , <span class="number">1</span>)</span><br><span class="line">           <span class="keyword">local</span> animation = cc.Animation:<span class="built_in">create</span>()  </span><br><span class="line">           <span class="keyword">for</span> i=<span class="number">1</span>,<span class="number">6</span> <span class="keyword">do</span>  </span><br><span class="line">               <span class="keyword">local</span> _frame = cc.SpriteFrameCache:getInstance():getSpriteFrame( i ..<span class="string">&quot;.png&quot;</span>) </span><br><span class="line">               <span class="keyword">if</span>  _frame <span class="keyword">then</span></span><br><span class="line">                   animation:addSpriteFrame(_frame) </span><br><span class="line">               <span class="keyword">end</span></span><br><span class="line">           <span class="keyword">end</span>  </span><br><span class="line">           animation:setDelayPerUnit(<span class="number">0.08</span>)             <span class="comment">--设置两个帧播放时间                  </span></span><br><span class="line">           animation:setRestoreOriginalFrame(<span class="literal">false</span>)    <span class="comment">--动画执行后还原初始状态              </span></span><br><span class="line">           <span class="keyword">local</span> action = cc.Animate:<span class="built_in">create</span>(animation) </span><br><span class="line">           <span class="keyword">local</span> hide = cc.CallFunc:<span class="built_in">create</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">               <span class="keyword">local</span> fadein = cc.FadeIn:<span class="built_in">create</span>(<span class="number">0.08</span>)</span><br><span class="line">               <span class="keyword">local</span> fadeout = cc.FadeOut:<span class="built_in">create</span>(<span class="number">0.08</span>)</span><br><span class="line">               <span class="keyword">local</span> delay = cc.DelayTime:<span class="built_in">create</span>(<span class="number">0.08</span>)</span><br><span class="line">               Circle_sp:runAction(cc.Sequence:<span class="built_in">create</span>(fadein,delay,fadeout))</span><br><span class="line">           <span class="keyword">end</span>)     </span><br><span class="line">           <span class="keyword">local</span> delay = cc.DelayTime:<span class="built_in">create</span>(<span class="number">0.5</span>)             </span><br><span class="line">           Circle_sp:runAction(cc.Sequence:<span class="built_in">create</span>(action,delay,hide))  </span><br></pre></td></tr></table></figure>

<h3 id="用cocos-studio-做帧动画"><a href="#用cocos-studio-做帧动画" class="headerlink" title="用cocos studio 做帧动画"></a>用cocos studio 做帧动画</h3><blockquote>
<p>需要自己在cocos studio 上提前做好相应的帧动画</p>
</blockquote>
<a href="https://lengmo714.top/19422.html" title="" target="">跳转链接,</a>
]]></content>
      <categories>
        <category>游戏开发</category>
      </categories>
      <tags>
        <tag>Lua</tag>
        <tag>cocos2dx</tag>
      </tags>
  </entry>
  <entry>
    <title>cocosCreator之PageView</title>
    <url>/53abb2e.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>代码主要介绍了<code>PageView</code>在使用时动态创建、删除page页以及PageView的监听事件</p>
<h3 id="逻辑代码"><a href="#逻辑代码" class="headerlink" title="逻辑代码"></a>逻辑代码</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; _decorator, <span class="title class_">Node</span>,<span class="title class_">UITransform</span>,size&#125; <span class="keyword">from</span> <span class="string">&#x27;cc&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UIPnlMultiTableView</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./UIPnlMultiTableView&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UIBaseLogic</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../../UIBaseLogic&#x27;</span></span><br><span class="line"><span class="keyword">const</span> &#123; ccclass &#125; = _decorator</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UIPnlMultiTableLogic</span> <span class="keyword">extends</span> <span class="title class_ inherited__">UIBaseLogic</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> prefabPath = <span class="string">&quot;/prefab/ui/multiTable/PnlMultiTable&quot;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="attr">_view</span>: <span class="title class_">UIPnlMultiTableView</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">Init</span>(<span class="attr">id</span>: <span class="built_in">string</span>, <span class="attr">go</span>: <span class="title class_">Node</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_view</span> = <span class="keyword">new</span> <span class="title class_">UIPnlMultiTableView</span>(go)</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title class_">Init</span>(id, go)</span><br><span class="line">        <span class="comment">// --------- your code</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">BindUIEvent</span>() &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title class_">BindUIEventClick</span>(<span class="variable language_">this</span>.<span class="property">_view</span>.<span class="property">_Btn_add</span>.<span class="property">node</span>, <span class="variable language_">this</span>.<span class="property">HandlerBtn_add</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title class_">BindUIEventClick</span>(<span class="variable language_">this</span>.<span class="property">_view</span>.<span class="property">_Btn_del</span>.<span class="property">node</span>, <span class="variable language_">this</span>.<span class="property">HandlerBtn_del</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_view</span>.<span class="property">_PageC_table</span>.<span class="property">node</span>.<span class="title function_">on</span>(<span class="string">&quot;page-turning&quot;</span>,<span class="variable language_">this</span>.<span class="property">printCurrentPageIndex</span>,<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title class_">HandlerBtn</span>_add() &#123;   <span class="comment">// 添加page页</span></span><br><span class="line">        <span class="keyword">const</span> newPageNode = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;NewPageNode&quot;</span>);</span><br><span class="line">        <span class="keyword">const</span> ui = newPageNode.<span class="title function_">addComponent</span>(<span class="title class_">UITransform</span>);</span><br><span class="line">        ui.<span class="title function_">setContentSize</span>(<span class="title function_">size</span>(<span class="number">1624</span> ,<span class="number">750</span>));</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_view</span>.<span class="property">_PageC_table</span>.<span class="title function_">addPage</span>(newPageNode);</span><br><span class="line">        newPageNode.<span class="property">parent</span> = <span class="variable language_">this</span>.<span class="property">_view</span>.<span class="property">_PageC_table</span>.<span class="property">node</span>.<span class="title function_">getChildByName</span>(<span class="string">&quot;view&quot;</span>).<span class="title function_">getChildByName</span>(<span class="string">&quot;content&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title class_">HandlerBtn</span>_del() &#123;  <span class="comment">// 删除page页</span></span><br><span class="line">        <span class="keyword">const</span> currentPageIndex =  <span class="variable language_">this</span>.<span class="property">_view</span>.<span class="property">_PageC_table</span>.<span class="title function_">getCurrentPageIndex</span>();</span><br><span class="line">        <span class="keyword">const</span> pageNode = <span class="variable language_">this</span>.<span class="property">_view</span>.<span class="property">_PageC_table</span>.<span class="title function_">getPages</span>()[currentPageIndex];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_view</span>.<span class="property">_PageC_table</span>.<span class="title function_">removePage</span>(pageNode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">printCurrentPageIndex</span>(<span class="params"></span>)&#123;   <span class="comment">// 添加事件监听，以在页面切换时打印当前页面索引</span></span><br><span class="line">        <span class="keyword">const</span> currentPageIndex =  <span class="variable language_">this</span>.<span class="property">_view</span>.<span class="property">_PageC_table</span>.<span class="title function_">getCurrentPageIndex</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Current Page Index:&quot;</span>, currentPageIndex);        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ui部分"><a href="#ui部分" class="headerlink" title="ui部分"></a>ui部分</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; _decorator, <span class="title class_">Node</span>, <span class="title class_">Button</span>, <span class="title class_">PageView</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;cc&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UIPnlMultiTableView</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="attr">_root</span>: <span class="title class_">Node</span></span><br><span class="line">    <span class="keyword">public</span> <span class="attr">_Nego_Root</span>: <span class="title class_">Node</span></span><br><span class="line">    <span class="keyword">public</span> <span class="attr">_PageC_table</span>: <span class="title class_">PageView</span></span><br><span class="line">    <span class="keyword">public</span> <span class="attr">_Btn_add</span>: <span class="title class_">Button</span></span><br><span class="line">    <span class="keyword">public</span> <span class="attr">_Btn_del</span>: <span class="title class_">Button</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">go: Node</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_root</span> = go</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_Nego_Root</span> = go.<span class="title function_">getChildByPath</span>(<span class="string">&#x27;Nego_Root&#x27;</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_PageC_table</span> = go.<span class="title function_">getChildByPath</span>(<span class="string">&#x27;Nego_Root/PageC_table&#x27;</span>).<span class="title function_">getComponent</span>(<span class="title class_">PageView</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_Btn_add</span> = go.<span class="title function_">getChildByPath</span>(<span class="string">&#x27;Nego_Root/Btn_add&#x27;</span>).<span class="title function_">getComponent</span>(<span class="title class_">Button</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_Btn_del</span> = go.<span class="title function_">getChildByPath</span>(<span class="string">&#x27;Nego_Root/Btn_del&#x27;</span>).<span class="title function_">getComponent</span>(<span class="title class_">Button</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>cocos Creator</category>
      </categories>
      <tags>
        <tag>cocos Creator</tag>
      </tags>
  </entry>
  <entry>
    <title>cocosCreator事件穿透和阻止</title>
    <url>/7bbb7305.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>今天在写代码的时候给父节点和子节点添加了2个不同的点击事件.然后发现在触发子节点的点击事件时会同时触发父节点的点击事件.<br>查了下发现在cocos creator中,事件分为两种类型:捕获事件和冒泡事件。默认情况下，所有节点的事件都是冒泡事件，以为着当子节点触发了一个事件后，它的父节点也会接受到这个事件。<br>解决问题的方法（我这里用到的方法）<br>在子节点上添加一个<code>BlockInputEvents</code>组件，如下图：<br><img data-src="https://s1.ax1x.com/2023/04/17/p9PlfKI.png" style="width:600px;height:200px" alt="" /></p>
]]></content>
      <categories>
        <category>cocos Creator</category>
      </categories>
  </entry>
  <entry>
    <title>cocosCreator使用Vscode+chrome浏览器调试</title>
    <url>/aad587b8.html</url>
    <content><![CDATA[<p>1、vscode安装插件 <code>JavaScript Debugger(Nightly)</code></p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>2、调试配置，路径<code>.vscode/launch.json</code>如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   // 使用 IntelliSense 了解相关属性。 </span><br><span class="line">   // 悬停以查看现有属性的描述。</span><br><span class="line">   // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span><br><span class="line">   &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">   &quot;configurations&quot;: [</span><br><span class="line">       &#123;</span><br><span class="line">           &quot;type&quot;: &quot;chrome&quot;,</span><br><span class="line">           &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">           &quot;name&quot;: &quot;cocos Chrome&quot;,</span><br><span class="line">           &quot;url&quot;: &quot;http://localhost:7456&quot;,</span><br><span class="line">           &quot;sourceMaps&quot;: true,</span><br><span class="line">           &quot;userDataDir&quot;: &quot;$&#123;workspaceRoot&#125;/.vscode/chrome&quot;,</span><br><span class="line">           &quot;diagnosticLogging&quot;: false,</span><br><span class="line">           &quot;webRoot&quot;: &quot;$&#123;workspaceRoot&#125;&quot;,</span><br><span class="line">           &quot;sourceMapPathOverrides&quot;: &#123;</span><br><span class="line">               &quot;assets/*&quot;: &quot;$&#123;workspaceRoot&#125;/assets/*&quot;</span><br><span class="line">           &#125;,</span><br><span class="line">           &quot;runtimeArgs&quot;: [&quot;--disable-web-security&quot;],//解决跨域问题</span><br><span class="line">           &quot;pathMapping&quot;:&#123;</span><br><span class="line">               &quot;/preview-scripts/assets&quot;: &quot;$&#123;workspaceRoot&#125;/temp/quick-scripts/assets&quot;,</span><br><span class="line">               &quot;/&quot;: &quot;$&#123;workspaceRoot&#125;&quot;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>cocos Creator</category>
      </categories>
      <tags>
        <tag>cocos Creator</tag>
      </tags>
  </entry>
  <entry>
    <title>cocosCreator使用shader实现图片扫光特效</title>
    <url>/284d90f4.html</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>功能：图片实现扫光效果<br>引擎：cocos Creator 3.7.2<br>开发语言：ts</p>
<span id="more"></span>

<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img data-src="https://pic.imgdb.cn/item/6643262e0ea9cb14038c40d8.gif" alt="在这里插入图片描述"></p>
<h3 id="shader代码"><a href="#shader代码" class="headerlink" title="shader代码"></a>shader代码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.</span><br><span class="line">CCEffect %&#123;</span><br><span class="line">  techniques:</span><br><span class="line">  - passes:</span><br><span class="line">    - vert: sprite-vs:vert</span><br><span class="line">      frag: sprite-fs:frag</span><br><span class="line">      depthStencilState:</span><br><span class="line">        depthTest: false</span><br><span class="line">        depthWrite: false</span><br><span class="line">      blendState:</span><br><span class="line">        targets:</span><br><span class="line">        - blend: true</span><br><span class="line">          blendSrc: src_alpha</span><br><span class="line">          blendDst: one_minus_src_alpha</span><br><span class="line">          blendDstAlpha: one_minus_src_alpha</span><br><span class="line">      rasterizerState:</span><br><span class="line">        cullMode: none</span><br><span class="line">      properties:</span><br><span class="line">        alphaThreshold: &#123; value: 0.5 &#125;</span><br><span class="line"></span><br><span class="line">        # 自定义</span><br><span class="line">        lightColor: &#123; value: [1.0, 1.0, 0.0, 1.0], editor: &#123;</span><br><span class="line">          type: color,</span><br><span class="line">          tooltip: &quot;光束颜色&quot; &#125;&#125;</span><br><span class="line">        lightCenterPoint: &#123; value: [0.2, 0.2], editor: &#123; </span><br><span class="line">          tooltip: &quot;光束中心点坐标&quot; &#125;&#125;</span><br><span class="line">        lightAngle: &#123; value: 36.0, editor: &#123; </span><br><span class="line">          tooltip: &quot;光束倾斜角度&quot; &#125;&#125;</span><br><span class="line">        lightWidth: &#123; value: 0.2, editor: &#123; </span><br><span class="line">          tooltip: &quot;光束宽度&quot; &#125;&#125;</span><br><span class="line">        enableGradient: &#123; value: 1.0, editor: &#123; </span><br><span class="line">          tooltip: &quot;是否启用光束渐变。0：不启用，非0：启用&quot; &#125;&#125;</span><br><span class="line">        cropAlpha: &#123; value: 1.0, editor: &#123; </span><br><span class="line">          tooltip: &quot;是否裁剪透明区域上的光。0：不启用，非0：启用&quot; &#125;&#125;</span><br><span class="line">        enableFog: &#123; value: 0.0, editor: &#123; </span><br><span class="line">          tooltip: &quot;是否启用迷雾效果。0：不启用，非0：启用&quot; &#125;&#125;</span><br><span class="line">&#125;%</span><br><span class="line"></span><br><span class="line">CCProgram sprite-vs %&#123;</span><br><span class="line">  precision highp float;</span><br><span class="line">  #include &lt;builtin/uniforms/cc-global&gt;</span><br><span class="line">  #if USE_LOCAL</span><br><span class="line">    #include &lt;builtin/uniforms/cc-local&gt;</span><br><span class="line">  #endif</span><br><span class="line"></span><br><span class="line">  in vec3 a_position;</span><br><span class="line">  in vec2 a_texCoord;</span><br><span class="line">  in vec4 a_color;</span><br><span class="line"></span><br><span class="line">  out vec4 color;</span><br><span class="line">  out vec2 uv0;</span><br><span class="line"></span><br><span class="line">  vec4 vert () &#123;</span><br><span class="line">    vec4 pos = vec4(a_position, 1);</span><br><span class="line"></span><br><span class="line">    #if USE_PIXEL_ALIGNMENT</span><br><span class="line">      pos = cc_matView * pos;</span><br><span class="line">      pos.xyz = floor(pos.xyz);</span><br><span class="line">      pos = cc_matProj * pos;</span><br><span class="line">    #else</span><br><span class="line">      pos = cc_matViewProj * pos;</span><br><span class="line">    #endif</span><br><span class="line"></span><br><span class="line">    uv0 = a_texCoord;</span><br><span class="line">    color = a_color;</span><br><span class="line"></span><br><span class="line">    return pos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;%</span><br><span class="line"></span><br><span class="line">CCProgram sprite-fs %&#123;</span><br><span class="line">  precision highp float;</span><br><span class="line">  #include &lt;builtin/internal/embedded-alpha&gt;</span><br><span class="line">  #include &lt;builtin/internal/alpha-test&gt;</span><br><span class="line"></span><br><span class="line">  in vec4 color;</span><br><span class="line"></span><br><span class="line">  #if USE_TEXTURE</span><br><span class="line">    in vec2 uv0;</span><br><span class="line">    #pragma builtin(local)</span><br><span class="line">    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;</span><br><span class="line">  #endif</span><br><span class="line"></span><br><span class="line">  #if ENABLE_LIGHT</span><br><span class="line">    uniform Light &#123;</span><br><span class="line">      // 光束颜色</span><br><span class="line">      vec4 lightColor;</span><br><span class="line"></span><br><span class="line">      // 光束中心点坐标</span><br><span class="line">      vec2 lightCenterPoint;</span><br><span class="line">      </span><br><span class="line">      // 光束倾斜角度</span><br><span class="line">      float lightAngle;</span><br><span class="line"></span><br><span class="line">      // 光束宽度</span><br><span class="line">      float lightWidth;</span><br><span class="line"></span><br><span class="line">      // 启用光束渐变</span><br><span class="line">      // ps：编辑器还不支持 bool 类型的样子，因此用float来定义</span><br><span class="line">      float enableGradient;</span><br><span class="line"></span><br><span class="line">      // 裁剪掉透明区域上的光</span><br><span class="line">      // ps：编辑器还不支持 bool 类型的样子，因此用float来定义</span><br><span class="line">      float cropAlpha;   </span><br><span class="line"></span><br><span class="line">      // 是否启用迷雾效果</span><br><span class="line">      // ps：编辑器还不支持 bool 类型的样子，因此用float来定义</span><br><span class="line">      float enableFog;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">    * 添加光束颜色</span><br><span class="line">    */</span><br><span class="line">    vec4 addLightColor(vec4 textureColor, vec4 lightColor, vec2 lightCenterPoint, float lightAngle, float lightWidth) &#123;</span><br><span class="line">      // 边界值处理，没有宽度就返回原始颜色</span><br><span class="line">      if (lightWidth &lt;= 0.0) &#123;</span><br><span class="line">        return textureColor;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      // 计算当前 uv 到 光束 的距离</span><br><span class="line">      float angleInRadians = radians(lightAngle);</span><br><span class="line"></span><br><span class="line">      // 角度0与非0不同处理</span><br><span class="line">      float dis = 0.0;</span><br><span class="line">      if (mod(lightAngle, 180.0) != 0.0) &#123;</span><br><span class="line">        // 计算光束中心线下方与X轴交点的X坐标</span><br><span class="line">        // 1.0 - lightCenterPoint.y 是将转换为OpenGL坐标系，下文的 1.0 - y 类似</span><br><span class="line">        float lightOffsetX = lightCenterPoint.x - ((1.0 - lightCenterPoint.y) / tan(angleInRadians));</span><br><span class="line"></span><br><span class="line">        // 以当前点画一条平行于X轴的线，假设此线和光束中心线相交的点为D点</span><br><span class="line">        // 那么 D.y = uv0.y</span><br><span class="line">        // D.x = lightOffsetX + D.y / tan(angle)</span><br><span class="line">        float dx = lightOffsetX + (1.0 - uv0.y) / tan(angleInRadians);</span><br><span class="line"></span><br><span class="line">        // D 到当前 uv0 的距离就是</span><br><span class="line">        // dis = |uv0.x - D.x|</span><br><span class="line">        float offsetDis = abs(uv0.x - dx);</span><br><span class="line"></span><br><span class="line">        // 当前点到光束中心线的的垂直距离就好算了</span><br><span class="line">        dis = sin(angleInRadians) * offsetDis;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        dis = abs(uv0.y - lightCenterPoint.y);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      float a = 1.0 ;</span><br><span class="line">      // 裁剪掉透明区域上的点光</span><br><span class="line">      if (bool(cropAlpha)) &#123;</span><br><span class="line">        a *= step(0.01, textureColor.a);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      // 裁剪掉光束范围外的uv（迷雾效果）</span><br><span class="line">      if (!bool(enableFog)) &#123;</span><br><span class="line">        a *= step(dis, lightWidth * 0.5);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      // 加入从中心往外渐变的效果</span><br><span class="line">      if (bool(enableGradient)) &#123;</span><br><span class="line">        a *= 1.0 - dis / (lightWidth * 0.5);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      // 计算出扩散范围内，不同 uv 对应的实际扩散颜色值</span><br><span class="line">      vec4 finalLightColor = lightColor * a;</span><br><span class="line"></span><br><span class="line">      // 混合颜色：在原始图像颜色上叠加扩散颜色</span><br><span class="line">      //return textureColor * textureColor.a + finalLightColor;</span><br><span class="line"></span><br><span class="line">        #if ENABLE_ORIGINCOLOR</span><br><span class="line">          finalLightColor = textureColor + textureColor * a;</span><br><span class="line">        #else</span><br><span class="line">          finalLightColor = textureColor + finalLightColor;</span><br><span class="line">          finalLightColor.a = textureColor.a;</span><br><span class="line">        #endif</span><br><span class="line"></span><br><span class="line">        return finalLightColor;</span><br><span class="line">      &#125;</span><br><span class="line">  #endif</span><br><span class="line">    </span><br><span class="line">  vec4 frag () &#123;</span><br><span class="line">    vec4 o = vec4(1, 1, 1, 1);</span><br><span class="line"></span><br><span class="line">    #if USE_TEXTURE</span><br><span class="line">      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);</span><br><span class="line">    #endif</span><br><span class="line"></span><br><span class="line">    o *= color;</span><br><span class="line">    ALPHA_TEST(o);</span><br><span class="line"></span><br><span class="line">    #if ENABLE_LIGHT</span><br><span class="line">      o = addLightColor(o, lightColor, lightCenterPoint, lightAngle, lightWidth);</span><br><span class="line">    #endif</span><br><span class="line">    </span><br><span class="line">    return o;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;%</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ul>
<li>手动创建一个材质</li>
<li>将上面shader代码于材质进行绑定</li>
<li>在ts脚本代码中控制扫光的移动</li>
</ul>
<h3 id="ts代码"><a href="#ts代码" class="headerlink" title="ts代码"></a>ts代码</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; _decorator, <span class="title class_">CCFloat</span>, <span class="title class_">Component</span>, <span class="title class_">Node</span>, <span class="title class_">Sprite</span>, <span class="title class_">Material</span>, <span class="title class_">Vec2</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;cc&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> &#123; ccclass, property &#125; = _decorator;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ccclass</span>(<span class="string">&#x27;NewComponent&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">NewComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="meta">@property</span>(<span class="title class_">Sprite</span>)</span><br><span class="line">    sprite !: <span class="title class_">Sprite</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@property</span>(&#123; <span class="attr">type</span>: <span class="title class_">CCFloat</span>, <span class="attr">tooltip</span>: <span class="string">&quot;光束宽度&quot;</span> &#125;)</span><br><span class="line">    lightWidth = <span class="number">0.03</span>;</span><br><span class="line">    <span class="meta">@property</span>(&#123; <span class="attr">type</span>: <span class="title class_">CCFloat</span>, <span class="attr">tooltip</span>: <span class="string">&quot;时间&quot;</span> &#125;)</span><br><span class="line">    <span class="title class_">LoopTime</span> = <span class="number">1.0</span>;</span><br><span class="line">    <span class="meta">@property</span>(&#123; <span class="attr">type</span>: <span class="title class_">CCFloat</span>, <span class="attr">tooltip</span>: <span class="string">&quot;TimeInterval&quot;</span> &#125;)</span><br><span class="line">    <span class="title class_">TimeInterval</span> = <span class="number">2.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**记录时间 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="attr">time</span>: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**精灵上的材质 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="attr">material</span>: <span class="title class_">Material</span> = <span class="literal">null</span>!;</span><br><span class="line">    <span class="keyword">private</span> startPos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> moveLength = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="title class_">Speed</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> dttime = <span class="number">0</span>;</span><br><span class="line">    <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">time</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dttime</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">material</span> = <span class="variable language_">this</span>.<span class="property">sprite</span>.<span class="title function_">getMaterial</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">startPos</span> = -<span class="variable language_">this</span>.<span class="property">lightWidth</span> / <span class="number">2</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">moveLength</span> = <span class="variable language_">this</span>.<span class="property">lightWidth</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">Speed</span> = <span class="variable language_">this</span>.<span class="property">moveLength</span> / <span class="variable language_">this</span>.<span class="property">LoopTime</span> / <span class="number">2</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">time</span> = <span class="variable language_">this</span>.<span class="property">startPos</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">update</span>(<span class="params">dt: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">time</span> += dt * <span class="variable language_">this</span>.<span class="property">Speed</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dttime</span> += dt;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">material</span>.<span class="title function_">setProperty</span>(<span class="string">&quot;lightCenterPoint&quot;</span>, <span class="keyword">new</span> <span class="title class_">Vec2</span>(<span class="variable language_">this</span>.<span class="property">time</span>, <span class="variable language_">this</span>.<span class="property">time</span>));          <span class="comment">//设置材质对应的属性</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">dttime</span> &gt; <span class="variable language_">this</span>.<span class="property">LoopTime</span> + <span class="variable language_">this</span>.<span class="property">TimeInterval</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">time</span> = <span class="variable language_">this</span>.<span class="property">startPos</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">dttime</span> = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="完整demo"><a href="#完整demo" class="headerlink" title="完整demo"></a>完整demo</h3><p><a href="https://github.com/lengmo714/cocosCreator3.7.2-">demo下载地址</a></p>
]]></content>
      <categories>
        <category>cocos Creator</category>
      </categories>
      <tags>
        <tag>cocos Creator</tag>
      </tags>
  </entry>
  <entry>
    <title>cocosCreator使用spine骨骼动画暂停、继续、重新播放动画</title>
    <url>/1b5fdeff.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>第一次用creator，spine好像没有提供动画暂停与恢复的api。之前用2dx的时候是通过节点的暂停和恢复方法来实现的，但是换成creator发现node的<code>pauseAllActions()</code>方法并没有效果。</p>
<h3 id="暂停，继续"><a href="#暂停，继续" class="headerlink" title="暂停，继续"></a>暂停，继续</h3><p>查找了一番之后，发现<code>sp.Skeleton</code>组件的api中定义了一个暂停的字段<code>paused</code>，将这个字段设置为<code>true</code>即可暂停动画，设置为<code>false</code>继续动画。</p>
<p>示例代码:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">sk</span> = <span class="variable language_">this</span>.<span class="property">spineNode</span>.<span class="title function_">getComponent</span>(<span class="string">&quot;sp.Skeleton&quot;</span>) <span class="keyword">as</span> sp.<span class="property">Skeleton</span>;</span><br><span class="line"><span class="title function_">stop</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sk</span>.<span class="property">paused</span>= <span class="literal">true</span>; <span class="comment">// 暂停动画</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">play</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sk</span>.<span class="property">paused</span>= <span class="literal">false</span>; <span class="comment">// 继续播放</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意，这里的将<code>paused</code>设置为<code>false</code>,动画将会在暂停的地方继续往后面播放。如果我们要想重头播放动画，该方法就不适用了。</p>
<h3 id="暂停，重新播放"><a href="#暂停，重新播放" class="headerlink" title="暂停，重新播放"></a>暂停，重新播放</h3><p>我这里的思路是将正在进行的动画线管给清除掉，然后重新播放动画。</p>
<p>重新播放动画代码示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">sk</span> = <span class="variable language_">this</span>.<span class="property">spineNode</span>.<span class="title function_">getComponent</span>(<span class="string">&quot;sp.Skeleton&quot;</span>) <span class="keyword">as</span> sp.<span class="property">Skeleton</span>;</span><br><span class="line"><span class="title function_">stop</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sk</span>.<span class="title function_">clearTrack</span>(<span class="number">0</span>);<span class="comment">// 暂停动画</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">play</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sk</span>.<span class="title function_">setAnimation</span>(<span class="number">0</span>, <span class="string">&quot;animation&quot;</span>, <span class="literal">false</span>); <span class="comment">// 重新播放动画</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>cocos Creator</category>
      </categories>
      <tags>
        <tag>cocos Creator</tag>
      </tags>
  </entry>
  <entry>
    <title>使用粒子特效在Cocos Creator 3.7.2中创造令人惊艳的效果</title>
    <url>/9d7c5e64.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>在游戏开发过程中，粒子特效是提升游戏画面表现力和吸引玩家注意力的重要工具。通过合理使用粒子系统，你可以创造出炫目的爆炸、魔法效果和天气等引人入胜的游戏场景。在本文中，我们将介绍如何在Cocos Creator 3.7.2中使用粒子特效系统。</p>
<p>在使用过程中，你可以自己创建粒子效果，也可以使用你们公司美术给你提供的粒子效果或者自己在网上找。</p>
<p>这里我的粒子效果是美术提供的！</p>
<h3 id="创建粒子"><a href="#创建粒子" class="headerlink" title="创建粒子"></a>创建粒子</h3><p>graph TD<br>创建–&gt;2D对象–&gt;ParticleSystem2D（粒子）<br><img data-src="https://pic.imgdb.cn/item/66432e9b0ea9cb14039d77d9.jpg" alt="" /><br>这时可以看到编辑器中已经存在一个系统自带的粒子效果了<br><img data-src="https://pic.imgdb.cn/item/66432edf0ea9cb14039ddd96.png" alt="" /><br>下面我们开始对粒子进行替换</p>
<h3 id="修改File"><a href="#修改File" class="headerlink" title="修改File"></a>修改File</h3><p>在上面图中，我们点击粒子可以到右边的属性检查器中有<code>File</code>，这个就是粒子的配置文件，这里是<code>.plist</code>格式的。<br>我们现在将这个文件修改为我们自己的<br><img data-src="https://pic.imgdb.cn/item/66432fc10ea9cb14039fc4d9.png" alt="" /><br>可以看到，文件替换后编辑器报错了，而且粒子也没有出现我们想要的效果，这是因为没有找到配置文件中的粒子贴图文件。</p>
<h3 id="替换贴图"><a href="#替换贴图" class="headerlink" title="替换贴图"></a>替换贴图</h3><img data-src="https://pic.imgdb.cn/item/66432ff00ea9cb1403a06225.png" alt="" />
我们将`Custom`属性前面的框框勾上，就可以看到`Sprite Frame`属性标红，提示`Missing Asset`，我们将需要用到的粒子贴图拖过来即可。
<img data-src="https://pic.imgdb.cn/item/6643301c0ea9cb1403a0afc0.png" alt="" />
这个时候我们就可以看到我们自己想要替换的粒子效果了。

<h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><img data-src="https://pic.imgdb.cn/item/664330490ea9cb1403a10817.png" alt="" />
这里我们还需要进行最后一步，将现在的粒子配置导出，我们在使用的时候直接用导出后的粒子文件，就可以啦。
> 注意，这里不导出的话，在使用过程中可能会存在找不到粒子贴图的问题。

<h3 id="动态替换粒子"><a href="#动态替换粒子" class="headerlink" title="动态替换粒子"></a>动态替换粒子</h3><p>我们在游戏开发的过程中，可能会遇到这样的情况：同一个节点下有几种不同的粒子特效，每次只需要播放一种。比如：游戏失败时候一种粒子特效，游戏胜利的时候一种粒子特效。这个时候，我们就可以只创建一个<code>ParticleSystem2D</code>节点，然后根据不同的情况去更换粒子的<code>File</code>文件，从而播放不同的特效。<br>示例代码：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> parent = node; <span class="comment">// ParticleSystem2D节点的父节点</span></span><br><span class="line">parent.<span class="title function_">getChildByName</span>(<span class="string">&quot;Particle2D&quot;</span>).<span class="title function_">getComponent</span>(<span class="title class_">ParticleSystem2D</span>).<span class="title function_">stopSystem</span>();  <span class="comment">// 先停止发射之前的粒子</span></span><br><span class="line">resources.<span class="title function_">load</span>(<span class="string">`<span class="subst">$&#123;FilePath&#125;</span>`</span>, <span class="title class_">ParticleAsset</span>, <span class="function">(<span class="params">err, ParticleAsset</span>) =&gt;</span> &#123;   <span class="comment">// 修改粒子的File文件，其实就是修改粒子动画</span></span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Failed to load file:&#x27;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    parent.<span class="title function_">getChildByName</span>(<span class="string">&quot;Particle2D&quot;</span>).<span class="title function_">getComponent</span>(<span class="title class_">ParticleSystem2D</span>).<span class="property">file</span> = <span class="title class_">ParticleAsset</span>;</span><br><span class="line">&#125;);</span><br><span class="line">parent.<span class="title function_">getChildByName</span>(<span class="string">&quot;Particle2D&quot;</span>).<span class="title function_">getComponent</span>(<span class="title class_">ParticleSystem2D</span>).<span class="title function_">resetSystem</span>();   <span class="comment">//修改完粒子后，重启粒子动画</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>游戏开发</category>
      </categories>
      <tags>
        <tag>Cocos Creator</tag>
        <tag>粒子特效</tag>
      </tags>
  </entry>
  <entry>
    <title>cocosCreator创建圆形遮罩Mask</title>
    <url>/661b115d.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>要将方形图片显示成圆形，你可以使用Cocos Creator和TypeScript来创建一个自定义的圆形遮罩（mask）。以下是实现这个效果的步骤：</p>
<ol>
<li>在Cocos Creator中创建一个新的Canvas节点，然后在Canvas节点下创建一个Sprite节点，将你的方形图片（或任何你想要显示成圆形的图片）添加到Sprite组件中。</li>
<li>在Canvas节点下创建一个新的Node节点，用于作为遮罩。你可以将这个节点命名为”Mask”。</li>
<li>将Mask节点的ContentSize设置为与你的图片相同的大小，以确保遮罩大小与图片大小相匹配。</li>
<li>在Mask节点上添加一个Graphics组件。这个组件将用于绘制圆形遮罩。</li>
<li>创建一个脚本文件（.ts），并将其附加到Mask节点上。然后，在脚本中编写以下代码来绘制一个圆形遮罩：</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; _decorator, <span class="title class_">Component</span>, color,<span class="title class_">Graphics</span>, <span class="title class_">Size</span>, <span class="title class_">UITransform</span> &#125; <span class="keyword">from</span> <span class="string">&quot;cc&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; ccclass, property &#125; = _decorator;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ccclass</span>(<span class="string">&quot;MaskCircle&quot;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">MaskCircle</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="meta">@property</span>(<span class="title class_">Graphics</span>)</span><br><span class="line">    <span class="attr">maskGraphics</span>: <span class="title class_">Graphics</span> = <span class="literal">null</span>!;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">drawCircleMask</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">drawCircleMask</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 获取Graphics组件</span></span><br><span class="line">        <span class="keyword">const</span> <span class="attr">graphics</span>: <span class="title class_">Graphics</span> = <span class="variable language_">this</span>.<span class="property">maskGraphics</span>;</span><br><span class="line">        <span class="comment">// 清除已有的绘制</span></span><br><span class="line">        graphics.<span class="title function_">clear</span>();</span><br><span class="line">        <span class="comment">// 绘制一个圆形遮罩</span></span><br><span class="line">        graphics.<span class="property">fillColor</span> = <span class="title function_">color</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>); <span class="comment">// 可以根据需要设置颜色</span></span><br><span class="line">        graphics.<span class="title function_">circle</span>(<span class="number">0</span>,<span class="number">0</span>, <span class="variable language_">this</span>.<span class="property">node</span>.<span class="title function_">getComponent</span>(<span class="title class_">UITransform</span>).<span class="property">width</span> / <span class="number">2</span>);</span><br><span class="line">        graphics.<span class="title function_">fill</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol>
<li>回到Cocos Creator编辑器，在Mask节点的Inspector面板中，将MaskCircle组件的maskGraphics字段拖动到Graphics组件上，以便将它们关联起来。</li>
<li>确保Mask节点与你的图片节点重叠，然后将图片节点的父节点设置为Mask节点，以便图片受到遮罩的影响。</li>
<li>运行你的游戏，你将看到图片被显示为圆形。</li>
</ol>
<p>通过这些步骤，你可以使用Cocos Creator和TypeScript将方形图片显示成圆形。请确保调整遮罩节点的大小以匹配你的图片大小，并根据需要自定义遮罩的颜色和形状。</p>
]]></content>
      <categories>
        <category>cocos Creator</category>
      </categories>
      <tags>
        <tag>cocos Creator</tag>
      </tags>
  </entry>
  <entry>
    <title>cocosCreator修改节点层级</title>
    <url>/d23c2fe2.html</url>
    <content><![CDATA[<p>要在Cocos Creator中修改节点的层级（z轴顺序），你可以使用节点的<code>setSiblingIndex</code>方法。这允许你在同级节点之间重新排列节点的渲染顺序。以下是一个示例：</p>
<span id="more"></span>
<p>假设你有一个节点列表，并且想要将其中一个节点移到其他节点之上：</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取节点的引用</span></span><br><span class="line"><span class="keyword">const</span> nodeToMove = cc.<span class="title function_">find</span>(<span class="string">&quot;NodeToMove&quot;</span>); <span class="comment">// 用你的节点名称替换&quot;NodeToMove&quot;</span></span><br><span class="line"><span class="keyword">const</span> targetNode = cc.<span class="title function_">find</span>(<span class="string">&quot;TargetNode&quot;</span>); <span class="comment">// 用你的目标节点的名称替换&quot;TargetNode&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取目标节点的当前层级索引</span></span><br><span class="line"><span class="keyword">const</span> targetIndex = targetNode.<span class="title function_">getSiblingIndex</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将要移动的节点移到目标节点之上</span></span><br><span class="line">nodeToMove.<span class="title function_">setSiblingIndex</span>(targetIndex + <span class="number">1</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面的代码首先获取了要移动的节点（<code>nodeToMove</code>）和目标节点（<code>targetNode</code>）的引用。然后，它获取了目标节点的当前层级索引，使用<code>getSiblingIndex</code>方法。最后，它使用<code>setSiblingIndex</code>方法将要移动的节点移到目标节点之上，通过将目标节点的层级索引加1。</p>
<p>确保你在代码中使用正确的节点名称替换<code>NodeToMove</code>“和<code>TargetNode</code>“，以便找到你的节点。此外，确保在适当的时候调用这段代码，以确保正确的节点层级关系。</p>
]]></content>
      <categories>
        <category>cocos Creator</category>
      </categories>
      <tags>
        <tag>cocos Creator</tag>
      </tags>
  </entry>
  <entry>
    <title>cocosCreator加载远程资源</title>
    <url>/7c5264c2.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h3 id="远程-url-带图片后缀名"><a href="#远程-url-带图片后缀名" class="headerlink" title="远程 url 带图片后缀名"></a>远程 url 带图片后缀名</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> remoteUrl = <span class="string">&quot;http://unknown.org/someres.png&quot;</span>;</span><br><span class="line">assetManager.<span class="property">loadRemote</span>&lt;<span class="title class_">ImageAsset</span>&gt;(remoteUrl, <span class="keyword">function</span> (<span class="params">err, imageAsset</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> spriteFrame = <span class="keyword">new</span> <span class="title class_">SpriteFrame</span>();</span><br><span class="line">    <span class="keyword">const</span> texture = <span class="keyword">new</span> <span class="title class_">Texture2D</span>();</span><br><span class="line">    texture.<span class="property">image</span> = imageAsset;</span><br><span class="line">    spriteFrame.<span class="property">texture</span> = texture;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="远程-url-不带图片后缀名，此时必须指定远程图片文件的类型"><a href="#远程-url-不带图片后缀名，此时必须指定远程图片文件的类型" class="headerlink" title="远程 url 不带图片后缀名，此时必须指定远程图片文件的类型"></a>远程 url 不带图片后缀名，此时必须指定远程图片文件的类型</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> remoteUrl = <span class="string">&quot;http://unknown.org/emoji?id=124982374&quot;</span>;</span><br><span class="line">assetManager.<span class="property">loadRemote</span>&lt;<span class="title class_">ImageAsset</span>&gt;(remoteUrl, &#123;<span class="attr">ext</span>: <span class="string">&#x27;.png&#x27;</span>&#125;, <span class="keyword">function</span> (<span class="params">err, imageAsset</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> spriteFrame = <span class="keyword">new</span> <span class="title class_">SpriteFrame</span>();</span><br><span class="line">    <span class="keyword">const</span> texture = <span class="keyword">new</span> <span class="title class_">Texture2D</span>();</span><br><span class="line">    texture.<span class="property">image</span> = imageAsset;</span><br><span class="line">    spriteFrame.<span class="property">texture</span> = texture;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<h3 id="用绝对路径加载设备存储内的资源，比如相册"><a href="#用绝对路径加载设备存储内的资源，比如相册" class="headerlink" title="用绝对路径加载设备存储内的资源，比如相册"></a>用绝对路径加载设备存储内的资源，比如相册</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> absolutePath = <span class="string">&quot;/dara/data/some/path/to/image.png&quot;</span>;</span><br><span class="line">assetManager.<span class="property">loadRemote</span>&lt;<span class="title class_">ImageAsset</span>&gt;(absolutePath, <span class="keyword">function</span> (<span class="params">err, imageAsset</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> spriteFrame = <span class="keyword">new</span> <span class="title class_">SpriteFrame</span>();</span><br><span class="line">    <span class="keyword">const</span> texture = <span class="keyword">new</span> <span class="title class_">Texture2D</span>();</span><br><span class="line">    texture.<span class="property">image</span> = imageAsset;</span><br><span class="line">    spriteFrame.<span class="property">texture</span> = texture;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<h3 id="远程音频"><a href="#远程音频" class="headerlink" title="远程音频"></a>远程音频</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">remoteUrl = <span class="string">&quot;http://unknown.org/sound.mp3&quot;</span>;</span><br><span class="line">assetManager.<span class="title function_">loadRemote</span>(remoteUrl, <span class="keyword">function</span> (<span class="params">err, audioClip</span>) &#123;</span><br><span class="line">    <span class="comment">// play audio clip</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="远程文本"><a href="#远程文本" class="headerlink" title="远程文本"></a>远程文本</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">remoteUrl = <span class="string">&quot;http://unknown.org/skill.txt&quot;</span>;</span><br><span class="line">assetManager.<span class="title function_">loadRemote</span>(remoteUrl, <span class="keyword">function</span> (<span class="params">err, textAsset</span>) &#123;</span><br><span class="line">    <span class="comment">// use string to do something</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>cocos Creator</category>
      </categories>
      <tags>
        <tag>cocos Creator</tag>
      </tags>
  </entry>
  <entry>
    <title>cocosCreator动态修改精灵图片</title>
    <url>/250edf34.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>今天在用cocos creator写代码过程中，需要给7个精灵动态修改图片。出现了下面错误。图片找不到</p>
<img data-src="https://s1.ax1x.com/2023/04/13/ppx2mSP.png" alt="" />

<p>自己就很郁闷，查看图片路径又是没有问题的<br><img data-src="https://s1.ax1x.com/2023/04/13/ppx2ZWt.png" alt="" /></p>
<p>下面给出有bug和解决bug的代码<br>有bug</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> <span class="attr">i</span>:<span class="built_in">number</span> = <span class="number">0</span>;i&lt;<span class="number">7</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> spriteFrame = <span class="keyword">new</span> <span class="title class_">SpriteFrame</span>();</span><br><span class="line">    <span class="keyword">let</span> imagePath = <span class="string">&quot;ui/Atlas/gameHall/game_type_btn_&quot;</span> + (i+<span class="number">1</span>) + <span class="string">&quot;.png&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;imagePath = &quot;</span>,imagePath);</span><br><span class="line">    resources.<span class="title function_">load</span>(imagePath,<span class="title class_">SpriteFrame</span>,<span class="function">(<span class="params">err,res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;图片不存在&quot;</span>,err)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        spriteFrame = res;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">hallImage</span>[i].<span class="property">spriteFrame</span> = spriteFrame;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>没bug</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> <span class="attr">i</span>:<span class="built_in">number</span> = <span class="number">0</span>;i&lt;<span class="number">7</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> spriteFrame = <span class="keyword">new</span> <span class="title class_">SpriteFrame</span>();</span><br><span class="line">    <span class="keyword">let</span> imagePath = <span class="string">&quot;ui/Atlas/gameHall/game_type_btn_&quot;</span> + (i+<span class="number">1</span>) + <span class="string">&quot;/spriteFrame&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;imagePath = &quot;</span>,imagePath);</span><br><span class="line">    resources.<span class="title function_">load</span>(imagePath,<span class="title class_">SpriteFrame</span>,<span class="function">(<span class="params">err,res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;图片不存在&quot;</span>,err)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        spriteFrame = res;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">hallImage</span>[i].<span class="title function_">getComponent</span>(<span class="title class_">Sprite</span>).<span class="property">spriteFrame</span> = spriteFrame;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>cocos Creator</category>
      </categories>
      <tags>
        <tag>cocos Creator</tag>
        <tag>TypeScript</tag>
        <tag>cocos</tag>
      </tags>
  </entry>
  <entry>
    <title>cocosCreator动态刷新Label</title>
    <url>/31318c8f.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>在游戏开发的过程中，<code>Label</code>是一个常用的组件，而且在使用的过程中也是经常动态的修改<code>Label</code>并获取其长度。<br>但是我们在获取长度的时候会发现，获取到的字符长度是修改前的，并非修改后我们想要获取的那个字符的长度。</p>
<p>这时有两个办法可以解决：<br><strong>1</strong> 使用定时器<br>使用定时器，在下一帧的时候刷新<code>Label</code>并获取它的长度<br><strong>2</strong> 使用<code>updateRenderData(true)</code>刷新（推荐使用该方法）<br>示例代码：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">label.<span class="property">node</span>.<span class="title function_">getComponent</span>(<span class="title class_">Label</span>).<span class="title function_">updateRenderData</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">let</span> size = label.<span class="property">node</span>.<span class="title function_">getComponent</span>(<span class="title class_">UITransform</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>cocos Creator</category>
      </categories>
      <tags>
        <tag>cocos Creator</tag>
      </tags>
  </entry>
  <entry>
    <title>cocosCreator动态生成二维码</title>
    <url>/608f6591.html</url>
    <content><![CDATA[<p>cocosCreator 版本：3.7.2<br>开发语言：typeScript</p>
<blockquote>
<p>我们在游戏开发中，经常会生成一个专属于玩家个人的二维码，比如说推广、充值等功能。</p>
</blockquote>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>接到这个任务，在网上找了下，还是有很多教程的。但是这些教程大部分都是用QRCode二维码生成库，将<code>js</code>文件设置成插件的形式。然后用画图组件<code>Graphics</code>把二维码画出来。</p>
<p>我这里也是用的同样的思路，但是没有用插件的形式。下面说说具体的方法：</p>
<h3 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h3><p>打开cocosCreator，创建一个新工程。在<code>scene</code>中添加一个精灵节点，将精灵设置为白色。再在精灵上添加一个<code>Graphics</code>节点。如下图：<br><img data-src="https://pic.imgdb.cn/item/66519b25d9c307b7e9a2642a.png" alt="示意图"></p>
<blockquote>
<p>注意：这里要设置要精灵和绘图节点的尺寸，最好是2的倍数，而且建议将<code>Graphics</code>的锚点设置为(0,0)</p>
</blockquote>
<h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">import</span> &#123; _decorator, <span class="title class_">Component</span>, <span class="title class_">Node</span>,<span class="title class_">Graphics</span>, <span class="title class_">Color</span>, <span class="title class_">UITransform</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;cc&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">QRCode</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./qr/QRCode&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> &#123; ccclass, property &#125; = _decorator;</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">QRErrorCorrectLevel</span> = &#123;</span><br><span class="line">    <span class="attr">L</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">M</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">Q</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">H</span>: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">@ccclass</span>(<span class="string">&#x27;qrCode&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">qrCode</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="meta">@property</span>(<span class="title class_">Graphics</span>)</span><br><span class="line">    <span class="attr">graphics</span>:<span class="title class_">Graphics</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">qrCode</span>(<span class="string">&quot;https://lengmo714.top&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">qrCode</span>(<span class="params">url</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> node = <span class="variable language_">this</span>.<span class="property">graphics</span>;</span><br><span class="line">        <span class="keyword">var</span> qrcode = <span class="keyword">new</span> <span class="title class_">QRCode</span>(-<span class="number">1</span>, <span class="title class_">QRErrorCorrectLevel</span>.<span class="property">H</span>);</span><br><span class="line">        qrcode.<span class="title function_">addData</span>(url);</span><br><span class="line">        qrcode.<span class="title function_">make</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> ctx = node.<span class="title function_">getComponent</span>(<span class="title class_">Graphics</span>)!;</span><br><span class="line">        ctx.<span class="property">fillColor</span> = <span class="title class_">Color</span>.<span class="property">BLACK</span>;</span><br><span class="line">        <span class="keyword">var</span> tileW = node.<span class="title function_">getComponent</span>(<span class="title class_">UITransform</span>)!.<span class="property">width</span> / qrcode.<span class="title function_">getModuleCount</span>();</span><br><span class="line">        <span class="keyword">var</span> tileH = node.<span class="title function_">getComponent</span>(<span class="title class_">UITransform</span>)!.<span class="property">height</span> / qrcode.<span class="title function_">getModuleCount</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// draw in the Graphics</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> row = <span class="number">0</span>; row &lt; qrcode.<span class="title function_">getModuleCount</span>(); row++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> col = <span class="number">0</span>; col &lt; qrcode.<span class="title function_">getModuleCount</span>(); col++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (qrcode.<span class="title function_">isDark</span>(row, col)) &#123;</span><br><span class="line">                    <span class="keyword">var</span> w = (<span class="title class_">Math</span>.<span class="title function_">ceil</span>((col + <span class="number">1</span>) * tileW) - <span class="title class_">Math</span>.<span class="title function_">floor</span>(col * tileW));</span><br><span class="line">                    <span class="keyword">var</span> h = (<span class="title class_">Math</span>.<span class="title function_">ceil</span>((row + <span class="number">1</span>) * tileW) - <span class="title class_">Math</span>.<span class="title function_">floor</span>(row * tileW));</span><br><span class="line">                    ctx.<span class="title function_">rect</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(col * tileW), <span class="title class_">Math</span>.<span class="title function_">round</span>(row * tileH), w, h);</span><br><span class="line">                    ctx.<span class="title function_">fill</span>();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// ctx.fillColor = cc.Color.WHITE;</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">var</span> w = (<span class="title class_">Math</span>.<span class="title function_">ceil</span>((col + <span class="number">1</span>) * tileW) - <span class="title class_">Math</span>.<span class="title function_">floor</span>(col * tileW));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意，这里还是要用到画二维码的插件库，只是我没有用这个插件库，<code>qrcode.js</code>代码转成了<code>ts</code>代码。</p>
<p><a href="https://github.com/lengmo714/qrcode.git">qrcode.js文件下载地址</a><br><a href="https://weidian.com/item.html?itemID=7240337853&wfr=multipic&ifr=itemdetail&source=goods_add_success&sfr=app">完整demo下载地址，ts版本</a></p>
]]></content>
      <categories>
        <category>cocos Creator</category>
      </categories>
      <tags>
        <tag>cocos Creator</tag>
      </tags>
  </entry>
  <entry>
    <title>cocosCreator原生平台JavaScript调试踩坑</title>
    <url>/f978efae.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>cocos Creator项目在使用浏览器运行的时候没有任何问题，但是导出安卓工程后，在手机运行的时候就会出现一些奇怪的问题。每次就只能多输出点日志，然后重新打包测试，就比较麻烦。</p>
<p>后面查看说明文档，发现官方已经给出了<a href="https://docs.cocos.com/creator/3.7/manual/zh/editor/publish/debug-jsb.html?h=%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95" title="" target="">原生平台 JavaScript 调试 ,</a>的文档，看了后很高兴，立马弄了起来。</p>
<p>理想很丰满，现实很骨感。完全按照官方文档来，每次都失败，都是下图问题，相信很多人都和我一样吧~<br><img data-src="https://s11.ax1x.com/2024/02/22/pFNIi60.png"  alt="" /></p>
<h3 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h3><ul>
<li>creator在构建的时候，<strong>一定要勾上</strong><code>Debug模式</code>，划重点</li>
<li>手机和电脑不要开代理</li>
<li>手机游戏要运行起来</li>
<li>android studio开启调试模式</li>
</ul>
<p>注意上面几点，问题就可以解决了</p>
]]></content>
      <categories>
        <category>cocos Creator</category>
      </categories>
      <tags>
        <tag>cocos Creator</tag>
      </tags>
  </entry>
  <entry>
    <title>cocosCreator在B类中监听A类建立长连接发送和接收的数据</title>
    <url>/9233548f.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>首先，您需要使用Cocos Creator的WebSocket模块来创建一个WebSocket连接。您可以使用以下代码在您的A类中创建WebSocket：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> socket = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;ws://your-socket-url&quot;</span>);</span><br><span class="line"><span class="comment">// 将WebSocket对象设置为全局变量</span></span><br><span class="line"><span class="variable language_">window</span>[<span class="string">&quot;socket&quot;</span>] = socket;</span><br><span class="line">socket.<span class="property">onopen</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;WebSocket连接已建立&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">socket.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;接收到WebSocket数据&quot;</span>, event.<span class="property">data</span>);</span><br><span class="line">  <span class="comment">// 在这里处理接收到的数据</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在您的B类中获取全局的WebSocket对象。您可以使用以下代码:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取全局的WebSocket对象</span></span><br><span class="line"><span class="keyword">let</span> socket = <span class="variable language_">window</span>[<span class="string">&quot;socket&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置WebSocket对象的事件处理程序</span></span><br><span class="line">socket.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;B类接收到WebSocket数据&quot;</span>, event.<span class="property">data</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在上面的代码中，我们使用window对象的属性来获取全局变量。通过获取全局变量，您可以访问在A类中创建的WebSocket对象，并在B类中设置事件处理程序。</p>
]]></content>
      <categories>
        <category>cocos Creator</category>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>cocos Creator</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>cocosCreator实现一个翻牌动画</title>
    <url>/7a8f4df2.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>网上教程很多，但是大多数都是使用了2个精灵去实现的，个人觉得比较麻烦，这里写下我的方法，记录下</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">tween</span>(<span class="variable language_">this</span>.<span class="property">_view</span>.<span class="property">_ImgC_poker</span>.<span class="property">node</span>).<span class="title function_">to</span>(<span class="number">0.5</span>,&#123;<span class="attr">eulerAngles</span>:<span class="keyword">new</span> <span class="title class_">Vec3</span>(<span class="number">0</span>,<span class="number">90</span>,<span class="number">0</span>)&#125;).<span class="title function_">call</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_view</span>.<span class="property">_ImgC_poker</span>.<span class="title function_">getComponent</span>(<span class="title class_">Sprite</span>).<span class="property">spriteFrame</span> = <span class="variable language_">this</span>.<span class="property">pokerImg</span>.<span class="title function_">getSpriteFrame</span>(<span class="string">&quot;card_2&quot;</span>);</span><br><span class="line">&#125;).<span class="title function_">to</span>(<span class="number">0.5</span>,&#123;<span class="attr">eulerAngles</span>:<span class="keyword">new</span> <span class="title class_">Vec3</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)&#125;).<span class="title function_">start</span>();</span><br></pre></td></tr></table></figure>
<p>这里只需要用到一个精灵节点即可:</p>
<!-- ![](/img/gif/fanpai.gif) -->
<img data-src="https://pic.imgdb.cn/item/64b2bbba1ddac507ccd07d8e.gif" alt="" />
]]></content>
      <categories>
        <category>cocos creator</category>
      </categories>
      <tags>
        <tag>cocos creator</tag>
      </tags>
  </entry>
  <entry>
    <title>cocosCreator实现进度条渐变色</title>
    <url>/6abc538.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>进度条是我们在游戏开发中常用的一个组件，默认情况下，进度条节点的<code>Sprite</code>会根据不同的进度压缩图片，不是我们想要的效果。我们想要实现一个进度条的渐变色。</p>
<p>首先，要美术出一张渐变色的图片。然后去设置进度条的<code>Sprite</code>节点属性，将<code>Sprite</code>属性<code>Type</code>改为<code>FILLED</code>,同时将<code>ProgressBar</code>属性<code>Mode</code>也改为<code>FILLED</code>,同时需要将<code>Total Length</code>的值设置为<code>1</code>。<br>如下图：<br><img data-src="https://pic.imgdb.cn/item/66432bdc0ea9cb14039867bf.png" alt="" /><br>其次，将子节点<code>Bar</code>的<code>Sprite</code>属性<code>Type</code>改为<code>FILLED</code>即可。<br>如下图：<br><img data-src="https://pic.imgdb.cn/item/66432c0a0ea9cb140398a871.png" alt="" /><br>注意：上面需要改属性的地方如果有一个地方没有，就会报错<code>ProgressBar non-FILLED mode only works when barSprite&#39;s Type is non-FILLED!</code>。<br>如下图：<br><img data-src="https://pic.imgdb.cn/item/66432b620ea9cb140397d29e.png" alt="" /></p>
]]></content>
      <categories>
        <category>cocos Creator</category>
      </categories>
      <tags>
        <tag>cocos Creator</tag>
      </tags>
  </entry>
  <entry>
    <title>cocosCreator3.7.2获取Label(标签)尺寸</title>
    <url>/6025db79.html</url>
    <content><![CDATA[<p>要在Cocos Creator中使用TypeScript正确获取修改后的标签（label）尺寸，您需要确保在标签被更新或渲染后再访问标签的尺寸。以下是实现此目的的逐步方法：</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h3 id="修改标签内容"><a href="#修改标签内容" class="headerlink" title="修改标签内容"></a>修改标签内容</h3><h4 id="修改标签的内容"><a href="#修改标签的内容" class="headerlink" title="修改标签的内容"></a>修改标签的内容</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假设 &quot;label&quot; 是您的标签节点</span></span><br><span class="line"><span class="keyword">const</span> labelNode = <span class="variable language_">this</span>.<span class="property">node</span>.<span class="title function_">getChildByName</span>(<span class="string">&quot;LabelNode&quot;</span>); <span class="comment">// 替换为您实际的节点名称</span></span><br><span class="line"><span class="keyword">const</span> labelComponent = labelNode.<span class="title function_">getComponent</span>(cc.<span class="property">Label</span>);</span><br><span class="line">labelComponent.<span class="property">string</span> = <span class="string">&quot;新的标签内容&quot;</span>; <span class="comment">// 修改标签内容</span></span><br></pre></td></tr></table></figure>
<h3 id="等待标签更新"><a href="#等待标签更新" class="headerlink" title="等待标签更新"></a>等待标签更新</h3><p>你可能需要等到下一帧，以确保标签已使用新内容进行更新</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">director.<span class="title function_">getScheduler</span>().<span class="title function_">schedule</span>(<span class="function">() =&gt;</span> &#123;              </span><br><span class="line">   director.<span class="title function_">getScheduler</span>().<span class="title function_">unscheduleAllForTarget</span>(labelComponent);             </span><br><span class="line">   <span class="keyword">let</span> width = labelComponent.<span class="title function_">getComponent</span>(<span class="title class_">UITransform</span>).<span class="property">width</span>;           </span><br><span class="line">   <span class="keyword">let</span> height = labelComponent.<span class="property">node</span>.<span class="title function_">getComponent</span>(<span class="title class_">UITransform</span>).<span class="property">height</span>;             </span><br><span class="line">   labelComponent.<span class="property">node</span>.<span class="title function_">getComponent</span>(<span class="title class_">UITransform</span>).<span class="title function_">setContentSize</span>(width,height);         </span><br><span class="line">   &#125;,labelComponent,<span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>cocos Creator</category>
      </categories>
      <tags>
        <tag>cocos Creator</tag>
      </tags>
  </entry>
  <entry>
    <title>cocosCreator开发中添加广播</title>
    <url>/c2be17de.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h3 id="设计思路："><a href="#设计思路：" class="headerlink" title="设计思路："></a>设计思路：</h3><ol>
<li>客户端与服务器建立一个长链接，用来接收服务器发过来的广播消息</li>
<li>创建一个队列，将接收到的广播消息添加到队列中</li>
<li>建立一个定时器，定期从队列中取出消息，并展示出来</li>
<li>展示方法：创建一个Label，Label为取出来的消息，然后克隆该Label节点，从右往左的进行移动，到移动到指定位置后，删除该节点。</li>
</ol>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> messageQueue = []; <span class="comment">// 创建一个空队列</span></span><br><span class="line"></span><br><span class="line">ws.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> data = event.<span class="property">data</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Received data: &quot;</span> + data);</span><br><span class="line">    messageQueue.<span class="title function_">push</span>(data); <span class="comment">// 将接收到的消息添加到队列中</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动定时器，定期从队列中取出消息并进行处理</span></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (messageQueue.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> data = messageQueue.<span class="title function_">shift</span>(); <span class="comment">// 从队列中取出一条消息</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Processing data: &quot;</span> + data);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_view</span>.<span class="property">_TextC_broadcast</span>.<span class="property">string</span> = data;   <span class="comment">//Label内容设置为从队列中取出来的消息</span></span><br><span class="line">        <span class="keyword">let</span> broadMessage = <span class="title function_">instantiate</span>(<span class="variable language_">this</span>.<span class="property">_view</span>.<span class="property">_TextC_broadcast</span>.<span class="property">node</span>);  <span class="comment">//每次克隆一个Label</span></span><br><span class="line">        <span class="title function_">tween</span>(broadMessage).<span class="title function_">to</span>(broadTime*<span class="number">1.5</span>, &#123; <span class="attr">position</span>: <span class="keyword">new</span> <span class="title class_">Vec3</span>(x, <span class="number">0</span>, <span class="number">0</span>) &#125;).<span class="title function_">call</span>(<span class="function">()=&gt;</span>&#123;  <span class="comment">// 广播文字移动</span></span><br><span class="line">            broadMessage.<span class="title function_">destroy</span>();   <span class="comment">// 移动结束后删除该节点</span></span><br><span class="line">        &#125;).<span class="title function_">start</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="number">1000</span>); <span class="comment">// 每秒处理一条消息</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>cocos Creator</category>
      </categories>
      <tags>
        <tag>cocos Creator</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>cocosCreator打开遇到Error launching app的错误</title>
    <url>/83b0e3e9.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>同事之前安装好了CocosCreator，今天打开工程的时候出现了下面错误：<br><img data-src="https://s1.ax1x.com/2023/07/12/pChSx9s.png" alt="" /></p>
<p>解决方案：<br>直接将所用到的cocosCreator版本卸载后重装即可。</p>
]]></content>
      <categories>
        <category>cocos Creator</category>
      </categories>
      <tags>
        <tag>cocos Creator</tag>
      </tags>
  </entry>
  <entry>
    <title>cocosCreator监听游戏是否置于后台</title>
    <url>/d24f8349.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; game, <span class="title class_">Game</span> &#125; <span class="keyword">from</span> <span class="string">&quot;cc&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">HideOrShow</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="title function_">onLoad</span>(<span class="params"></span>) &#123;</span><br><span class="line">        game.<span class="title function_">on</span>(<span class="title class_">Game</span>.<span class="property">EVENT_HIDE</span>, <span class="variable language_">this</span>.<span class="property">onAppHide</span>, <span class="variable language_">this</span>);</span><br><span class="line">        game.<span class="title function_">on</span>(<span class="title class_">Game</span>.<span class="property">EVENT_SHOW</span>, <span class="variable language_">this</span>.<span class="property">onAppShow</span>, <span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="title function_">onAppHide</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;应用进入后台&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="title function_">onAppShow</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;应用回到前台&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="title function_">onDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">        game.<span class="title function_">off</span>(<span class="title class_">Game</span>.<span class="property">EVENT_HIDE</span>, <span class="variable language_">this</span>.<span class="property">onAppHide</span>, <span class="variable language_">this</span>);</span><br><span class="line">        game.<span class="title function_">off</span>(<span class="title class_">Game</span>.<span class="property">EVENT_SHOW</span>, <span class="variable language_">this</span>.<span class="property">onAppShow</span>, <span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在应用打开的时候调用上面的<code>onLoad</code>函数就可以啦，我们去看看日志吧~<br><img data-src="https://pic.imgdb.cn/item/6643287f0ea9cb1403928192.png" alt="" /></p>
]]></content>
      <categories>
        <category>cocos Creator</category>
      </categories>
      <tags>
        <tag>cocos Creator</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>cocosCreator给几个精灵添加点击事件</title>
    <url>/9b2c87ad.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p><strong>开发环境：</strong> cocos creator 3.7.2<br><strong>开发语言：</strong> TypeScript<br><strong>背景：</strong> 小白开始学习cocosCreator，在一个场景中有6个相同的精灵，自己需要知道按钮、移动的是哪个精灵。<br>自己小白一个，记录自己的方法，如果您有更好更简便的方法，欢迎评论区回复，还望各位大佬多多指教<br><strong>代码：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; _decorator, <span class="title class_">Component</span>, <span class="title class_">Node</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;cc&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> &#123; ccclass, property &#125; = _decorator;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ccclass</span>(<span class="string">&#x27;Drag&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Drag</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="meta">@property</span>(&#123;<span class="attr">type</span>:<span class="title class_">Node</span>&#125;)</span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">DragRoll</span>:<span class="title class_">Node</span>[] =[];  <span class="comment">// 挂载的节点，如下图</span></span><br><span class="line">    <span class="keyword">public</span> <span class="attr">touchNum</span>:<span class="built_in">number</span> = <span class="number">0</span>;  <span class="comment">// 记录点的是哪个精灵</span></span><br><span class="line">    <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">onEnable</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">DragRoll</span>[i].<span class="title function_">on</span>(<span class="title class_">Node</span>.<span class="property">EventType</span>.<span class="property">TOUCH_START</span>,<span class="variable language_">this</span>.<span class="property">_onTouchStart</span>,<span class="variable language_">this</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">DragRoll</span>[i].<span class="title function_">on</span>(<span class="title class_">Node</span>.<span class="property">EventType</span>.<span class="property">TOUCH_MOVE</span>,<span class="variable language_">this</span>.<span class="property">_onTouchMove</span>,<span class="variable language_">this</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">DragRoll</span>[i].<span class="title function_">on</span>(<span class="title class_">Node</span>.<span class="property">EventType</span>.<span class="property">TOUCH_END</span>,<span class="variable language_">this</span>.<span class="property">_onTouchEnd</span>,<span class="variable language_">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">onDisable</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">DragRoll</span>[i].<span class="title function_">on</span>(<span class="title class_">Node</span>.<span class="property">EventType</span>.<span class="property">TOUCH_START</span>,<span class="variable language_">this</span>.<span class="property">_onTouchStart</span>,<span class="variable language_">this</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">DragRoll</span>[i].<span class="title function_">on</span>(<span class="title class_">Node</span>.<span class="property">EventType</span>.<span class="property">TOUCH_MOVE</span>,<span class="variable language_">this</span>.<span class="property">_onTouchMove</span>,<span class="variable language_">this</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">DragRoll</span>[i].<span class="title function_">on</span>(<span class="title class_">Node</span>.<span class="property">EventType</span>.<span class="property">TOUCH_END</span>,<span class="variable language_">this</span>.<span class="property">_onTouchEnd</span>,<span class="variable language_">this</span>);            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">_onTouchStart</span>(<span class="params">touchEvent</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (touchEvent.<span class="property">target</span> == <span class="variable language_">this</span>.<span class="property">DragRoll</span>[i])&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">touchNum</span> = i + <span class="number">1</span>;  <span class="comment">//ts的下标从0开始，所以+1</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;点击了第几个按钮 = &quot;</span>,<span class="variable language_">this</span>.<span class="property">touchNum</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">_onTouchMove</span>(<span class="params">touchEvent</span>)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">_onTouchEnd</span>(<span class="params">touchEvent</span>)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">update</span>(<span class="params">deltaTime: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img data-src="https://s1.ax1x.com/2023/04/10/ppq7zCR.png" style="width:300px;height:200px" alt="" />

]]></content>
      <categories>
        <category>cocos Creator</category>
      </categories>
      <tags>
        <tag>cocos Creator</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>cocosCreator节点添加双击事件</title>
    <url>/c260f47.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>代码：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ccclass, property &#125; = cc.<span class="property">_decorator</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ccclass</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">DoubleClickHandler</span> <span class="keyword">extends</span> <span class="title class_ inherited__">cc.Component</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">lastClickTime</span>: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="attr">doubleClickInterval</span>: <span class="built_in">number</span> = <span class="number">300</span>; <span class="comment">// 两次点击的时间间隔</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">onLoad</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">node</span>.<span class="title function_">on</span>(cc.<span class="property">Node</span>.<span class="property">EventType</span>.<span class="property">TOUCH_END</span>, <span class="variable language_">this</span>.<span class="property">onTouchEnd</span>, <span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">onTouchEnd</span>(<span class="params">event: cc.Event.EventTouch</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> currentTime = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>(); <span class="comment">// 获取点击时的系统时间，时间戳</span></span><br><span class="line">        <span class="keyword">if</span> (currentTime - <span class="variable language_">this</span>.<span class="property">lastClickTime</span> &lt;= <span class="variable language_">this</span>.<span class="property">doubleClickInterval</span>) &#123;</span><br><span class="line">            <span class="comment">// your code</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Double click!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">lastClickTime</span> = currentTime;  <span class="comment">// 记录下点击时的系统时间</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面的代码中，我们创建了一个名为 <code>DoubleClickHandler</code> 的组件，监听节点的<br><code>TOUCH_END </code>事件。当触摸结束时，它会计算两次触摸之间的时间间隔，如果时间间隔小于设定的阈值（<code>doubleClickInterval）</code>，则会执行双击操作。</p>
]]></content>
      <categories>
        <category>cocos Creator</category>
      </categories>
      <tags>
        <tag>cocos Creator</tag>
      </tags>
  </entry>
  <entry>
    <title>cocosCreator解决Chrome浏览器跨域问题</title>
    <url>/3a1a4bc4.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<p>对于前端来说，本地开发很经常会遇到跨域问题。这种问题可以交给服务器去解决，但是有个更简单的方法就是讲浏览器设置为可跨域的。</p>
<p><a href="https://juejin.cn/post/7019171779478290463">参考链接</a></p>
<h2 id="windows平台"><a href="#windows平台" class="headerlink" title="windows平台"></a>windows平台</h2><p>右击打开属性，找到<code>目标</code>字段，并在目标字段后面加上参数：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attr">--disable-web-security</span> <span class="attr">--user-data-dir</span>=D:\ChromeData\MyChromeDevUserData</span><br></pre></td></tr></table></figure>
<p>如下图所示：<br><img data-src="https://s1.ax1x.com/2023/04/13/ppxRCpq.png" style="width:300px;height:500px" alt="" /></p>
<p>再打开Google chrome，如下图则表示Chrome浏览器设置跨域成功（出现红色框框的文字提示，可能是英文）<br><img data-src="https://s1.ax1x.com/2023/04/13/ppxRP10.png" style="width:500px;height:200px" alt="" /></p>
<blockquote>
<p>博主这里设置跨域后，桌面出现了2个google chrome浏览器的快捷方式图标，一个可以跨域，一个不可以跨域</p>
</blockquote>
]]></content>
      <categories>
        <category>cocos Creator</category>
      </categories>
      <tags>
        <tag>cocos Creator</tag>
        <tag>TypeScript</tag>
        <tag>cocos</tag>
      </tags>
  </entry>
  <entry>
    <title>cocosCreator运行python脚本出错</title>
    <url>/adf7652d.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<img data-src="https://s1.ax1x.com/2023/04/12/ppjAScq.png" style="width:600px;height:200px" alt="" />

<p>在cocos creator中运行一个python脚本，出现了上面那个问题。查看python脚本也没有问题，郁闷了好久。<br>这个时候想起来一句话：关机重启解决80%的问题，于是乎重启cocos creator，没想到真的解决了这个问题。<br>复盘了一下，猜测原因：安装 Python3 时, cocos 是打开的状态, 导致安装后的 py 环境变量不生效, 重启编辑器就可以。</p>
]]></content>
      <categories>
        <category>cocos Creator</category>
      </categories>
      <tags>
        <tag>cocos Creator</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>cocoscreator制作圆形进度条</title>
    <url>/e68dac10.html</url>
    <content><![CDATA[<blockquote>
<p>我们在开发过程中经常要用到圆形进度条，例如技能CD</p>
</blockquote>
<p>之前写了一篇<a href="https://lengmo714.top/18736.html">cocos2dx-lua_ProgressTimer创建扇形进度条</a>,这里简单记录下在cocosCreator中如何制作。</p>
<span id="more"></span>

<p>效果图：<br><img data-src="https://pic.imgdb.cn/item/664de6b3d9c307b7e90d6ffc.gif" alt="效果图"></p>
<h3 id="具体方法"><a href="#具体方法" class="headerlink" title="具体方法"></a>具体方法</h3><p>cocosCreator做起来比2dx还是要简单很多，首先给节点添加<code>progress</code>组件</p>
<h4 id="progress设置"><a href="#progress设置" class="headerlink" title="progress设置"></a>progress设置</h4><p>设置<code>Sprite</code>的<code>Fill Type</code>为<code>RADIAL</code>,具体的参数如下图所示。<br><img data-src="https://pic.imgdb.cn/item/664de6b3d9c307b7e90d703c.png" alt="sprite"></p>
<blockquote>
<p>注意，这里的<code>Reverse</code>是用来确定进度条的驱进方向，根据自己的需求选择是否勾选。</p>
</blockquote>
<h4 id="Bar设置"><a href="#Bar设置" class="headerlink" title="Bar设置"></a>Bar设置</h4><p><img data-src="https://pic.imgdb.cn/item/664de6b3d9c307b7e90d7024.png" alt="Bar"><br>只需要设置这几个地方，就把圆形进度条给搞定啦~，赶紧来试试吧</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
      <categories>
        <category>cocos Creator</category>
      </categories>
      <tags>
        <tag>cocos Creator</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言中的用户自定义类型</title>
    <url>/23361.html</url>
    <content><![CDATA[<p>下面这个示例实现了一种很简单的类型，即布尔类型。选用这个示例的只要动机在于它不涉及复杂的算法，便于我们专注于API的问题。不过尽管如此，这个示例本身还是很有用的。当然，我们可以在Lua中用来表示实现布尔数组。但是，在C语言实现中，可以将每个布尔值存储在一个比特中，所使用的内存量不到使用表方法的3%。</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>这个示例需要以下定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BITS_PER_WORD (CHAR_BIT * sizeof(unsigned int))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> I_WORD(i)     ((unsigned int)(i) / BITS_PER_WORD)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> I_BIT(i)	  (1 &lt;&lt; ((unsigned int)(i) % BITS_PER_WORD))</span></span><br></pre></td></tr></table></figure>
<p>BITS_PER_WORD表示一个无符号整型数的位数，宏I_WORD用于根据指定的索引来计算存放相应比特位的字，I_BIT用于计算访问这个字中相应比特位要用的掩码。<br>我们可以使用一下的结构体来表示布尔数组：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BitArray</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> size;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> values[<span class="number">1</span>];</span><br><span class="line">&#125;BitArray;</span><br></pre></td></tr></table></figure>
<p>由于C89标准不允许分配长度为零的数组，所以我们声明数组values的大小为1，仅有一个占位符；等分配数组时，我们再设置数组的实际大小。下面这个表达式可以计算出拥有n个元素的数组大小：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sizeof</span>(BitArray) * I_WORD(n <span class="number">-1</span>) * <span class="keyword">sizeof</span>(<span class="type">unsigned</span> <span class="type">int</span>)</span><br></pre></td></tr></table></figure>
<p>此处n减去1是因为原结构中已经包含了一个元素的空间。</p>
<h2 id="用户数据"><a href="#用户数据" class="headerlink" title="用户数据"></a>用户数据</h2><p>在第一个版本中，我们使用显示的调用来设置和获取值，如下所示：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">array</span>.new(<span class="number">1000</span>)</span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">1000</span> <span class="keyword">do</span></span><br><span class="line">	<span class="built_in">array</span>.<span class="built_in">set</span>(a,i,i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">end</span><br><span class="line">print(<span class="built_in">array</span>.get(a,<span class="number">10</span>))			-- <span class="literal">true</span></span><br><span class="line">print(<span class="built_in">array</span>.get(a,<span class="number">11</span>))			-- fales</span><br><span class="line">paint(<span class="built_in">array</span>.size(a))			-- <span class="number">1000</span></span><br></pre></td></tr></table></figure>
<p>后续我们将介绍如何同时支持像a:get(i)这样的面向对象风格和像a[i]这样的常见语法。<br>在所有版本中，下列函数是一样的，参加示例。</p>
<blockquote>
<p>示例 操作布尔数组</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">newarray</span><span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	<span class="type">int</span> i ;</span><br><span class="line">	<span class="type">size_t</span> nbytes;</span><br><span class="line">	BitArray *a;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> n = (<span class="type">int</span>)luaL_checkinteger(L,<span class="number">1</span>);</span><br><span class="line">	luaL_argcheck(L, n &gt;= <span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;invalid size&quot;</span>);</span><br><span class="line">	nbytes = <span class="keyword">sizeof</span>(BitArray) + I_WORD(n<span class="number">-1</span>)*<span class="keyword">sizeof</span>(<span class="type">unsigned</span> <span class="type">int</span>);</span><br><span class="line">	a = (BitArray *)lua_newuserdata(L,nbytes);</span><br><span class="line">	a -&gt; size = n;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= I_WORD(n<span class="number">-1</span>); i++)</span><br><span class="line">		a -&gt; values[i] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">setarray</span><span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	BitArray *a = (BitArray *)lua_touserdata(L,<span class="number">1</span>);</span><br><span class="line">	<span class="type">int</span> index = (<span class="type">int</span>)luaL_checkinteger(L,<span class="number">2</span>) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	luaL_argcheck(L,a != <span class="literal">NULL</span> , <span class="number">1</span>, <span class="string">&quot;&#x27;array&#x27; expected&quot;</span>);</span><br><span class="line">	luaL_argcheck(L,<span class="number">0</span> &lt;= index &amp;&amp; index &lt; a-&gt;size, <span class="number">2</span> <span class="string">&quot;index out of range&quot;</span>);</span><br><span class="line"></span><br><span class="line">	luaL_checkany(L,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (lua_toboolean(L,<span class="number">3</span>))</span><br><span class="line">		a -&gt; values[I_WORD(index)] |= I_BIT(index);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		a -&gt; values[I_WORD(index)] &amp;= ~I_BIT(index);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">getarray</span> <span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	BitArray *a = (BitArray *)lua_touserdata(L,<span class="number">1</span>);</span><br><span class="line">	<span class="type">int</span> index = (<span class="type">int</span>)luaL_checkinteger(L,<span class="number">2</span>) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	luaL_argcheck(L,a != <span class="literal">NULL</span>, <span class="number">1</span>, <span class="string">&quot;&#x27;array&#x27; expected&quot;</span>);</span><br><span class="line">	luaL_argcheck(L,<span class="number">0</span> &lt;= index &amp;&amp; index &lt;  a-&gt;size , <span class="number">2</span>, <span class="string">&quot;index out of range&quot;</span>);</span><br><span class="line"></span><br><span class="line">	lua_pushboolean(L, a-&gt; values[I_WORD(index)] &amp; I_BIT(index));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面让我们一点一点地分析。<br>我们首先关心的是如何在Lua中表示一个C语言结构体。Lua语言专门为这类任务提供了一个名为用户数据的剧本类型。用户数据为Lua语言提供了可以用来存储任何数据的原始内存区域，没有预定义的操作。<br>函数lua_newuserdata分配一块指定大小的内存，然后将相应的用户数据压栈，并返回该块内存的地址：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">lua_newuserdata</span> <span class="params">(lua_State *L, <span class="type">size_t</span> ,size)</span>;</span><br></pre></td></tr></table></figure>
<p>如果因为一些原因需要用其他方法来分配内存，可以很容易地创建一个指针大小的用户数据并在其中存储一个指向真实内存块的指针。<br>示例中第一个函数newarray使用lua_newuserdata创建新的数组。newarray的代码很简单，它检查了其唯一的参数，以字节为单位计算出数组的大小，创建了一个适当大小的用户数据，初始化用户数据的各个字段并将其返回给Lua。<br>第二函数是setarray，它有三个参数：数组、索引和新的值。setarray假定数组索引像Lua语言中的那样是从1开始的。因为Lua可以将任意值当做布尔类型，所以我们用luaL_checkany检查第三个参数，不过luaL_checkany只能确保该参数有一个值。如果用不符合条件的参数调用了setarray，将会收到一条解释错误的信息，例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">array</span>.<span class="built_in">set</span>(<span class="number">0</span>,<span class="number">11</span>,<span class="number">0</span>)</span><br><span class="line">	-- <span class="built_in">stdin</span>:<span class="number">1</span>:bad argument #<span class="number">1</span> to <span class="string">&#x27;set&#x27;</span> (<span class="string">&#x27;array&#x27;</span> expected)</span><br><span class="line"><span class="built_in">array</span>.<span class="built_in">set</span>(a,<span class="number">1</span>)</span><br><span class="line">	-- <span class="built_in">stdin</span>:<span class="number">1</span>:bad argument #<span class="number">3</span> to <span class="string">&#x27;set&#x27;</span> (value expected)</span><br></pre></td></tr></table></figure>
<p>示例中的最后一个函数是getarray，该函数类似于setarray,用于获取元素。<br>我们还需要定义一个获取数组大小的函数和一些初始化库的额外代码，参见示例：</p>
<blockquote>
<p>示例 布尔数组库的额外代码</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">getsize</span> <span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	BitArray *a = (BitArray *)lua_touserdata(L<span class="number">.1</span>);</span><br><span class="line">	luaL_argcheck(L,a != <span class="literal">NULL</span> , <span class="number">1</span>, <span class="string">&quot;&#x27;array&#x27; expected&quot;</span>);</span><br><span class="line">	lua_pushinteger(L, a -&gt; size);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">luaL_Reg</span> <span class="title">arraylib</span>[] =</span>&#123;</span><br><span class="line">	&#123;<span class="string">&quot;new&quot;</span>,newarray&#125;,</span><br><span class="line">	&#123;<span class="string">&quot;set&quot;</span>,setarray&#125;,</span><br><span class="line">	&#123;<span class="string">&quot;get&quot;</span>,getarray&#125;,</span><br><span class="line">	&#123;<span class="string">&quot;size&quot;</span>,getsize&#125;,</span><br><span class="line">	&#123;<span class="literal">NULL</span>,<span class="literal">NULL</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">luaopen_array</span> <span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	luaL_newlib(L, arraylib);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们再一次使用了辅助库中的luaL_newlib，该函数创建了一张表，并且用数组arraylib指定的”函数名-函数指针”填充了这张表。</p>
<h2 id="元表"><a href="#元表" class="headerlink" title="元表"></a>元表</h2><p>我们当前的额实现有一个重大的漏洞。假设用户泄露一条像array.set(io.stdin,1,false)这样的语句，那么io.stdin的值会是一个带有指向文件流（FILE*）的指针的用户数据，array.set会开心地认为它时一个合法的参数；其后果可能就是内存崩溃。这种行为对于任何一个Lua库而言都是不可接受的。无论你如何使用库，都不应该破坏C语言的数据，也不应该让Lua语言崩溃。<br>要区别不同类型的用户数据，一种常见的方法是为每种类型创建唯一的元表。每次创建用户数据时，用相应的元表进行标记；每当获取用户数据时，检查其是否有正确的元表。由于Lua代码不能改变用户数据的元表，因此不能绕过这些检查。<br>我们还需要有个地方来存储这个新的元表，然后才能用它来创建新的用户数据和检查指定的用户数据是否具有正确的类型。我们之前已经看到过，存储元表有两种方法，即存储在注册表中或者库函数的上值中。在Lua语言中，惯例是将所有新的C原因类型注册到注册表中，用类型名作为索引，以元表作为值。由于注册表中还有其他索引，所以必须谨慎选择类型名以避免冲突。在我们的示例中将使用”LuaBook.array”作为这个新类型的名称。<br>通常，辅助库会提供一些函数来帮忙实现这些内容。我们将使用新的辅助函数包括：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>		<span class="title function_">luaL_newmetatable</span><span class="params">(lua_State *L, <span class="type">const</span> <span class="type">char</span> *tname)</span>;</span><br><span class="line"><span class="type">void</span> 	<span class="title function_">luaL_getmatatable</span><span class="params">(lua_State *L, <span class="type">const</span> <span class="type">char</span> *tname)</span>;</span><br><span class="line"><span class="type">void</span>   *<span class="title function_">luaL_checkudata</span>  <span class="params">(lua_State *L, <span class="type">int</span> index, <span class="type">const</span> <span class="type">char</span> *tname)</span>;</span><br></pre></td></tr></table></figure>
<p>函数luaL_newmetatable会创建一张新表，然后将其压入栈顶，并将该表与注册表中的指定名称关联起来。函数luaL_getmetatable从注册表中获取与tname关联的元表。最后，luaL_checkudata会检查栈中指定位置上的对象是否是于指定名称的元表匹配的用户数据。如果该对象不是用户数数据，或者该用户数据没有正确的元表，luaL_checkudata就会引发错误；否则，luaL_checkudata就返回这个用户数据的地址。<br>现在让我们开始修改前面的代码。第一步是修改打开库的函数，让该函数为数组创建元表：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">luaopen_array</span><span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	luaL_newmetatable(L,<span class="string">&quot;LuaBook.array&quot;</span>);</span><br><span class="line">	luaL_newlib(L,arraylib);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下一步是修改newarray使其能为其新建的所有数组设置这个元表：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">newarray</span> <span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	同前</span><br><span class="line">	luaL_getmatatable(L,<span class="string">&quot;LuaBook.array&quot;</span>);</span><br><span class="line">	lua_setmetatable(L,<span class="number">-2</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>函数lua_setmetatable会从栈中弹出一个表，并将其设置为指定索引上对象的元表。在本例中这个对象就是新建的用户数据。<br>最后，setarray、getarray和getsize必须检查其第一个参数是否是一个有效的数组。为了简化这项任务，我们定义如下的宏：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> checkarray(L) (BitArray *)luaL_checkudata(L,1,<span class="string">&quot;LuaBook.array&quot;</span>)</span></span><br></pre></td></tr></table></figure>
<p>有了这个宏，getsize的定义就很简单了：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">getsize</span> <span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	BitArray *a = checkarray(L);</span><br><span class="line">	lua_pushinteger(L,a-&gt;size);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于setarray和getarray还共享了用来读取和检查它们的第二个参数的代码，所以我们将其通用部分提取出来组成了一个新的辅助函数（getparams）</p>
<blockquote>
<p>示例 setarray&#x2F;getarray的新版本</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">int</span> *<span class="title function_">getparams</span> <span class="params">(lua_State *L, <span class="type">unsigned</span> <span class="type">int</span> *mask)</span>&#123;</span><br><span class="line">	BitArray *a = checkarray(L);</span><br><span class="line">	<span class="type">int</span> index = (<span class="type">int</span>)luaL_checkinteger(L,<span class="number">2</span>) <span class="number">-1</span> ;</span><br><span class="line">	luaL_argcheck(L,<span class="number">0</span> &lt;= index &amp;&amp; index &lt; a-&gt; size, <span class="number">2</span>, <span class="string">&quot;index out of range&quot;</span>);</span><br><span class="line">	*mask = I_BIT(index);</span><br><span class="line">	<span class="keyword">return</span> &amp;a -&gt; values[I_WORD(index)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">setarray</span> <span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> mask;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> *entry = getparams(L,&amp;mask);</span><br><span class="line">	luaL_checkany(L,<span class="number">3</span>);</span><br><span class="line">	<span class="keyword">if</span> (lua_toboolean(L,<span class="number">3</span>))</span><br><span class="line">		*entry |= mask;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		*entry &amp;= ~mask;</span><br><span class="line">		reuturn <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">getarray</span><span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> mask;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> *entry = getparams(L,&amp;mask);</span><br><span class="line">	lua_pushboolean(L,*entry &amp; mask);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在这个新版本中，setarray和getarray都很简单，参见示例。现在，如果调用他们时使用了无效的用户数据，我们将会收到一条相应的错误信息：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">array</span>.get(io.<span class="built_in">stdin</span>,<span class="number">10</span>)</span><br><span class="line">-- bad argument #<span class="number">1</span> to <span class="string">&#x27;get&#x27;</span> (LuaBook.<span class="built_in">array</span> expected, got FILE*)</span><br></pre></td></tr></table></figure>

<h2 id="面向对象访问"><a href="#面向对象访问" class="headerlink" title="面向对象访问"></a>面向对象访问</h2><p>下一步是将这种新类型转换成一个对象，以便用普通的面向对象语法来操作其实例。例如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = array.new(<span class="number">1000</span>)</span><br><span class="line"><span class="built_in">print</span>(a:size())			-- <span class="number">1000</span></span><br><span class="line">a:<span class="built_in">set</span>(<span class="number">10</span>,true)</span><br><span class="line"><span class="built_in">print</span>(a:get(<span class="number">10</span>))		-- true</span><br></pre></td></tr></table></figure>
<p>请注意，a:size()等价于a.size(a)。因此，我们必须让表达式a.size返回函数getsize。此处的关键机制在于元方法__index。对于表而言，Lua会在找不到的指定键时调用这个元方法；而对于用户数据而言，由于用户数据根本没有键，所以Lua在每次访问时都会调用该元方法。<br>假设我们运行了一下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">do </span><br><span class="line">	local metaarry = getmetatable(array.new(<span class="number">1</span>))</span><br><span class="line">	metaarry.__index = metaarry</span><br><span class="line">	metaarry.<span class="built_in">set</span> = array.<span class="built_in">set</span></span><br><span class="line">	metaarry.get = array.get</span><br><span class="line">	metaarry.size = array.sizeo</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>在第一行中，我们创建了一个数组用户获取分配给metaarray的元表（我们无法在Lua中设置用户数据的元表，但是可以获取用户数据的元表）。然后，将metaarray.__index设置为metaarray。当对a.size求值时，因为对象a是一个用户数据，所以Lua在对象a中无法找到键”size”。因此，Lua会尝试通过a的元表的__index字段来获取这个值，而这个字段正好就是metaarray。由于metaarray.size就是array.size，所以a.size(a)就是我们想要的array.size(a)。<br>当然，用C语言也可以达到相同的效果，甚至还可以做得更好：既然数组有自己的操作的对象，那么在表array中也就无需包含这些操作了。我们的库只需导出一个用于创建新数组的函数new就行了，所有的其他操作都变成了对象的方法。C语言代码同样可以直接注册这些方法。<br>操作getsize、getarray和setarray无须做任何改变，唯一需要改变的是注册它们的方式。换而言之，我们必须修改打开库的函数。首先，我们需要两个独立的函数列表，一个用户常规的函数，另一个用户方法。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">luaL_Reg</span> <span class="title">arraylib_f</span>[] =</span> &#123;</span><br><span class="line">	&#123;<span class="string">&quot;new&quot;</span>,newarray&#125;,</span><br><span class="line">	&#123;<span class="literal">NULL</span>,<span class="literal">NULL</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">luaL_Reg</span> <span class="title">arraylib_m</span>[] =</span> &#123;</span><br><span class="line">	&#123;<span class="string">&quot;set&quot;</span>,setarray&#125;,</span><br><span class="line">	&#123;<span class="string">&quot;get&quot;</span>,getarray&#125;,</span><br><span class="line">	&#123;<span class="string">&quot;size&quot;</span>,getsize&#125;,</span><br><span class="line">	&#123;<span class="literal">NULL</span>,<span class="literal">NULL</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>新的打开函数luaopen_array必须创建元表，并把它赋给自己的__index字段，然后在元表中注册所有方法，创建和填充表array:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">luaopen_array</span> <span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	luaL+newetatable(L,<span class="string">&quot;LuaBook.array&quot;</span>);  <span class="comment">// 创建元表</span></span><br><span class="line">	lua_pushvalue(L,<span class="number">-1</span>);   <span class="comment">// 复制元表</span></span><br><span class="line">	lua_setfield(L,<span class="number">-2</span>,<span class="string">&quot;__index&quot;</span>); <span class="comment">// mt.__index = mt</span></span><br><span class="line">	luaL_setfuncs(L,arraylib_m,<span class="number">0</span>);  <span class="comment">// 注册元方法</span></span><br><span class="line">	luaL_newlib(L,arraylib_f);   <span class="comment">// 创建库</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里，我们再次使用了luaL_setfuncs将列表arraylib_m中的函数赋值到栈顶的元表中。然后，调用luaL_newlib创建一张新表，并在该表中注册来自列表arraylib_f的函数。<br>最后，向新类型中新增一个__tostring元方法，这样print(a)就可以打印出”array”以及用括号括起来的数组的大小了。该函数如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">array2string</span><span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	BitArray *a = checkarray(L);</span><br><span class="line">	lua_pushfstring(L.<span class="string">&quot;array(%d)&quot;</span>, a-&gt; size);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用lua_pushfstring格式化字符串，并将其保留在栈顶。我们还需要将array2string添加到列表arraylib_m中，以此将函数加入到数组对象的元表中：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">luaL_Reg</span> <span class="title">arraylib_m</span>[] =</span> &#123;</span><br><span class="line">	&#123;<span class="string">&quot;__tostring&quot;</span>, array2string&#125;,</span><br><span class="line">	other <span class="title function_">methods</span><span class="params">(其他方法)</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="数组访问"><a href="#数组访问" class="headerlink" title="数组访问"></a>数组访问</h2><p>另一种更好的面向对象的表示方法是，使用普通的数组符号来访问数组。只需要简单地使用a[i]就可以替代a:get(i)。对于上面的是示例，由于函数setarray和getarray本身就是按照传递给相应元方法的参数的顺序来接收参数的，所以很容易做到这一点。一种快速的解决方案就是直接在Lua中定义这些元方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">local metaarry = getmetatable(array.new(<span class="number">1</span>))</span><br><span class="line">metaarry.__index = array.get</span><br><span class="line">metaarry.__newindex = array.<span class="built_in">set</span></span><br><span class="line">metaarry.__<span class="built_in">len</span> = array.sizeof</span><br></pre></td></tr></table></figure>
<p>必须在数组原来的实现中运行这段代码，无须修改面向对象的访问。这样，就可以使用标准语法了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = array.new(<span class="number">1000</span>)</span><br><span class="line">a[<span class="number">10</span>] = true 			-- <span class="string">&#x27;setarray&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">10</span>])			-- <span class="string">&#x27;getarray&#x27;</span>		-- true</span><br><span class="line"><span class="built_in">print</span>(<span class="comment">#a)				-- &#x27;getsize&#x27;		-- 1000</span></span><br></pre></td></tr></table></figure>
<p>如果还要更加完美，可以在C语言中注册这些元方法。为此，需要再次修改初始化函数。参见如下示例：</p>
<blockquote>
<p>示例 新的初始化比特数组库的代码</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">luaL_Reg</span> <span class="title">arraylib_f</span>[] =</span> &#123;</span><br><span class="line">	&#123;<span class="string">&quot;new&quot;</span>,newarray&#125;,</span><br><span class="line">	&#123;<span class="literal">NULL</span>,<span class="literal">NULL</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">luaL_Reg</span> <span class="title">arraylib_m</span>[] =</span> &#123;</span><br><span class="line">	&#123;<span class="string">&quot;__newindex&quot;</span>,setarray&#125;,</span><br><span class="line">	&#123;<span class="string">&quot;__index&quot;</span>,getarray&#125;,</span><br><span class="line">	&#123;<span class="string">&quot;__len&quot;</span>,getsize&#125;,</span><br><span class="line">	(<span class="string">&quot;__tostring&quot;</span>,array2string),</span><br><span class="line">	&#123;<span class="literal">NULL</span>,<span class="literal">NULL</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">luaopen_array</span><span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	luaL_newmetatable(L,<span class="string">&quot;LuaBook.array&quot;</span>);</span><br><span class="line">	luaL_setfuncs(L,arraylib_m,<span class="number">0</span>);</span><br><span class="line">	luaL_newlib(L,arraylib_f);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个新版本中，仍然只有一个公有函数new，所有的其他函数都只是特定操作的元方法。</p>
<p>##轻量级用户数据<br>到现在为止，我们使用的用户数据成为完全用户数据。Lua语言还提供了另一种数据，成为轻量级用户数据。<br>轻量级用户数据时一个代表C语言指针的值，即它时一个void*值。因为轻量级用户数据是一个值而不是一个对象，所以无须创建它（就好比我们也不需要创建数组）。要将一个轻量级用户数据放入栈中，可以调用lua_pushlightuserdata:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">lua_pushlightuserdata</span><span class="params">(lua_State *L,<span class="type">void</span> *p)</span>;</span><br></pre></td></tr></table></figure>
<p>尽管名字差不多，但实际上轻量级用户数据和完全用户数据之间区别很大。轻量级用户数据不是缓冲区，而只是一个指针，它们也没有元表。与数值一样，轻量级用户数据不受垃圾收集器的管理。<br>有时，人们会将轻量级用户数据当做完全用户数据的一种廉价替代物来使用，但这种用法并不普遍。首先，轻量级用户数数据没有元表，因此没有办法得知其类型。其次，不要“完全”二字所迷惑，实际上完全用户数据的开销也并不大。对于给定的内存大小，完全用户数据与malloc相比值增加了一点开销。<br>轻量级用户数据的真正用途是相等性判断。由于完全用户数据时一个对象，因此它只和自身相等；然而，一个轻量级用户数据表示的是一个C语言指针的值。因此，它与所有表示相同指针的轻量级用户数据相等。因此，我们可以使用轻量级用户数据在Lua语言中查找C语言对象。<br>我们已经见到过轻量级用户数据的一种典型用法，即在注册表中被用作键。在这种情况下，轻量级用户数据的相等性是至关重要的。每次使用lua_pushlightuserdata压入相同的地址时，我们都会得到相同的Lua值，也就是注册表中相同的元素。<br>Lua语言中另一种典型的场景是把Lua语言对象当做对应的C语言对象的代理。例如：输入&#x2F;输出库使用Lua中的用户数据来表示C语言的流。当操作时从Lua语言到C语言时，从Lua对象到C对象的映射很简单。还是以输入&#x2F;输出库为例，每个Lua语言流会保存指向其相应C语言流的指针。不过，当操作时从C语言到Lua语言时，这种映射就可能比较棘手。例如，假设在输入&#x2F;输出系统中有某些回调函数（例如，那些告诉我们还有多少数据需要被读取的函数），回调函数接收它要操作的C语言流，那么如何从中得到其相应的Lua对象呢？由于C语言流是由C语言标准库定义的而不是我们定义的，因此无法在C语言流中存储任何东西。<br>轻量级用户数据为这种映射提供了一种好的解决方案。我们可以保存一张表，其中键是带有流地址的轻量级用户数据，值是Lua中表示流的完全用户数据。在回调函数中，一旦有了流地址，就可以将其作为轻量级用户数据，把它当做这张表的索引来获取对应的Lua对象（这张表很可能得事弱引用的；否则，这些完全用户数据可能永远不会被作为垃圾回收）。</p>
]]></content>
      <tags>
        <tag>C</tag>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>Could not reat source map for chrome-error://chromewebdata/:Unexpected 503 response from chrome-error://chromewebdata/neterror, rollup.js.map:Unsupported protocol &quot;chrome-error&quot;</title>
    <url>/c7dbb86a.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>今天在使用vsCode调试cocos creator工程的时候，遇到了下面问题<code>Could not reat source map for chrome-error://chromewebdata/:Unexpected 503 response from chrome-error://chromewebdata/neterror, rollup.js.map:Unsupported protocol &quot;chrome-error&quot;</code>，导致浏览器无法正常加载游戏。<br>但是在cocosCreator上点击预览按钮又能正确的打开浏览器预览，不知道是什么情况~</p>
<p>最后，没有办法，关机重启解决了问题。</p>
<p>如果大佬你有好的解决方法，可以评论告诉，我将感激不尽</p>
]]></content>
      <categories>
        <category>cocos Creator</category>
      </categories>
      <tags>
        <tag>cocos Creator</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言大学生考试全面题库</title>
    <url>/27faa6a3.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h3 id="计算A-B的值"><a href="#计算A-B的值" class="headerlink" title="计算A-B的值"></a>计算A-B的值</h3><p><strong>输入描述：</strong></p>
<blockquote>
<p>输入两个整数  a,b<br>输出描述描述：</p>
</blockquote>
<p>输出a-b的结果</p>
<blockquote>
<p>样式输入：7 4<br>样式输出：3</p>
</blockquote>
<span id="more"></span>
<p><strong>源代码：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a-b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h3 id="找出最重的苹果"><a href="#找出最重的苹果" class="headerlink" title="找出最重的苹果"></a>找出最重的苹果</h3><p> <strong>题目描述：</strong></p>
<blockquote>
<p>小明有n个苹果(n&lt;20),每一个苹果都有一定的重量,请找出最重的苹果,并输出该苹果的重量</p>
</blockquote>
<p> <strong>输入描述：</strong></p>
<blockquote>
<p>第一个整数是n,表示苹果的个数,接下来的n个整数是苹果的重量,每个整数之间用空格隔开</p>
</blockquote>
<p> <strong>输出描述描述：</strong></p>
<blockquote>
<p>最重的苹果的重量</p>
</blockquote>
<p><strong>样式输入：</strong>  2 45 93<br><strong>样式输出：</strong> 93<br><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,i,max,a[<span class="number">20</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    max=a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;max)</span><br><span class="line">            max=a[i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,max);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h3 id="汽水瓶"><a href="#汽水瓶" class="headerlink" title="汽水瓶"></a>汽水瓶</h3><p><strong>题目描述：</strong></p>
<blockquote>
<p>有这样一道智力题：“某商店规定：三个空汽水瓶可以换一瓶汽水。小张手上有十个空汽水瓶，她最多可以换多少瓶汽水喝？”答案是5瓶，<br>方法如下：先用9个空瓶子换3瓶汽水，喝掉3瓶满的，喝完以后4个空瓶子，用3个再换一瓶，喝掉这瓶满的，这时候剩2个空瓶子。然后你让老板先借给你一瓶汽水，喝掉这瓶满的，喝完以后用3个空瓶子换一瓶满的还给老板。如果小张手上有n个空汽水瓶，最多可以换多少瓶汽水喝？</p>
</blockquote>
<p><strong>输入描述：</strong></p>
<blockquote>
<p>输入为一个正整数n（1&lt;&#x3D;n&lt;&#x3D;100），表示空汽水瓶个数。</p>
</blockquote>
<p><strong>输出描述描述：</strong></p>
<blockquote>
<p>输出为一个正整数，表示可换汽水的瓶数。</p>
</blockquote>
<p><strong>样式输入：</strong> 10<br><strong>样式输出：</strong> 5<br><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">while</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        sum+=n/<span class="number">3</span>;</span><br><span class="line">        n=n%<span class="number">3</span>+n/<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sum++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h3 id="密码破译"><a href="#密码破译" class="headerlink" title="密码破译"></a>密码破译</h3><p><strong>题目描述：</strong><br>某组织欲破获一个外星人的密码，密码由一定长度的字串组成。此组织拥有一些破译此密码的长度不同的钥匙，若两个钥匙的长度之和恰好为此密码的长度，则此密码被成功破译。现在就请你编程找出能破译此密码的两个钥匙。<br><strong>输入描述：</strong><br>输入第一行为钥匙的个数N（1≤N≤5000）<br>输入第二行为密码的长度<br>以下N行为每个钥匙的长度<br> <strong>输出描述描述：</strong><br>若无法找到破译此密码的钥匙，则输出仅1行0 。若找到两把破译的钥匙，则输出有两行，分别为两把钥匙的编号。若有多种破译方案，则只输出一种即可。<br><strong>样式输入：</strong></p>
<blockquote>
<p>10<br>80<br>27<br>9<br>4<br>73<br>23<br>68<br>12<br>64<br>92<br>24 </p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>6<br>7</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,len,s[<span class="number">100</span>],a=<span class="number">0</span>,b=<span class="number">0</span>,i,j;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;len);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;s[i]);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">            <span class="keyword">if</span>(s[i]+s[j]==len)</span><br><span class="line">            &#123;</span><br><span class="line">                a=i+<span class="number">1</span>;</span><br><span class="line">                b=j+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">if</span>(a!=<span class="number">0</span>&amp;&amp;b!=<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n%d&quot;</span>,a,b);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="最大公约数"><a href="#最大公约数" class="headerlink" title="最大公约数"></a>最大公约数</h3><p><strong>题目描述：</strong><br>输入两个整数a,b(1≤a,b≤100000)，请编写程序求出他们的最大公约数。<br><strong>输入描述：</strong><br>输入两个整数a b，用空格隔开<br><strong>输出描述描述：</strong><br>输出对应a,b的最大公约数<br><strong>样式输入：</strong></p>
<blockquote>
<p>25 10</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>5</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> min,a,b,i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">    min=(a&gt;b)?b:a;</span><br><span class="line">    <span class="keyword">for</span>(i=min;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">        <span class="keyword">if</span>(a%i==<span class="number">0</span>&amp;&amp;b%i==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="字符串比对"><a href="#字符串比对" class="headerlink" title="字符串比对"></a>字符串比对</h3><p><strong>题目描述：</strong><br>有字符串a(长度&lt;&#x3D;100)，b(长度&lt;&#x3D;10)，计算b串在a串中出现的次数。<br><strong>解题思路：</strong><br>1、用gets语句从键盘输入两个字符串赋予a，b字符数组；<br>2、建立两层嵌套循环，外循环至a串结束标志为止，内循环至b串结束标志为止；<br>3、内循环中比对b串与a串的数据，满足条件时计数，否则break；<br>4、所有循环结束后输出计数值。<br><strong>输入描述：</strong><br>输入为两个字符串，第一个字符串长度小于100，第二个字符串长度小于10；<br><strong>输出描述描述：</strong><br>输出为一个正整数；<br><strong>样式输入：</strong></p>
<blockquote>
<p>abcdefghijklmnababcdeabc<br>abc</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>3</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">100</span>],b[<span class="number">10</span>];</span><br><span class="line">    <span class="type">int</span> i,j,len1,len2,s,sum=<span class="number">0</span>,k;</span><br><span class="line">    gets(a);</span><br><span class="line">    gets(b);</span><br><span class="line">    len1=<span class="built_in">strlen</span>(a);</span><br><span class="line">    len2=<span class="built_in">strlen</span>(b);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;(len1-len2+<span class="number">1</span>);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        k=i;</span><br><span class="line">        s=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;len2;j++)</span><br><span class="line">            <span class="keyword">if</span>(b[j]==a[i])</span><br><span class="line">            &#123;</span><br><span class="line">                s++;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        i=k;</span><br><span class="line">        <span class="keyword">if</span>(s==len2)</span><br><span class="line">            sum++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="围圈报数"><a href="#围圈报数" class="headerlink" title="围圈报数"></a>围圈报数</h3><p><strong>题目描述：</strong><br>有n（n&lt;&#x3D;100）围成一圈，顺序排号（从1排到n）。<br>从第一个人开始报数（从1报到m（m&lt;&#x3D;9))，凡报到m的人退出圈子，问最后留下的是原来第几号的那位？<br><strong>解题思路：</strong><br>1、定义一个长度为100数组a，初始化为0；<br>2、接收键盘输入值n，m，数组a的前n-1个元素赋值为1~n；<br>3、建立两层嵌套循环，外循环至退出人数为n-1为止，<br>内循环中从0循环至n，将a数组中非0的数据逢m置零，同时记录退出人数；<br>4、循环全部结束后输出最后留下的一个a数组的非零元素的值。<br><strong>输入描述：</strong><br>输入为两个正整数，第一个&lt;&#x3D;100，第二个&lt;&#x3D;9；<br><strong>输出描述描述：</strong><br>输出为一个正整数；<br><strong>样式输入：</strong></p>
<blockquote>
<p>100 3</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>91</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">100</span>];</span><br><span class="line">    <span class="type">int</span> n,m,i,sum=<span class="number">0</span>,k=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        a[i]=i+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(sum&gt;=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            <span class="keyword">if</span>(a[i]!=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                k++;</span><br><span class="line">                <span class="keyword">if</span>(k==m)</span><br><span class="line">                &#123;</span><br><span class="line">                    a[i]=<span class="number">0</span>;</span><br><span class="line">                    k=<span class="number">0</span>;</span><br><span class="line">                    sum++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum==n<span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            i=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        <span class="keyword">if</span>(a[i]!=<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="星期几？"><a href="#星期几？" class="headerlink" title="星期几？"></a>星期几？</h3><p> <strong>题目描述：</strong><br>编一个程序，已知今天是星期几，计算出n天后是星期几。要求使用枚举变量。<br>提示：枚举变量的赋值只能用枚举常量来表示，但是枚举常量均有一个整形数代表，可将改整形数存入枚举变量地址以实现外部赋值的目的。<br>如：<code>enum day&#123;Sun,Mon,Tue,Wed,Thu,Fri,Sat&#125; d1;     scanf(&quot;%d&quot;,&amp;d1);</code><br>当键盘输入1时，相当于将d1赋值为Mon，即d1&#x3D;Mon<br>枚举变量的输出，只能输出其代表的整形数，如需输出其对应的枚举常量，可借助字符串数组的方式处理；<br>如：<code>char *p[]=&#123;“Sun”,“Mon”,“Tue”,&quot;Wed&quot;,&quot;Thu&quot;,&quot;Fri&quot;,&quot;Sat&quot;&#125;;     printf(&quot;%s&quot;,*(p+2));</code><br>其输出结果为：Tue<br><strong>输入描述：</strong><br>输入为两个正整数，第一个数n(n&lt;&#x3D;6)表示今天是星期几，第二个数m(m&lt;&#x3D;1000)，表示求m天后是星期几；<br> <strong>输出描述描述：</strong><br>输出为一个长度为3的字符串，表示星期几的名称；<br> <strong>样式输入：</strong></p>
<blockquote>
<p>1 4</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>Fri</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> m;</span><br><span class="line">    <span class="type">char</span> p[][<span class="number">4</span>]=&#123;<span class="string">&quot;Sun&quot;</span>,<span class="string">&quot;Mon&quot;</span>,<span class="string">&quot;Tue&quot;</span>,<span class="string">&quot;Wed&quot;</span>,<span class="string">&quot;Thu&quot;</span>,<span class="string">&quot;Fri&quot;</span>,<span class="string">&quot;Sat&quot;</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">day</span>&#123;</span>Sun,Mon,Tue,Wed,Thu,Fri,Sat&#125; n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    m%=<span class="number">7</span>;</span><br><span class="line">    n+=m;</span><br><span class="line">    n%=<span class="number">7</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,*(p+n));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="整数各位取奇数"><a href="#整数各位取奇数" class="headerlink" title="整数各位取奇数"></a>整数各位取奇数</h3><p><strong>题目描述：</strong><br>将一个整数中的每一位上为奇数的数依次取出，构成一个新数放在t中。高位仍在高位，低位仍在低位。<br>例如，当s中的数为：87653142时，t中的数为：7531。<br><em>（知识点：控制语句、函数、指针）</em><br><strong>输入描述：</strong><br>输入数据为一个不大于100000000的整形数；<br><strong>输出描述描述：</strong><br>输出数据为一个不大于100000000的整形数；<br><strong>样式输入：</strong></p>
<blockquote>
<p>987654321</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>97531</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> s,i,k=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;s);</span><br><span class="line">    <span class="keyword">while</span>(s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((s%<span class="number">10</span>)%<span class="number">2</span>!=<span class="number">0</span>)</span><br><span class="line">            a[k++]=s%<span class="number">10</span>;</span><br><span class="line">        s/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=k<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="四位反序数"><a href="#四位反序数" class="headerlink" title="四位反序数"></a>四位反序数</h3><p><strong>题目描述：</strong><br>设Ｎ是一个四位数，它的n倍恰好是其反序数（例如：123的反序数是321），<br>编程，输出一个满足条件的Ｎ。（知识点：控制语句）<br><strong>输入描述：</strong><br>输入为一个整形数n(2&lt;&#x3D;n&lt;&#x3D;9)<br><strong>输出描述描述：</strong><br>输出为一个四位数的整形数<br><strong>样式输入：</strong></p>
<blockquote>
<p>9</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>1089</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,i,k,a,b,sum;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1000</span>;i&lt;<span class="number">10000</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum=i;</span><br><span class="line">        b=<span class="number">0</span>;</span><br><span class="line">        k=i*n;</span><br><span class="line">        <span class="keyword">while</span>(sum)</span><br><span class="line">        &#123;</span><br><span class="line">            a=sum%<span class="number">10</span>;</span><br><span class="line">            b=b*<span class="number">10</span>+a;</span><br><span class="line">            sum/=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k==b)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="字母翻译"><a href="#字母翻译" class="headerlink" title="字母翻译"></a>字母翻译</h3><p><strong>题目描述：</strong><br>编程: 求解下列式中各字母代表的数字并输出<br>             PEAR-ARA&#x3D;PEA<br><em>(知识点:控制语句)</em><br> <strong>输入描述：</strong><br>无<br><strong>输出描述描述：</strong><br>输出为四个数字，以空格分开，依次为代表P E A R 的数字；<br><strong>样式输入：</strong></p>
<blockquote>
<p>无</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>8 7 6 5</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> p,e,a,r,x,y,z;</span><br><span class="line">    <span class="keyword">for</span>(p=<span class="number">1</span>;p&lt;=<span class="number">9</span>;p++)</span><br><span class="line">        <span class="keyword">for</span>(e=<span class="number">0</span>;e&lt;=<span class="number">9</span>;e++)</span><br><span class="line">            <span class="keyword">for</span>(a=<span class="number">1</span>;a&lt;=<span class="number">9</span>;a++)</span><br><span class="line">                <span class="keyword">for</span>(r=<span class="number">0</span>;r&lt;=<span class="number">9</span>;r++)</span><br><span class="line">                &#123;</span><br><span class="line">                    x=p*<span class="number">1000</span>+e*<span class="number">100</span>+a*<span class="number">10</span>+r;</span><br><span class="line">                    y=a*<span class="number">100</span>+r*<span class="number">10</span>+a;</span><br><span class="line">                    z=p*<span class="number">100</span>+e*<span class="number">10</span>+a;</span><br><span class="line">                    <span class="keyword">if</span>(x-y==z)</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>,p,e,a,r);</span><br><span class="line">                &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="字符串复制"><a href="#字符串复制" class="headerlink" title="字符串复制"></a>字符串复制</h3><p><strong>题目描述：</strong><br>有一个字符串，包括n个字符。写一个函数，将此字符串从第m个字符开始的全部字符复制成另一个字符串。要求在主函数输入字符串及m值并输出复制结果。<br><em>（知识点：控制语句、字符串、指针）</em><br><strong>输入描述：</strong><br>输入为一个字符串（长度小于80）及一个整形数（小于字符串的实际长度）<br><strong>输出描述描述：</strong><br>输出为一个字符串<br><strong>样式输入：</strong></p>
<blockquote>
<p>abcdefghijklmnopqrst<br>8</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>hijklmnopqrst</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">80</span>];</span><br><span class="line">    <span class="type">char</span> *p;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    gets(a);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    p=a+n<span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="二维字符数组转换"><a href="#二维字符数组转换" class="headerlink" title="二维字符数组转换"></a>二维字符数组转换</h3><p><strong>题目描述：</strong><br>编写函数fun, 函数的功能是: 将M行N列的二维数组中的字符数据, 按列的 顺序依次放到一个字符串中。<br>例如, 二维数组中的数据为:<br>W W W W<br>S S S S<br>H H H H<br>则字符串中的内容应是: WSHWSHWSH。<br><em>（知识点：数组、指针）</em><br><strong>输入描述：</strong><br>输入为一个3行4列二维字符数组数据<br><strong>输出描述描述：</strong><br>输出为一个长度为12的字符数组；<br><strong>样式输入：</strong></p>
<blockquote>
<p>A B C D<br>E F G H<br>I J K L</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>AEIBFJCGKDHL</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">(<span class="type">char</span> a[<span class="number">3</span>][<span class="number">5</span>])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j,k=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> s[<span class="number">13</span>];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,a[j][i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">3</span>][<span class="number">5</span>],*p;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;a[i][j]);</span><br><span class="line">            getchar();</span><br><span class="line">        &#125;</span><br><span class="line">    fun(a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="年龄分组"><a href="#年龄分组" class="headerlink" title="年龄分组"></a>年龄分组</h3><p><strong>题目描述：</strong><br>统计各年龄段的人数。N(N&#x3D;20)个年龄通过键盘输入,并放在age数组中；<br>要求函数把0至9岁年龄段的人数放在d[0]中,把10至19岁年龄段的人数放在d[1]中,<br>把20至29岁年龄段的人数放在d[2]中, 其余依此类推,<br>把100岁 (含100)以上年龄的人数都放在d[10]中。依次输出d[0]至d[10]。<br><strong>输入描述：</strong><br>输入为20个正整数；<br><strong>输出描述描述：</strong><br>输出为11个正整数；<br> <strong>样式输入：</strong></p>
<blockquote>
<p>1 2 11 12 22 23 33 34 44 45 55 56 66 67 68 88 99 100 101 102</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>2 2 2 2 2 2 3 0 1 1 3</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> d[<span class="number">11</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;=<span class="number">0</span> &amp;&amp; a[i]&lt;=<span class="number">9</span>)</span><br><span class="line">            d[<span class="number">0</span>]++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[i]&gt;=<span class="number">10</span> &amp;&amp; a[i]&lt;=<span class="number">19</span>)</span><br><span class="line">            d[<span class="number">1</span>]++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[i]&gt;=<span class="number">20</span> &amp;&amp; a[i]&lt;=<span class="number">29</span>)</span><br><span class="line">            d[<span class="number">2</span>]++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[i]&gt;=<span class="number">30</span> &amp;&amp; a[i]&lt;=<span class="number">39</span>)</span><br><span class="line">            d[<span class="number">3</span>]++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[i]&gt;=<span class="number">40</span> &amp;&amp; a[i]&lt;=<span class="number">49</span>)</span><br><span class="line">            d[<span class="number">4</span>]++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[i]&gt;=<span class="number">50</span> &amp;&amp; a[i]&lt;=<span class="number">59</span>)</span><br><span class="line">            d[<span class="number">5</span>]++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[i]&gt;=<span class="number">60</span> &amp;&amp; a[i]&lt;=<span class="number">69</span>)</span><br><span class="line">            d[<span class="number">6</span>]++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[i]&gt;=<span class="number">70</span> &amp;&amp; a[i]&lt;=<span class="number">79</span>)</span><br><span class="line">            d[<span class="number">7</span>]++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[i]&gt;=<span class="number">80</span> &amp;&amp; a[i]&lt;=<span class="number">89</span>)</span><br><span class="line">            d[<span class="number">8</span>]++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[i]&gt;=<span class="number">90</span> &amp;&amp; a[i]&lt;=<span class="number">99</span>)</span><br><span class="line">            d[<span class="number">9</span>]++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            d[<span class="number">10</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,d[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,d[<span class="number">10</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="分数数列求和"><a href="#分数数列求和" class="headerlink" title="分数数列求和"></a>分数数列求和</h3><p><strong>题目描述：</strong><br>有一个分数数列为：<br>2&#x2F;1,3&#x2F;2,4&#x2F;3,5&#x2F;4……<br>求出这个数列的前n（n&lt;&#x3D;20）项之和，保留小数点后4位。<br><strong>输入描述：</strong><br>输入一个整数n（n&lt;&#x3D;20）；<br> <strong>输出描述描述：</strong><br>输出为一个小数，保留小数点后4位；<br><strong>样式输入：</strong></p>
<blockquote>
<p>5</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>7.2833</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,k;</span><br><span class="line">    <span class="type">double</span> m,n,a[<span class="number">20</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);</span><br><span class="line">    a[<span class="number">0</span>]=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>,m=<span class="number">3</span>,n=<span class="number">2</span>;i&lt;<span class="number">20</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]=a[i<span class="number">-1</span>]+m/n;</span><br><span class="line">        m++;</span><br><span class="line">        n++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.4lf&quot;</span>,a[k<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="杨辉三角形"><a href="#杨辉三角形" class="headerlink" title="杨辉三角形"></a>杨辉三角形</h3><p><strong>题目描述：</strong><br>输出n行杨辉三角形，如下：<br>1<br>1 1<br>1 2 1<br>1 3 3 1<br>1 4 6 4 1<br>1 5 10 10 5 1<br>……………………<br><strong>输入描述：</strong><br>输入为一个正整数n&lt;n&lt;&#x3D;10)；<br><strong>输出描述描述：</strong><br>输出为n行杨辉三角形；<br><strong>样式输入：</strong></p>
<blockquote>
<p>3</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>1<br>1 1<br>1 2 1</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line">    <span class="type">int</span> i,j,n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">if</span>(n&gt;<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[i][<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;i;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                a[i][j]=a[i<span class="number">-1</span>][j<span class="number">-1</span>]+a[i<span class="number">-1</span>][j];</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>,a[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                a[i][i]=<span class="number">1</span>;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>,a[i][i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">            a[n<span class="number">-1</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[n<span class="number">-1</span>][<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;n<span class="number">-1</span>;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                a[n<span class="number">-1</span>][j]=a[n<span class="number">-2</span>][j<span class="number">-1</span>]+a[n<span class="number">-2</span>][j];</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[n<span class="number">-1</span>][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            a[n<span class="number">-1</span>][n<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[n<span class="number">-1</span>][n<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="鞍点"><a href="#鞍点" class="headerlink" title="鞍点"></a>鞍点</h3><p><strong>题目描述：</strong><br>找出一个二维数组中的鞍点，即该位置上的元素在该行上最大、在该列上最小。也可能没有鞍点。<br><strong>输入描述：</strong><br>输入一个3行3列的二维整形数组；<br><strong>输出描述描述：</strong><br>如果鞍点存在，输出其坐标；否则输出-1；如：鞍点位于第一行第三列，则输出1 3；<br><strong>样式输入：</strong></p>
<blockquote>
<p>1 2 3<br>4 5 6<br>7 8 9</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>1 3</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">3</span>][<span class="number">3</span>],i,j,max,min,k1,k2,k,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i][j]);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        max=a[i][<span class="number">0</span>];</span><br><span class="line">        k1=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;<span class="number">3</span>;j++)</span><br><span class="line">            <span class="keyword">if</span>(max&lt;a[i][j])</span><br><span class="line">            &#123;</span><br><span class="line">                max=a[i][j];</span><br><span class="line">                k1=j;</span><br><span class="line">            &#125;</span><br><span class="line">        min=a[<span class="number">0</span>][k1];</span><br><span class="line">        k2=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;<span class="number">3</span>;k++)</span><br><span class="line">            <span class="keyword">if</span>(min&gt;a[k][k1])</span><br><span class="line">            &#123;</span><br><span class="line">                min=a[k][k1];</span><br><span class="line">                k2=k;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>(k2==i)</span><br><span class="line">        &#123;</span><br><span class="line">            sum++;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>,i+<span class="number">1</span>,k1+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum==<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="最长单词"><a href="#最长单词" class="headerlink" title="最长单词"></a>最长单词</h3><p><strong>题目描述：</strong><br>输入一个字符串，将其中最长的单词输出（不含标点符号）；如果最长单词的数量有多个，输出第一个即可；<br><em>注：大写字母的ascii码从<code>65~90</code>，小写字母的ascii码从<code>97~122</code>；</em><br><strong>输入描述：</strong><br>输入为长度小于100的字符串；<br><strong>输出描述描述：</strong><br>输出为长度小于100的字符串；<br><strong>样式输入：</strong></p>
<blockquote>
<p>Helo!I am chinese,nice to meet you!</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>chinese</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j=<span class="number">1</span>,len,len1,len2,k=<span class="number">0</span>,max=<span class="number">0</span>,s[<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">100</span>],b[<span class="number">100</span>],c[<span class="number">100</span>];</span><br><span class="line">    gets(a);</span><br><span class="line">    len=<span class="built_in">strlen</span>(a);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((a[i]&lt;=<span class="string">&#x27;z&#x27;</span> &amp;&amp; a[i]&gt;=<span class="string">&#x27;a&#x27;</span>) || (a[i]&gt;=<span class="string">&#x27;A&#x27;</span> &amp;&amp; a[i]&lt;=<span class="string">&#x27;Z&#x27;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            s[j]++;</span><br><span class="line">            b[k]=a[i];</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            b[k]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(s[j]&gt;max)</span><br><span class="line">            &#123;</span><br><span class="line">                max=s[j];</span><br><span class="line">                <span class="built_in">strcpy</span>(c,b);</span><br><span class="line">            &#125;</span><br><span class="line">            k=<span class="number">0</span>;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    len2=<span class="built_in">strlen</span>(c);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len2;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,c[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="查找不同的木棍"><a href="#查找不同的木棍" class="headerlink" title="查找不同的木棍"></a>查找不同的木棍</h3><p><strong>题目描述：</strong><br>小明的收集了一些木棍,并测量了每个木棍的长度,记录下来.假设小明有奇数根木棍,只有一个木棍找不到跟它一样长的另外一根木棍.请编程找出这个没有相同长度的木棍,输出它的长度.<br><em>知识点: 排序;或者用异或操作 0 异或x&#x3D;x;x异或x&#x3D;0;a异或b异或c&#x3D;a异或(b异或c)&#x3D;(a异或b)异或c&#x3D;a异或c异或b</em><br> <strong>输入描述：</strong><br>输入包含一个奇数n(n&lt;30000),然后是n个整数,表示每个木棍的长度,并保证只有一根木棍找不到跟他一样长的木棍.<br><strong>输出描述描述：</strong><br>输出符合条件的木棍的长度<br><strong>样式输入：</strong></p>
<blockquote>
<p>5 22 76 87 76 22</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>87</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">30000</span>],i,n,j,k,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">if</span>(a[i]==<span class="number">0</span>)</span><br><span class="line">            k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">            <span class="keyword">if</span>(a[i]==a[j])</span><br><span class="line">            &#123;</span><br><span class="line">                a[i]=<span class="number">0</span>;</span><br><span class="line">                a[j]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">if</span>(a[i]!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sum++;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum==<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="最长上升子序列数-闫博钊"><a href="#最长上升子序列数-闫博钊" class="headerlink" title="最长上升子序列数(闫博钊)"></a>最长上升子序列数(闫博钊)</h3><p><strong>题目描述：</strong><br>一个数的序列bi，当<code>b1&lt;b2&lt;...&lt;bS</code>的时候，我们称这个序列是上升的。对于给定的一个序列(a1,a2,…,aN)，我们可以得到一些上升的子序列(ai1,ai2,…,aiK)，这里<code>1&lt;=i1&lt;i2&lt;...&lt;iK&lt;=N</code>。比如，对于序列(1,7,3,5,9,4,8)，有它的一些上升子序列，如(1,7),(3,4,8)等等。这些子序列中最长的长度是4，比如子序列(1,3,5,8)<br>你的任务，就是对于给定的序列，求出最长上升子序列的长度。<br><strong>输入描述：</strong><br>第一行输入序列的长度N(1&lt;&#x3D;N&lt;&#x3D;1000)。第二行给出序列中的N个整数，这些整数的取值范围都在0到10000。<br><strong>输出描述描述：</strong><br>输出最长上升子序列的长度<br><strong>样式输入：</strong></p>
<blockquote>
<p>7<br>1 7 3 5 9 4 8</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>4</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,i,j,max=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">1000</span>],b[<span class="number">1000</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        b[i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">        <span class="keyword">for</span>(j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">            <span class="keyword">if</span>(a[j]&lt;a[i]&amp;&amp;b[j]==b[i])</span><br><span class="line">                b[j]++;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">if</span>(max&lt;b[i])</span><br><span class="line">            max=b[i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,max);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="求反顺序数"><a href="#求反顺序数" class="headerlink" title="求反顺序数"></a>求反顺序数</h3><p><strong>题目描述：</strong><br>输入一个正整数，要求以相反的顺序输出该数。例如输入12345，输出位54321<br> <strong>输入描述：</strong><br>输入一个整数n,<br> <strong>输出描述描述：</strong><br>输出一个反顺序的数<br><strong>样式输入：</strong></p>
<blockquote>
<p>123456</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>654321</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> len,i;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a);</span><br><span class="line">    len=<span class="built_in">strlen</span>(a);</span><br><span class="line">    <span class="keyword">for</span>(i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,a[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="求三个整数的最大公约数"><a href="#求三个整数的最大公约数" class="headerlink" title="求三个整数的最大公约数"></a>求三个整数的最大公约数</h3><p><strong>题目描述：</strong><br>对任意三个整数，求它们的最大公约数<br><strong>输入描述：</strong><br>三个整数a,b,c<br><strong>输出描述描述：</strong><br>a,b,c的最大公约数<br><strong>样式输入：</strong></p>
<blockquote>
<p>4 24 32</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>4</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a,b,c,max,i,k=<span class="number">0</span>,m=<span class="number">0</span>,n=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> A[<span class="number">100</span>]=&#123;<span class="number">1</span>&#125;,B[<span class="number">100</span>],C[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=a;i++)</span><br><span class="line">        <span class="keyword">if</span>(a%i==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            A[k]=i;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">        <span class="keyword">if</span>(b%A[i]==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            B[m]=A[i];</span><br><span class="line">            m++;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">        <span class="keyword">if</span>(c%B[i]==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            C[n]=B[i];</span><br><span class="line">            n++;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,C[n<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="第几天"><a href="#第几天" class="headerlink" title="第几天"></a>第几天</h3><p><strong>题目描述：</strong><br>输入某年某月某日，判断这一天是这一年的第几天？<br>程序分析：以3月5日为例，应该先把前两个月的加起来，然后再加上5天即本年的第几天，<br>特殊情况，闰年且输入月份大于3时需考虑多加一天。<br><strong>输入描述：</strong><br>输入为三个整数，分别表示年、月、日；<br><strong>输出描述描述：</strong><br>输出为一个整数，表示输入的年月日为当年的第几天；<br><strong>样式输入：</strong></p>
<blockquote>
<p>2010 1 1</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>1</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> yy,m,dd,n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;yy,&amp;m,&amp;dd);</span><br><span class="line">    <span class="keyword">if</span>(m==<span class="number">1</span>)</span><br><span class="line">        n=dd;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(m==<span class="number">2</span>)</span><br><span class="line">        n=<span class="number">31</span>+dd;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(m==<span class="number">3</span>)</span><br><span class="line">        n=<span class="number">59</span>+dd;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(m==<span class="number">4</span>)</span><br><span class="line">        n=<span class="number">90</span>+dd;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(m==<span class="number">5</span>)</span><br><span class="line">        n=<span class="number">120</span>+dd;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(m==<span class="number">6</span>)</span><br><span class="line">        n=<span class="number">151</span>+dd;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(m==<span class="number">7</span>)</span><br><span class="line">        n=<span class="number">181</span>+dd;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(m==<span class="number">8</span>)</span><br><span class="line">        n=<span class="number">212</span>+dd;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(m==<span class="number">9</span>)</span><br><span class="line">        n=<span class="number">243</span>+dd;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(m==<span class="number">10</span>)</span><br><span class="line">        n=<span class="number">273</span>+dd;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(m==<span class="number">11</span>)</span><br><span class="line">        n=<span class="number">304</span>+dd;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        n=<span class="number">334</span>+dd;</span><br><span class="line">    <span class="keyword">if</span>(yy%<span class="number">400</span>==<span class="number">0</span> || (yy%<span class="number">4</span>==<span class="number">0</span> &amp;&amp; yy%<span class="number">100</span>!=<span class="number">0</span>))</span><br><span class="line">        <span class="keyword">if</span>(m&gt;<span class="number">2</span>)</span><br><span class="line">            n++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="发放奖金"><a href="#发放奖金" class="headerlink" title="发放奖金"></a>发放奖金</h3><p><strong>题目描述：</strong><br>   某车间按工人加工零件的数量发放奖金，奖金分为五个等级：每月加工零件数N &lt; 100者奖金为10元；100 &lt; &#x3D; N &lt; 110者奖金为30元；110 &lt; &#x3D; N &lt;120 者奖金为50元；120 &lt; &#x3D; N &lt;130 者奖金为70元；N &gt; 130者奖金为80元。 请编程，由键盘输入加工零件数量，显示应发奖金数。<br><strong>输入描述：</strong><br>输入10个加工零件数量,数量小于400.<br><strong>输出描述描述：</strong><br>对每一个加工零件个数,输出应发奖金数,每个奖金数之间用空格隔开<br><strong>样式输入：</strong></p>
<blockquote>
<p>85 85 85 85 85 85 85 85 85 85</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>10 10 10 10 10 10 10 10 10 10</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>],i,b[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;<span class="number">100</span>)</span><br><span class="line">            b[i]=<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[i]&gt;=<span class="number">100</span>&amp;&amp;a[i]&lt;<span class="number">110</span>)</span><br><span class="line">            b[i]=<span class="number">30</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[i]&gt;=<span class="number">110</span>&amp;&amp;a[i]&lt;<span class="number">120</span>)</span><br><span class="line">            b[i]=<span class="number">50</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[i]&gt;=<span class="number">120</span>&amp;&amp;a[i]&lt;<span class="number">130</span>)</span><br><span class="line">            b[i]=<span class="number">70</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            b[i]=<span class="number">80</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,b[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,b[<span class="number">9</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h3><a href="http://lengmo714.top/552db6f9.html" title="" target="">更多题库链接 ,</a>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>Entry name &#39;classes.dex&#39; collided</title>
    <url>/680185d4.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>今天在使用<code>android studio</code>打<code>release</code>包的时候，报错：<code>Entry name &#39;classes.dex&#39; collided</code>；<br>如下图：</p>
<img data-src="https://pic.imgdb.cn/item/662a68b60ea9cb14030fd7e0.png"  alt="" />

<p>解决方法：<br>清除项目缓存，点击菜单栏中的<code>Build</code>，然后选择<code>Clean Project</code>。等清除完后，再次打包就可以了，<br>如下图:<br><img data-src="https://pic.imgdb.cn/item/662a68b70ea9cb14030fd825.png"  alt="" /></p>
]]></content>
  </entry>
  <entry>
    <title>C语言大学生考试全面题库2</title>
    <url>/552db6f9.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h3 id="分割自然数游戏"><a href="#分割自然数游戏" class="headerlink" title="分割自然数游戏"></a>分割自然数游戏</h3><p><strong>题目描述：</strong><br>   周末强强在家做作业，遇到了这样一道题，找出N位（N&lt;8）的自然数中具有下列性质的数：如果将这个数字从中间开始分割成两部分，然后将这两部分相加，所得到的和的平方，等于原来那个数的(奇数的时候，中间的那个数字靠前)。从键盘输入N，直接在屏幕上输出答案。找不到满足要求的数时候，输出＂NO FOUND＂。强强想了许久也没想出来，想请你来帮忙，那么你该如何来帮助他呢？<br>   <span id="more"></span><br><strong>输入描述：</strong><br>输入N<br><strong>输出描述描述：</strong><br>符合条件的N位整数<br><strong>样式输入：</strong></p>
<blockquote>
<p>4</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>2025<br>3025<br>9801</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,i,j,x1,x2,sum=<span class="number">0</span>,min,max,k;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    min=<span class="built_in">pow</span>(<span class="number">10</span>,n<span class="number">-1</span>);<span class="comment">//划分整数段。</span></span><br><span class="line">    max=<span class="built_in">pow</span>(<span class="number">10</span>,n);</span><br><span class="line">    <span class="keyword">if</span>(n!=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=min;i&lt;max;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            k=<span class="built_in">pow</span>(<span class="number">10</span>,n/<span class="number">2</span>);<span class="comment">//划分分割段。</span></span><br><span class="line">            x1=i%k;<span class="comment">//右边的数。</span></span><br><span class="line">            x2=i/k;<span class="comment">//左边的数。</span></span><br><span class="line">            <span class="keyword">if</span>((x1+x2)*(x1+x2)==i)</span><br><span class="line">            &#123;</span><br><span class="line">                a[sum]=i;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum==<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;NO FOUND&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;sum<span class="number">-1</span>;j++)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a[j]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[sum<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;NO FOUND&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="乐乐摘苹果"><a href="#乐乐摘苹果" class="headerlink" title="乐乐摘苹果"></a>乐乐摘苹果</h3><p><strong>题目描述：</strong><br>      一天乐乐去果园玩，发现一棵苹果树上结出10个苹果。乐乐跑去摘苹果。乐乐找到一个30厘米高的板凳，当她不能直接用手摘到苹果的时候，就会踩到板凳上再试试。 现在已知10个苹果到地面的高度，以及乐乐把手伸直的时候能够达到的最大高度，请帮乐乐算一下她能够摘到的苹果的数目。假设她碰到苹果，苹果就会掉下来。<br><strong>输入描述：</strong><br>   输入包括两行数据。第一行包含10个100到200之间（包括100和200）的整数（以厘米为单位）分别表示10个苹果到地面的高度，两个相邻的整数之间用一个空格隔开。<br>第二行只包括一个100到120之间（包含100和120） 的整数（以厘米为单位），表示乐乐把手伸直的时候能够达到的最大高度。<br><strong>输出描述描述：</strong><br>   输出包括一行，这一行只包含一个整数，表示乐乐能够摘到的果的数目。<br><strong>样式输入：</strong></p>
<blockquote>
<p>100 200 150 140 129 134 167 198 200 111<br>110</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>5</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>],i,sum=<span class="number">0</span>,n;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;=n+<span class="number">30</span>)</span><br><span class="line">            sum++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="不高兴的津津"><a href="#不高兴的津津" class="headerlink" title="不高兴的津津"></a>不高兴的津津</h3><p><strong>题目描述：</strong><br>       津津上初中了。妈妈认为津津应该更加用功学习，所以津津除了上学之外，还要参加妈妈为她报名的各科复习班。另外每周妈妈还会送她去学习朗诵、舞蹈和钢琴。但是津津如果一天上课超过八个小时就会不高兴，而且上得越久就会越不高兴。假设津津不会因为其它事不高兴，并且她的不高兴不会持续到第二天。请你帮忙检查一下津津下周的日程安排，看看下周她会不会不高兴；如果会的话，哪天最不高兴。(津津一天上课的时间应分为两部分：在学校的时间和在复习班的时间，这两个时间相加就是津津一天上课的时间。如果这个时间大于八小时津津就会不高兴。)<br><strong>输入描述：</strong><br>        输入包括七行数据，分别表示周一到周日的日程安排。每行包括两个小于10的非负整数，用空格隔开，分别表示津津在学校上课的时间和妈妈安排她上课的时间<br><strong>输出描述：</strong><br>   输出包括一行，这一行只包含一个数字。如果不会不高兴则输出0，如果会则输出最不高兴的是周几（用1, 2, 3, 4, 5, 6, 7分别表示周一，周二，周三，周四，周五，周六，周日）。如果有两天或两天以上不高兴的程度相当，则输出时间最靠前的一天。<br><strong>样式输入：</strong></p>
<blockquote>
<p>5  3<br>6  2<br>7  2<br>5  3<br>5  4<br>0  4<br>0  6</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>3</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    <span class="type">int</span> max,k,i;</span><br><span class="line">    max=<span class="number">8</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">7</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">        <span class="keyword">if</span>(a+b&gt;max)</span><br><span class="line">        &#123;</span><br><span class="line">            max=a+b;</span><br><span class="line">            k=i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(max==<span class="number">8</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,k);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="最低位（二进制的转换）"><a href="#最低位（二进制的转换）" class="headerlink" title="最低位（二进制的转换）"></a>最低位（二进制的转换）</h3><p> <strong>题目描述：</strong><br>   任意一个正整数A（1&lt;&#x3D;A&lt;&#x3D;109），输出它的最低位。例如，A&#x3D;26，我们能写出它的二进制位11010，所以最低位是10，输出为2。再例如，A&#x3D;88，则二进制位1011000，则最低位是1000，输出为8。<br><strong>输入描述：</strong><br>   输入包含一个整数A（1&lt;&#x3D;A&lt;&#x3D;109）<br><strong>输出描述：</strong><br>   对应输入的最低位<br> <strong>样式输入：</strong></p>
<blockquote>
<p>8</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>8</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,i=<span class="number">0</span>,j,z,a[<span class="number">8</span>],b[<span class="number">8</span>],s=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">while</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]=n%<span class="number">2</span>;</span><br><span class="line">        n/=<span class="number">2</span>;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;i;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        b[j]=a[j];</span><br><span class="line">        <span class="keyword">if</span>(a[j]==<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(z=<span class="number">0</span>;z&lt;=j;z++)</span><br><span class="line">        <span class="keyword">if</span>(b[z]!=<span class="number">0</span>)</span><br><span class="line">            s+=<span class="built_in">pow</span>(<span class="number">2</span>,z);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="Fibonacci数列"><a href="#Fibonacci数列" class="headerlink" title="Fibonacci数列"></a>Fibonacci数列</h3><p><strong>题目描述：</strong><br>   Fibonacci数列{0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, …}，可以如下定义：<br>   F0&#x3D;0<br>   F1&#x3D;1<br>   Fi&#x3D;F(i-1)+F(i-2) 对于所有的i大于2<br>   写个程序计算Fibonacci数<br><strong>输入描述：</strong><br>   第一行为需要测试个数T，接着的T行，每一行包含一个数n（0&lt;&#x3D;n&lt;&#x3D;45 ），即你需要计算的F(n)<br><strong>输出描述：</strong><br>   每输入一个数n，输出对应的F(n)<br><strong>样式输入：</strong></p>
<blockquote>
<p>5<br>0<br>3<br>5<br>9<br>20</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>0<br>2<br>5<br>34<br>6765</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,i,k,a[<span class="number">46</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    a[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    a[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=<span class="number">45</span>;i++)</span><br><span class="line">        a[i]=a[i<span class="number">-1</span>]+a[i<span class="number">-2</span>];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[k]);</span><br><span class="line">        <span class="keyword">if</span>(i&lt;n<span class="number">-1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h3 id="蛇形矩阵"><a href="#蛇形矩阵" class="headerlink" title="蛇形矩阵"></a>蛇形矩阵</h3><p><strong>题目描述：</strong><br>   蛇形矩阵是从1开始的自然数依次排列成的一个矩阵上三角形<br><strong>输入描述：</strong><br>   矩阵的大小N（N&lt;20）<br><strong>输出描述描述：</strong><br>   输出一个蛇形矩阵,注意:每行行末没有空格,最后一行没有换行。<br><strong>样式输入：</strong></p>
<blockquote>
<p>5</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>1 3 6 10 15<br>2 5 9 14<br>4 8 13<br>7 12<br>11</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,a[<span class="number">20</span>]=&#123;<span class="number">1</span>&#125;,i,j;</span><br><span class="line">    <span class="type">int</span> N,k,z,s;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N);</span><br><span class="line">    n=N;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>,z=<span class="number">1</span>;i&lt;N<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s=i+<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            a[j]=a[j<span class="number">-1</span>]+s;</span><br><span class="line">            s++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;n<span class="number">-1</span>;k++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[k]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a[n<span class="number">-1</span>]);</span><br><span class="line">        a[<span class="number">0</span>]+=z;</span><br><span class="line">        z++;</span><br><span class="line">        n--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>

<h3 id="猪的安家"><a href="#猪的安家" class="headerlink" title="猪的安家"></a>猪的安家</h3><p><strong>题目描述：</strong><br>   Andy和Mary养了很多猪。他们想要给猪安家。但是Andy没有足够的猪圈，很多猪只能够在一个猪圈安家。举个例子，假如有16头猪，Andy建了3个猪圈，为了保证公平，剩下1头猪就没有地方安家了。Mary生气了，骂Andy没有脑子，并让他重新建立猪圈。这回Andy建造了5个猪圈，但是仍然有1头猪没有地方去，然后Andy又建造了7个猪圈，但是还有2头没有地方去。Andy都快疯了。你对这个事情感兴趣起来，你想通过Andy建造猪圈的过程，知道Andy家至少养了多少头猪。<br><strong>输入描述：</strong><br>   输入包含多组测试数据。每组数据第一行包含一个整数n (n &lt;&#x3D; 10),表示Andy建立猪圈的次数，接下来n行，每行两个整数ai, bi( bi &lt;&#x3D; ai &lt;&#x3D; 1000), 表示Andy建立了ai个猪圈，有bi头猪没有去处。你可以假定(ai, aj) &#x3D; 1<br><strong>输出描述描述：</strong><br>   输出包含一个正整数，即为Andy家至少养猪的数目</p>
<p><strong>样式输入：</strong></p>
<blockquote>
<p>3<br>3 1<br>5 1<br>7 2</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,ai,bi;</span><br><span class="line">    <span class="type">int</span> i,j,k,a[<span class="number">1000</span>],s=<span class="number">1000</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)</span><br><span class="line">        a[i]=i+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;ai,&amp;bi);</span><br><span class="line">        k=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;s;j++)</span><br><span class="line">            <span class="keyword">if</span>(a[j]%ai==bi)</span><br><span class="line">            &#123;</span><br><span class="line">                a[k]=a[j];</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">        s=k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(k!=<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>
<h3 id="最大乘积的整数的拆分"><a href="#最大乘积的整数的拆分" class="headerlink" title="最大乘积的整数的拆分"></a>最大乘积的整数的拆分</h3><p><strong>题目描述：</strong><br>   将一个整数N分解成各不相同的加数的和，使这些加数的乘积最大。N范围为[5,1000]<br><strong>输入描述：</strong><br>   输入一个整数N（5&lt;&#x3D;N&lt;&#x3D;1000)<br><strong>输出描述描述：</strong><br>   能够使得积最大的加数序列<br> <strong>样式输入：</strong></p>
<blockquote>
<p>7</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>3 4</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">3</span>==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        n-=<span class="number">4</span>;</span><br><span class="line">        <span class="keyword">while</span>(n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;3 &quot;</span>);</span><br><span class="line">            n-=<span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(n%<span class="number">3</span>==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        n-=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; 3&quot;</span>);</span><br><span class="line">            n-=<span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        n-=<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">while</span>(n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; 3&quot;</span>);</span><br><span class="line">            n-=<span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>

<h3 id="插队"><a href="#插队" class="headerlink" title="插队"></a>插队</h3><p><strong>题目描述：</strong><br>   编写程序，对一个已经排好序的数组，输入一个元素。将该元素按原来的排序规则将它插入到数组中。<br>   例如原数组为：1 2 6 7 9，输入待插入的元素3，则插入完成后结果为：1 2 3 6 7 9；<br><strong>输入描述：</strong><br>   输入包含两部分，第一部分先输入n，表示数组中元素个数，接着输入n个已经排序好的数，数组最大个数n为20，第二部分为待插入的数据<br><strong>输出描述描述：</strong><br>   新的排序好的数组元素<br><strong>样式输入：</strong></p>
<blockquote>
<p>5<br>1 2 6 7 9<br>3</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>1 2 3 6 7 9</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">101</span>],n,i,j;</span><br><span class="line">    <span class="type">int</span> s,temp;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;s);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;s)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(j=n;j&gt;i;j--)</span><br><span class="line">                a[j]=a[j<span class="number">-1</span>];    </span><br><span class="line">            a[i]=s;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p><strong>2源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,a[<span class="number">21</span>],n,m,k=<span class="number">0</span>,j;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;m)</span><br><span class="line">        &#123;</span><br><span class="line">            k=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(j=n;j&gt;i;j--)</span><br><span class="line">                a[j]=a[j<span class="number">-1</span>];</span><br><span class="line">            a[i]=m;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">0</span>)</span><br><span class="line">        a[n]=m;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="卫星定位"><a href="#卫星定位" class="headerlink" title="卫星定位"></a>卫星定位</h3><p><strong>题目描述：</strong><br>   编写程序，对一个已经排好序的数组，输入一个元素。将该元素在数组中的位置索引出来（折半查找）。<br>   例如原数组为：1 2 6 7 9，输入待查找的元素7，则查找结果为4，如果没有找到该元素，则输出-1；<br><strong>输入描述：</strong><br>   输入包含两部分，第一部分先输入n,表示数组中元素数，接着输入n个已经排序好的数，数组最大个数n为20，第二部分为待查找的数据<br><strong>输出描述描述：</strong><br>   待查找的元素位置<br><strong>样式输入：</strong></p>
<blockquote>
<p>5<br>1 2 6 7 9<br>7</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>4</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,a[<span class="number">20</span>],n,m,k=<span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">if</span>(a[i]==m)</span><br><span class="line">        &#123;</span><br><span class="line">            k=i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,k);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="警察抓贼"><a href="#警察抓贼" class="headerlink" title="警察抓贼"></a>警察抓贼</h3><p><strong>题目描述：</strong><br>   编写程序，将n（n&lt;1000）个元素中的某个特定元素删除。如果该元素出现的次数t为奇数次，则删除第（t+1）&#x2F;2那个，如果出现的次数t为偶数次，则删除第（t&#x2F;2）个<br><strong>输入描述：</strong><br>   输入包含两部分，第一部分先输入n,接着输入n个原数据。第二部分为待删除的元素；<br><strong>输出描述描述：</strong><br>   删除特定元素后的剩余元素<br><strong>样式输入：</strong></p>
<blockquote>
<p>8<br>1 3 4 6 3 5 3 6<br>3</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>1 3 4 6 5 3 6</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,a[<span class="number">1000</span>];</span><br><span class="line">    <span class="type">int</span> s,i,t=<span class="number">0</span>,m,j=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;s);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">if</span>(a[i]==s)</span><br><span class="line">            t++;</span><br><span class="line">    <span class="keyword">if</span>(t%<span class="number">2</span>!=<span class="number">0</span>)</span><br><span class="line">        m=(t+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        m=t/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]!=s)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            j++;</span><br><span class="line">            <span class="keyword">if</span>(j!=m)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a[n<span class="number">-1</span>]!=s)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[n<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        j++;</span><br><span class="line">        <span class="keyword">if</span>(j!=m)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[n<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>
<p><strong>2源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,a[<span class="number">1000</span>];</span><br><span class="line">    <span class="type">int</span> s,i,t=<span class="number">0</span>,m,j=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;s);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">if</span>(a[i]==s)</span><br><span class="line">            t++;</span><br><span class="line">    <span class="keyword">if</span>(t%<span class="number">2</span>!=<span class="number">0</span>)</span><br><span class="line">        m=(t+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        m=t/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]!=s)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            j++;</span><br><span class="line">            <span class="keyword">if</span>(j!=m)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="是非黑白"><a href="#是非黑白" class="headerlink" title="是非黑白"></a>是非黑白</h3><p> <strong>题目描述：</strong><br>   编写函数实现两个等长字符串大小比较。比较规则如下：字符大小按对应的ASCII 码值，字符串大小比较时按对应字符比较，如果比较的两字符不等，则说明存在大小关系，停止比较操作。如果相等，则比较下一次字符，直到最后一个。如果第一个字符串小于第二个字符串则输出第二个字符串，如果大于则输出第一个字符串，如果相等则返回0；<br><strong>输入描述：</strong><br>   输入待比较的两个字符串<br><strong>输出描述描述：</strong><br>字符串比较结果<br><strong>样式输入：</strong></p>
<blockquote>
<p>abcdefg<br>abcdeff</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>abcdefg</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">81</span>],b[<span class="number">81</span>];</span><br><span class="line">    <span class="type">int</span> i,len1,len2,max,s1=<span class="number">0</span>,s2=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,b);</span><br><span class="line">    len1=<span class="built_in">strlen</span>(a);</span><br><span class="line">    len2=<span class="built_in">strlen</span>(b);</span><br><span class="line">    max=(len1&gt;len2)?len1:len2;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len2;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;b[i])</span><br><span class="line">        &#123;</span><br><span class="line">            s2++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;b[i])</span><br><span class="line">        &#123;</span><br><span class="line">            s1++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(s1==<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">puts</span>(a);</span><br><span class="line">    <span class="keyword">if</span>(s2==<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">puts</span>(b);</span><br><span class="line">    <span class="keyword">if</span>(s1==<span class="number">0</span> &amp;&amp; s2==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(len1&gt;len2)</span><br><span class="line">            <span class="built_in">puts</span>(a);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(len1&lt;len2)</span><br><span class="line">            <span class="built_in">puts</span>(b);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>
<h3 id="搭桥"><a href="#搭桥" class="headerlink" title="搭桥"></a>搭桥</h3><p><strong>题目描述：</strong><br>   编写函数将两个升序排列的字符串融合成一个字符串，融合后的字符串仍然是升序排列的。<br><strong>输入描述：</strong><br>   输入两升序字符串<br><strong>输出描述描述：</strong><br>   融合后的字符串<br><strong>样式输入：</strong></p>
<blockquote>
<p>acefi<br>bdfg</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>abcdeffgi</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">162</span>],b[<span class="number">81</span>];</span><br><span class="line">    <span class="type">int</span> i,j,len,temp;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,b);</span><br><span class="line">    <span class="built_in">strcat</span>(a,b);</span><br><span class="line">    len=<span class="built_in">strlen</span>(a);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;len;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;a[j])</span><br><span class="line">            &#123;</span><br><span class="line">                temp=a[i];</span><br><span class="line">                a[i]=a[j];</span><br><span class="line">                a[j]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p><strong>2源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">162</span>],b[<span class="number">81</span>];</span><br><span class="line">    <span class="type">int</span> i,j,len,temp;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,b);</span><br><span class="line">    <span class="built_in">strcat</span>(a,b);</span><br><span class="line">    len=<span class="built_in">strlen</span>(a);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;len;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;a[j])</span><br><span class="line">            &#123;</span><br><span class="line">                temp=a[i];</span><br><span class="line">                a[i]=a[j];</span><br><span class="line">                a[j]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="一清二楚"><a href="#一清二楚" class="headerlink" title="一清二楚"></a>一清二楚</h3><p><strong>题目描述：</strong><br>   输入一字符串，该字符串包含字母、数字和其他字符。统计该字符串中数字、字母和其他字符出现的频率。（注意，其他字符包含空格）<br><strong>输入描述：</strong><br>   一混合字符串，最大长度为200<br>   各类字符出现频率<br><strong>输出描述描述：</strong><br>   各类字符出现频率<br><strong>样式输入：</strong></p>
<blockquote>
<p>abcdefg9999&#x2F;&#x2F;&#x2F;&#x2F;</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>ch:7<br>num:4<br>other:4</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">200</span>];</span><br><span class="line">    <span class="type">int</span> ch=<span class="number">0</span>,num=<span class="number">0</span>,other=<span class="number">0</span>,len,i;</span><br><span class="line">    gets(a);</span><br><span class="line">    len=<span class="built_in">strlen</span>(a);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; a[i]&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">            num++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((a[i]&gt;=<span class="string">&#x27;a&#x27;</span> &amp;&amp; a[i]&lt;=<span class="string">&#x27;z&#x27;</span>) || (a[i]&gt;=<span class="string">&#x27;A&#x27;</span> &amp;&amp; a[i]&lt;=<span class="string">&#x27;Z&#x27;</span>))</span><br><span class="line">            ch++;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            other++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ch:%d\nnum:%d\nother:%d&quot;</span>,ch,num,other);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p><strong>2源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">200</span>];</span><br><span class="line">    <span class="type">int</span> ch=<span class="number">0</span>,num=<span class="number">0</span>,other=<span class="number">0</span>,len,i;</span><br><span class="line">    gets(a);</span><br><span class="line">    len=<span class="built_in">strlen</span>(a);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; a[i]&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">            num++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((a[i]&gt;=<span class="string">&#x27;a&#x27;</span> &amp;&amp; a[i]&lt;=<span class="string">&#x27;z&#x27;</span>) || (a[i]&gt;=<span class="string">&#x27;A&#x27;</span> &amp;&amp; a[i]&lt;=<span class="string">&#x27;Z&#x27;</span>))</span><br><span class="line">            ch++;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            other++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ch:%d\nnum:%d\nother:%d&quot;</span>,ch,num,other);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h3 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h3><p><strong>题目描述：</strong><br>   编写程序实现字符串拷贝，输入两字符串(字符串长度小于100)，将第一个字符串拷贝到第二个字符串中；如果第一个字符串的长度a小于第二个字符串长度b，则第二个字符串的长度也将缩减至第一个的长度a，如果第一个字符串的长度a大于或等于第二个长度b，则只将a的前b个字符拷贝到第二个中；<br> <strong>输入描述：</strong><br>   输入两字符串<br><strong>输出描述描述：</strong><br>   输出第二个字符串，注意：输出不换行。<br><strong>样式输入：</strong></p>
<blockquote>
<p>Abdfeg<br>Bdfad</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>Abdfe</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="number">1</span>: <span class="type">char</span> a[<span class="number">100</span>],b[<span class="number">100</span>];</span><br><span class="line">    <span class="type">int</span> len1,len2,i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s %s&quot;</span>,a,b);</span><br><span class="line">    len1=<span class="built_in">strlen</span>(a);</span><br><span class="line">    len2=<span class="built_in">strlen</span>(b);</span><br><span class="line">    <span class="keyword">if</span>(len1&lt;len2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len1;i++)</span><br><span class="line">            b[i]=a[i];</span><br><span class="line">        b[len1]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len2;i++)</span><br><span class="line">            b[i]=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>
<p><strong>2源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> len1,len2,i;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">100</span>],b[<span class="number">100</span>];</span><br><span class="line">    gets(a);</span><br><span class="line">    gets(b);</span><br><span class="line">    len1=<span class="built_in">strlen</span>(a);</span><br><span class="line">    len2=<span class="built_in">strlen</span>(b);</span><br><span class="line">    <span class="keyword">if</span>(len1&lt;len2)</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len1;i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,a[i]);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len2;i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="四则运算程序"><a href="#四则运算程序" class="headerlink" title="四则运算程序"></a>四则运算程序</h3><p><strong>题目描述：</strong><br>       编制一个完成两个数的四则运算程序(加、减、乘、除)。如：用户输入34+56则输出结果34.00+56.00&#x3D;90.00。要求运算结果保留两位小数，用户输入时一次将两个数和操作符输入。<br>       数字可能是整数，也可能是浮点数。<br>      知识点：格式输出，格式输入，条件语句<br> <strong>输入描述：</strong><br>   包含5组测试数据，每一组占一行，每一行包含数字和字符，运算结果不超过double范围。<br><strong>输出描述描述：</strong><br>   两个数的运算的结果，如果运算符不为加、减、乘、除，则输出Input Error! 每个数字保留两位小数精度。<br><strong>样式输入：</strong></p>
<blockquote>
<p>1+1<br>1-1<br>1*1<br>1&#x2F;1<br>1^1</p>
</blockquote>
<p> <strong>样式输出：</strong></p>
<blockquote>
<p>1.00+1.00&#x3D;2.00<br>1.00-1.00&#x3D;0.00<br>1.00*1.00&#x3D;1.00<br>1.00&#x2F;1.00&#x3D;1.00<br>Input Error!</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> a,b,s;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%lf%c%lf&quot;</span>,&amp;a,&amp;c,&amp;b)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            s=a+b;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.2lf%c%.2lf=%.2lf\n&quot;</span>,a,c,b,s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            s=a-b;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.2lf%c%.2lf=%.2lf\n&quot;</span>,a,c,b,s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            s=a*b;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.2lf%c%.2lf=%.2lf\n&quot;</span>,a,c,b,s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            s=a/b;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.2lf%c%.2lf=%.2lf\n&quot;</span>,a,c,b,s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Input Error!\n&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="落体球反弹"><a href="#落体球反弹" class="headerlink" title="落体球反弹"></a>落体球反弹</h3><p><strong>题目描述：</strong><br>       一球从某个高度（大于等于100米）自由落下，每次落地后反跳回原高度的一半；再落下，求它在第10次落地时，共经过多少米？第10次反弹多高？。（保证6位精度）<br><strong>输入描述：</strong><br>      高度为大于等于100米的实数,范围在double内。<br><strong>输出描述描述：</strong><br>   第10次落地时，经过多少米，第10次反弹高度。<br><strong>样式输入：</strong></p>
<blockquote>
<p>100</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>299.609375<br>0.097656</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">int</span> i=<span class="number">0</span>,k=<span class="number">10</span>;</span><br><span class="line">   <span class="type">double</span> sn,h,sum,n;</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;n);</span><br><span class="line">   sum=n;</span><br><span class="line">   <span class="keyword">while</span>(i&lt;k)</span><br><span class="line">   &#123;</span><br><span class="line">      sn=n/<span class="number">2.0</span>;</span><br><span class="line">      sum+=(<span class="number">2</span>*sn);</span><br><span class="line">      n=sn;</span><br><span class="line">      i++;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%.6lf\n%.6lf&quot;</span>,sum-(<span class="number">2</span>*sn),sn);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h3 id="电话薄管理"><a href="#电话薄管理" class="headerlink" title="电话薄管理"></a>电话薄管理</h3><p><strong>题目描述：</strong><br>        利用结构体类型数组输入五位用户的姓名和电话号码，按姓名的字典顺序排列后（姓名相同保持原位置），输出用户的姓名和电话号码。 已知结构体类型如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> struct user </span><br><span class="line">&#123;  char  name[20]; </span><br><span class="line">   char  num[10]; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>输入描述：</strong><br>   输入姓名字符串和电话号码字符串。<br><strong>输出描述描述：</strong><br>   输出按姓名排序后的姓名字符串和电话号码字符串。每行的最后一个字符后不能有空格.所有输出的最后一行不能有回车<br><strong>样式输入：</strong></p>
<blockquote>
<p>aa<br>12345<br>dd<br>23456<br>cc<br>34567<br>bb<br>21456<br>ee<br>12456</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>aa<br>12345<br>bb<br>21456<br>cc<br>34567<br>dd<br>23456<br>ee<br>12456</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">user</span> </span></span><br><span class="line"><span class="class">&#123;</span>  <span class="type">char</span>  name[<span class="number">20</span>]; </span><br><span class="line">   <span class="type">char</span>  num[<span class="number">10</span>]; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n=<span class="number">5</span>,i=<span class="number">0</span>,j;</span><br><span class="line">    <span class="type">char</span> temp1[<span class="number">20</span>],temp2[<span class="number">10</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">user</span> <span class="title">user</span>[5];</span></span><br><span class="line">    <span class="keyword">while</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,user[i].name);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,user[i].num);</span><br><span class="line">        i++;</span><br><span class="line">        n--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;<span class="number">5</span>;j++)</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">strcmp</span>(user[i].name,user[j].name)&gt;<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">strcpy</span>(temp1,user[i].name);</span><br><span class="line">                <span class="built_in">strcpy</span>(user[i].name,user[j].name);</span><br><span class="line">                <span class="built_in">strcpy</span>(user[j].name,temp1);</span><br><span class="line">                <span class="built_in">strcpy</span>(temp2,user[i].num);</span><br><span class="line">                <span class="built_in">strcpy</span>(user[i].num,user[j].num);</span><br><span class="line">                <span class="built_in">strcpy</span>(user[j].num,temp2);</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n%s\n&quot;</span>,user[i].name,user[i].num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n%s&quot;</span>,user[<span class="number">4</span>].name,user[<span class="number">4</span>].num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="校门外的树"><a href="#校门外的树" class="headerlink" title="校门外的树"></a>校门外的树</h3><p><strong>题目描述：</strong><br>      某校大门外长度为L的马路上有一排树，每两棵相邻的树之间的间隔都是1米。我们可以把马路看成一个数轴，马路的一端在数轴0的位置，另一端在L的位置；数轴上的每个整数点，即0，1，2，……，L，都种有一棵树。由于马路上有一些区域要用来建地铁。这些区域用它们在数轴上的起始点和终止点表示。已知任一区域的起始点和终止点的坐标都是整数，区域之间可能有重合的部分。现在要把这些区域中的树（包括区域端点处的两棵树）移走。你的任务是计算将这些树都移走后，马路上还有多少棵树。<br><strong>输入描述：</strong><br>       输入的第一行有两个整数L（1 &lt;&#x3D; L &lt;&#x3D; 10000）和 M（1 &lt;&#x3D; M &lt;&#x3D; 100），L代表马路的长度，M代表区域的数目，L和M之间用一个空格隔开。接下来的M行每行包含两个不同的整数，用一个空格隔开，表示一个区域的起始点和终止点的坐标。<br><strong>输出描述描述：</strong><br>   输出包括一行，这一行只包含一个整数，表示马路上剩余的树的数目。所有输出的最后一行不能有回车<br><strong>样式输入：</strong></p>
<blockquote>
<p>500 3<br>150 300<br>100 200<br>470 471</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>298</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> L,M,sum,i,min,max;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10000</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;L,&amp;M);</span><br><span class="line">    sum=L+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=L;i++)</span><br><span class="line">        a[i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(M)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;min,&amp;max);</span><br><span class="line">        <span class="keyword">for</span>(i=min;i&lt;=max;i++)</span><br><span class="line">            a[i]=<span class="number">0</span>;</span><br><span class="line">        M--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=L;i++)</span><br><span class="line">        <span class="keyword">if</span>(a[i]==<span class="number">0</span>)</span><br><span class="line">            sum--;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h3 id="歌手比赛"><a href="#歌手比赛" class="headerlink" title="歌手比赛"></a>歌手比赛</h3><p><strong>题目描述：</strong><br>        青年歌手参加歌曲大奖赛，有10个评委对她的进行打分，试编程求这位选手的平均得分（去掉一个最高分和一个最低分）。<br><strong>输入描述：</strong><br>   10个评委的分数,每个分数是一个浮点数.输入数据保证有一个最低分,一个最高分,且最高分,最低分不相同.其它是数据与最低、最高均不相同<br><strong>输出描述描述：</strong><br>   输出歌手的得分,保留一位小数.所有输出的最后一行不能有回车<br><strong>样式输入：</strong></p>
<blockquote>
<p>8.5 9 9.8 6.5 8.7 8.5 9.3 9.6 8.9 8.2</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>8.8</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> a[<span class="number">10</span>],min,max,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;a[i]);</span><br><span class="line">    max=a[<span class="number">0</span>];</span><br><span class="line">    min=a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(max&lt;a[i])</span><br><span class="line">            max=a[i];</span><br><span class="line">        <span class="keyword">if</span>(min&gt;a[i])</span><br><span class="line">            min=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        sum+=a[i];</span><br><span class="line">    sum-=max+min;</span><br><span class="line">    sum=sum/<span class="number">8.0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.1lf&quot;</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="二维数组转置"><a href="#二维数组转置" class="headerlink" title="二维数组转置"></a>二维数组转置</h3><p><strong>题目描述：</strong><br>   编程实现使给定的一个N×M的二维整型数组转置，即行列互换。<br><strong>输入描述：</strong><br>   第一行是两个整数N和M ,接下来N行整数,每行包含M个整数。整数之间用空格隔开<br><strong>输出描述描述：</strong><br>   输出转置后的二维整型数组.每一个数据之间用一个空格隔开,但每行的最后一个数据后不能有空格.所有输出的最后一行不能有回车<br><strong>样式输入：</strong></p>
<blockquote>
<p>2 3<br>1 2 3<br>4 5 6</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>1 4<br>2 5<br>3 6</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">100</span>][<span class="number">100</span>],i,j,n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i][j]);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n<span class="number">-1</span>;j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[j][i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a[n<span class="number">-1</span>][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i][m<span class="number">-1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[n<span class="number">-1</span>][m<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="魔方矩阵"><a href="#魔方矩阵" class="headerlink" title="魔方矩阵"></a>魔方矩阵</h3><p><strong>题目描述：</strong><br>   输入一奇数n（n&lt;20），打印出1-&gt;n<em>n构成的魔方矩阵。<br>      魔方矩阵的行列及对角线的和都相等。<br> <strong>输入描述：</strong><br>   输入一奇数n（n&lt;20）<br>**输出描述描述：**<br>   打印出1-&gt;n</em>n构成的魔方矩阵,每一个数据之间用一个空格隔开,但每行的最后一个数据后不能有空格.所有输出的最后一行不能有回车<br><strong>样式输入：</strong></p>
<blockquote>
<p>3</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>8 1 6<br>3 5 7<br>4 9 2</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">20</span>][<span class="number">20</span>],i,j,n,k=<span class="number">1</span>,m1,m2;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">20</span>;j++)</span><br><span class="line">            a[i][j]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(k!=n*n+<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            a[<span class="number">0</span>][n/<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">            m1=<span class="number">0</span>;</span><br><span class="line">            m2=n/<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(m1==<span class="number">0</span>&amp;&amp;m2!=n<span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[n<span class="number">-1</span>][m2+<span class="number">1</span>]==<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    a[n<span class="number">-1</span>][m2+<span class="number">1</span>]=k;</span><br><span class="line">                    m1=n<span class="number">-1</span>;</span><br><span class="line">                    m2++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    a[m1+<span class="number">1</span>][m2]=k;</span><br><span class="line">                    m1++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(m2==n<span class="number">-1</span>&amp;&amp;m1!=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[m1<span class="number">-1</span>][<span class="number">0</span>]==<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    a[m1<span class="number">-1</span>][<span class="number">0</span>]=k;</span><br><span class="line">                    m1--;</span><br><span class="line">                    m2=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    a[m1+<span class="number">1</span>][m2]=k;</span><br><span class="line">                    m1++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[m1<span class="number">-1</span>][m2+<span class="number">1</span>]==<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    a[m1<span class="number">-1</span>][m2+<span class="number">1</span>]=k;</span><br><span class="line">                    m1--;</span><br><span class="line">                    m2++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    a[m1+<span class="number">1</span>][m2]=k;</span><br><span class="line">                    m1++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n<span class="number">-1</span>;j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i][j]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a[i][n<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n<span class="number">-1</span>;j++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[n<span class="number">-1</span>][j]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[n<span class="number">-1</span>][n<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h3><p><strong>题目描述：</strong><br>   统计个位数为6的n位数，且能被m整除的共有多少个？<br><strong>输入描述：</strong><br>   一个整数n(n&lt;&#x3D;5),表示该整数的位数，一个整数m（1~9）；<br><strong>输出描述描述：</strong><br>   符合条件的数的个数。<br><strong>样式输入：</strong></p>
<blockquote>
<p>2 3</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>3</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> m,n,i,sum=<span class="number">0</span>,min,max;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    min=<span class="built_in">pow</span>(<span class="number">10</span>,n<span class="number">-1</span>);</span><br><span class="line">    max=<span class="built_in">pow</span>(<span class="number">10</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(i=min;i&lt;max;i++)</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">10</span>==<span class="number">6</span>)</span><br><span class="line">            <span class="keyword">if</span>(i%m==<span class="number">0</span>)</span><br><span class="line">                sum++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h3 id="四位数"><a href="#四位数" class="headerlink" title="四位数"></a>四位数</h3><p><strong>题目描述：</strong><br>   计算满足下述条件的四位数的个数：把数字abcd重新组成两个新的两位数：ac及db，<br>   如果新组成的两个十位数ac&gt;db，且ac必须是偶数且能被n（n为1～9的整数）整除，db必须是奇数，同时两个新数的十位数字均不为零。<br><strong>输入描述：</strong><br>   一个1～9的整数。<br> <strong>输出描述描述：</strong><br>   符合条件的数的个数。<br><strong>样式输入：</strong></p>
<blockquote>
<p>5</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>180</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,s,i,x,y,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1000</span>;i&lt;<span class="number">10000</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x=i%<span class="number">10</span>+i/<span class="number">100</span>%<span class="number">10</span>*<span class="number">10</span>;</span><br><span class="line">        y=i/<span class="number">10</span>%<span class="number">10</span>+i/<span class="number">1000</span>%<span class="number">10</span>*<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;y &amp;&amp; y%n==<span class="number">0</span> &amp;&amp; y%<span class="number">2</span>==<span class="number">0</span> &amp;&amp; x%<span class="number">2</span>==<span class="number">1</span> &amp;&amp; x/<span class="number">10</span>!=<span class="number">0</span> &amp;&amp;y/<span class="number">10</span>!=<span class="number">0</span>)</span><br><span class="line">            sum++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="密码翻译"><a href="#密码翻译" class="headerlink" title="密码翻译"></a>密码翻译</h3><p><strong>题目描述：</strong><br>   把某字符串中的所有小写字母改写成该字母的上一个字母，如果是字母a，则改写成字母z，b改写成a，大写字母和其它字符保持不变，并输出翻译后的字符数组。<br><strong>输入描述：</strong><br>   输入要翻译的密码字符串（长度小于100）<br><strong>输出描述描述：</strong><br>   翻译后的字符串。<br><strong>样式输入：</strong></p>
<blockquote>
<p>Adb Bcdza</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>Aca Bbcyz</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> len,i;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">100</span>];</span><br><span class="line">    gets(a);</span><br><span class="line">    len=<span class="built_in">strlen</span>(a);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;a[i]&lt;=<span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]==<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">                a[i]=<span class="string">&#x27;z&#x27;</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                a[i]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,a[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="身高预测"><a href="#身高预测" class="headerlink" title="身高预测"></a>身高预测</h3><p><strong>题目描述：</strong><br>   每个做父母的都关心自己孩子成人后的身高，据有关生理卫生知识与数理统计分析表明，影响小孩成人后身高的因素有遗传、饮食习惯与坚持体育锻炼等。小孩成人后身高与其父母身高和自身性别密切相关。<br>设faHeight为其父身高，moHeight为其母身高，身高预测公式为：<br>     男性成人时身高 &#x3D; (faHeight + moHeight) * 0.54(cm)<br>     女性成人时身高 &#x3D; (faHeight * 0.923 + moHeight) &#x2F; 2(cm)<br>   此外，如果喜爱体育锻炼，那么可增加身高2%，如果有良好的卫生饮食习惯，那么可增加身高1.5%。<br>编程从键盘输入你的性别（用字符型变量存储，输入字符f表示女性，输入字符m表示男性）、父母身高（用实型变量存储，faHeight为其父身高，moHeight为其母身高）、是否喜爱体育锻炼（用字符型变量存储，输入字符y表示喜爱，输入字符n表示不喜爱）、是否有良好的饮食习惯等条件（用字符型变量存储，输入字符y表示喜爱，输入字符n表示不喜爱），利用给定公式和身高预测方法对你的身高进行预测。<br><strong>输入描述：</strong><br>   从键盘输入性别、父母身高、是否喜爱体育锻炼、是否有良好的饮食习惯等条件。<br><strong>输出描述描述：</strong><br>身高（cm）。<br><strong>样式输入：</strong></p>
<blockquote>
<p>f<br>165<br>155<br>y<br>y</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>159.07</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> a,b,c,k=<span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> ch1,ch2,ch3;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;ch1);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;ch2);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;ch3);</span><br><span class="line">    <span class="keyword">if</span>(ch1==<span class="string">&#x27;f&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        c=(a*<span class="number">0.923</span>+b)/<span class="number">2.0</span>;</span><br><span class="line">        <span class="keyword">if</span>(ch2==<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">            c*=<span class="number">1.02</span>;</span><br><span class="line">        <span class="keyword">if</span>(ch3==<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">            c*=<span class="number">1.015</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;        </span><br><span class="line">        c=(a+b)*<span class="number">0.54</span>*k;</span><br><span class="line">        <span class="keyword">if</span>(ch2==<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">            c*=<span class="number">1.02</span>;</span><br><span class="line">        <span class="keyword">if</span>(ch3==<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">            c*=<span class="number">1.015</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2lf&quot;</span>,c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="大奖赛现场统分"><a href="#大奖赛现场统分" class="headerlink" title="大奖赛现场统分"></a>大奖赛现场统分</h3><p><strong>题目描述：</strong><br>   编写一个为某大奖赛现场统分的程序，在评委打分之后，及时通报评分结果。已知某大奖赛有n个选手参赛，m（m&gt;2）个评委依次为参赛的选手评判打分，最高10分，最低0分。<br>   统分规则为：在每个选手所得的m个得分中，去掉一个最高分，去掉一个最低分后，取平均分为该选手的最后得分。<br>   要求编程实现：根据n个选手的最后得分，从高到低排出名次表，以便确定获奖名单。<br><strong>输入描述：</strong><br>   按以下顺序输入数据，数据之间用空格或回车间隔：<br>   选手人数n（不超过40），<br>   评委人数m（不超过20），<br>   第1位选手的编号，<br>   m个评委的打分，<br>   第2个选手的编号，<br>   m个评委的打分<br>   第n位选手的编号，<br>   m个评委的打分。<br><strong>输出描述描述：</strong><br>   分行打印每个选手的名次，编号，最后得分，选手得分保留一位小数。<br><strong>样式输入：</strong></p>
<blockquote>
<p>5<br>5<br>11<br>9.5  9.6  9.7  9.4  9.0<br>12<br>9.0  9.2  9.1  9.3  8.9<br>13<br>9.6  9.7  9.5  9.8  9.4<br>14<br>8.9  8.8  8.7  9.0  8.6<br>15<br>9.0  9.1  8.8  8.9  9.2 </p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>1 13 9.6<br>2 11 9.5<br>3 12 9.1<br>4 15 9.0<br>5 14 8.8  </p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,m,i=<span class="number">0</span>,j,z,a[<span class="number">40</span>];</span><br><span class="line">    <span class="type">int</span> k1,k2;</span><br><span class="line">    <span class="type">double</span> c[<span class="number">40</span>]=&#123;<span class="number">0</span>&#125;,b[<span class="number">40</span>][<span class="number">20</span>],f,min,max,temp;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line">    z=n;</span><br><span class="line">    <span class="keyword">while</span>(z)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;b[i][j]);</span><br><span class="line">        i++;</span><br><span class="line">        z--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        max=b[i][<span class="number">0</span>];</span><br><span class="line">        min=b[i][<span class="number">0</span>];</span><br><span class="line">        k1=<span class="number">0</span>;</span><br><span class="line">        k2=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(b[i][j]&gt;max)</span><br><span class="line">            &#123;</span><br><span class="line">                max=b[i][j];</span><br><span class="line">                k1=j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(b[i][j]&lt;min)</span><br><span class="line">            &#123;</span><br><span class="line">                min=b[i][j];</span><br><span class="line">                k2=j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(z=<span class="number">0</span>;z&lt;m;z++)</span><br><span class="line">            <span class="keyword">if</span>(z!=k1 &amp;&amp; z!=k2)</span><br><span class="line">                c[i]+=b[i][z];</span><br><span class="line">        f=m<span class="number">-2</span>;</span><br><span class="line">        c[i]/=f;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">            <span class="keyword">if</span>(c[i]&lt;c[j])</span><br><span class="line">            &#123;</span><br><span class="line">                temp=c[i];</span><br><span class="line">                c[i]=c[j];</span><br><span class="line">                c[j]=temp;</span><br><span class="line">                temp=a[i];</span><br><span class="line">                a[i]=a[j];</span><br><span class="line">                a[j]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d %.1lf\n&quot;</span>,i+<span class="number">1</span>,a[i],c[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>

<h3 id="礼炮声响次数"><a href="#礼炮声响次数" class="headerlink" title="礼炮声响次数"></a>礼炮声响次数</h3><p> <strong>题目描述：</strong><br>   在庆祝活动中。A，B，C三条军舰要同时开始鸣礼炮各n（n为整数）响。已知A舰每隔5秒放1次，B舰每隔6秒放1次，C舰每隔7秒放1次。假设各炮手对时间的掌握非常准确，请问观众总共可以听到几次礼炮声？<br><strong>输入描述：</strong><br>   一个整数（n）<br><strong>输出描述描述：</strong><br>   一个整数，即听到礼炮声的次数m。<br><strong>样式输入：</strong></p>
<blockquote>
<p>21</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>54</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,sum,i;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">21</span>]=&#123;<span class="number">0</span>&#125;,b[<span class="number">21</span>]=&#123;<span class="number">0</span>&#125;,c[<span class="number">21</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    sum=<span class="number">3</span>*n<span class="number">-2</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">5</span>*(n<span class="number">-1</span>);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">5</span>==<span class="number">0</span>&amp;&amp;i%<span class="number">6</span>==<span class="number">0</span>&amp;&amp;i%<span class="number">7</span>==<span class="number">0</span>)</span><br><span class="line">            sum-=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>((i%<span class="number">5</span>==<span class="number">0</span>&amp;&amp;i%<span class="number">6</span>==<span class="number">0</span>)||(i%<span class="number">5</span>==<span class="number">0</span>&amp;&amp;i%<span class="number">7</span>==<span class="number">0</span>)||(i%<span class="number">6</span>==<span class="number">0</span>&amp;&amp;i%<span class="number">7</span>==<span class="number">0</span>))</span><br><span class="line">            sum--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">5</span>*(n<span class="number">-1</span>)+<span class="number">1</span>;i&lt;=<span class="number">6</span>*(n<span class="number">-1</span>);i++)</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">6</span>==<span class="number">0</span>&amp;&amp;i%<span class="number">7</span>==<span class="number">0</span>)</span><br><span class="line">            sum--;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="产值翻番计算"><a href="#产值翻番计算" class="headerlink" title="产值翻番计算"></a>产值翻番计算</h3><p><strong>题目描述：</strong><br>   假设当年工业产值为100，工业产值的增长率每年为c%，从键盘输入一个c（0&lt;&#x3D;c&lt;&#x3D;30），试求工业产值过多少年可实现翻番（即增加一倍）。<br>   注：后一年的产值是在前一年的基础上增长c%。<br><strong>输入描述：</strong><br>   一个0～30的实数（增长率）。<br><strong>输出描述描述：</strong><br>   实现翻番的年数。<br><strong>样式输入：</strong></p>
<blockquote>
<p>6</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>12</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> c,yy=<span class="number">0</span>;</span><br><span class="line">    <span class="type">float</span> m=<span class="number">100</span>,k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;c);</span><br><span class="line">    k=c/<span class="number">100.0</span>;</span><br><span class="line">    <span class="keyword">while</span>(m&lt;<span class="number">200</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        yy++;</span><br><span class="line">        m+=k*m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,yy);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h3 id="福利彩票（双色球）"><a href="#福利彩票（双色球）" class="headerlink" title="福利彩票（双色球）"></a>福利彩票（双色球）</h3><p><strong>题目描述：</strong><br>      现在买彩票成为一种发财致富的途径，当然中奖的机会还是比较少，特别是大奖。<br>其游戏规则如下： 彩民从1<del>33中选择六个随机的号码，作为红球号码，从1</del>16中选择一个号码作为篮球号码。这样一共有7个号码。<br>中奖规则是：与开奖号码相比，<br>一等奖，红色号码和蓝色号码必须完全一样；<br>二等奖，六个红色号码相同，但蓝色号码不同；<br>三等奖5个红色号码相同（不分先后顺序）和一个蓝色号码相同；<br>四等奖，5个红色号码相同并且蓝色号码不同 或者 4个红色号码相同并且蓝色号码相同；<br>五等奖 4个红色号码相同并且蓝色号码不同 或者 3个红色号码相同并且蓝色号码相同；<br>六等奖 蓝色号码必须相同，红色号码可以为0、1、2个。<br>其他的号码属于没中奖<br><strong>输入描述：</strong><br>   输入第一行是7个整数，表示开奖号码,前面六个是红色球号码，最后一个是篮球号码，接下来的5行，每行包含合法的彩票号码（前面六个是红色球号码，最后一个是篮球号码），每个号码之间用空格隔开。<br><strong>输出描述描述：</strong><br>   对于每一个彩票号码，在一行中 输出其相应的奖励等级，一等奖为1，二等奖为2，三等奖为3，四等奖为4，五等奖为5，六等奖为6，无奖为0。<br><strong>样式输入：</strong></p>
<blockquote>
<p>23 1 8 9 28 16 9<br>2 3 4 5 6 22 9<br>2 3 4 5 6 22 9<br>2 3 4 5 6 22 9<br>2 3 4 5 6 22 9<br>2 3 4 5 6 22 9</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>6<br>6<br>6<br>6<br>6</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">7</span>],b[<span class="number">7</span>],i,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">7</span>;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d %d %d %d&quot;</span>,&amp;b[<span class="number">0</span>],&amp;b[<span class="number">1</span>],&amp;b[<span class="number">2</span>],&amp;b[<span class="number">3</span>],&amp;b[<span class="number">4</span>],&amp;b[<span class="number">5</span>],&amp;b[<span class="number">6</span>])!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line">            <span class="keyword">if</span>(a[i]==b[i])</span><br><span class="line">                sum++;</span><br><span class="line">        <span class="keyword">if</span>(sum==<span class="number">6</span>&amp;&amp;a[<span class="number">6</span>]==b[<span class="number">6</span>])</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;1\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sum==<span class="number">6</span>&amp;&amp;a[<span class="number">6</span>]!=b[<span class="number">6</span>])</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;2\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sum==<span class="number">5</span>&amp;&amp;a[<span class="number">6</span>]==b[<span class="number">6</span>])</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;3\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((sum==<span class="number">5</span>&amp;&amp;a[<span class="number">6</span>]!=b[<span class="number">6</span>])||(sum==<span class="number">4</span>&amp;&amp;a[<span class="number">6</span>]==b[<span class="number">6</span>]))</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;4\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((sum==<span class="number">4</span>&amp;&amp;a[<span class="number">6</span>]!=b[<span class="number">6</span>])||(sum==<span class="number">3</span>&amp;&amp;a[<span class="number">6</span>]==b[<span class="number">6</span>]))</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;5\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[<span class="number">6</span>]==b[<span class="number">6</span>])</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;6\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line">        sum=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="移动数列"><a href="#移动数列" class="headerlink" title="移动数列"></a>移动数列</h3><p><strong>题目描述：</strong><br>   有n个整数，使其前面各数顺序向后移m个位置，最后m个数变成最前面的m个数。<br><strong>输入描述：</strong><br>   输入总数n（0～20的整数），后移位数m（m&lt;n），输入n个整数，间隔以空格。</p>
<p><strong>输出描述：</strong><br>   移动后的数列。<br><strong>样式输入：</strong></p>
<blockquote>
<p>8<br>3<br>1 2 3 4 5 6 7 8</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>6 7 8 1 2 3 4 5</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">20</span>],i,n,m,b[<span class="number">20</span>],k=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=n-m;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        b[k]=a[i];</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=m;i--)</span><br><span class="line">        a[i]=a[i-m];</span><br><span class="line">    <span class="keyword">for</span>(i=k<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,b[i]);</span><br><span class="line">    <span class="keyword">for</span>(i=m;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[n<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="行李托运"><a href="#行李托运" class="headerlink" title="行李托运"></a>行李托运</h3><p><strong>题目描述：</strong><br>       铁路托运行李规定：行李重不超过50公斤的，托运费按每公斤0.15元计费；如超过50公斤，超过部分每公斤按0.25元计费。请编程实现自动计费功能。<br><strong>输入描述：</strong><br>   输入一个整数，表述要托运的行李的重量，单位为公斤<br><strong>输出描述：</strong><br>   托运的行李重量（单位公斤）空格和运费（单位为元，保留2位小数）。<br> <strong>样式输入：</strong></p>
<blockquote>
<p>45</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>45 6.75</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">double</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,n);</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">50</span>)</span><br><span class="line">        sum+=<span class="number">0.15</span>*n;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        sum+=<span class="number">0.15</span>*<span class="number">50</span>+<span class="number">0.25</span>*(n<span class="number">-50</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2lf&quot;</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="分数比较"><a href="#分数比较" class="headerlink" title="分数比较"></a>分数比较</h3><p><strong>题目描述：</strong><br>   请编程实现比较两个分数的大小。（注：进行分数的通分后再比较分子的大小）<br><strong>输入描述：</strong><br>   输入两个分数，格式为分子&#x2F;分母 分子&#x2F;分母，分子，分母均为整数。<br><strong>输出描述描述：</strong><br>   输出比较后的结果。如果等于，则输出分子&#x2F;分母&#x3D;分子&#x2F;分母;如果小于分子&#x2F;分母&lt;分子&#x2F;分母;如果大于，则输出分子&#x2F;分母&gt;分子&#x2F;分母<br><strong>样式输入：</strong></p>
<blockquote>
<p>1&#x2F;2 1&#x2F;3</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>1&#x2F;2&gt;1&#x2F;3</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a,b,c,d,x,y;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d/%d %d/%d&quot;</span>,&amp;a,&amp;b,&amp;c,&amp;d);</span><br><span class="line">    x=a*d;</span><br><span class="line">    y=b*c;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;<span class="number">0</span> || c&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a&gt;<span class="number">0</span> &amp;&amp; c&lt;<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d/%d&gt;%d/%d&quot;</span>,a,b,c,d);</span><br><span class="line">        <span class="keyword">if</span>(a&lt;<span class="number">0</span> &amp;&amp; c&gt;<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d/%d&lt;%d/%d&quot;</span>,a,b,c,d);</span><br><span class="line">        <span class="keyword">if</span>(a&lt;<span class="number">0</span> &amp;&amp; c&lt;<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span>(x&gt;y)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d/%d&lt;%d/%d&quot;</span>,a,b,c,d);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(x==y)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d/%d=%d/%d&quot;</span>,a,b,c,d);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d/%d&gt;%d/%d&quot;</span>,a,b,c,d);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span>(x&gt;y)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d/%d&gt;%d/%d&quot;</span>,a,b,c,d);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x==y)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d/%d=%d/%d&quot;</span>,a,b,c,d);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d/%d&lt;%d/%d&quot;</span>,a,b,c,d);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="求人数"><a href="#求人数" class="headerlink" title="求人数"></a>求人数</h3><p><strong>题目描述：</strong><br>   定义一个函数，功能是计算n个学生的成绩中，高于平均成绩的人数，并作为函数值。用主函数来调用它，统计50个学生成绩中，高于平均成绩的有多少人？<br><strong>输入描述：</strong><br>   输入50个学生的成绩<br><strong>输出描述描述：</strong><br>   输出一个整数表示高于平均成绩的人数</p>
<p><strong>样式输入：</strong></p>
<blockquote>
<p>45 46 47 48 49 50 41 52 53 54<br>55 56 57 58 59 60 61 62 63 64<br>65 66 67 68 69 70 71 72 73 74<br>75 76 77 78 79 80 81 82 83 84<br>85 86 87 88 89 90 91 92 93 94</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>25</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">avg</span><span class="params">(<span class="type">int</span> a[<span class="number">50</span>])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="type">double</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">50</span>;i++)</span><br><span class="line">        k+=a[i];</span><br><span class="line">    k/=<span class="number">50.0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">50</span>;i++)</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;k)</span><br><span class="line">            sum++;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">50</span>],n,i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">50</span>;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    n=avg(a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="e数列"><a href="#e数列" class="headerlink" title="e数列"></a>e数列</h3><p><strong>题目描述：</strong><br> ┌ e(1)&#x3D;e(2)&#x3D;1,<br> └ e(n)&#x3D;(n-1)*e(n-1)+(n-2)*e(n-2)  (n&gt;2) 称为e数列，<br>每一个e(n) (n&#x3D;1,2,…)称为e数。求[1，m]之内：<br>   (1)最大的e数。<br>   (2)e数的数目<br><strong>输入描述：</strong><br>   输入一个整数，表示m的值，m&lt;300000;<br><strong>输出描述描述：</strong><br>   输出两个整数，第一个表示最大的e数，第二个表示e数的数目；<br><strong>样式输入：</strong></p>
<blockquote>
<p>30000</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>16687<br>8</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> e[<span class="number">20</span>]=&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,m,j,i=<span class="number">2</span>,max;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line">    <span class="keyword">while</span>(e[i]&lt;=<span class="number">300000</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        i++;</span><br><span class="line">        e[i]=(i<span class="number">-1</span>)*e[i<span class="number">-1</span>]+(i<span class="number">-2</span>)*e[i<span class="number">-2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;i;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(e[j]&lt;=m)</span><br><span class="line">            max=e[j];</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n%d&quot;</span>,max,j<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h3 id="运算符-前置后置练习-胡宁静"><a href="#运算符-前置后置练习-胡宁静" class="headerlink" title="运算符++前置后置练习(胡宁静)"></a>运算符++前置后置练习(胡宁静)</h3><p><strong>题目描述：</strong><br>   程序部分代码如下，写出一个完整的程序，输出m，n的值。<br>  int i&#x3D;8,j&#x3D;10,m,n;<br>  m&#x3D;++i;<br>  n&#x3D;j++;<br>  m&#x3D;++j;<br>   n&#x3D;i++;<br><strong>输入描述：</strong><br>   无输入<br><strong>输出描述描述：</strong><br>   输出m，n的值（不含回车，m n中间有一空格）<br><strong>样式输入：</strong></p>
<blockquote>
<p>无</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>12 9</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">8</span>,j=<span class="number">10</span>,m,n;</span><br><span class="line">    m=++i;</span><br><span class="line">    n=j++;</span><br><span class="line">    m=++j;</span><br><span class="line">    n=i++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>,m,n);</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="按格式要求显示日期"><a href="#按格式要求显示日期" class="headerlink" title="按格式要求显示日期"></a>按格式要求显示日期</h3><p> <strong>题目描述：</strong><br>   接收用户从键盘输入的日期信息并将其显示出来。其中，输入日期的形式为月&#x2F;日&#x2F;年（即mm&#x2F;dd&#x2F;yyyy），输出日期的形式为年月日（即yyyymmdd）。<br> <strong>输入描述：</strong><br>   以形式为“月&#x2F;日&#x2F;年”（即mm&#x2F;dd&#x2F;yyyy）的格式，输入一个日期。<br><strong>输出描述描述：</strong><br>   以形式为年月日（即yyyymmdd）输出日期。</p>
<p><strong>样式输入：</strong></p>
<blockquote>
<p>2&#x2F;17&#x2F;2010</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>20100217</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> y,m,d;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d/%d/%d&quot;</span>,&amp;m,&amp;d,&amp;y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d%02d%02d&quot;</span>,y,m,d);</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h3 id="求圆的周长和面积"><a href="#求圆的周长和面积" class="headerlink" title="求圆的周长和面积"></a>求圆的周长和面积</h3><p><strong>题目描述：</strong><br>   从键盘输入圆的半径，求该圆的周长和面积。（注： 取3.14）<br><strong>输入描述：</strong><br>   一个实数r。<br><strong>输出描述描述：</strong><br>   圆的周长和面积。<br><strong>样式输入：</strong></p>
<blockquote>
<p>1</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>r&#x3D;1.00,l&#x3D;6.28,s&#x3D;3.14</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.14</span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> r,l,s;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>,&amp;r);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;r=%.2f,l=%.2f,s=%.2f&quot;</span>,r,<span class="number">2</span>*PI*r,PI*r*r);</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h3 id="计算分段函数"><a href="#计算分段函数" class="headerlink" title="计算分段函数"></a>计算分段函数</h3><p><strong>题目描述：</strong><br>计算分段函数<br>y&#x3D;x   (x&lt;0)<br>y&#x3D;0   (x&#x3D;0)<br>y&#x3D;sqrt(x)  (x&gt;0)<br>输入x，打印出y值。<br><strong>输入描述：</strong><br>   一个实数x。<br><strong>输出描述描述：</strong><br>   x的值和分段函数y的值。<br><strong>样式输入：</strong></p>
<blockquote>
<p>0</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>x&#x3D;0.000000,y&#x3D;0.000000</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> x,z;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;x);</span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">0</span>)</span><br><span class="line">        z=<span class="built_in">sqrt</span>(x);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="number">0</span>)</span><br><span class="line">        z=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        z=x;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;x=%lf,y=%lf&quot;</span>,x,z);</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="确定一个数的位数"><a href="#确定一个数的位数" class="headerlink" title="确定一个数的位数"></a>确定一个数的位数</h3><p><strong>题目描述：</strong><br>   编写程序用来确定一个数的位数。如：<br>   输入： 567<br>   输出：The number 567 has 3 digits<br>   假设输入的数最多不超过四位。<br><strong>输入描述：</strong><br>   一个整数n。<br> <strong>输出描述描述：</strong><br>   按指定格式输出这个数的位数。<br><strong>样式输入：</strong></p>
<blockquote>
<p>567</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>The number 567 has 3 digits</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,digits=<span class="number">1</span>,k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    k=n;</span><br><span class="line">    <span class="keyword">if</span>(n&gt;<span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(n/<span class="number">10</span>&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            digits++;</span><br><span class="line">            n/=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The number %d has %d digits&quot;</span>,k,digits);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;The number %d has 1 digit&quot;</span>,k);</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h3 id="显示某个数的英文单词"><a href="#显示某个数的英文单词" class="headerlink" title="显示某个数的英文单词"></a>显示某个数的英文单词</h3><p><strong>题目描述：</strong><br>   用switch语句编写一个程序，要求用户输入一个两位的整数，显示这个数的英文单词。例如：输入45，显示forty-five。注意：对11～19要进行特殊处理。<br><strong>输入描述：</strong><br>   一个两位的整数n。<br><strong>输出描述描述：</strong><br>   这个数的英文单词。<br><strong>样式输入：</strong></p>
<blockquote>
<p>45</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>forty-five</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,s,m;<span class="comment">//s为十位数，m为个位数。</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">switch</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span>:<span class="built_in">printf</span>(<span class="string">&quot;ten&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">11</span>:<span class="built_in">printf</span>(<span class="string">&quot;eleven&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">12</span>:<span class="built_in">printf</span>(<span class="string">&quot;twelve&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">13</span>:<span class="built_in">printf</span>(<span class="string">&quot;thirteen&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">14</span>:<span class="built_in">printf</span>(<span class="string">&quot;fourteen&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">15</span>:<span class="built_in">printf</span>(<span class="string">&quot;fifteen&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">16</span>:<span class="built_in">printf</span>(<span class="string">&quot;sixteen&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">17</span>:<span class="built_in">printf</span>(<span class="string">&quot;seventeen&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">18</span>:<span class="built_in">printf</span>(<span class="string">&quot;eighteen&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">19</span>:<span class="built_in">printf</span>(<span class="string">&quot;nineteen&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s=n/<span class="number">10</span>;</span><br><span class="line">    m=n%<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span>(s&gt;<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span>(s)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:<span class="built_in">printf</span>(<span class="string">&quot;twenty&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:<span class="built_in">printf</span>(<span class="string">&quot;thirty&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:<span class="built_in">printf</span>(<span class="string">&quot;fourty&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:<span class="built_in">printf</span>(<span class="string">&quot;fifty&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:<span class="built_in">printf</span>(<span class="string">&quot;sixty&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:<span class="built_in">printf</span>(<span class="string">&quot;seventy&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:<span class="built_in">printf</span>(<span class="string">&quot;eightty&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:<span class="built_in">printf</span>(<span class="string">&quot;ninety&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">switch</span>(m)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:<span class="built_in">printf</span>(<span class="string">&quot;&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:<span class="built_in">printf</span>(<span class="string">&quot;-one&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:<span class="built_in">printf</span>(<span class="string">&quot;-two&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:<span class="built_in">printf</span>(<span class="string">&quot;-three&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:<span class="built_in">printf</span>(<span class="string">&quot;-four&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:<span class="built_in">printf</span>(<span class="string">&quot;-five&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:<span class="built_in">printf</span>(<span class="string">&quot;-six&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:<span class="built_in">printf</span>(<span class="string">&quot;-seven&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:<span class="built_in">printf</span>(<span class="string">&quot;-eight&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:<span class="built_in">printf</span>(<span class="string">&quot;-nine&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>


<h3 id="找出最大数"><a href="#找出最大数" class="headerlink" title="找出最大数"></a>找出最大数</h3><p> <strong>题目描述：</strong><br>   用户从键盘输入若干个数，当输入0或负数时输出这些数中的最大非负数。注意，输入的数不要求一定是整数。<br><strong>输入描述：</strong><br>   输入若干个数，最后一个为0或负数。<br> <strong>输出描述描述：</strong><br>   最大非负数。<br><strong>样式输入：</strong></p>
<blockquote>
<p>2.3<br>6.3<br>5.4<br>0</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>max&#x3D;6.300000</p>
</blockquote>
<p><strong>代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> max=<span class="number">0</span>,n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">while</span>(n&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(max&lt;n)</span><br><span class="line">            max=n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>,&amp;n);</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;max=%f&quot;</span>,max);</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h3 id="求最简分式"><a href="#求最简分式" class="headerlink" title="求最简分式"></a>求最简分式</h3><p> <strong>题目描述：</strong><br>   用户输入一个分数，要求将其约分，输出最简分式。例如：输入3&#x2F;12，输出1&#x2F;4。提示：为了把分式化简为最简分式，首先求分子和分母的最大公约数，然后分子和分母分别除以最大公约数。<br> <strong>输入描述：</strong><br>   一个分数。<br><strong>输出描述描述：</strong><br>   最简分式。<br><strong>样式输入：</strong></p>
<blockquote>
<p>3&#x2F;12</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>最简分数为1&#x2F;4</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,m,i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d/%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(i=n;i&gt;<span class="number">0</span>;i--)</span><br><span class="line">        <span class="keyword">if</span>(n%i==<span class="number">0</span> &amp;&amp; m%i==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;最简分数为%d/%d&quot;</span>,n/i,m/i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="计算多项式的和"><a href="#计算多项式的和" class="headerlink" title="计算多项式的和"></a>计算多项式的和</h3><p><strong>题目描述：</strong><br>   计算从2～n的自然数中偶数的和，即2+4+6+8+…的值。<br>注意：n可能是偶数，也可能是奇数。<br><strong>输入描述：</strong><br>   一个整数n。<br><strong>输出描述描述：</strong><br>   从2～n的自然数中偶数的和。<br><strong>样式输入：</strong></p>
<blockquote>
<p>100</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>sum&#x3D;2550</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,sum=<span class="number">0</span>,i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">            sum+=i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sum=%d&quot;</span>,sum);</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h3 id="阶乘累加"><a href="#阶乘累加" class="headerlink" title="阶乘累加"></a>阶乘累加</h3><p><strong>题目描述：</strong><br>   计算1！+2！+3！……+n！<br><strong>输入描述：</strong><br>   一个整数n（n&lt;&#x3D;20)。</p>
<p><strong>输出描述描述：</strong><br>   1到n的阶乘累加之和。<br> <strong>样式输入：</strong></p>
<blockquote>
<p>5</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>s&#x3D;153</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,s=<span class="number">0</span>,m,i,j;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>,m=<span class="number">1</span>;j&lt;=i;j++)</span><br><span class="line">            m*=j;</span><br><span class="line">        s+=m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s=%d&quot;</span>,s);</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h3 id="计算e的近似值"><a href="#计算e的近似值" class="headerlink" title="计算e的近似值"></a>计算e的近似值</h3><p> <strong>题目描述：</strong><br>   利用泰勒级数<br>   e&#x3D;1+1&#x2F;1!+1&#x2F;2!+……+1&#x2F;n!,<br>   计算e的近似值。精度要求最后一项的绝对值小于f（如：f&#x3D;1e-5）。<br> <strong>输入描述：</strong><br>   精度。<br> <strong>输出描述描述：</strong><br>   e的近似值，保留6位小数。<br><strong>样式输入：</strong></p>
<blockquote>
<p>1e-5</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>e&#x3D;2.718282</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,m=<span class="number">1</span>,i,k;</span><br><span class="line">    <span class="type">float</span> e=<span class="number">1</span>,s;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>,&amp;s);</span><br><span class="line">    <span class="keyword">for</span>(n=<span class="number">1</span>;;n++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>,k=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            k*=i;</span><br><span class="line">        m=k;</span><br><span class="line">        e+=<span class="number">1.0</span>/m;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">1.0</span>/m&lt;s)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;e=%f&quot;</span>,e);</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>


<h3 id="计算sinx的值"><a href="#计算sinx的值" class="headerlink" title="计算sinx的值"></a>计算sinx的值</h3><p><strong>题目描述：</strong><br>   利用泰勒级数<br>   sinx&#x3D;x-x^3&#x2F;3!+x^5&#x2F;5!-x^7&#x2F;7!+……<br>   计算sinx的值。要求最后一项的绝对值小于1e－5，并统计出此时累加的项数。<br><strong>输入描述：</strong><br>   一个实数x（一个角度的弧度数）<br><strong>输出描述描述：</strong><br>   sinx的值和累加的项数。<br><strong>样式输入：</strong></p>
<blockquote>
<p>1.57</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>sinx&#x3D;1.000000,n&#x3D;6</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n=<span class="number">1</span>,s=<span class="number">3</span>,j,m=<span class="number">1</span>;</span><br><span class="line">    <span class="type">double</span> sinx,x,z,i=<span class="number">3</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;x);</span><br><span class="line">    sinx=x;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>,m=<span class="number">1</span>;j&lt;=s;j++)</span><br><span class="line">            m*=j;</span><br><span class="line">        z=(<span class="built_in">pow</span>(<span class="number">-1</span>,n)*<span class="built_in">pow</span>(x,i))/m;</span><br><span class="line">        sinx+=z;</span><br><span class="line">        n++;</span><br><span class="line">        i+=<span class="number">2</span>;</span><br><span class="line">        s+=<span class="number">2</span>;</span><br><span class="line">    &#125;<span class="keyword">while</span>(<span class="built_in">fabs</span>(z)&gt;=<span class="number">1e-5</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sinx=%lf,n=%d&quot;</span>,sinx,n);</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p><strong>题目描述：</strong><br>   打印n（三位的整数）以内的所有水仙花数。所谓水仙花数是指一个三位的整数，其各位数字的立方和等于该数本身。例如：153是水仙花数，因为153&#x3D;1^3+5^3+3^3。<br><strong>输入描述：</strong><br>   一个整数n。<br><strong>输出描述描述：</strong><br>   符合条件的水仙花数。<br><strong>样式输入：</strong></p>
<blockquote>
<p>400</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>153<br>   370<br>   371</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,i,j,k,r;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">100</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        j=i%<span class="number">10</span>;</span><br><span class="line">        k=(i%<span class="number">100</span>)/<span class="number">10</span>;</span><br><span class="line">        r=i/<span class="number">100</span>;</span><br><span class="line">        <span class="keyword">if</span>(i==j*j*j+k*k*k+r*r*r)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h3 id="打印ASCII码值、字符对照表"><a href="#打印ASCII码值、字符对照表" class="headerlink" title="打印ASCII码值、字符对照表"></a>打印ASCII码值、字符对照表</h3><p><strong>题目描述：</strong><br>   打印码值为n1～n2（ n1和n2的值在33～127范围内）的ASCII码值、字符对照表。<br><strong>输入描述：</strong><br>   两个整数n1和n2（值在33～127范围内）。<br><strong>输出描述描述：</strong><br>   对照表。要求：ASCII码值占7列，字符占9列，向右对齐，每行打3个码值。<br><strong>样式输入：</strong></p>
<blockquote>
<p>65<br>   70</p>
</blockquote>
<p><strong>样式输出：</strong><br>        65        A     66        B     67        C<br>        68        D     69        E     70        F<br><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n1,n2,i,j;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n1);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n2);</span><br><span class="line">    <span class="keyword">for</span>(i=n1,j=<span class="number">1</span>;i&lt;=n2;i++,j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%7d%9c&quot;</span>,i,i);</span><br><span class="line">        <span class="keyword">if</span>(j%<span class="number">3</span>==<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="第n年时有多少头母牛"><a href="#第n年时有多少头母牛" class="headerlink" title="第n年时有多少头母牛?"></a>第n年时有多少头母牛?</h3><p> <strong>题目描述：</strong><br>   递增的牛群：若一头小母牛，从第4年开始每年生一头小母牛。按此规律，第n年时有多少头母牛？<br><strong>输入描述：</strong><br>一   个整数n(n&gt;&#x3D;4 &amp;&amp; n&lt;&#x3D;20)。<br><strong>输出描述描述：</strong><br>   第n年时的母牛数。<br><strong>样式输入：</strong></p>
<blockquote>
<p>4</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>2</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,f,f1,f2,f3,i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">4</span>,f1=f2=f3=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        f=f1+f3;</span><br><span class="line">        f3=f2;</span><br><span class="line">        f2=f1;</span><br><span class="line">        f1=f;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,f);</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>


<h3 id="百马百担问题"><a href="#百马百担问题" class="headerlink" title="百马百担问题"></a>百马百担问题</h3><p><strong>题目描述：</strong><br>   百马百担问题：有n1匹马，驮n2担货，大马驮3担，中马驮2担，两匹小马驮1担，问有多少种驮法？<br>   注意:每种马至少有1匹.<br><strong>输入描述：</strong><br>   两个整数n1（马匹数）和n2（担货数）。<br><strong>输出描述描述：</strong><br>   驮法数。<br><strong>样式输入：</strong></p>
<blockquote>
<p>100  100</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>6</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n1,n2,sum=<span class="number">0</span>,x,y,z;<span class="comment">//x,y,z分别为大马匹数，中马匹数和小马匹数。</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n1,&amp;n2);</span><br><span class="line">    <span class="keyword">for</span>(x=<span class="number">1</span>;x&lt;=n1;x++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(y=<span class="number">1</span>;y&lt;=n1-x;y++)</span><br><span class="line">        &#123;</span><br><span class="line">            z=n1-x-y;</span><br><span class="line">            <span class="keyword">if</span>((<span class="number">3</span>*x+<span class="number">2</span>*y+<span class="number">0.5</span>*z)==n2)</span><br><span class="line">                sum++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,sum);</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>


<h3 id="求可行的购鱼方案"><a href="#求可行的购鱼方案" class="headerlink" title="求可行的购鱼方案"></a>求可行的购鱼方案</h3><p><strong>题目描述：</strong><br>   有钱m元，要买金鱼n条。市场上的金鱼主要有三个品种，价格分别为：红狮头每条0.9元，黑骑士每条1.2元，白金刚每条1.6元。如果每一个品种都至少购买一条，要买足n条金鱼，且正好用完n元。试编写程序求出可行的购鱼方案。<br><strong>输入描述：</strong><br>   两个整数m（钱数）和n（金鱼总数）。<br><strong>输出描述描述：</strong><br>   购鱼方案。注：一种方案打一行，按红狮头、黑骑士、白金刚的顺序打出条数，数据之间留一个空格。<br><strong>样式输入：</strong></p>
<blockquote>
<p>30 25</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>4 18 3<br>   8 11 6<br>   12 4 9</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,m,i,j;</span><br><span class="line">    <span class="type">double</span> k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;m,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m/<span class="number">1.6</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=(m<span class="number">-1.6</span>*i)/<span class="number">1.2</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            k=<span class="number">1.6</span>*i+<span class="number">1.2</span>*j+<span class="number">0.9</span>*(n-i-j);</span><br><span class="line">        <span class="keyword">if</span>(k==m)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>,n-i-j,j,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h3 id="最低位（二进制的转换）-1"><a href="#最低位（二进制的转换）-1" class="headerlink" title="最低位（二进制的转换）"></a>最低位（二进制的转换）</h3><p><strong>题目描述：</strong><br>   任意一个正整数A（1&lt;&#x3D;A&lt;&#x3D;109），输出它的最低位。例如，A&#x3D;26，我们能写出它的二进制位11010，所以最低位是10，输出为2。例如，A&#x3D;88，则二进制位1011000，则最低位是1000，输出为8。再例如A&#x3D;7，则二进制位111，则最低位是1，输出为1。<br><strong>输入描述：</strong><br>   输入包含一个整数A（1&lt;&#x3D;A&lt;&#x3D;109）<br><strong>输出描述描述：</strong><br>   对应输入的最低位（输出不包含回车）<br><strong>样式输入：</strong></p>
<blockquote>
<p>8</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>8</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 10</span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> A,law,a[N],i,j;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;A);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=N;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]=A%<span class="number">2</span>;</span><br><span class="line">        A/=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[i]==<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    law=<span class="built_in">pow</span>(<span class="number">2</span>,i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,law);</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="Fibonacci数列-1"><a href="#Fibonacci数列-1" class="headerlink" title="Fibonacci数列"></a>Fibonacci数列</h3><p><strong>题目描述：</strong><br>   Fibonacci数列{0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, …}，可以如下定义：<br>   F0&#x3D;0<br>   F1&#x3D;1<br>   Fi&#x3D;F(i-1)+F(i-2) 对于所有的i大于2<br>   写个程序计算Fibonacci数<br><strong>输入描述：</strong><br>   第一行为需要测试个数T，接着的1行，输入T个数据，每一个数据包含一个数n（0&lt;&#x3D;n&lt;&#x3D;45 ），即你需要计算的F(n)<br><strong>输出描述描述：</strong><br>   对每输入的数n，输出对应的F(n)，每个F(n)之间包含一个空格，最后一行输出不含回车。</p>
<p><strong>样式输入：</strong></p>
<blockquote>
<p>5<br>   0 3 5 9 20</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>0 2 5 34 6765</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,i,k;</span><br><span class="line">    <span class="type">int</span> b[<span class="number">46</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,a[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=<span class="number">45</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        b[i]=b[i<span class="number">-1</span>]+b[i<span class="number">-2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        k=a[i];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,b[k]);</span><br><span class="line">    &#125;</span><br><span class="line">    k=a[n<span class="number">-1</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,b[k]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,i,k;</span><br><span class="line">    <span class="type">int</span> b[<span class="number">46</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,a[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=<span class="number">45</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        b[i]=b[i<span class="number">-1</span>]+b[i<span class="number">-2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        k=a[i];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,b[k]);</span><br><span class="line">    &#125;</span><br><span class="line">    k=a[n<span class="number">-1</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,b[k]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>   蛇形矩阵1—一个方向生成(胡宁静)<br> <strong>题目描述：</strong><br>   蛇形矩阵是从1开始的自然数依次排列成的一个矩阵上三角形。注意看样式输出。<br> <strong>输入描述：</strong><br>   矩阵的大小N（N&lt;20）<br> <strong>输出描述描述：</strong><br>   输出一个蛇形矩阵,注意:每行行末没有空格,最后一行没有换行。<br><strong>样式输入：</strong></p>
<blockquote>
<p>5</p>
</blockquote>
<p> <strong>样式输出：</strong></p>
<blockquote>
<p>1 3 6 10 15<br>   2 5 9 14<br>   4 8 13<br>   7 12<br>   11</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,a[<span class="number">20</span>]=&#123;<span class="number">1</span>&#125;,i,j;</span><br><span class="line">    <span class="type">int</span> N,k,z,s;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N);</span><br><span class="line">    n=N;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>,z=<span class="number">1</span>;i&lt;N<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s=i+<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            a[j]=a[j<span class="number">-1</span>]+s;</span><br><span class="line">            s++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;n<span class="number">-1</span>;k++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[k]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a[n<span class="number">-1</span>]);</span><br><span class="line">        a[<span class="number">0</span>]+=z;</span><br><span class="line">        z++;</span><br><span class="line">        n--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h3 id="蛇形矩阵2—双向生成"><a href="#蛇形矩阵2—双向生成" class="headerlink" title="蛇形矩阵2—双向生成"></a>蛇形矩阵2—双向生成</h3><p><strong>题目描述：</strong><br>   蛇形矩阵是从1开始的自然数依次排列成的一个矩阵上三角形。注意看样式输出。<br><strong>输入描述：</strong><br>   矩阵的大小N（N&lt;20）<br><strong>输出描述描述：</strong><br>   输出一个蛇形矩阵,注意:每行行末没有空格,最后一行没有换行。<br><strong>样式输入：</strong></p>
<blockquote>
<p>5</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>1 3 4 10 11<br>   2 5 9 12<br>   6 8 13<br>   7 14<br>   15</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,a[<span class="number">20</span>][<span class="number">20</span>]=&#123;<span class="number">1</span>&#125;,i,j;</span><br><span class="line">    <span class="type">int</span> N,k,z,s,f;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N);</span><br><span class="line">    n=N;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>,z=<span class="number">1</span>;i&lt;N;)</span><br><span class="line">    &#123;</span><br><span class="line">        s=i+<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i][j]=a[i][j<span class="number">-1</span>]+s;</span><br><span class="line">            s++;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">        a[i][<span class="number">0</span>]=a[i<span class="number">-1</span>][<span class="number">0</span>]+z;</span><br><span class="line">        z++;</span><br><span class="line">        n--;</span><br><span class="line">    &#125;</span><br><span class="line">    n=N;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;N;i+=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        f=i;</span><br><span class="line">        <span class="keyword">for</span>(k=<span class="number">0</span>,j=<span class="number">0</span>;k&lt;=i/<span class="number">2</span>;k++)</span><br><span class="line">        &#123;</span><br><span class="line">            temp=a[i][j];</span><br><span class="line">            a[i][j]=a[j][i];</span><br><span class="line">            a[j][i]=temp;</span><br><span class="line">            i--;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        i=f;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;n<span class="number">-1</span>;k++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i][k]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a[i][n<span class="number">-1</span>]);</span><br><span class="line">        n--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[N<span class="number">-1</span>][<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>


<h3 id="猪的安家-1"><a href="#猪的安家-1" class="headerlink" title="猪的安家"></a>猪的安家</h3><p><strong>题目描述：</strong><br>   Andy和Mary养了很多猪。他们想要给猪安家。但是Andy没有足够的猪圈，很多猪只能够在一个猪圈安家。举个例子，假如有16头猪，Andy建了3个猪圈，为了保证公平，剩下1头猪就没有地方安家了。Mary生气了，骂Andy没有脑子，并让他重新建立猪圈。这回Andy建造了5个猪圈，但是仍然有1头猪没有地方去，然后Andy又建造了7个猪圈，但是还有2头没有地方去。Andy都快疯了。你对这个事情感兴趣起来，你想通过Andy建造猪圈的过程，知道Andy家至少养了多少头猪。<br><strong>输入描述：</strong><br>   输入包含多组测试数据。每组数据第一行包含一个整数n (n &lt;&#x3D; 10),表示Andy建立猪圈的次数，接下来n行，每行两个整数ai, bi( bi &lt;&#x3D; ai &lt;&#x3D; 1000), 表示Andy建立了ai个猪圈，有bi头猪没有去处。你可以假定(ai, aj) &#x3D; 1<br><strong>输出描述描述：</strong><br>输出包含一个正整数，即为Andy家至少养猪的数目<br>   <strong>样式输入：</strong></p>
<blockquote>
<p>3<br>   3 1<br>   5 1<br>   7 2</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>16</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,ai,bi;</span><br><span class="line">    <span class="type">int</span> i,j,k,a[<span class="number">1000</span>],s=<span class="number">1000</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)</span><br><span class="line">        a[i]=i+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;ai,&amp;bi);</span><br><span class="line">        k=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;s;j++)</span><br><span class="line">            <span class="keyword">if</span>(a[j]%ai==bi)</span><br><span class="line">            &#123;</span><br><span class="line">                a[k]=a[j];</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">        s=k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(k!=<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h3 id="最大乘积的整数的拆分-1"><a href="#最大乘积的整数的拆分-1" class="headerlink" title="最大乘积的整数的拆分"></a>最大乘积的整数的拆分</h3><p><strong>题目描述：</strong><br>   将一个整数N分解成各不相同的加数的和，使这些加数的乘积最大。N范围为[5,1000]<br>提示：从乘积最大的原则出发：多拆3，少拆2,不拆1，1对乘法没有贡献。如6拆为3+3&gt;3+2+1;4拆分为2+2&gt;3+1,因此，拆分的最大数为3.<br><strong>输入描述：</strong><br>   输入一个整数N（5&lt;&#x3D;N&lt;&#x3D;1000)<br><strong>输出描述描述：</strong><br>   能够使得积最大的加数序列,序列按拆分数由小到大的顺序排列，每个数字之间有一个空格，最后一个数字没有空格。<br><strong>样式输入：</strong></p>
<blockquote>
<p>7</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>2 2 3</p>
</blockquote>
<p><strong>源代码1</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">3</span>==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;2 2&quot;</span>);</span><br><span class="line">        n-=<span class="number">4</span>;</span><br><span class="line">        <span class="keyword">while</span>(n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; 3&quot;</span>);</span><br><span class="line">            n-=<span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//printf(&quot;4&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(n%<span class="number">3</span>==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        n-=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; 3&quot;</span>);</span><br><span class="line">            n-=<span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        n-=<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">while</span>(n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; 3&quot;</span>);</span><br><span class="line">            n-=<span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">3</span>==<span class="number">1</span>)<span class="comment">//余数为一的最后拆成2和2，其余拆成3.</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;2 2&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(n!=<span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            n-=<span class="number">3</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; 3&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(n%<span class="number">3</span>==<span class="number">2</span>)<span class="comment">//余数为二的拆一个2，其余为3.</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(n!=<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            n-=<span class="number">3</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; 3&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span><span class="comment">//为0的均为3.</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(n!=<span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            n-=<span class="number">3</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;3 &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<h3 id="插队—数的插入"><a href="#插队—数的插入" class="headerlink" title="插队—数的插入"></a>插队—数的插入</h3><p><strong>题目描述：</strong><br>   编写程序，对一个已经排好序的数组，输入一个元素。将该元素按原来的排序规则将它插入到数组中。<br>   例如原数组为：1 2 6 7 9，输入待插入的元素3，则插入完成后结果为：1 2 3 6 7 9；<br><strong>输入描述：</strong><br>   输入包含两部分，第一部分先输入n（2&lt;n&lt;&#x3D;100），表示数组中元素个数，接着输入n个已经排序好的数，第二部分为待插入的数据<br> <strong>输出描述描述：</strong><br>   新的排序好的数组元素，数组元素之间用一个空格分隔，最后一个元素后不要空格。<br><strong>样式输入：</strong></p>
<blockquote>
<p>5<br>   1 2 6 7 9<br>   3</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>1 2 3 6 7 9</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">101</span>],n,i,j;</span><br><span class="line">    <span class="type">int</span> s,temp;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;s);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;s)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(j=n;j&gt;i;j--)</span><br><span class="line">                a[j]=a[j<span class="number">-1</span>];    </span><br><span class="line">            a[i]=s;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h3 id="卫星定位—数的查找"><a href="#卫星定位—数的查找" class="headerlink" title="卫星定位—数的查找"></a>卫星定位—数的查找</h3><p><strong>题目描述：</strong><br>   编写程序，对一个已经排好序的数组，输入一个元素。将该元素在数组中的位置索引出来（折半查找）。<br>   例如原数组为：1 2 6 7 9，输入待查找的元素7，则查找结果为4，如果没有找到该元素，则输出数值-1；</p>
<p><strong>输入描述：</strong><br>   输入包含两部分，第一部分先输入n,表示数组中元素数，接着输入n个已经排序好的数，数组最大个数n为20，第二部分为待查找的数据<br><strong>输出描述描述：</strong><br>   待查找的元素位置<br><strong>样式输入：</strong></p>
<blockquote>
<p>5<br>   1 2 6 7 9<br>   7</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>4</p>
</blockquote>
<p><strong>[源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,k,a[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> i,low,top,mid,loc=<span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);</span><br><span class="line">    low=<span class="number">0</span>;</span><br><span class="line">    top=n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(low&lt;top)</span><br><span class="line">    &#123;</span><br><span class="line">        mid=(low+top)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[mid]&gt;k)</span><br><span class="line">            top=mid<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[mid]&lt;k)</span><br><span class="line">            low=mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            loc=mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,loc);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h3 id="警察抓贼—数的删除"><a href="#警察抓贼—数的删除" class="headerlink" title="警察抓贼—数的删除"></a>警察抓贼—数的删除</h3><p><strong>题目描述：</strong><br>   编写程序，将n（n&lt;1000）个元素中的某个特定元素删除。如果该元素出现的次数t为奇数次，则删除第（t+1）&#x2F;2那个，如果出现的次数t为偶数次，则删除第（t&#x2F;2）个<br><strong>输入描述：</strong><br>   输入包含两部分，第一部分先输入n,接着输入n个原数据。第二部分为待删除的元素；<br><strong>输出描述描述：</strong><br>   删除特定元素后的剩余元素,如果没有元素被删除，则原样输出；元素之间用一个空格分隔，最后一个元素没有回车。<br><strong>样式输入：</strong></p>
<blockquote>
<p>8<br>1 3 4 6 3 5 3 6<br>3</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>1 3 4 6 5 3 6</p>
</blockquote>
<p> <strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,a[<span class="number">1000</span>];</span><br><span class="line">    <span class="type">int</span> s,i,t=<span class="number">0</span>,m,j=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;s);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">if</span>(a[i]==s)</span><br><span class="line">            t++;</span><br><span class="line">    <span class="keyword">if</span>(t%<span class="number">2</span>!=<span class="number">0</span>)</span><br><span class="line">        m=(t+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        m=t/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]!=s)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            j++;</span><br><span class="line">            <span class="keyword">if</span>(j!=m)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a[n<span class="number">-1</span>]!=s)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[n<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        j++;</span><br><span class="line">        <span class="keyword">if</span>(j!=m)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[n<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="是非黑白—字符串比较"><a href="#是非黑白—字符串比较" class="headerlink" title="是非黑白—字符串比较"></a>是非黑白—字符串比较</h3><p><strong>题目描述：</strong><br>   编写函数实现两个等长字符串大小比较（两字符串长度&lt;81）。比较规则如下：字符大小按对应的ASCII 码值，字符串大小比较时按对应字符比较，如果比较的两字符不等，则说明存在大小关系，停止比较操作。如果相等，则比较下一次字符，直到最后一个。如果第一个字符串小于第二个字符串则输出第二个字符串，如果大于则输出第一个字符串（字符串输出含回车），如果相等则返回数值0（不含回车）；要求不使用cmpstr()函数完成；<br><strong>输入描述：</strong><br>   输入待比较的两个字符串<br><strong>输出描述描述：</strong><br>   字符串比较结果<br><strong>样式输入：</strong></p>
<blockquote>
<p>abcdefg<br>   abcdeff</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>abcdefg</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">81</span>],b[<span class="number">81</span>];</span><br><span class="line">    <span class="type">int</span> i,len1,len2,max,s1=<span class="number">0</span>,s2=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,b);</span><br><span class="line">    len1=<span class="built_in">strlen</span>(a);</span><br><span class="line">    len2=<span class="built_in">strlen</span>(b);</span><br><span class="line">    max=(len1&gt;len2)?len1:len2;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len2;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;b[i])</span><br><span class="line">        &#123;</span><br><span class="line">            s2++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;b[i])</span><br><span class="line">        &#123;</span><br><span class="line">            s1++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(s1==<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">puts</span>(a);</span><br><span class="line">    <span class="keyword">if</span>(s2==<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">puts</span>(b);</span><br><span class="line">    <span class="keyword">if</span>(s1==<span class="number">0</span> &amp;&amp; s2==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(len1&gt;len2)</span><br><span class="line">            <span class="built_in">puts</span>(a);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(len1&lt;len2)</span><br><span class="line">            <span class="built_in">puts</span>(b);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h3 id="搭桥—字符串连接"><a href="#搭桥—字符串连接" class="headerlink" title="搭桥—字符串连接"></a>搭桥—字符串连接</h3><p><strong>题目描述：</strong><br>   编写函数将两个升序排列的字符串(串长&lt;81)融合成一个字符串，融合后的字符串仍然是升序排列的。</p>
<p><strong>输入描述：</strong><br>   输入两升序字符串<br><strong>输出描述：</strong><br>   融合后的字符串 (含回车符)<br><strong>样式输入：</strong></p>
<blockquote>
<p>acefi<br>   bdfg</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>abcdeffgi</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">162</span>],b[<span class="number">81</span>];</span><br><span class="line">    <span class="type">int</span> i,j,len,temp;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,b);</span><br><span class="line">    <span class="built_in">strcat</span>(a,b);</span><br><span class="line">    len=<span class="built_in">strlen</span>(a);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;len;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;a[j])</span><br><span class="line">            &#123;</span><br><span class="line">                temp=a[i];</span><br><span class="line">                a[i]=a[j];</span><br><span class="line">                a[j]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h3 id="一清二楚—字符串统计"><a href="#一清二楚—字符串统计" class="headerlink" title="一清二楚—字符串统计"></a>一清二楚—字符串统计</h3><p><strong>题目描述：</strong><br>   输入一字符串，该字符串包含字母、数字和其他字符。统计该字符串中数字、字母和其他字符出现的频率。（注意，其他字符包含空格）<br><strong>输入描述：</strong><br>   一混合字符串，最大长度为200<br><strong>输出描述描述：</strong><br>   各类字符出现频率，最后一行不含回车。<br><strong>样式输入：</strong></p>
<blockquote>
<p>abcdefg9999&#x2F;&#x2F;&#x2F;&#x2F;</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>ch:7<br>   num:4<br>   other:4</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">1</span>:  <span class="type">char</span> a[<span class="number">201</span>];</span><br><span class="line">    <span class="type">int</span> ch=<span class="number">0</span>,num=<span class="number">0</span>,other=<span class="number">0</span>,i,k;</span><br><span class="line">    gets(a);</span><br><span class="line">    k=<span class="built_in">strlen</span>(a);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((a[i]&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;a[i]&lt;=<span class="string">&#x27;Z&#x27;</span>)||(a[i]&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;a[i]&lt;=<span class="string">&#x27;z&#x27;</span>))</span><br><span class="line">            ch++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[i]&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;a[i]&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">            num++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            other++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ch:%d\nnum:%d\nother:%d&quot;</span>,ch,num,other);</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">200</span>];</span><br><span class="line">    <span class="type">int</span> ch=<span class="number">0</span>,num=<span class="number">0</span>,other=<span class="number">0</span>,len,i;</span><br><span class="line">    gets(a);</span><br><span class="line">    len=<span class="built_in">strlen</span>(a);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; a[i]&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">            num++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((a[i]&gt;=<span class="string">&#x27;a&#x27;</span> &amp;&amp; a[i]&lt;=<span class="string">&#x27;z&#x27;</span>) || (a[i]&gt;=<span class="string">&#x27;A&#x27;</span> &amp;&amp; a[i]&lt;=<span class="string">&#x27;Z&#x27;</span>))</span><br><span class="line">            ch++;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            other++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ch:%d\nnum:%d\nother:%d&quot;</span>,ch,num,other);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h3 id="克隆—字符串的拷贝-胡宁静"><a href="#克隆—字符串的拷贝-胡宁静" class="headerlink" title="克隆—字符串的拷贝(胡宁静)"></a>克隆—字符串的拷贝(胡宁静)</h3><p><strong>题目描述：</strong><br>   编写程序实现字符串拷贝，输入两字符串(字符串长度小于100)，将第一个字符串拷贝到第二个字符串中；如果第一个字符串的长度a小于第二个字符串长度b，则第二个字符串的长度也将缩减至第一个的长度a，如果第一个字符串的长度a大于或等于第二个长度b，则只将a的前b个字符拷贝到第二个中；<br><strong>输入描述：</strong><br>   输入两字符串<br><strong>输出描述描述：</strong><br>   输出第二个字符串，注意：输出含回车。<br><strong>样式输入：</strong></p>
<blockquote>
<p>Abdfeg<br>   Bdfad</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>Abdfe</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">100</span>],b[<span class="number">100</span>];</span><br><span class="line">    <span class="type">int</span> len1,len2,i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s %s&quot;</span>,a,b);</span><br><span class="line">    len1=<span class="built_in">strlen</span>(a);</span><br><span class="line">    len2=<span class="built_in">strlen</span>(b);</span><br><span class="line">    <span class="keyword">if</span>(len1&lt;len2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len1;i++)</span><br><span class="line">            b[i]=a[i];</span><br><span class="line">        b[len1]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len2;i++)</span><br><span class="line">            b[i]=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> <strong>2:源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> len1,len2,i;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">100</span>],b[<span class="number">100</span>];</span><br><span class="line">    gets(a);</span><br><span class="line">    gets(b);</span><br><span class="line">    len1=<span class="built_in">strlen</span>(a);</span><br><span class="line">    len2=<span class="built_in">strlen</span>(b);</span><br><span class="line">    <span class="keyword">if</span>(len1&lt;len2)</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len1;i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,a[i]);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len2;i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="字母转换"><a href="#字母转换" class="headerlink" title="字母转换"></a>字母转换</h3><p><strong>题目描述：</strong><br>   输入一个字符串（长度&lt;100），将其中所有大写字母改为小写字母，而所有小写字母全部改为大写字母，其余字符原样输出然后输出前n个字符。<br>   设计步骤<br>   ①输入字符串；<br>   ②用循环判断字符串中的每个字符是大写还是小写，若是大写要转换成小写，是小写要转换成大写：大写与小写字母的转换关系是“小写字母&#x3D;大写字母+32”<br>   ③用printf输出该字符串前n个字符。<br><strong>输入描述：</strong><br>   输入数据为1个数字，表示输出字符窜长度（n&lt;100），接着输入1个字符串，其长度不限，可包含键盘上可见的所有字符<br><strong>输出描述描述：</strong><br>   输出为1个字符串，根据输入数据，将其中的大写字符转换成小写，小写转换成大写，其余字符不变<br><strong>样式输入：</strong></p>
<blockquote>
<p>5<br>   FG56hj</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>fg56H</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,i;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    getchar();</span><br><span class="line">    gets(a);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;=<span class="string">&#x27;z&#x27;</span> &amp;&amp; a[i]&gt;=<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,a[i]<span class="number">-32</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[i]&lt;=<span class="string">&#x27;Z&#x27;</span> &amp;&amp; a[i]&gt;=<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,a[i]+<span class="number">32</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="数字转换"><a href="#数字转换" class="headerlink" title="数字转换"></a>数字转换</h3><p><strong>题目描述：</strong><br>   输入一个数字，大小&lt;100000，将其中每位数字进行转换后输出，规则如下：<br>   数字0与9互换、1与8互换、2与7互换、3与6互换、4与5互换。<br>   注意：要考虑首位数字为9时的转换结果。<br><strong>输入描述：</strong><br>   输入数据为1个数字，大小&lt;100000<br><strong>输出描述描述：</strong><br>   输出为1个根据转换规则转换完成后的数字<br><strong>样式输入：</strong></p>
<blockquote>
<p>56789</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>43210</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">6</span>];</span><br><span class="line">    <span class="type">int</span> i,len;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a);</span><br><span class="line">    len=<span class="built_in">strlen</span>(a);</span><br><span class="line">    <span class="keyword">if</span>(a[<span class="number">0</span>]!=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>]==<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;8&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>]==<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;7&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>]==<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;6&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>]==<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;5&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>]==<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>]==<span class="string">&#x27;6&#x27;</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>]==<span class="string">&#x27;7&#x27;</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>]==<span class="string">&#x27;8&#x27;</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]==<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;9&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(a[i]==<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;8&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(a[i]==<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;7&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(a[i]==<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;6&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(a[i]==<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;5&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(a[i]==<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(a[i]==<span class="string">&#x27;6&#x27;</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(a[i]==<span class="string">&#x27;7&#x27;</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(a[i]==<span class="string">&#x27;8&#x27;</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(a[i]==<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h3 id="函数求解1-n的累乘"><a href="#函数求解1-n的累乘" class="headerlink" title="函数求解1&#x2F;n的累乘"></a>函数求解1&#x2F;n的累乘</h3><p><strong>题目描述：</strong><br>   利用自定义函数编写程序，求下面的式子：<br>    Y&#x3D;1<em>1&#x2F;2</em>1&#x2F;3……*1&#x2F;n       （n的数值由键盘输入,n&lt;&#x3D;10）</p>
<p><strong>输入描述：</strong><br>   输入一个正整数</p>
<p><strong>输出描述描述：</strong><br>   输出为小数，保留小数点后12位有效数字。<br><strong>样式输入：</strong></p>
<blockquote>
<p>3</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>0.166666666667</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,i;</span><br><span class="line">    <span class="type">double</span> s,y=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s=i;</span><br><span class="line">        y*=<span class="number">1</span>/s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.12lf&quot;</span>,y);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h3 id="函数求解1-n的累减-谌海军"><a href="#函数求解1-n的累减-谌海军" class="headerlink" title="函数求解1&#x2F;n的累减(谌海军)"></a>函数求解1&#x2F;n的累减(谌海军)</h3><p><strong>题目描述：</strong><br>   利用自定义函数编写程序，求下面的式子：<br>    Y&#x3D;1-1&#x2F;2-1&#x2F;3……-1&#x2F;n       （n的数值由键盘输入,n&lt;&#x3D;100）<br><strong>输入描述：</strong><br>   输入一个正整数<br><strong>输出描述描述：</strong><br>   输出为小数，保留小数点后8位有效数字。<br><strong>样式输入：</strong></p>
<blockquote>
<p>8</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>-0.71785714</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,i;</span><br><span class="line">    <span class="type">double</span> s,y=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s=i;</span><br><span class="line">        y-=<span class="number">1</span>/s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.8lf&quot;</span>,y);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="换汽水"><a href="#换汽水" class="headerlink" title="换汽水"></a>换汽水</h3><p> <strong>题目描述：</strong><br>   1块钱1瓶汽水，3个空汽水瓶换1瓶汽水。n块钱能喝几瓶汽水？<br><strong>输入描述：</strong><br>   输入为一个正整数n（1&lt;&#x3D;n&lt;&#x3D;100），表示钱数。<br><strong>输出描述描述：</strong><br>   输出为一个正整数，表示可喝汽水的瓶数。<br><strong>样式输入：</strong></p>
<blockquote>
<p>10</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>15</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,sum,s;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    sum=n;</span><br><span class="line">    <span class="keyword">while</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sum+=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        s=n/<span class="number">3</span>;</span><br><span class="line">        sum+=s;</span><br><span class="line">        n=n%<span class="number">3</span>+s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>


<h3 id="聪明的顾客"><a href="#聪明的顾客" class="headerlink" title="聪明的顾客"></a>聪明的顾客</h3><p><strong>题目描述：</strong><br>   1瓶汽水卖1块钱，顾客还可以用3个空汽水瓶换1瓶汽水喝。请问聪明的顾客最少可以花多少钱买到n瓶汽水喝？<br>   说明：当顾客手中有两个空汽水瓶的时候，如果店家剩余1瓶以上，可以选择先借用1瓶汽水，喝完后连同手里先前已有的两个空汽水瓶还给店家即可。<br><strong>输入描述：</strong><br>   输入为一个正整数n（1&lt;&#x3D;n&lt;&#x3D;100），表示可卖汽水瓶数。<br><strong>输出描述描述：</strong><br>   输出为一个正整数，表示所花钱数。<br><strong>样式输入：</strong></p>
<blockquote>
<p>10</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>7</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,sum,s,i,k,a[<span class="number">70</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;<span class="number">70</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        k=i;</span><br><span class="line">        sum=i;</span><br><span class="line">        <span class="keyword">while</span>(i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sum+=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;<span class="number">2</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            s=i/<span class="number">3</span>;</span><br><span class="line">            sum+=s;</span><br><span class="line">            i=i%<span class="number">3</span>+s;</span><br><span class="line">        &#125;</span><br><span class="line">        i=k;</span><br><span class="line">        a[i]=sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">70</span>;i++)</span><br><span class="line">        <span class="keyword">if</span>(a[i]==n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="字符串起始位置"><a href="#字符串起始位置" class="headerlink" title="字符串起始位置"></a>字符串起始位置</h3><p><strong>题目描述：</strong><br>   有字符串a(长度&lt;&#x3D;100)，b(长度&lt;&#x3D;10)，计算b串在a串中首次出现的位置。<br><strong>输入描述：</strong><br>   输入为两个字符串，第一个字符串长度小于100，第二个字符串长度小于10；<br> <strong>输出描述描述：</strong><br>   若b串在a串中出现，输出为一个正整数，表示b串在a串中首次出现的位置，若b串未出现在a串中，则输出0；<br><strong>样式输入：</strong></p>
<blockquote>
<p>abcdefghijklmnababcdeabc<br>   abc</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>1</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> len1,len2,i,j,sum=<span class="number">0</span>,n=<span class="number">0</span>,k;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">100</span>],b[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,b);</span><br><span class="line">    len1=<span class="built_in">strlen</span>(a);</span><br><span class="line">    len2=<span class="built_in">strlen</span>(b);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len1;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        k=i;<span class="comment">//用来恢复i的值。</span></span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;len2;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]==b[j])</span><br><span class="line">                sum++;<span class="comment">//如果相等则加一。</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">            i++;<span class="comment">//i要同时加，保持对应比较。</span></span><br><span class="line">        &#125;</span><br><span class="line">        i=k;</span><br><span class="line">        <span class="keyword">if</span>(sum==len2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i+<span class="number">1</span>);</span><br><span class="line">            n++;<span class="comment">//用来记录是否有位置存在。</span></span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">//有一个位置存在则跳出。</span></span><br><span class="line">        &#125;</span><br><span class="line">        sum=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="字符串清理"><a href="#字符串清理" class="headerlink" title="字符串清理"></a>字符串清理</h3><p><strong>题目描述：</strong><br>    假定输入的字符串中只包含字母和<em>号。请编写函数fun，它的功能是：将字符串尾部的</em>号全部删除，前面和中间的*号不删除。<br><strong>输入描述：</strong><br>   输入为一个字符串，字符串长度小于100；</p>
<p><strong>输出描述描述：</strong><br>   输出为清理后的字符串；</p>
<p><strong>样式输入：</strong></p>
<blockquote>
<p><strong>A<em>BC</em>DEF<em>G</em></strong></p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p><em>*<em>A</em>BC*DEF</em>G</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line">fun(<span class="type">char</span> a[])</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> len,i,s;</span><br><span class="line">    len=<span class="built_in">strlen</span>(a);</span><br><span class="line">    <span class="keyword">for</span>(i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        <span class="keyword">if</span>(a[i]!=<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i+<span class="number">1</span>]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">100</span>];</span><br><span class="line">    <span class="type">int</span> i,len;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a);</span><br><span class="line">    fun(a);</span><br><span class="line">    len=<span class="built_in">strlen</span>(a);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,a[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="围圈报数游戏"><a href="#围圈报数游戏" class="headerlink" title="围圈报数游戏"></a>围圈报数游戏</h3><p><strong>题目描述：</strong><br>   有n（n&lt;&#x3D;100）围成一圈，顺序排号（从1排到n）。<br>从第一个人开始报数（从1报到m（m&lt;&#x3D;9))，凡报到m的人退出圈子，此时报数顺序调转，如：11个人围成1圈，从1报到4时，原来4号位的人退出，此时调转顺序报数，原来3号位的人报数1，原来2号位的人报数2，原来1号位的人报数1，原来11号位的人报数4，此时11号位的人退出游戏，再次逆转顺序报数，以此类推，问最后留下的是原来第几号的那位？<br><strong>输入描述：</strong><br>   输入为两个正整数，第一个&lt;&#x3D;100，第二个&lt;&#x3D;9；<br><strong>输出描述：</strong><br>   输出为一个正整数；<br><strong>样式输入：</strong></p>
<blockquote>
<p>11 4</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>3</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,m,i,j,k1=<span class="number">0</span>,k2=<span class="number">0</span>,z1,sum1,sum2,a[<span class="number">101</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        a[i]=<span class="number">1</span>;</span><br><span class="line">    sum1=n;</span><br><span class="line">    z1=<span class="number">1</span>;</span><br><span class="line">    sum2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(sum1!=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=z1;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]!=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                k1++;</span><br><span class="line">                <span class="keyword">if</span>(k1==m)</span><br><span class="line">                &#123;</span><br><span class="line">                    a[i]=<span class="number">0</span>;</span><br><span class="line">                    sum1--;</span><br><span class="line">                    <span class="keyword">if</span>(sum1==<span class="number">1</span>)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">while</span>(sum2==<span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">for</span>(j=i<span class="number">-1</span>;j&gt;<span class="number">0</span>;j--)</span><br><span class="line">                            <span class="keyword">if</span>(a[j]!=<span class="number">0</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                                k2++;</span><br><span class="line">                                <span class="keyword">if</span>(k2==m)</span><br><span class="line">                                &#123;</span><br><span class="line">                                    a[j]=<span class="number">0</span>;</span><br><span class="line">                                    sum2++;</span><br><span class="line">                                    sum1--;</span><br><span class="line">                                    k2=<span class="number">0</span>;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        i=n+<span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    z1=j;</span><br><span class="line">                    k1=<span class="number">0</span>;</span><br><span class="line">                    sum2=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        z1=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(a[i]!=<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="报数游戏"><a href="#报数游戏" class="headerlink" title="报数游戏"></a>报数游戏</h3><p><strong>题目描述：</strong><br>   有n（n&lt;&#x3D;100）围成一圈，顺序排号（从1排到n）。从第一个人开始报数（从1一直往上报数)，凡报到m及m的倍数或者尾数为m的人退出圈子，问最后留下的是原来第几号的那位？<br><strong>输入描述：</strong><br>   输入为两个正整数，第一个&lt;&#x3D;100，第二个&lt;&#x3D;9；<br><strong>输出描述：</strong><br>   输出为一个正整数；<br><strong>样式输入：</strong></p>
<blockquote>
<p>10 3</p>
</blockquote>
<p> <strong>样式输出：</strong></p>
<blockquote>
<p>5</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,m,i,sum,a[<span class="number">101</span>],k=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    sum=n;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        a[i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(sum!=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">if</span>(a[i]!=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                k++;</span><br><span class="line">                <span class="keyword">if</span>(k%m==<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    a[i]=<span class="number">0</span>;</span><br><span class="line">                    sum--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(a[i]!=<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<h3 id="整数各位取偶数"><a href="#整数各位取偶数" class="headerlink" title="整数各位取偶数"></a>整数各位取偶数</h3><p><strong>题目描述：</strong><br>   将一个整数中的每一位上为偶数的数依次取出，构成一个新数放在t中。高位仍在高位，低位仍在低位。<br>   例如，当s中的数为：87653142时，t中的数为：8642。<br>   （知识点：控制语句、函数、指针）<br><strong>输入描述：</strong><br>   输入数据为一个不大于100000000的整形数；<br><strong>输出描述描述：</strong><br>   输出数据为一个不大于100000000的整形数；<br><strong>样式输入：</strong></p>
<blockquote>
<p>987654321</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>8642</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> s,i,k=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;s);</span><br><span class="line">    <span class="keyword">while</span>(s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((s%<span class="number">10</span>)%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">            a[k++]=s%<span class="number">10</span>;</span><br><span class="line">        s/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=k<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="五位反序数"><a href="#五位反序数" class="headerlink" title="五位反序数"></a>五位反序数</h3><p><strong>题目描述：</strong><br>   设Ｎ是一个五位数，它的n倍恰好是其反序数（例如：123的反序数是321），<br>   编程，输出一个满足条件的Ｎ。（知识点：控制语句）<br><strong>输入描述：</strong><br>   输入为一个整形数n(2&lt;&#x3D;n&lt;&#x3D;9)<br><strong>输出描述描述：</strong><br>   输出为一个五位数的整形数<br><strong>样式输入：</strong></p>
<blockquote>
<p>9</p>
</blockquote>
<p> <strong>样式输出：</strong></p>
<blockquote>
<p>10989</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fan</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> law=<span class="number">0</span>,b;</span><br><span class="line">    <span class="keyword">while</span>(n&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        b=n%<span class="number">10</span>;</span><br><span class="line">        law=law*<span class="number">10</span>+b;</span><br><span class="line">        n/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> law;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,N;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(N=<span class="number">10000</span>;N&lt;<span class="number">100000</span>;N++)</span><br><span class="line">        <span class="keyword">if</span>(N*n==fan(N))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,N);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="复制字符串"><a href="#复制字符串" class="headerlink" title="复制字符串"></a>复制字符串</h3><p><strong>题目描述：</strong><br>   有一个字符串，包括n个字符。写一个函数，将此字符串从第a个字符开始的b个字符复制成另一个字符串。<br>   要求在主函数输入字符串及a,b的值并输出复制结果。<br>   （知识点：控制语句、字符串、指针）</p>
<p><strong>输入描述：</strong>输入为一个字符串（长度小于80）及两个整形数（a+b小于字符串的实际长度）<br><strong>输出描述：</strong><br>   输出为一个字符串<br><strong>样式输入：</strong></p>
<blockquote>
<p>abcdefghijklmnopqrst<br>   8 5</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>hijkl</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">80</span>],b[<span class="number">80</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> i,x,y,j;</span><br><span class="line">    gets(a);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">    <span class="keyword">for</span>(i=x<span class="number">-1</span>,j=<span class="number">1</span>;j&lt;=y;j++,i++)</span><br><span class="line">        b[j<span class="number">-1</span>]=a[i];</span><br><span class="line">    <span class="built_in">puts</span>(b);</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="增加的兔子"><a href="#增加的兔子" class="headerlink" title="增加的兔子"></a>增加的兔子</h3><p><strong>题目描述：</strong><br>   古典问题，有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问一年之内每个月的兔子总数为多少？<br><strong>输入描述：</strong><br>   无<br><strong>输出描述描述：</strong><br>   输出一年之中每个月的兔子总数。<br><strong>样式输入：</strong></p>
<blockquote>
<p>无</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>1 1 2 3 5 8 13 21 34 55 89 144</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">12</span>]=&#123;<span class="number">1</span>,<span class="number">1</span>&#125;,i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;<span class="number">12</span>;i++)</span><br><span class="line">        a[i]=a[i<span class="number">-1</span>]+a[i<span class="number">-2</span>];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">11</span>;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[<span class="number">11</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="整数的分解"><a href="#整数的分解" class="headerlink" title="整数的分解"></a>整数的分解</h3><p><strong>题目描述：</strong><br>   将一个正整数分解质因数。例如：输入90,打印出90&#x3D;2<em>3</em>3*5。<br><strong>输入描述：</strong><br>   输入一个正整数。<br><strong>输出描述描述：</strong><br>   等式左边输出整数，等式右边整数相乘形式。</p>
<p><strong>样式输入：</strong></p>
<blockquote>
<p>90</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>90&#x3D;2x3x3x5</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">50</span>],i=<span class="number">2</span>,j,n,sum=<span class="number">0</span>,k=<span class="number">0</span>,b[<span class="number">50</span>]=&#123;<span class="number">0</span>&#125;,z;</span><br><span class="line">    <span class="keyword">while</span>(k!=<span class="number">50</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=i;j++)</span><br><span class="line">            <span class="keyword">if</span>(i%j==<span class="number">0</span>)</span><br><span class="line">                sum++;</span><br><span class="line">        <span class="keyword">if</span>(sum==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            a[k]=i;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">        sum=<span class="number">0</span>;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    k=<span class="number">0</span>;</span><br><span class="line">    z=n;</span><br><span class="line">    <span class="keyword">while</span>(n!=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">50</span>;i++)</span><br><span class="line">            <span class="keyword">if</span>(n%a[i]==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                n=n/a[i];</span><br><span class="line">                b[k]=a[i];</span><br><span class="line">                k++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d=&quot;</span>,z);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;k<span class="number">-1</span>;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d*&quot;</span>,b[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,b[k<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="小球自由落体问题"><a href="#小球自由落体问题" class="headerlink" title="小球自由落体问题"></a>小球自由落体问题</h3><p><strong>题目描述：</strong><br>   一球从100米高度自由落下，每次落地后反跳回原高度的一半；再落下，求它在第10次落地时，共经过多少米？第10次反弹多高？<br><strong>输入描述：</strong><br>   无<br><strong>输出描述描述：</strong><br>   小球在第10次落地时经过的路程数sn和第10次反弹的高度hn。<br> <strong>样式输入：</strong></p>
<blockquote>
<p>无</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>the total of road is 299.609375<br>the tenth is 0.097656 meter</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">double</span> sn,a[<span class="number">11</span>]=&#123;<span class="number">100</span>&#125;;</span><br><span class="line">    sn=<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i<span class="number">-1</span>]=a[i<span class="number">-2</span>]/<span class="number">2.0</span>;</span><br><span class="line">        sn+=<span class="number">2</span>*a[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    a[<span class="number">10</span>]=a[<span class="number">9</span>]/<span class="number">2.0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the total of road is %lf\n&quot;</span>,sn);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the tenth is %lf meter&quot;</span>,a[<span class="number">10</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="统计字符"><a href="#统计字符" class="headerlink" title="统计字符"></a>统计字符</h3><p><strong>题目描述：</strong>输入一行字符，分别统计出其中英文字母、空格、数字和其它字符的个数<br><strong>输入描述：</strong><br>   输入包含英文字母、空格、数字和其他字符的字符串<br><strong>输出描述：</strong><br>   输出英文字母，空格，数字和其他字符的个数<br><strong>样式输入：</strong></p>
<blockquote>
<p>avc i2g3 &amp;*#4</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>5,2,3,3<br><strong>源代码</strong></p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">100</span>];</span><br><span class="line">    <span class="type">int</span> len,i,s1=<span class="number">0</span>,s2=<span class="number">0</span>,s3=<span class="number">0</span>,s4=<span class="number">0</span>;</span><br><span class="line">    gets(a);</span><br><span class="line">    len=<span class="built_in">strlen</span>(a);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((a[i]&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;a[i]&lt;=<span class="string">&#x27;z&#x27;</span>)||(a[i]&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;a[i]&lt;=<span class="string">&#x27;Z&#x27;</span>))</span><br><span class="line">            s1++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[i]==<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            s2++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[i]&lt;=<span class="string">&#x27;9&#x27;</span> &amp;&amp; a[i]&gt;=<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            s3++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            s4++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%d,%d,%d&quot;</span>,s1,s2,s3,s4);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="数a求和"><a href="#数a求和" class="headerlink" title="数a求和"></a>数a求和</h3><p><strong>题目描述：</strong><br>   求s&#x3D;a+aa+aaa+aaaa+aa…a的值，其中a是一个数字。例如2+22+222+2222+22222(此时共有5个数相加)，几个数相加由键盘控制输入。<br><strong>输入描述：</strong><br>   输入基数a和需要相加的个数n<br><strong>输出描述描述：</strong><br>   输出相加的结果，注意结果最后不需要回车换行。<br><strong>样式输入：</strong></p>
<blockquote>
<p>2 5</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>24690</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j,n,a,s,z,w;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(s=<span class="number">0</span>,i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>,w=<span class="number">1</span>,z=<span class="number">0</span>;j&lt;=i;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            z+=a*w;</span><br><span class="line">            w*=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        s+=z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>
<h3 id="统计单词个数"><a href="#统计单词个数" class="headerlink" title="统计单词个数"></a>统计单词个数</h3><p><strong>题目描述：</strong><br>   输入一行字符，统计其中有多少个单词，单词之间用空格分隔开。例如，输入：I am a boy,里面包含了四个英文单词。<br><strong>输入描述：</strong><br>   利用gets输入字符。<br><strong>输出描述描述：</strong><br>   输出单词个数，程序最后不需要回车换行。<br><strong>样式输入：</strong></p>
<blockquote>
<p>I am a boy</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>There are 4 words in the line</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">100</span>];</span><br><span class="line">    <span class="type">int</span> len,i,b[<span class="number">26</span>]=&#123;<span class="number">0</span>&#125;,sum=<span class="number">1</span>;</span><br><span class="line">    gets(a);</span><br><span class="line">    len=<span class="built_in">strlen</span>(a);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]==<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            sum++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;There are %d words in the line&quot;</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="三角形求最大和的问题"><a href="#三角形求最大和的问题" class="headerlink" title="三角形求最大和的问题"></a>三角形求最大和的问题</h3><p><strong>题目描述：</strong><br>   如图所示是一个由数字组成的三角形，编写程序按照某条路线遍历从第一行的首数字到最后一行的某个数，使每一行经过的数字相加的和为最大值，每一次跳转可以向左下方或者右下方进行。例如样图中第一行为7,选择左下方的数字3的话，继续选择左下方的数字8，第四行选择右下方的7，最后到达左下方的数字5。这样，7+3+8+7+5&#x3D;30为最大。</p>
<pre><code>    7
  3   8
8   1   0
</code></pre>
<p>  2   7   4   4<br>4   5   2   6   5<br><strong>输入描述：</strong><br>   先由键盘输入三角形的行数N(1&lt;N&lt;&#x3D;100)，接下来输入每行的数字，数字取值范围为0~99。<br><strong>输出描述描述：</strong><br>   输出计算出的数字相加和的最大值。<br><strong>样式输入：</strong></p>
<blockquote>
<p>5<br>7<br>3 8<br>8 1 0<br>2 7 4 4<br>4 5 2 6 5</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>30</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">100</span>][<span class="number">100</span>],i,j,n,max=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=i;j++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i][j]);</span><br><span class="line">    a[<span class="number">1</span>][<span class="number">0</span>]+=a[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    a[<span class="number">1</span>][<span class="number">1</span>]+=a[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i][<span class="number">0</span>]+=a[i<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;i;j++)</span><br><span class="line">            a[i][j]+=(a[i<span class="number">-1</span>][j<span class="number">-1</span>]&gt;a[i<span class="number">-1</span>][j])?a[i<span class="number">-1</span>][j<span class="number">-1</span>]:a[i<span class="number">-1</span>][j];</span><br><span class="line">        a[i][j]+=a[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">if</span>(a[n<span class="number">-1</span>][i]&gt;max)</span><br><span class="line">            max=a[n<span class="number">-1</span>][i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,max);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="节约字节"><a href="#节约字节" class="headerlink" title="节约字节"></a>节约字节</h3><p><strong>题目描述：</strong><br>   John在做一个项目，项目对存储容量有着近乎苛刻的要求，为此John需要对一些东西进行压缩存储。John的第一个问题就是一大堆的字符串，存储它们太占地方了，为此他想了一个办法：如果字符串具有相同的后缀，那么就把这么字符串的相同后缀和在一起，这样就能节约一点空间了。比如说有三个字符串分别为”john”、”ajohn”和”bjohn”,这样它们有相同的后缀”john”,这时候只需存储一个后缀”john”,节省了8个字母的存储空间。请编写程序计算对于不同的字符串能节省的存储空间？<br><strong>输入描述：</strong><br>   第一行是一个整数k，表示可以输入多少个测试用例.每个测试用例占n+1行即每个测试用例的第一行为一个整数n（1&lt;&#x3D;n&lt;&#x3D;20），从第二行开始依次为n个字符串,字符串由英文字母组成，大小写敏感。<br><strong>输出描述</strong><br>   一个测试用例输出完毕之后，换行输出这个测试用例节省了多少存储空间。<br><strong>样式输入</strong>：</p>
<blockquote>
<p>1<br>3<br>john<br>ajohn<br>bjohn</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>save 8 characters</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">20</span>]=&#123;<span class="number">0</span>&#125;,i,n,k,j,z,m,t,len[<span class="number">20</span>],min;</span><br><span class="line">    <span class="type">char</span> s[<span class="number">20</span>][<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        i=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        z=n;</span><br><span class="line">        <span class="keyword">while</span>(z)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s[i]);</span><br><span class="line">            i++;</span><br><span class="line">            z--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            len[i]=<span class="built_in">strlen</span>(s[i]);</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">        &#123;    </span><br><span class="line">            m=len[<span class="number">0</span>]<span class="number">-1</span>;</span><br><span class="line">            t=len[j]<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span>(j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(s[<span class="number">0</span>][m]==s[j][t])</span><br><span class="line">                    a[j]++;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                m--;</span><br><span class="line">                t--;</span><br><span class="line">                <span class="keyword">if</span>(m&lt;<span class="number">0</span>||t&lt;<span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        min=a[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;n;i++)</span><br><span class="line">            <span class="keyword">if</span>(min&gt;a[i])</span><br><span class="line">                min=a[i];</span><br><span class="line">        min*=n<span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;save %d characters\n&quot;</span>,min);</span><br><span class="line">        k--;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">            a[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="猴子吃桃问题"><a href="#猴子吃桃问题" class="headerlink" title="猴子吃桃问题"></a>猴子吃桃问题</h3><p><strong>题目描述</strong>：<br>   猴子第一天摘下若干桃子，吃了一半，还不过瘾，又多吃了一个。第二天吃掉剩下桃子的一半，又多吃了一个。以此类推，到第10天时，就只有一个桃子了。问猴子第一天摘下了多少桃子？<br><strong>输入描述：</strong><br>无<br><strong>输出描述描述：</strong><br>   猴子摘下桃子的总数，注意程序最后不需要回车换行。<br><strong>样式输入：</strong></p>
<blockquote>
<p>无</p>
</blockquote>
<p><strong>样式输出：</strong></p>
<blockquote>
<p>1534</p>
</blockquote>
<p><strong>源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,sum=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        sum=(sum+<span class="number">1</span>)*<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p><strong>2源代码</strong> </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,i,sum=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">        sum=(sum+<span class="number">1</span>)*<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h3><a href="http://lengmo714.top/27faa6a3.html" title="" target="">更多题库链接,</a>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>excel转换为json</title>
    <url>/90e6e480.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>先来看下效果<br>将脚本和放excel表格的文件夹置于同一级目录<br><img data-src="https://s1.ax1x.com/2023/08/14/pPMrZtS.png" alt="" /></p>
<p>在该目录下执行js脚本<br>表格内容如下：<br><img data-src="https://s1.ax1x.com/2023/08/14/pPMrnpQ.png" alt="" /><br>转为json后：<br><img data-src="https://s1.ax1x.com/2023/08/14/pPMrefg.png" alt="" /></p>
<p>脚本代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> xlsx = <span class="built_in">require</span>(<span class="string">&#x27;node-xlsx&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dirs = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取文件夹里所有的文件</span></span><br><span class="line">fs.<span class="title function_">readdir</span>(__dirname+<span class="string">&#x27;/excel/&#x27;</span>, <span class="keyword">function</span>(<span class="params">err, files</span>)&#123;</span><br><span class="line">    </span><br><span class="line">    (<span class="keyword">function</span> <span class="title function_">iterator</span>(<span class="params">i</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(i == files.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;所有文件在一个数组里：&#x27;</span>,dirs);</span><br><span class="line">        <span class="comment">//把文件名提取出来</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i1 =<span class="number">0</span>;i1&lt;dirs.<span class="property">length</span>;i1++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">let</span> ss = dirs[i1].<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;把文件名提取出来:&#x27;</span>,ss[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//开始将excel文件转变成json文件</span></span><br><span class="line">            <span class="comment">//读取文件内容</span></span><br><span class="line">            <span class="keyword">var</span> obj = xlsx.<span class="title function_">parse</span>(__dirname+<span class="string">&#x27;/excel/&#x27;</span>+dirs[i1]);</span><br><span class="line">            <span class="keyword">var</span> excelObj=obj[<span class="number">0</span>].<span class="property">data</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(excelObj);</span><br><span class="line">            <span class="keyword">var</span> data = [];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> excelObj)&#123;</span><br><span class="line">              <span class="keyword">var</span> arr=[];</span><br><span class="line">              <span class="keyword">var</span> value=excelObj[i];</span><br><span class="line">              <span class="keyword">for</span>(<span class="keyword">var</span> j <span class="keyword">in</span> value)&#123;</span><br><span class="line">                arr.<span class="title function_">push</span>(value[j]);</span><br><span class="line">              &#125;</span><br><span class="line">              data.<span class="title function_">push</span>(arr);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data:&#x27;</span>,data);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> array_json = &#123;&#125;;</span><br><span class="line">            <span class="keyword">var</span> array_json_index = [];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>,j=<span class="number">0</span>;i&lt;data.<span class="property">length</span>;i++,j++)</span><br><span class="line">            &#123;</span><br><span class="line">                array_json_index[j] = data[i];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;array_json_index:&#x27;</span>,array_json_index);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;array_json_index.<span class="property">length</span>;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                array_json[array_json_index[i][<span class="number">0</span>]] = &#123;&#125;;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;array_json_index[0].length&#x27;</span>,array_json_index[<span class="number">0</span>].<span class="property">length</span>);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">1</span>;j&lt;array_json_index[<span class="number">0</span>].<span class="property">length</span>;j++)</span><br><span class="line">                &#123;</span><br><span class="line">                  array_json[array_json_index[i][<span class="number">0</span>]][array_json_index[<span class="number">0</span>][j]] = array_json_index[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;array_json:&#x27;</span>,array_json);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(array_json)</span><br><span class="line">             </span><br><span class="line">            <span class="keyword">let</span> dir_json = ss[<span class="number">0</span>]+<span class="string">&#x27;.json&#x27;</span>;</span><br><span class="line">            fs.<span class="title function_">writeFile</span>(__dirname+<span class="string">&#x27;/excel/&#x27;</span>+dir_json,str,<span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Server is error...&#x27;</span>)&#125;</span><br><span class="line">            &#125;)</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">      &#125;</span><br><span class="line">      fs.<span class="title function_">stat</span>(path.<span class="title function_">join</span>(__dirname+<span class="string">&#x27;/excel/&#x27;</span>, files[i]), <span class="keyword">function</span>(<span class="params">err, data</span>)&#123;     </span><br><span class="line">        <span class="keyword">if</span>(data.<span class="title function_">isFile</span>())&#123;               </span><br><span class="line">            dirs.<span class="title function_">push</span>(files[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">iterator</span>(i+<span class="number">1</span>);</span><br><span class="line">       &#125;);   </span><br><span class="line">    &#125;)(<span class="number">0</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<blockquote>
<p>运行时如果报错，缺少某些model,则使用下面命令安装即可<br><code>npm install model_name</code>,<code>model_name</code>为缺少的模块名</p>
</blockquote>
</blockquote>
]]></content>
      <categories>
        <category>cocos Creator</category>
        <category>json</category>
        <category>js</category>
        <category>node</category>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>cocos Creator</tag>
      </tags>
  </entry>
  <entry>
    <title>facebook生成秘钥散列踩坑</title>
    <url>/caa789c3.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h3 id="生成密钥散列"><a href="#生成密钥散列" class="headerlink" title="生成密钥散列"></a>生成密钥散列</h3><p>今天按照官方说明，在生成facebook生成密钥散列时，生成的密钥<strong>居然只有24位</strong>，官方要求28位。<br>命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">keytool -exportcert -alias YOUR_RELEASE_KEY_ALIAS -keystore YOUR_RELEASE_KEY_PATH | openssl sha1 -binary | openssl base64</span><br></pre></td></tr></table></figure>
<p>现象：<br><img data-src="https://pic.imgdb.cn/item/664626b7d9c307b7e9060e0c.png" alt="" />试了好多遍，每次都只有24位，最终不得不放弃这个方法，如果有大佬知道原因，还请告知，我将十分感谢。</p>
<h3 id="换了种方法"><a href="#换了种方法" class="headerlink" title="换了种方法"></a>换了种方法</h3><p>由于官方给的方法不行（我这里还未实现），于是只能在网上找其他的方法，结果还真让我给找到了。<br>在<code>Android studio</code>中输入命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">keytool -list -v -keystore key.jks -alias key0  // 注意key.jks和key0换成自己的路径和别名</span><br></pre></td></tr></table></figure>
<p>拿到证书指纹的SHA1值<br>如下：<br><img data-src="https://pic.imgdb.cn/item/6646283ad9c307b7e9091a4c.png" alt="" />然后通过<a href="https://tomeko.net/online_tools/hex_to_base64.php">转换工具</a>转换成我们想要的密钥即可。</p>
]]></content>
      <categories>
        <category>android studio</category>
        <category>facebook</category>
      </categories>
      <tags>
        <tag>facebook</tag>
        <tag>android studio</tag>
      </tags>
  </entry>
  <entry>
    <title>git强制拉取远程项目覆盖本地项目</title>
    <url>/20023.html</url>
    <content><![CDATA[<p>最近在工作中经常需要从git拉取到一些项目到本地，但是因为本地项目被我自己修改，所以无法用传统的方式将远程仓库的项目拉取下来。下面介绍一种远程仓库强制拉取项目到本地的方法。</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<blockquote>
<p>除非必须强制，不要轻易使用。</p>
</blockquote>
<p><strong>需要将这些更新取回本地，用命令<code>git fetch</code>.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git fetch --all</span><br></pre></td></tr></table></figure>
<p><strong>撤销本地、暂存区、版本库(用远程服务器的origin&#x2F;master替换本地、暂存区、版本库)</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard origin/master</span><br></pre></td></tr></table></figure>

<p><strong>git pull来从远程仓库”同步”代码</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure>
<p>或者用下面一行命令<br><strong>git强制覆盖本地命令（单条执行）：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git fetch --all &amp;&amp; git reset --hard origin/master &amp;&amp; git pull</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发工具的使用</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>invalid key hash.the key hash does not match any stored key hashes.Configure your app key hashes at</title>
    <url>/ce912ca5.html</url>
    <content><![CDATA[<p>接上一篇文章，添加完测试账号后，点击登录，又又又又出现了新的问题，一上午就整个解决各种问题了:<code>invalid key hash.the key hash does not match any stored key hashes.Configure your app key hashes at</code>.</p>
<span id="more"></span>
<p>如下图：<img data-src="https://pic.imgdb.cn/item/6646eadad9c307b7e9d68ab3.png" alt="" /></p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h3 id="问题出现的原因"><a href="#问题出现的原因" class="headerlink" title="问题出现的原因"></a>问题出现的原因</h3><p>自己在facebook开发者后台添加的密钥散列不对。</p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><h4 id="网传方法"><a href="#网传方法" class="headerlink" title="网传方法"></a>网传方法</h4><ul>
<li>网传方法：有人说将这里提示的<code>key hash</code>添加到后台密钥散列的地方就行了</li>
<li>效果：我这里不适用</li>
<li>分析原因：可能是因为我的应用已经在<code>google play</code>上架，apk包已经被<code>google play</code>后台重新签名了。</li>
</ul>
<h4 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h4><ul>
<li>下载当前应用在<code>google play</code>的证书</li>
<li>获取证书的hash值<br>执行下面命令，获取hash值<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl dgst -sha1 -binary &lt;GooglePlay的发布证书地址&gt;.der | openssl base64</span><br></pre></td></tr></table></figure></li>
<li>将获取到的hash值注册到facebook<br>效果：可行</li>
</ul>
]]></content>
      <categories>
        <category>android studio</category>
        <category>facebook</category>
      </categories>
      <tags>
        <tag>facebook</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo + matery主题美化分类页</title>
    <url>/f223ff9c.html</url>
    <content><![CDATA[<p>最近新换了个博客主题，matery，感觉这个主题还挺好看的。<br>相信很多人和我一样，换了主题就想着各种美化，魔改，怎奈技术不到位，自己没有这个能力，只能在网上看看别人是怎么改的，然后自己照做。废话不多说，步入正题。</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>先给看下效果图吧，喜欢就接着往下看<br><img data-src="https://s1.ax1x.com/2022/11/03/xqs36I.png" alt="效果图" /></p>
<img data-src="https://s1.ax1x.com/2022/11/03/xqs11A.png" alt="效果图"/>

<h2 id="文章分类页美化"><a href="#文章分类页美化" class="headerlink" title="文章分类页美化"></a>文章分类页美化</h2><h3 id="引入代码"><a href="#引入代码" class="headerlink" title="引入代码"></a>引入代码</h3><ul>
<li>首先，打开”&#x2F;layout&#x2F;category-cloud.ejs”文件</li>
<li>找到下面代码<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;span <span class="keyword">class</span>=<span class="string">&quot;chip center-align waves-effect waves-light</span></span><br><span class="line"><span class="string">          &lt;% if (isCategory &amp;&amp; category.name == page.category) &#123; %&gt; chip-active &lt;% &#125; else &#123; %&gt; chip-default &lt;% &#125; %&gt;&quot;</span></span><br><span class="line">          style=<span class="string">&quot;background-color: &lt;%- color %&gt;;&quot;</span>&gt;&lt;%- category.<span class="property">name</span> %&gt;</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;tag-length&quot;</span>&gt;</span>&lt;%- category.length %&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">  &lt;/span&gt;</span><br></pre></td></tr></table></figure></li>
<li>将上面代码修改为下面代码<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;moleskine-wrapper&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;moleskine-notebook&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;chip notebook-cover center-align waves-effect waves-light</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">          &lt;% if (isCategory &amp;&amp; category.name == page.category) &#123; %&gt; chip-active &lt;% &#125; else &#123; %&gt; chip-default &lt;% &#125; %&gt;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">style</span>=<span class="string">&quot;background-color: &lt;%- color %&gt;;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">class</span>=<span class="string">&quot;notebook-skin</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                  &lt;% if (isCategory &amp;&amp; category.name == page.category) &#123; %&gt; chip-active &lt;% &#125; else &#123; %&gt; chip-default &lt;% &#125; %&gt;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &lt;%- category.name %&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;notebook-page dotted&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;     </span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="设置css"><a href="#设置css" class="headerlink" title="设置css"></a>设置css</h3><p>将下面代码放在<code>category-cloud.ejs</code>文件末尾</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="comment">/* 文章分类书本样式 */</span></span><br><span class="line">.<span class="property">chip</span>-container .<span class="property">tag</span>-chips &#123;</span><br><span class="line">    <span class="attr">display</span>: flex;</span><br><span class="line">    flex-<span class="attr">wrap</span>: wrap;</span><br><span class="line">    justify-<span class="attr">content</span>: space-around;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">chip</span>-container .<span class="property">tag</span>-chips a &#123;</span><br><span class="line">    <span class="attr">margin</span>: <span class="number">0</span> 7px 10px;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">chip</span>-container .<span class="property">chip</span> &#123;</span><br><span class="line">    max-<span class="attr">width</span>: <span class="title function_">calc</span>(<span class="number">100</span>% / <span class="number">4</span>);</span><br><span class="line">    min-<span class="attr">width</span>: 10em;</span><br><span class="line">    <span class="attr">height</span>: 200px;</span><br><span class="line">    <span class="attr">position</span>: relative;</span><br><span class="line">    <span class="attr">transition</span>: .5s linear;</span><br><span class="line">    <span class="attr">padding</span>: 19px <span class="number">0</span>;</span><br><span class="line">    line-<span class="attr">height</span>: 20px;</span><br><span class="line">    z-<span class="attr">index</span>: <span class="number">990</span>;</span><br><span class="line">    border-<span class="attr">radius</span>: 5px 15px 15px 5px;</span><br><span class="line">    transform-<span class="attr">origin</span>: left center <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">chip</span>-container .<span class="property">notebook</span>-<span class="attr">cover</span>::before &#123;</span><br><span class="line">    <span class="attr">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attr">position</span>: absolute;</span><br><span class="line">    <span class="attr">width</span>: 10px;</span><br><span class="line">    <span class="attr">height</span>: <span class="title function_">calc</span>(<span class="number">100</span>% + 2px);</span><br><span class="line">    <span class="attr">top</span>: -1px;</span><br><span class="line">    z-<span class="attr">index</span>: <span class="number">100</span>;</span><br><span class="line">    border-<span class="attr">radius</span>: 2px;</span><br><span class="line">    <span class="attr">right</span>: 25px;</span><br><span class="line">    <span class="attr">transition</span>: 2s ease;</span><br><span class="line">    <span class="comment">/* background: linear-gradient(to right,#9c2e2b 0,#cc4b48 12%,#9c2e2b 25%,#cc4b48 37%,#9c2e2b 50%,#cc4b48 62%,#9c2e2b 75%,#cc4b48 87%,#9c2e2b 100%); */</span></span><br><span class="line">    <span class="attr">background</span>: linear-<span class="title function_">gradient</span>(to right,#1e606e <span class="number">0</span>,#2e95aa <span class="number">12</span>%,#1e606e <span class="number">25</span>%,#2e95aa <span class="number">37</span>%,#1e606e <span class="number">50</span>%,#2e95aa <span class="number">62</span>%,#1e606e <span class="number">75</span>%,#2e95aa <span class="number">87</span>%,#1e606e <span class="number">100</span>%);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.<span class="property">chip</span> .<span class="property">notebook</span>-skin &#123;</span><br><span class="line">    <span class="attr">height</span>: 50px;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">100</span>%;</span><br><span class="line">    <span class="attr">background</span>: #e8e8e0;</span><br><span class="line">    margin-<span class="attr">top</span>: 42px;</span><br><span class="line">    <span class="attr">padding</span>: 10px 32px 64px 10px;</span><br><span class="line">    font-<span class="attr">size</span>: 19px;</span><br><span class="line">    <span class="attr">position</span>: relative;</span><br><span class="line">    z-<span class="attr">index</span>: <span class="number">10</span>;</span><br><span class="line">    <span class="attr">color</span>: #<span class="number">222</span>;</span><br><span class="line">    text-<span class="attr">align</span>: left;</span><br><span class="line">    box-<span class="attr">shadow</span>: <span class="number">0</span> 1px 1px <span class="title function_">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">.2</span>);</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">chip</span> .<span class="property">notebook</span>-<span class="attr">skin</span>:before &#123;</span><br><span class="line">    <span class="attr">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attr">position</span>: absolute;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">100</span>%;</span><br><span class="line">    <span class="attr">height</span>: 15px;</span><br><span class="line">    <span class="attr">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attr">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attr">background</span>: #cddc39;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">notebook</span>-cover &#123;</span><br><span class="line">    <span class="attr">background</span>: #cc4b48;</span><br><span class="line">    <span class="attr">height</span>: 200px;</span><br><span class="line">    <span class="attr">width</span>: 140px;</span><br><span class="line">    <span class="attr">position</span>: absolute;</span><br><span class="line">    border-<span class="attr">radius</span>: 5px 15px 15px 5px;</span><br><span class="line">    z-<span class="attr">index</span>: <span class="number">10</span>;</span><br><span class="line">    <span class="attr">transition</span>: .5s linear;</span><br><span class="line">    transform-<span class="attr">style</span>: preserve-3d;</span><br><span class="line">    transform-<span class="attr">origin</span>: left center <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.<span class="property">moleskine</span>-wrapper &#123;</span><br><span class="line">    max-<span class="attr">width</span>: <span class="title function_">calc</span>(<span class="number">100</span>% / <span class="number">4</span>);</span><br><span class="line">    min-<span class="attr">width</span>: 10em;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">moleskine</span>-<span class="attr">notebook</span>:hover .<span class="property">notebook</span>-cover &#123;</span><br><span class="line">    <span class="attr">transform</span>: <span class="title function_">rotateY</span>(-50deg);</span><br><span class="line">    z-<span class="attr">index</span>: <span class="number">99</span>;</span><br><span class="line">    box-<span class="attr">shadow</span>: 20px 10px 50px <span class="title function_">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">.2</span>);</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">moleskine</span>-notebook &#123;</span><br><span class="line">    <span class="attr">height</span>: 200px;</span><br><span class="line">    <span class="attr">position</span>: relative;</span><br><span class="line">    <span class="attr">display</span>: flex;</span><br><span class="line">    flex-<span class="attr">wrap</span>: wrap;</span><br><span class="line">    justify-<span class="attr">content</span>: space-around;</span><br><span class="line">    <span class="attr">transition</span>: .5s linear;</span><br><span class="line">    border-<span class="attr">radius</span>: 5px 15px 15px 5px;</span><br><span class="line">    transform-<span class="attr">origin</span>: left center <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">moleskine</span>-<span class="attr">notebook</span>:hover &#123;</span><br><span class="line">    <span class="attr">transform</span>: <span class="title function_">rotateZ</span>(-10deg);</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">notebook</span>-page.<span class="property">dotted</span> &#123;</span><br><span class="line">    <span class="attr">background</span>: linear-<span class="title function_">gradient</span>(to bottom,#fbfae8 9px,#e4e4e4 1px);</span><br><span class="line">    background-<span class="attr">size</span>: <span class="number">100</span>% 10px;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">chip</span>-container .<span class="property">chip</span>:hover &#123;</span><br><span class="line">    <span class="attr">background</span>: none;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">notebook</span>-page &#123;</span><br><span class="line">    <span class="attr">height</span>: <span class="number">100</span>%;</span><br><span class="line">    <span class="attr">width</span>: 140px;</span><br><span class="line">    <span class="attr">position</span>: absolute;</span><br><span class="line">    <span class="attr">top</span>: 10px;</span><br><span class="line">    background-<span class="attr">color</span>: #fbfae8;</span><br><span class="line">    z-<span class="attr">index</span>: <span class="number">0</span>;</span><br><span class="line">    border-<span class="attr">radius</span>: 5px 16px 16px 5px;</span><br><span class="line">    <span class="attr">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>做了如上操作，然后部署博客就可以看到变化了哦~</p>
<h3 id="进一步优化"><a href="#进一步优化" class="headerlink" title="进一步优化"></a>进一步优化</h3><p>如果对颜色不满意，还可以进行颜色的调整，方法如下<br>打开<code>source/css/matery.css</code>文件，修改下面代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.<span class="property">chip</span>-container .<span class="property">chip</span>:hover &#123;</span><br><span class="line">    <span class="attr">color</span>: #2ea451;</span><br><span class="line">    <span class="attr">opacity</span>: <span class="number">.8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.<span class="property">chip</span>-container .<span class="property">chip</span>-active &#123;</span><br><span class="line">    <span class="attr">color</span>: #2ea451 !important;</span><br><span class="line">    box-<span class="attr">shadow</span>: 2px 5px 10px #aaa !important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里是博主自己设置的颜色，你也可以设置为自己喜欢的颜色</p>
<h2 id="标签美化"><a href="#标签美化" class="headerlink" title="标签美化"></a>标签美化</h2><p>标签页就很简单了呀<br>打开<code>matery.css</code>文件，修改颜色代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.<span class="property">chip</span>-<span class="keyword">default</span> .<span class="property">tag</span>-length &#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="title function_">rgba</span>(<span class="number">66</span>, <span class="number">92</span>, <span class="number">118</span>, <span class="number">.8</span>);</span><br><span class="line">    margin-<span class="attr">top</span>: 1px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.<span class="property">chip</span>-active .<span class="property">tag</span>-length &#123;</span><br><span class="line">    <span class="attr">color</span>: #64c45b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>效果如图：<br><img data-src="https://s1.ax1x.com/2022/11/03/xqs8Xt.png" alt="效果图"/></p>
<p><a href="https://blog.csdn.net/weixin_43662760/article/details/122311171?spm=1001.2101.3001.6650.14&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-14-122311171-blog-109411974.pc_relevant_3mothn_strategy_recovery&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-14-122311171-blog-109411974.pc_relevant_3mothn_strategy_recovery&utm_relevant_index=15">文章参考链接</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>hexo博客添加algolia搜索</title>
    <url>/ed933f20.html</url>
    <content><![CDATA[<p>之前博客一直都没有搜索系统，趁着周末，给博客添加一个搜索系统，我这里选择的是使用<code>algolia</code>搜索。<br>在这个过程中遇到了几个需要注意的地方，这里特意说明下：</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h3 id="algolia注册"><a href="#algolia注册" class="headerlink" title="algolia注册"></a>algolia注册</h3><p>先去<a href="https://dashboard.algolia.com/">algolia官网</a>,进行注册。</p>
<h3 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h3><p>你需要安装<a href="https://github.com/LouisBarranqueiro/hexo-algoliasearch">hexo-algoliasearche</a>。<br>按照这上面的步骤进行操作就行了~<br><code>api Key</code>的位置如下，一一对应的填写好就行<br><img data-src="https://s1.ax1x.com/2023/08/19/pP8ni40.jpg" alt="" /></p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>1、配置文件需要放在根目录下的<code>_config.yml</code>中，而不是主题的<code>_config.yml</code>,</p>
<p>这个时候博客的搜索是搜索不到任何内容的，我们需要通过 <code>Hexo Aloglia</code> 获取站点数据</p>
<h3 id="Hexo-Aloglia获取站点数据"><a href="#Hexo-Aloglia获取站点数据" class="headerlink" title="Hexo Aloglia获取站点数据"></a>Hexo Aloglia获取站点数据</h3><p>1、配置本地环境<br>我们需要配置一个名称为 <code>HEXO_ALGOLIA_INDEXING_KEY</code>，内容为 <code>Alogolia</code> 网页中 <code>Admin API KEY </code>的环境变量,<br>以mac端为例:<br>打开终端<code>vim ~/.bash_profile</code>添加下面语句：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export HEXO_ALGOLIA_INDEXING_KEY=d9987de239cbf5ad94ddcad7a5ef1682</span><br><span class="line">export PATH=$PATH:$GOROOT/bin:$GOPATH/bin:$MYSQL_HOME/bin:$MAVEN_HOME/bin:$CATALINA_HOME/bin:$CALIBRE_HOME:$JAVA_HOME/bin:$HEXO_ALGOLIA_INDEXING_KEY</span><br></pre></td></tr></table></figure>
<p>再执行<code>source ~/.bash_profile</code>刷新即可。</p>
<p>再在 <code>hexo</code>站点根目录下执行<code>hexo algolia</code> 来搜集数据更新到我们刚创建的 <code>Index</code> 中,我们可以在网页中看到所有的数据，如下图<br><img data-src="https://s1.ax1x.com/2023/08/19/pP8nkCV.jpg" alt="" /></p>
<h3 id="重新部署"><a href="#重新部署" class="headerlink" title="重新部署"></a>重新部署</h3><p>执行<code>hexo clean &amp;&amp; hexo g -d</code>重新部署，部署完成后再次访问，即可看到搜索功能已经配置完成：<br><img data-src="https://s1.ax1x.com/2023/08/19/pP8u3on.jpg" alt="" /></p>
]]></content>
      <categories>
        <category>Hexo</category>
        <category>algolia</category>
      </categories>
  </entry>
  <entry>
    <title>hexo部署到阿里云服务器</title>
    <url>/574ca0fa.html</url>
    <content><![CDATA[<blockquote>
<p>说明:这里其实是分为两个部分，第一个部分是将hexo生成的静态文件上传到服务器，第二个部分就是部署网站了（个人理解）</p>
</blockquote>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h2 id="文件上传到服务器"><a href="#文件上传到服务器" class="headerlink" title="文件上传到服务器"></a>文件上传到服务器</h2><h3 id="创建git用户"><a href="#创建git用户" class="headerlink" title="创建git用户"></a>创建git用户</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adduser git</span><br></pre></td></tr></table></figure>
<h3 id="修改git用户密码"><a href="#修改git用户密码" class="headerlink" title="修改git用户密码"></a>修改git用户密码</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo passwd git</span><br></pre></td></tr></table></figure>
<p>根据提示操作即可</p>
<h3 id="设置权限"><a href="#设置权限" class="headerlink" title="设置权限"></a>设置权限</h3><p>使用vim编辑<code>/etc/sudoers</code>(vim的使用方法很简单，不会可以百度)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/sudoers</span><br></pre></td></tr></table></figure>
<p>找到<code>User privilege specification</code>部分，添加如下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git     ALL=(ALL:ALL) ALL</span><br></pre></td></tr></table></figure>
<p>如下图：<br><img data-src="https://s1.ax1x.com/2023/07/11/pCfkGFO.jpg" alt="" /></p>
<h3 id="切换至git用户"><a href="#切换至git用户" class="headerlink" title="切换至git用户"></a>切换至git用户</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su git</span><br></pre></td></tr></table></figure>
<p>这里需要输入<code>git</code>的用户密码</p>
<h3 id="添加密钥"><a href="#添加密钥" class="headerlink" title="添加密钥"></a>添加密钥</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/.ssh</span><br><span class="line">touch ~/.ssh/authorized_keys</span><br><span class="line">chmod 600 ~/.ssh/authorzied_keys</span><br><span class="line">chmod 700 ~/.ssh</span><br><span class="line">vim ~/.ssh/authorized_keys    #将ssh密钥粘贴进去</span><br></pre></td></tr></table></figure>
<h3 id="登录测试"><a href="#登录测试" class="headerlink" title="登录测试"></a>登录测试</h3><p>在本地打开终端，以<code>ssh</code>的方式登录云服务器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -v git@你的ip地址</span><br></pre></td></tr></table></figure>
<h3 id="创建git仓库"><a href="#创建git仓库" class="headerlink" title="创建git仓库"></a>创建git仓库</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /www/git/ </span><br><span class="line">cd /www/git/</span><br><span class="line">git init --bare blog.git  #在/www/git下创建新仓库blog.git</span><br><span class="line">chown git:git -R blog.git #给予git用户权限</span><br></pre></td></tr></table></figure>
<p>在 <code>blog.git/hooks</code> 文件夹下创建一个 <code>post-receive</code> 钩子</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd blog.git/hooks</span><br><span class="line">vim post-receive</span><br></pre></td></tr></table></figure>
<p>在 <code>post-receive</code> 文件中输入以下代码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span> </span><br><span class="line">git --work-tree=/www/wwwroot/hexo --git-dir=/www/git/blog.git checkout -f</span><br></pre></td></tr></table></figure>
<p>授予 <code>post-receive</code> 文件可执行权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x /www/git/blog.git/hooks/post-receive</span><br></pre></td></tr></table></figure>
<p>创建<code>www/wwwroot/hexo</code>目录，用于Nginx托管（<code>**git用户下操作**</code>）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /www/wwwroot/hexo</span><br><span class="line">sudo chown -R $USER:$USER /www/wwwroot/hexo/ 设置目录所有权</span><br><span class="line">sudo chmod -R 755 /www/wwwroot/hexo/</span><br></pre></td></tr></table></figure>
<p>到这里，服务器上git就已经弄好了</p>
<h3 id="Hexo配置"><a href="#Hexo配置" class="headerlink" title="Hexo配置"></a>Hexo配置</h3><p>在hexo的<code>_config.yml</code>中设置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: &#x27;git&#x27;</span><br><span class="line">  repo: git@服务器ip:/www/git/blog.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>最后三连就可以了<code>hexo clean &amp;&amp; hexo g -d</code></p>
<p>到这里，还只是将hexo的静态文件上传到服务器，下面我们进行下一步。</p>
<h2 id="搭建网站"><a href="#搭建网站" class="headerlink" title="搭建网站"></a>搭建网站</h2><p>搭建网站比较简单</p>
<h3 id="安装宝塔"><a href="#安装宝塔" class="headerlink" title="安装宝塔"></a>安装宝塔</h3><p>注意：宝塔安装完后需要安装<code>nginx</code>，首次进入宝塔会有安装提示，根据提示安装即可。</p>
<h3 id="添加网站"><a href="#添加网站" class="headerlink" title="添加网站"></a>添加网站</h3><p>在宝塔界面直接添加网站即可，填写自己的域名，根目录选择服务器存放hexo静态文件的文件目录即可，如下图<br><img data-src="https://s1.ax1x.com/2023/07/11/pCfAptO.jpg" alt="" /><br><img data-src="https://s1.ax1x.com/2023/07/11/pCfAnN8.jpg" alt="" /><br><img data-src="https://s1.ax1x.com/2023/07/11/pCfAmAf.jpg" alt="" /></p>
<h2 id="整个过程踩的几个坑"><a href="#整个过程踩的几个坑" class="headerlink" title="整个过程踩的几个坑"></a>整个过程踩的几个坑</h2><h3 id="网站部署完后域名无法访问"><a href="#网站部署完后域名无法访问" class="headerlink" title="网站部署完后域名无法访问"></a>网站部署完后域名无法访问</h3><p>可能性：<br>1、运行目录选择错误。<br>解决方法：查看运行目录下是否有本地推送上来的文件<br>2、域名是否解析<br>域名要正常解析到自己的服务器<br>3、网站是否有SSL证书<br>博主这里就是遇到了这个问题，网站没有配置SSL证书，域名始终打不来，配置好证书后可以正常访问</p>
<h3 id="文件无法推送"><a href="#文件无法推送" class="headerlink" title="文件无法推送"></a>文件无法推送</h3><p>全部配置好在执行三连的时候可能会遇到本地文件无法推送的问题，可能是因为服务器上存放这些文件的文件夹权限问题，修改好权限即可。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>http强制跳到https</title>
    <url>/f4442f9c.html</url>
    <content><![CDATA[<p>博主最近心血来潮，将网站从github部署到云服务器上。<br>在域名解析之后发现访问博客只能通过<code>http</code>访问，而且总是提示网站不安全，于是便心生了将<code>http</code>强制跳转到<code>https</code>的想法~</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>做法很简单</p>
<h3 id="下载ssl证书"><a href="#下载ssl证书" class="headerlink" title="下载ssl证书"></a>下载ssl证书</h3><p>下载nginx的ssl证书，没有的需要先去申请，网上很多教程，这里就不介绍了</p>
<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>打开云服务器终端，修改<code>nginx.conf</code>配置，输入命令<br><code>vim /etc/nginx/nginx.conf</code><br>将下面代码复制粘贴到原有的配置的<code>server&#123;&#125;</code>下面</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">        listen <span class="number">443</span> ssl;</span><br><span class="line">        server_name localhost;  <span class="comment"># localhost修改为您证书绑定的域名。</span></span><br><span class="line">        ssl_certificate cert/domain_name.top.pem;   <span class="comment">#将domain_name.pem替换成您证书的文件名。</span></span><br><span class="line">        ssl_certificate_key cert/domain_name.top.key;   <span class="comment">#将domain_name.key替换成您证书的密钥文件名。</span></span><br><span class="line">        ssl_session_timeout 5m;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;  <span class="comment">#使用此加密套件。</span></span><br><span class="line">        ssl_protocols TLSv1 TLSv1<span class="number">.1</span> TLSv1<span class="number">.2</span>;   <span class="comment">#使用该协议进行配置。</span></span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass   http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">80</span>;  <span class="comment">#选填你的端口号</span></span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header Upgrade-Insecure-Requests <span class="number">1</span>;</span><br><span class="line">            proxy_set_header X-Forwarded-Proto https;</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>复制好后，按<code>esc</code>键，然后按<code>shift + :</code>键，输入<code>x</code>保存退出<br>再在终端输入<code>nginx -s reload</code>重启nginx服务即可<br><img data-src="https://s1.ax1x.com/2022/11/06/xj0uLt.md.jpg" alt=""/></p>
]]></content>
      <categories>
        <category>https</category>
      </categories>
      <tags>
        <tag>http</tag>
        <tag>https</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中if条件语句</title>
    <url>/5fc050ec.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h1 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>当我们需要根据给定的条件来决定是否执行一段代码时，<code>if</code> 语句就派上用场了。<code>if</code> 块仅在与其关联的布尔表达式为 <code>true</code> 时执行。<code>if</code> 块的结构如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件) &#123;</span><br><span class="line">    <span class="comment">// 当条件成立时执行此处代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>大括号中包含的内容就称为语句块。</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>我们来看一个 <code>if</code> 语句的实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IfStatement1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line">        <span class="keyword">if</span>(age &gt;= <span class="number">18</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在中国你已经成年&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在中国你已经成年</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>当条件<code>age &gt;= 18</code> 成立时，也就是布尔表达式计算结果为 <code>true</code>(真)，<code>if</code> 语句块会执行。显然上面实例中 <code>age</code> 变量的值为 18，条件是成立的，执行程序，屏幕上将会打印 “在中国你已经成年”。</p>
<p>如果语句块内只有一条语句，我们也可以去掉花括号 <code>&#123;&#125;</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(age &gt;= <span class="number">18</span>)</span><br><span class="line">    System.out.println(<span class="string">&quot;在中国你已经成年&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>当然，即使 <code>if</code> 语句块只有一条语句，也并不推荐这种不易于阅读的写法。</p>
<h1 id="if-…-else-…-语句"><a href="#if-…-else-…-语句" class="headerlink" title="if … else … 语句"></a>if … else … 语句</h1><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><p><code>if</code> 语句可以结合 <code>else</code> 来使用，当布尔表达式计算结果为 <code>false</code> （假）时，<code>else</code> 语句块将会执行。</p>
<p><code>if .. .else</code> 语句用于有条件地执行两个代码块的其中一个，具体执行哪一个代码块，取决于布尔条件的结果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件) &#123;</span><br><span class="line">    <span class="comment">// 如果条件成立，执行此处代码</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果条件不成立，执行此处代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><p>改写上面 <code>if</code> 语句的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IfElseStatement1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">15</span>;</span><br><span class="line">        <span class="keyword">if</span>(age &gt;= <span class="number">18</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在中国你已经成年&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在中国你还未成年&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在中国你还未成年</span><br></pre></td></tr></table></figure>
<p>我们将变量 <code>age</code> 赋值为 15，并且在 <code>if</code> 语句块的后面加了一段 <code>else &#123;...&#125;</code> 语句块。这个时候，条件 <code>age &gt;= 18</code> 的计算结果就为 <code>false</code> 了，程序将会执行 <code>else</code> 语句块中的代码。执行代码，屏幕将会打印 “在中国你还未成年”。</p>
<blockquote>
<p>补充<br>Java 支持使用<strong>条件表达式</strong>（又称三目运算符）<code>表达式1 ? 表达式2 : 表达式3</code> 来简化 <code>if else</code> 语句的代码。<br>表达式 1 的作用等同于 <code>if</code> 语句后面的条件，如果表达式 1 为 <code>true</code>， 则执行 <code>表达式2</code>， 否则执行 <code>表达式3</code></p>
</blockquote>
<p>也就是说上面的代码可以使用三目运算符来实现同样的功能。实例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IfElseStatement2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">15</span>;</span><br><span class="line">        System.out.println(age &gt;= <span class="number">18</span> ? <span class="string">&quot;在中国你已经成年&quot;</span> :  <span class="string">&quot;在中国你还未成年&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="if-…-else-if-…-else-语句"><a href="#if-…-else-if-…-else-语句" class="headerlink" title="if … else if … else 语句"></a>if … else if … else 语句</h1><h2 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h2><blockquote>
<p><code>if</code> 语句可以结合 <code>else if</code> 来实现更复杂的程序分支结构：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果条件1成立，执行此处代码</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果条件1不成立，并且条件2成立，执行此处代码</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果条件1、条件2都不成立，执行此处代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h2><p><code>if</code> 语句可以搭配任意多数量的 <code>else if</code> 语句使用，但是只能有一个 <code>else</code>。下面我们来看一段代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据给定分数向屏幕打印评级</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IfElseIfStatement</span> &#123;</span><br><span class="line">	  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">70</span>;</span><br><span class="line">        <span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">          	System.out.println(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(score &gt;= <span class="number">70</span>) &#123;</span><br><span class="line">          	System.out.println(<span class="string">&quot;良好&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">          	System.out.println(<span class="string">&quot;及格&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          	System.out.println(<span class="string">&quot;不及格&quot;</span>);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">良好</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果为 “良好”，你也许会疑惑，score 为 70，同样也大于等于 60，为什么没有输入 “及格” 呢？<br>这是由于当程序遇到符合条件的分支就会执行其分支语句块中的语句，不会执行其他分支语句块的语句。</p>
</blockquote>
<h2 id="嵌套-if-…-else-语句"><a href="#嵌套-if-…-else-语句" class="headerlink" title="嵌套 if … else 语句"></a>嵌套 if … else 语句</h2><p>你也可以在另一个 <code>if</code> 或者 <code>else if</code> 语句中使用 <code>if</code> 或者 <code>else if</code> 语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件<span class="number">1</span>)&#123;</span><br><span class="line">   <span class="comment">// 如果条件1为真，执行这里的语句</span></span><br><span class="line">   <span class="keyword">if</span>(条件<span class="number">2</span>)&#123;</span><br><span class="line">      <span class="comment">////如果条件2为真，执行这里的语句</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们来看一个嵌套语句的实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IfElseStatement1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      	<span class="comment">// 初始化整型变量age，值为25</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">25</span>;</span><br><span class="line">				<span class="type">int</span> <span class="variable">sex</span> <span class="operator">=</span> <span class="number">1</span>;  <span class="comment">// 此处用sex变量表示性别，1：男  2：女</span></span><br><span class="line">        <span class="keyword">if</span>(age &gt;= <span class="number">20</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在中国你已经成年&quot;</span>);</span><br><span class="line">          	<span class="keyword">if</span>(sex == <span class="number">2</span>) &#123;</span><br><span class="line">              	System.out.println(<span class="string">&quot;并且到了法定的结婚年龄&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">          	<span class="keyword">if</span>(sex == <span class="number">1</span> &amp;&amp; age &gt;= <span class="number">22</span>) &#123;</span><br><span class="line">              	System.out.println(<span class="string">&quot;并且到了法定的结婚年龄&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在中国你还未成年&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在中国你已经成年</span><br><span class="line">并且到了法定的结婚年龄</span><br></pre></td></tr></table></figure>

<h1 id="switch-语句"><a href="#switch-语句" class="headerlink" title="switch 语句"></a>switch 语句</h1><h2 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h2><p><code>switch</code> 条件语句可以理解为简写版的多个 <code>if .. else</code> 语句。<code>switch</code> 语句的语法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (值) &#123;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">       语句<span class="number">1.1</span></span><br><span class="line">       ...</span><br><span class="line">	   语句n<span class="number">.1</span></span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">        语句<span class="number">2.1</span></span><br><span class="line">        ...</span><br><span class="line">        语句<span class="number">2.</span>n</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        语句n<span class="number">.1</span></span><br><span class="line">        ...</span><br><span class="line">        语句n.n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>switch case 语句有如下规则：</p>
<ul>
<li>switch 语句中的变量类型可以是： <code>byte</code>、<code>short</code>、<code>int</code>、 <code>char</code> 或者 <code>String</code>；</li>
<li>switch 语句可以拥有多个 case 语句。每个 case 后面跟一个要比较的值和冒号；</li>
<li>case 语句中的值的数据类型必须与变量的数据类型相同，而且只能是常量或者字面常量；</li>
<li>当变量的值与 case 语句的值相等时，那么 case 语句之后的语句开始执行，直到 break 语句出现才会跳出 switch 语句；</li>
<li>当遇到 break 语句时，switch 语句终止。程序跳转到 switch 语句后面的语句执行。case 语句不一定要包含 break 语句。如果没有 break 语句出现，程序会继续执行下一条 case 语句，直到出现 break 语句；</li>
<li>switch 语句可以包含一个 default 分支，该分支一般是 switch 语句的最后一个分支（可以在任何位置，但建议在最后一个）。default 在没有 case 语句的值和变量值相等的时候执行。default 分支不需要 break 语句。</li>
</ul>
<h2 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h2><p>我们先来看下面的一个简单实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwitchStatement1</span> &#123;</span><br><span class="line">  	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">      	<span class="keyword">switch</span> (i) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">              <span class="comment">// i 的值不等于1，所以不执行此处代码</span></span><br><span class="line">              System.out.println(<span class="string">&quot;i的值为1&quot;</span>);</span><br><span class="line">            	<span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">              <span class="comment">// i 的值等于2，所以执行此处代码</span></span><br><span class="line">              System.out.println(<span class="string">&quot;i的值为2&quot;</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">default</span>:</span><br><span class="line">			  <span class="comment">// case 2 分支已执行并break，所以此处代码不会执行</span></span><br><span class="line">              System.out.println(<span class="string">&quot;i的值既不等于1，也不等于2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">i的值为<span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>从 JDK5 开始，<code>switch</code> 语句可以与 枚举值一起使用。 例如，下面是根据数字显示对应星期几的实例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwitchStatement2</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">      <span class="type">Day</span> <span class="variable">day</span> <span class="operator">=</span> day.MONDAY; <span class="comment">// 假设 Day 是一种枚举类型，里面包含星期一到星期天。</span></span><br><span class="line">      <span class="keyword">switch</span> (day) &#123;</span><br><span class="line">         <span class="keyword">case</span> MONDAY :</span><br><span class="line">            System.out.println(<span class="string">&quot;星期一&quot;</span>); </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> TUESDAY :</span><br><span class="line">          	System.out.println(<span class="string">&quot;星期二&quot;</span>); </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> WEDNESDAY :</span><br><span class="line">            System.out.println(<span class="string">&quot;星期三&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> THURSDAY :</span><br><span class="line">            System.out.println(<span class="string">&quot;星期四&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> FRIDAY :</span><br><span class="line">            System.out.println(<span class="string">&quot;星期五&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> SATURDAY :</span><br><span class="line">            System.out.println(<span class="string">&quot;星期六&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> SUNDAY :</span><br><span class="line">            System.out.println(<span class="string">&quot;星期天&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从 JDK8 开始，<code>switch</code> 语句可以与 <code>String</code> 值一起使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwitchStatement3</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">day</span> <span class="operator">=</span> <span class="string">&quot;TUESDAY&quot;</span>;</span><br><span class="line">      <span class="keyword">switch</span> (day) &#123;</span><br><span class="line">         <span class="keyword">case</span> <span class="string">&quot;Wednesday&quot;</span> :</span><br><span class="line">            System.out.println(<span class="string">&quot;星期一&quot;</span>); </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="string">&quot;TUESDAY&quot;</span> :</span><br><span class="line">          	System.out.println(<span class="string">&quot;星期二&quot;</span>); </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="string">&quot;WEDNESDAY&quot;</span> :</span><br><span class="line">            System.out.println(<span class="string">&quot;星期三&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="string">&quot;THURSDAY&quot;</span> :</span><br><span class="line">            System.out.println(<span class="string">&quot;星期四&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="string">&quot;FRIDAY&quot;</span> :</span><br><span class="line">            System.out.println(<span class="string">&quot;星期五&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="string">&quot;SATURDAY&quot;</span> :</span><br><span class="line">            System.out.println(<span class="string">&quot;星期六&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="string">&quot;SUNDAY&quot;</span> :</span><br><span class="line">            System.out.println(<span class="string">&quot;星期天&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">星期二</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>http请求返回404错误可能的原因及解决方案</title>
    <url>/9432c199.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h3 id="解决-HTTP-请求返回-404-错误"><a href="#解决-HTTP-请求返回-404-错误" class="headerlink" title="解决 HTTP 请求返回 404 错误"></a>解决 HTTP 请求返回 404 错误</h3><p>如果在进行 HTTP 请求时遇到 404 错误，通常表示请求的资源未找到。以下是一些可能导致这种情况的原因以及相应的解决方法：</p>
<ol>
<li><p><strong>URL 错误：</strong><br>确保请求的 URL 是正确的，包括路径和文件名。仔细检查 URL 是否拼写正确。</p>
</li>
<li><p><strong>资源不存在：</strong><br>如果请求的是文件，确保文件存在于服务器上的指定位置。对于动态资源，确保相应的服务端端点或路由存在。</p>
</li>
<li><p><strong>权限问题：</strong><br>检查是否具有访问资源的权限。有时服务器可能返回 404 错误，即使资源存在，因为缺乏足够的权限。</p>
</li>
<li><p><strong>服务器配置问题：</strong><br>404 错误可能由于服务器配置问题引起。确保服务器配置正确，包括文件路径、权限和路由设置。</p>
</li>
<li><p><strong>文件大小写问题：</strong><br>检查服务器是否区分文件路径的大小写。确保 URL 中的大小写与服务器上的实际文件名匹配。</p>
</li>
<li><p><strong>网络问题：</strong><br>有时网络问题可能导致请求未能正确到达服务器。确保网络连接正常，尝试使用其他网络环境进行测试。</p>
</li>
<li><p><strong>服务器故障：</strong><br>如果确定 URL 和资源都正确，可能是服务器出现故障。在这种情况下，请联系服务器管理员以获取帮助。</p>
</li>
<li><p><strong>URL 编码问题：</strong><br>如果 URL 包含特殊字符，确保进行了正确的 URL 编码。某些字符在 URL 中需要进行编码以确保正确传递。</p>
</li>
</ol>
<p>通过检查这些方面，您应该能够找到导致 HTTP 404 错误的原因。如果问题仍然存在，可能需要查看服务器日志以获取更详细的错误信息。</p>
]]></content>
      <categories>
        <category>Web Development</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
        <tag>请求</tag>
        <tag>404</tag>
      </tags>
  </entry>
  <entry>
    <title>pip问题Traceback (most recent call last)</title>
    <url>/39939.html</url>
    <content><![CDATA[<p>刚刚在用pip安装ipython时，遇到了下面这个错误</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<blockquote>
<p>笔者这里用的是python3.7.2版本</p>
</blockquote>
<p><img data-src="https://pic.imgdb.cn/item/664340940ea9cb1403bb81b5.png" alt="在这里插入图片描述"><br>解决方案如下：打开python 的安装路径，到<code>python3.7\Lib\site-packages\pip</code>路径下，打开<br><code>__main__.py</code>文件，修改最后一行，<br>将原本的<code>sys.exit(_main())</code> 改为 <code>sys.exit(_main__._main())</code> ,如下图<br><img data-src="https://pic.imgdb.cn/item/664340940ea9cb1403bb8198.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>常见bug</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>pip问题：SyntaxError:invalid syntax</title>
    <url>/19849.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>今天在使用python安装ipython时出现了下面错误</p>
<p><img data-src="https://pic.imgdb.cn/item/664340d90ea9cb1403bbdb61.png" alt="在这里插入图片描述"></p>
<p>解决方法很简单，退出python命令行<br>重新输入命令：<code>pip3 install ipython</code> 即可</p>
<p><img data-src="https://pic.imgdb.cn/item/664340d90ea9cb1403bbdb4e.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>常见bug</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python与Tkinter版本冲突</title>
    <url>/d8291b27.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>周末在家闲着无聊，就想着写点好玩的代码。在尝试Python的GUI编程的时候，就出现了问题。<br>学习了基本语法后，就开始了自己的GUI之旅。运行第一段代码之后发现它长这样<br><img data-src="https://s1.ax1x.com/2023/02/19/pSLs2OH.jpg" style="width:300px;height:200px" alt="" /><br>哎……好像有点不对，我那行字呢？而且怎么这么黑，我看人家的效果不是这样啊……<br>看终端输出，有一行警告：</p>
<blockquote>
<p>DEPRECATION WARNING: The system version of Tk is deprecated and may be removed in a future release. Please don’t rely on it. Set TK_SILENCE_DEPRECATION&#x3D;1 to suppress this warning.<br><img data-src="https://s1.ax1x.com/2023/02/19/pSLsf0A.jpg" style="width:300px;height:200px" alt="" /></p>
</blockquote>
<p>发现是版本问题，发现问题就好解决了。于是在网上疯狂的搜资料，终于找到了方法。<br>在某位博主的文章中了解到了<code>Conda</code>这个玩意儿</p>
<blockquote>
<p>Conda is an open-source package management system and environment management system that runs on Windows, macOS, and Linux. Conda quickly installs, runs, and updates packages and their dependencies. Conda easily creates, saves, loads, and switches between environments on your local computer. It was created for Python programs but it can package and distribute software for any language.</p>
</blockquote>
<p>简单说，conda是一个开源的包管理系统及环境管理系统，支持跨平台，可管理多个版本的软件包及它们的依赖关系，可方便地在不同版本之间灵活切换，并且conda支持包括python在内的任何语言。</p>
<p>以前都是用venv来管理多个虚拟环境，但是venv只能管理不同的包版本，python还是同一个；conda则是从python到软件包都可以完全隔离，就像一个小型的虚拟机。简直是强迫症患者的福音！</p>
<p>要使用conda，最方便的选择是安装Anaconda，它是一个开源的python发行版，包括了python、conda以及NumPy、SciPy等多达250+个软件包，功能非常全面。但是功能全面就意味着体积庞大，Anaconda安装包要591M，安装之后的空间占用接近3个G，做为日常python研究学习的话实在没有必要。此时我们可以转向conda的另外一个选择，即Miniconda，它是Anaconda的轻量化版本（ It is a small, bootstrap version of Anaconda ），只包含了python和conda，以及一些基本的程序包比如pip等。Miniconda的安装包只有不到60M，安装后在我的Mac上大约占用490M空间。</p>
<p>安装和使用Miniconda的过程十分简单，首先从<a href="https://docs.conda.io/projects/conda/en/latest/commands.html">官网</a>下载与操作系统对应的安装包，下载完成后在终端执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash Miniconda3-latest-MacOSX-x86_64.sh</span><br></pre></td></tr></table></figure>
<p>安装到后面还会有一个初始化的过程，一路按照默认配置执行完毕即可，中间需要选择<code>yes/no</code>的地方输入<code>yes</code>。安装完成后记得重启终端窗口，否则环境变量可能不生效导致conda命令执行不成功。安装完成后在终端执行命令：conda -V，出现版本号就说明安装成功了。接下来就可以使用conda来管理python版本了，比如想要创建一个独立的python环境，博主这里python版本为3.9.6，使用如下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda create -n python3 python=3.9.6</span><br></pre></td></tr></table></figure>
<p>其中这里<code>python3</code>为你指定的环境名称，名称根据自己的喜好来取。<br>环境创建好之后，与venv类似，可以使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda activate python3</span><br></pre></td></tr></table></figure>
<p>和</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda deactivate</span><br></pre></td></tr></table></figure>
<p>来进入和退出环境。<br>如果进入conda环境，终端是会有表示的，如下图：<br><img data-src="https://s1.ax1x.com/2023/02/19/pSLyZA1.jpg"  alt="" /><br>会发现我们的终端前面会多一个环境名。</p>
<a href="https://docs.conda.io/en/latest/miniconda.html#macos-installers" title="" target="">参考:conda命令 ,</a>

<p>到这里Tkinter版本的问题就已经解决，我们重新运行下程序，出现预期效果<br><img data-src="https://s1.ax1x.com/2023/02/19/pSLsWmd.jpg" style="width:300px;height:200px" alt="" /></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>Thinter</tag>
      </tags>
  </entry>
  <entry>
    <title>python实现微信自动聊天</title>
    <url>/61950.html</url>
    <content><![CDATA[<p>闲着无聊，在网上找了一些好玩的代码，比如用Python实现微信自动回消息<br>之前弄了一个定时自动给好友发天气或者发心灵鸡汤的脚本，下载链接：<a href="https://download.csdn.net/download/silent_f/11162951">https://download.csdn.net/download/silent_f/11162951</a></p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<p>今天这里就介绍几个微信接入图灵机器人，自动和好友聊天的脚本</p>
<h3 id="1、自动和所有好友聊天，只要好友发消息来，就会给好友回复"><a href="#1、自动和所有好友聊天，只要好友发消息来，就会给好友回复" class="headerlink" title="1、自动和所有好友聊天，只要好友发消息来，就会给好友回复"></a>1、自动和所有好友聊天，只要好友发消息来，就会给好友回复</h3><p>这里笔者用的是3.6版本python ,安装itchat,<br>用下面命令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install itchat </span><br></pre></td></tr></table></figure>
<p>然后去图灵机器人官网注册账号，获取一个key</p>
<p>具体代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> itchat</span><br><span class="line"><span class="keyword">import</span> importlib,sys </span><br><span class="line">importlib.reload(sys)</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_response</span>(<span class="params">_info</span>):</span><br><span class="line">    <span class="built_in">print</span>(_info)                                       <span class="comment"># 从好友发过来的消息</span></span><br><span class="line">    api_url = <span class="string">&#x27;http://www.tuling123.com/openapi/api&#x27;</span>   <span class="comment"># 图灵机器人网址</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;key&#x27;</span>: <span class="string">&#x27;466856743b3442bf95acb1e21a5218e2&#x27;</span>,     <span class="comment"># 如果这个 apiKey 如不能用，那就注册一次</span></span><br><span class="line">        <span class="string">&#x27;info&#x27;</span>: _info,                                 <span class="comment"># 这是我们从好友接收到的消息 然后转发给图灵机器人</span></span><br><span class="line">        <span class="string">&#x27;userid&#x27;</span>: <span class="string">&#x27;wechat-robot&#x27;</span>,                      <span class="comment"># 这里你想改什么都可以</span></span><br><span class="line">    &#125;</span><br><span class="line">    r = requests.post(api_url, data=data).json()       <span class="comment"># 把data数据发</span></span><br><span class="line">    <span class="built_in">print</span>(r.get(<span class="string">&#x27;text&#x27;</span>))                               <span class="comment"># 机器人回复给好友的消息</span></span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"><span class="meta">@itchat.msg_register(<span class="params">itchat.content.TEXT</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">text_reply</span>(<span class="params">msg</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span> + get_response(msg[<span class="string">&quot;Text&quot;</span>])[<span class="string">&quot;text&quot;</span>]</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    itchat.auto_login()                  <span class="comment"># hotReload = True, 保持在线，下次运行代码可自动登录  hotReload=True</span></span><br><span class="line">    itchat.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2、和指定好友聊天"><a href="#2、和指定好友聊天" class="headerlink" title="2、和指定好友聊天"></a>2、和指定好友聊天</h3><p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> wxpy <span class="keyword">import</span> Bot,Tuling,embed,ensure_one</span><br><span class="line">bot = Bot()</span><br><span class="line">my_friend = ensure_one(bot.search(<span class="string">&#x27;张三&#x27;</span>))  <span class="comment">#想和机器人聊天的好友的备注</span></span><br><span class="line">tuling = Tuling(api_key=<span class="string">&#x27;466856743b3442bf95acb1e21a5218e2&#x27;</span>)     <span class="comment">#这里是图灵机器人申请后的api</span></span><br><span class="line"><span class="meta">@bot.register(<span class="params">my_friend</span>)  </span><span class="comment"># 使用图灵机器人自动与指定好友聊天</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reply_my_friend</span>(<span class="params">msg</span>):</span><br><span class="line">    tuling.do_reply(msg)</span><br><span class="line">embed()</span><br></pre></td></tr></table></figure>

<h3 id="3、在指定微信群里聊天"><a href="#3、在指定微信群里聊天" class="headerlink" title="3、在指定微信群里聊天"></a>3、在指定微信群里聊天</h3><p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> wxpy <span class="keyword">import</span> Bot,Tuling,embed</span><br><span class="line">bot = Bot(cache_path=<span class="literal">True</span>)</span><br><span class="line">my_group = bot.groups().search(<span class="string">&#x27;8个人儿? ? ? ? ?&#x27;</span>)[<span class="number">0</span>]  <span class="comment"># 更改为自己的群聊名称</span></span><br><span class="line">tuling = Tuling(api_key=<span class="string">&#x27;466856743b3442bf95acb1e21a5218e2&#x27;</span>)  <span class="comment"># 图灵机器人申请的apikey</span></span><br><span class="line"><span class="meta">@bot.register(<span class="params">my_group, except_self=<span class="literal">False</span></span>)  </span><span class="comment"># 使用图灵机器人自动在指定群聊天</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reply_my_friend</span>(<span class="params">msg</span>):</span><br><span class="line">    <span class="built_in">print</span>(tuling.do_reply(msg))</span><br><span class="line">embed()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>日常代码</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>quickCocos2dx编译生成apk</title>
    <url>/3315f663.html</url>
    <content><![CDATA[<p>毕业后开始做游戏，一直都是做的ios端的，最近换份新工作，做android端游戏开发。<br>android端+quickCocos这简直就是个坑啊，都2天了，一个开发环境都还没有搭建好。废话不多说，开始介绍博主遇到的坑吧~</p>
<h3 id="首先就是各种插件的安装"><a href="#首先就是各种插件的安装" class="headerlink" title="首先就是各种插件的安装"></a>首先就是各种插件的安装</h3><p>什么jdk、android-ndk、adt什么的，网上有教程，这里就不细说了，但是千万要注意版本~</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h3 id="生成os库"><a href="#生成os库" class="headerlink" title="生成os库"></a>生成os库</h3><p>插件安装好后，就可以开始生成os库<br>网上的教程都说是在<code>frameworks\runtime-src\proj.android</code>下执行什么<code>clean.bat</code>等命令，但是博主新建的项目下面就没有这几个bat文件。于是自己执行了<code>python .\build_native.py</code></p>
<img data-src="https://s1.ax1x.com/2022/11/03/xq6X6A.png" alt=""/>
执行后报错，说`ndk-build不是内部或外部命令`,将其加入环境变量即可。

<img data-src="https://s1.ax1x.com/2022/11/03/xq67FO.png" alt=""/>

<p>然后再执行<code>python .\build_native.py</code>命令就可以啦</p>
<h3 id="更新编译环境"><a href="#更新编译环境" class="headerlink" title="更新编译环境"></a>更新编译环境</h3><p>os库生成好后，执行<code>android update project -p . -t 1</code><br>关于这个网上有不同的说法，有的说不用执行这行命令，有的说是在<code>frameworks\runtime-src\proj.android</code>目录下执行。博主都试了，至少在博主这里行不通。<br>博主这里需要在<code>frameworks\runtime-src\proj.android\src\main</code>下执行，因为需要生成一个<code>build.xml</code>文本。</p>
<img data-src="https://s1.ax1x.com/2022/11/03/xq6Old.png" alt=""/>


<h3 id="生成apk"><a href="#生成apk" class="headerlink" title="生成apk"></a>生成apk</h3><p>有了<code>build.xml</code>之后就可以生成apk了。<br>在同级目录下执行<code>ant debug</code>,但是博主这里遇到了问题，报如下错误</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[javac]错误：不再支持源选项5。请使用7或者更高版本</span><br><span class="line">[jabac]错误：不再支持目标选项5。请使用7或者更高版本</span><br></pre></td></tr></table></figure>
<p>目前博主还没找到解决方法，等解决了再回来补充。有懂的大佬也可以指点指点</p>
<p>第一次接触安卓开发，很多不懂，还希望懂的大佬多多指教</p>
]]></content>
      <categories>
        <category>游戏开发</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>quick Cocos</tag>
      </tags>
  </entry>
  <entry>
    <title>python画素描画</title>
    <url>/7941.html</url>
    <content><![CDATA[<p>废话不多说，直接上代码</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageFilter, ImageOps</span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&#x27;/Users/demo/Desktop/b.png&#x27;</span>)  <span class="comment"># 原图路径</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dodge</span>(<span class="params">a,b,alpha</span>):</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">int</span>(a*<span class="number">255</span>/(<span class="number">256</span>-b*alpha)),<span class="number">255</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">img,blur=<span class="number">25</span>,alpha=<span class="number">1.0</span></span>):</span><br><span class="line">	img1 = img.convert(<span class="string">&#x27;L&#x27;</span>)</span><br><span class="line">	img2 = img1.copy()</span><br><span class="line">	img2 = ImageOps.invert(img2)</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(blur):</span><br><span class="line">		img2 = img2.<span class="built_in">filter</span>(ImageFilter.BLUR)</span><br><span class="line">	width,height = img1.size</span><br><span class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">		<span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">			a = img1.getpixel((x,y))</span><br><span class="line">			b = img2.getpixel((x,y))</span><br><span class="line">			img1.putpixel((x,y),dodge(a,b,alpha))</span><br><span class="line">	img1.show()</span><br><span class="line">	img1.save(<span class="string">&quot;/Users/demo/Desktop/a1.png&quot;</span>)   <span class="comment"># 生成后的图片</span></span><br><span class="line">draw(img)</span><br></pre></td></tr></table></figure>
<p>效果图<br>原图：<br><img data-src="https://pic.imgdb.cn/item/66433e2d0ea9cb1403b7a7ad.jpg" alt="在这里插入图片描述"><br>转换后的图：<br><img data-src="https://pic.imgdb.cn/item/66433e2d0ea9cb1403b7a799.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh无法登录远程服务器</title>
    <url>/4002b8ea.html</url>
    <content><![CDATA[<p>SSH远程登录失败，提示“Password authentication failed”。<br>新买了一个阿里云服务器，但是在本地终端进行ssh连接的时候总是提示“Password authentication failed”。<br>刚开始我还以为是密码错了，还去后台改了密码，后面发现不是密码的问题。<br>而是在网上找了好久的解决方法，包括修改<code>/etc/ssh/sshd_config</code>配置文件，也是没啥用。</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<p>最后换了链接命令<br>将原来的<code>ssh 公网ip</code>改为<code>ssh -v root@公网ip</code>，意外发现可以连上。<br>如果你也遇到了这样的问题，不妨一试。</p>
]]></content>
      <categories>
        <category>ssh</category>
      </categories>
      <tags>
        <tag>ssh</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>cocos2dx-lua tolua</title>
    <url>/cf9e43b4.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h2 id="tolua-cast-对象-类型名-强制类型转换"><a href="#tolua-cast-对象-类型名-强制类型转换" class="headerlink" title="tolua.cast(对象,类型名)强制类型转换"></a>tolua.cast(对象,类型名)强制类型转换</h2><p><code>layer -&gt; node</code></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">tolua.cast(layer,<span class="string">&quot;cc.Node&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>一般用于在方法a定义一个精灵，设置tag为2<br>但在方法b取出来，它却不是精灵，没有精灵的一些属性和方法。<br>这个时候要强制转换类型了。</p>
<h2 id="tolua-type-类型名"><a href="#tolua-type-类型名" class="headerlink" title="tolua.type(类型名)"></a>tolua.type(类型名)</h2><p>返回一个C++对象的类型描述字符串</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> node = display.newNode()</span><br><span class="line"><span class="built_in">print</span>(tolua.<span class="built_in">type</span>(node)) <span class="comment">-- 输出CCNode</span></span><br></pre></td></tr></table></figure>


<h2 id="tolua-isnull"><a href="#tolua-isnull" class="headerlink" title="tolua.isnull"></a>tolua.isnull</h2><p>检查指定Lua值中保存的C++对象是否已经被删除。<br>我们将在C++对象保存到Lua值后，只要还有Lua代码在使用这些值，那么即使 C++ 对象已经被删除了，但 Lua 值仍然会存在。如果此时调用 Lua 值的方法就会出错。</p>
<p>因此可以用 tolua.isnull() 检查 Lua 值中的 C++ 对象是否已经被删除。</p>
<a href="https://www.jianshu.com/p/9e1fc2015aa2" title="" target="">原文链接 ,</a>]]></content>
      <categories>
        <category>游戏开发</category>
      </categories>
      <tags>
        <tag>Lua</tag>
        <tag>cocos2dx</tag>
        <tag>tolua</tag>
      </tags>
  </entry>
  <entry>
    <title>cocosCreator中关于setTimeOut和setInterval改变this指向的问题</title>
    <url>/c80cf324.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>在<code>setTimeOut()</code>或<code>setInterval()</code>这样的方法中，如果传入的函数包含<code>this</code>，那么，默认情况下，函数中的<code>this</code>会指向<code>window</code>对象。这是由于<code>setTimeout()</code>调用的代码运行在与所有函数完全分离的执行环境上。这回导致这些代码中包含的<code>this</code>关键字会指向<code>window</code>对象。如下图：<br><img data-src="https://s1.ax1x.com/2023/04/20/p9AajjP.png"  alt="" /><br>下面那个<code>this</code>就是<code>setInterval()</code>中<code>this</code>指向。</p>
<h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><h3 id="将当前对象的this存为一个变量"><a href="#将当前对象的this存为一个变量" class="headerlink" title="将当前对象的this存为一个变量"></a>将当前对象的<code>this</code>存为一个变量</h3><p>定时器内部的函数来访问到这个变量，此时的<code>this</code>,就指向了当前对象</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">broadInter</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(that.<span class="property">msg</span>);</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="利用bind-方法"><a href="#利用bind-方法" class="headerlink" title="利用bind()方法"></a>利用bind()方法</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">broadInter</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">msg</span>);   </span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>ES6中的箭头函数,this总是指向词法作用域，也就是外层调用者<code>obj</code>，因此利用箭头函数就可以轻松解决这个问题</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">broadInter</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">msg</span>);  </span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="如何准确判断this指向的是什么？"><a href="#如何准确判断this指向的是什么？" class="headerlink" title="如何准确判断this指向的是什么？"></a>如何准确判断<code>this</code>指向的是什么？</h2><ul>
<li>函数是否在<code>new</code>中调用（<code>new</code>绑定），如果是，那么this绑定的是新创建的对象。</li>
<li>函数是否通过<code>call</code>，<code>apply</code>调用，或者使用了<code>bind</code>(即硬绑定)，如果是，那么this绑定的就是指定的对象。</li>
<li>函数是否在某个上下文对象中调用(隐式绑定)，如果是的话，this绑定的是那个上下文对象。一般是<code>obj.foo()</code>。</li>
<li>如果以上都不是，那么使用默认绑定。如果在严格模式下，则绑定到undefined，否则绑定到全局对象。</li>
<li>如果把<code>null</code>或者<code>undefined</code>作为<code>this</code>的绑定对象传入<code>call</code>、<code>apply</code>或者<code>bind</code>，这些值在调用时会被忽略，实际应用的是默认绑定规则。</li>
<li>如果是箭头函数，箭头函数的this继承的是外层代码块的<code>this</code>。</li>
</ul>
]]></content>
      <categories>
        <category>cocos Creator</category>
      </categories>
      <tags>
        <tag>cocos Creator</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>ts数字字符串去掉后面的0</title>
    <url>/67c55f29.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">removeTrailingZeros</span>(<span class="params">numberString: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> trimmedString = numberString.<span class="title function_">trim</span>(); <span class="comment">// 去除首尾空格</span></span><br><span class="line">  <span class="keyword">const</span> decimalIndex = trimmedString.<span class="title function_">indexOf</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (decimalIndex !== -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> endIndex = trimmedString.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (trimmedString[endIndex] === <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">      endIndex--;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (trimmedString[endIndex] === <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">      endIndex--; <span class="comment">// 如果小数点后面全是零，也去掉小数点</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> trimmedString.<span class="title function_">slice</span>(<span class="number">0</span>, endIndex + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> trimmedString;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例用法</span></span><br><span class="line"><span class="keyword">const</span> numberString1 = <span class="string">&#x27;3.1400&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> result1 = <span class="title function_">removeTrailingZeros</span>(numberString1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1);  <span class="comment">// 输出: &quot;3.14&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numberString2 = <span class="string">&#x27;10.00&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> result2 = <span class="title function_">removeTrailingZeros</span>(numberString2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result2);  <span class="comment">// 输出: &quot;10&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numberString3 = <span class="string">&#x27;5.50&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> result3 = <span class="title function_">removeTrailingZeros</span>(numberString3);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result3);  <span class="comment">// 输出: &quot;5.5&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>typeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>ts时间戳格式转换</title>
    <url>/db763ac0.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>工作中有一个需求，在展示玩家战绩的时候，附上时间节点，且时间节点的格式如下：<br><code>2023-11-29 10:08:04</code><br>但是服务器后端传过来的时间戳为<code>2023-11-29T10:08:04.33+08:00</code>,由于显示的格式不一样，所以就需要进行特殊的处理。代码如下</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> timestamp = <span class="string">&quot;2023-11-29T10:08:04.33+08:00&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(timestamp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> year = date.<span class="title function_">getFullYear</span>();</span><br><span class="line"><span class="keyword">const</span> month = (date.<span class="title function_">getMonth</span>() + <span class="number">1</span>).<span class="title function_">toString</span>().<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> day = date.<span class="title function_">getDate</span>().<span class="title function_">toString</span>().<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> hours = date.<span class="title function_">getHours</span>().<span class="title function_">toString</span>().<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> minutes = date.<span class="title function_">getMinutes</span>().<span class="title function_">toString</span>().<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> seconds = date.<span class="title function_">getSeconds</span>().<span class="title function_">toString</span>().<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> formattedDate = <span class="string">`<span class="subst">$&#123;year&#125;</span>-<span class="subst">$&#123;month&#125;</span>-<span class="subst">$&#123;day&#125;</span> <span class="subst">$&#123;hours&#125;</span>:<span class="subst">$&#123;minutes&#125;</span>:<span class="subst">$&#123;seconds&#125;</span>`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(formattedDate);</span><br></pre></td></tr></table></figure>

<p>这里只是介绍我用的一种方法，如果你有更好的方法可以评论交流</p>
]]></content>
      <categories>
        <category>游戏开发</category>
      </categories>
      <tags>
        <tag>quick Cocos</tag>
        <tag>ts</tag>
      </tags>
  </entry>
  <entry>
    <title>vsCode不显示.meta文件的方法</title>
    <url>/d7ba392e.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>主要应用于vsCode编辑cocos creator工程时（不想展示其他格式文件方法一样）<br>点击左下角“设置”图标-&gt;“Setting”</p>
<img data-src="https://s1.ax1x.com/2023/04/12/ppjAtgI.png" style="width:500px;height:500px" alt="" />

<p>找到下图所示位置，添加<code>**/*.meta</code>即可<br><img data-src="https://s1.ax1x.com/2023/04/12/ppjANvt.png" style="width:500px;height:500px" alt="" /></p>
]]></content>
      <categories>
        <category>游戏开发</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
        <tag>cocos2dx</tag>
        <tag>vsCode</tag>
      </tags>
  </entry>
  <entry>
    <title>cocosCreator中websocker实例</title>
    <url>/2aaee773.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>cocos creator <code>WebSocket</code>实例。</p>
<p>需要注意几个问题：</p>
<p>1、<code>send()</code>发送的数据格式，这里是有要求的。</p>
<p>2、接收到的数据需要进行一个反序列化。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;ws://192.168.79.2:7070&quot;</span>);</span><br><span class="line">ws.<span class="property">onopen</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;连接成功&quot;</span>);</span><br><span class="line">		ws.<span class="title function_">send</span>(<span class="string">&quot;&#123;\&quot;Version\&quot;:&#123; \&quot;Version\&quot;: \&quot;v0.0.1\&quot;&#125;&#125;&quot;</span>);</span><br><span class="line">	&#125;;</span><br><span class="line">	ws.<span class="property">onmessage</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">let</span> data = event.<span class="property">data</span>;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">typeof</span> data === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Received string data:&quot;</span>, data);</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (data <span class="keyword">instanceof</span> <span class="title class_">ArrayBuffer</span>) &#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Received ArrayBuffer data:&quot;</span>, data);</span><br><span class="line"> 		<span class="comment">// 如果你需要将 ArrayBuffer 转换为字节数组，可以这样做：</span></span><br><span class="line">		<span class="keyword">const</span> byteArray = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(data);</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Byte array:&quot;</span>, byteArray);</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (data <span class="keyword">instanceof</span> <span class="title class_">Blob</span>) &#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Received Blob data:&quot;</span>, data);</span><br><span class="line">		<span class="comment">// 如果你需要将 Blob 转换为 ArrayBuffer 或字节数组，可以使用 FileReader</span></span><br><span class="line">		<span class="keyword">const</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">		reader.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">			<span class="keyword">const</span> arrayBuffer = reader.<span class="property">result</span> <span class="keyword">as</span> <span class="title class_">ArrayBuffer</span>;</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ArrayBuffer:&quot;</span>, arrayBuffer);</span><br><span class="line">			<span class="keyword">const</span> byteArray = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(arrayBuffer);</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Byte array:&quot;</span>, byteArray);</span><br><span class="line">			<span class="keyword">let</span> jsonString = <span class="keyword">new</span> <span class="title class_">TextDecoder</span>().<span class="title function_">decode</span>(byteArray)</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;jsonSt = &quot;</span>,jsonString);</span><br><span class="line">			<span class="keyword">let</span> data1 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonString);</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;data1 = &quot;</span>,data1);</span><br><span class="line">		&#125;;</span><br><span class="line">		reader.<span class="title function_">readAsArrayBuffer</span>(data);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Received unknown data type:&quot;</span>, data);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">		ws.<span class="property">onclose</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`WebSocket closed: <span class="subst">$&#123;event.code&#125;</span> <span class="subst">$&#123;event.reason&#125;</span>`</span>);</span><br><span class="line">		&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>cocos Creator</category>
      </categories>
      <tags>
        <tag>cocos Creator</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>windows电脑清除系统垃圾</title>
    <url>/628b7aeb.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>大家在使用windows的时候，经常会发现用着用着C盘的容量越来越小，很多系统垃圾都不知道怎么删除。下面介绍一种方法：</p>
<ol>
<li>将下面代码复制在一个文本文档中（任何一款代码编辑器都可以）</li>
<li>保存，并将文件后缀改为<code>.bat</code>，双击运行即可<blockquote>
<p>注意：很多人在使用的时候没有显示文件后缀，这里需要先设置电脑显示文件后缀</p>
</blockquote>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@echo off </span><br><span class="line">echo 正在清除系统垃圾文件，请稍等...... </span><br><span class="line">del /f /s /q %systemdrive%\*.tmp </span><br><span class="line">del /f /s /q %systemdrive%\*._mp </span><br><span class="line">del /f /s /q %systemdrive%\*.log </span><br><span class="line">del /f /s /q %systemdrive%\*.gid </span><br><span class="line">del /f /s /q %systemdrive%\*.chk </span><br><span class="line">del /f /s /q %systemdrive%\*.old </span><br><span class="line">del /f /s /q %systemdrive%\recycled\*.* </span><br><span class="line">del /f /s /q %windir%\*.bak </span><br><span class="line">del /f /s /q %windir%\prefetch\*.* </span><br><span class="line">rd /s /q %windir%\temp &amp; md %windir%\temp </span><br><span class="line">del /f /q %userprofile%\cookies\*.* </span><br><span class="line">del /f /q %userprofile%\recent\*.* </span><br><span class="line">del /f /s /q &quot;%userprofile%\Local Settings\Temporary Internet Files\*.*&quot; </span><br><span class="line">del /f /s /q &quot;%userprofile%\Local Settings\Temp\*.*&quot; </span><br><span class="line">del /f /s /q &quot;%userprofile%\recent\*.*&quot; </span><br><span class="line">echo 清除系统LJ完成！ </span><br><span class="line">echo. &amp; pause </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>电脑使用技巧</category>
      </categories>
      <tags>
        <tag>电脑使用技巧</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>vsCode调试quick-cocos2dx</title>
    <url>/485b0e34.html</url>
    <content><![CDATA[<p>好久没有在windows上搭建cocos2dx的开发环境了，今天在搭建的过程中就遇到了一个问题。使用vsCode无法调试cocos工程。下面就说下我的做法吧。前面的步骤网上有很多，下面主要是介绍vsCode的配置（这里网上也有很多，但是很多方法行不通，作者只是记录自己的做法，以后如果再遇到这种问题便能很快的解决）</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h4 id="1、安装插件"><a href="#1、安装插件" class="headerlink" title="1、安装插件"></a>1、安装插件</h4><p>作者这里安装的是”luaide-lite”插件，还有其他的插件也可以用，不同的插件配置稍微有点不同。<br><img data-src="https://s1.ax1x.com/2022/11/01/x7LPOO.png" alt="插件图" /><br>插件页面有纤细的介绍，可以仔细看看。</p>
<h4 id="2、添加配置文件"><a href="#2、添加配置文件" class="headerlink" title="2、添加配置文件"></a>2、添加配置文件</h4><p>点击运行，便会提示添加<code>launch.json</code>配置文件。这里注意，只需要改<code>Cocos-launch</code>这部分就行，其他的都可以删除掉。<br>这里有个“坑”，就是关于<code>exePath</code>的路径配置，网上很多人说是配置<code>.exe</code>文件的路径，作者试了很多次都没有成功。最后将这里配置成了<code>player3</code>的执行路径，便可正常运行。如图<br><img data-src="https://s1.ax1x.com/2022/11/01/x7Lk0e.png" alt="路径配置图" /></p>
<p>这里这样配置就可以运行了，但是还不能调试</p>
<h4 id="3、添加luaDebug-lua调试文件"><a href="#3、添加luaDebug-lua调试文件" class="headerlink" title="3、添加luaDebug.lua调试文件"></a>3、添加luaDebug.lua调试文件</h4><p>在<code>src</code>目录下添加<code>luaDebug.lua</code>文件<br><img data-src="https://s1.ax1x.com/2022/11/01/x7LC6K.png" alt="luaDebug.lua" /></p>
<p><a href="https://github.com/lengmo714/lengmo714.github.io/blob/master/download/debug.lua">lueDebug.lua代码链接</a></p>
<h4 id="4、修改main-lua文件"><a href="#4、修改main-lua文件" class="headerlink" title="4、修改main.lua文件"></a>4、修改main.lua文件</h4><p>在文件开头添加如下两行代码</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> breakSocketHandle, debugXpCall = <span class="built_in">require</span>(<span class="string">&quot;LuaDebug&quot;</span>)(<span class="string">&quot;localhost&quot;</span>, <span class="number">7003</span>)</span><br><span class="line">cc.Director:getInstance():getScheduler():scheduleScriptFunc(breakSocketHandle, <span class="number">0.3</span>, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure>
<img data-src="https://s1.ax1x.com/2022/11/01/x7LC6K.png"/>


<p>做完这些，你就可以开始愉快的游戏开发之路了呀~</p>
]]></content>
      <categories>
        <category>游戏开发</category>
      </categories>
      <tags>
        <tag>cocos2dx</tag>
        <tag>vsCode</tag>
      </tags>
  </entry>
  <entry>
    <title>git问题 error: remote origin already exists.</title>
    <url>/33da5f54.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>如果你clone下来一个别人的仓库，在此基础上完成你的代码，推送到自己的仓库可能遇到如下问题：<br><code>error: remote origin already exists.</code>表示远程仓库已存在。<br>因此你要进行以下操作：<br>1、先输入<code>git remote rm origin </code>删除关联的origin的远程库<br>2、关联自己的仓库 <code>git remote add origin &lt;https://gitee.com/xxxxxx.git&gt;</code><br>3、最后<code>git push origin master</code>，这样就推送到自己的仓库了。</p>
]]></content>
      <categories>
        <category>开发工具的使用</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>元宵节祝福代码</title>
    <url>/f07ee6a1.html</url>
    <content><![CDATA[<p>明天就是元宵节了，简单弄一个祝福代码，祝大家元宵节快乐~</p>
<p>代码:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>元宵节快乐<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">body</span> &#123; <span class="attribute">padding</span>: <span class="number">0</span>; <span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">overflow</span>: hidden; <span class="attribute">background-color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">            &#125; </span></span><br><span class="line"><span class="language-css">			<span class="selector-tag">canvas</span> &#123; <span class="attribute">padding</span>: <span class="number">0</span>; <span class="attribute">margin</span>: <span class="number">0</span>; &#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-tag">footer</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-tag">footer</span> <span class="selector-tag">h2</span>&#123;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">color</span>:<span class="number">#FFFF00</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">font-size</span>:<span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> <span class="variable constant_">PI</span> = <span class="title class_">Math</span>.<span class="property">PI</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> <span class="variable constant_">PI_2</span> = <span class="variable constant_">PI</span> * <span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> defaultConfig = &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">duration</span>: <span class="number">2000</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// ms</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">delay</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// ms</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">radius</span>: <span class="number">5</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// px</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">amount</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// particle number</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">speed</span>: <span class="number">12</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">gravity</span>: <span class="number">0.05</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">friction</span>: <span class="number">0.96</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">reduction</span>: <span class="number">0.98</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">left</span>: <span class="number">0.5</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">top</span>: <span class="number">0.3</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">color</span>: <span class="string">&quot;#ff0000&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">try</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                	<span class="title class_">Canvas</span>.<span class="property">canvas</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;canvas&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">               	 	<span class="title class_">Canvas</span>.<span class="property">canvas</span>.<span class="property">width</span> = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span>;</span></span><br><span class="line"><span class="language-javascript">                	<span class="title class_">Canvas</span>.<span class="property">canvas</span>.<span class="property">height</span> = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span> - <span class="number">40</span>;</span></span><br><span class="line"><span class="language-javascript">               	 	<span class="title class_">Canvas</span>.<span class="property">context</span> = <span class="title class_">Canvas</span>.<span class="property">canvas</span>.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                	<span class="title class_">Canvas</span>.<span class="property">context</span>.<span class="property">fillStyle</span> = <span class="string">&quot;rgba(0, 0, 0, 0.05)&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">				&#125;<span class="keyword">catch</span>(e)&#123;</span></span><br><span class="line"><span class="language-javascript">					<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;h2&quot;</span>).<span class="property">text</span> = <span class="string">&quot;您的浏览器暂不支持，请升级后观看！&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">				&#125;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//setInterval(exupdate, 1000 / 60);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> num = <span class="number">20</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title class_">Canvas</span>.<span class="title function_">add</span>(<span class="keyword">new</span> <span class="title class_">Firework</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">duration</span>: <span class="number">800</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">delay</span>: <span class="number">50</span> * i,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">amount</span>: <span class="number">20</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">left</span>: <span class="number">1</span> / num * i,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">top</span>: <span class="number">0.3</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">gravity</span>: <span class="number">0.5</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">reduction</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">radius</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">friction</span>: <span class="number">0.9</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">speed</span>: <span class="number">15</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">color</span>: <span class="string">&quot;#ff6&quot;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;));</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="title class_">Canvas</span>.<span class="title function_">start</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">Firework</span>(<span class="params">config</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="title function_">setConfig</span>(config || &#123;&#125;);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">particleImage</span> = <span class="title function_">createParticleImage</span>(<span class="variable language_">this</span>.<span class="property">radius</span>, <span class="variable language_">this</span>.<span class="property">color</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">diameter</span> = <span class="variable language_">this</span>.<span class="property">radius</span> * <span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">isActive</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">fadeoutOpacity</span> = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Firework</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">setConfig</span>: <span class="keyword">function</span>(<span class="params">config</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> defaultConfig) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">if</span> (config[key] === <span class="literal">undefined</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">this</span>[key] = defaultConfig[key];</span></span><br><span class="line"><span class="language-javascript">                        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">this</span>[key] = config[key];</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">initParticles</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">particles</span> = [];</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> x = <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">width</span> * <span class="variable language_">this</span>.<span class="property">left</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> y = <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">height</span> * <span class="variable language_">this</span>.<span class="property">top</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> maxSpeed = (<span class="variable language_">this</span>.<span class="property">speed</span> / <span class="number">2</span>) * (<span class="variable language_">this</span>.<span class="property">speed</span> / <span class="number">2</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">particles</span>.<span class="property">length</span> &lt; <span class="variable language_">this</span>.<span class="property">amount</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">var</span> vx = (<span class="title class_">Math</span>.<span class="title function_">random</span>() - <span class="number">0.5</span>) * <span class="variable language_">this</span>.<span class="property">speed</span>;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">var</span> vy = (<span class="title class_">Math</span>.<span class="title function_">random</span>() - <span class="number">0.5</span>) * <span class="variable language_">this</span>.<span class="property">speed</span>;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">if</span> (vx * vx + vy * vy &lt;= maxSpeed) &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">this</span>.<span class="property">particles</span>.<span class="title function_">push</span>(<span class="keyword">new</span> <span class="title class_">Particle</span>(x, y, vx, vy));</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">update</span>: <span class="keyword">function</span>(<span class="params">passed</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isActive</span> === <span class="literal">false</span> || <span class="variable language_">this</span>.<span class="title function_">started</span>(passed) === <span class="literal">false</span>) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">ended</span>(passed)) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="title function_">fadeout</span>();</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="title function_">move</span>();</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="title function_">render</span>();</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">move</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> particles = <span class="variable language_">this</span>.<span class="property">particles</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> particle;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">                    len = particles.<span class="property">length</span>; i &lt; len; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                        particle = particles[i];</span></span><br><span class="line"><span class="language-javascript">                        particle.<span class="property">vx</span> *= <span class="variable language_">this</span>.<span class="property">friction</span>;</span></span><br><span class="line"><span class="language-javascript">                        particle.<span class="property">vy</span> = particle.<span class="property">vy</span> * <span class="variable language_">this</span>.<span class="property">friction</span> + <span class="variable language_">this</span>.<span class="property">gravity</span>;</span></span><br><span class="line"><span class="language-javascript">                        particle.<span class="property">x</span> += particle.<span class="property">vx</span>;</span></span><br><span class="line"><span class="language-javascript">                        particle.<span class="property">y</span> += particle.<span class="property">vy</span>;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">render</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">context</span>.<span class="property">globalAlpha</span> = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="title function_">renderParticles</span>();</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">renderParticles</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> diameter = <span class="variable language_">this</span>.<span class="property">diameter</span> *= <span class="variable language_">this</span>.<span class="property">reduction</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> context = <span class="variable language_">this</span>.<span class="property">context</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> particles = <span class="variable language_">this</span>.<span class="property">particles</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> particleImage = <span class="variable language_">this</span>.<span class="property">particleImage</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> p;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">                    len = particles.<span class="property">length</span>; i &lt; len; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                        p = particles[i];</span></span><br><span class="line"><span class="language-javascript">                        context.<span class="title function_">drawImage</span>(particleImage, p.<span class="property">x</span>, p.<span class="property">y</span>, diameter, diameter);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">started</span>: <span class="keyword">function</span>(<span class="params">passed</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">delay</span> &lt; passed;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">ended</span>: <span class="keyword">function</span>(<span class="params">passed</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">duration</span> + <span class="variable language_">this</span>.<span class="property">delay</span> &lt; passed;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">fadeout</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">fadeoutOpacity</span> -= <span class="number">0.1</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">fadeoutOpacity</span> &lt;= <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="property">isActive</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="title function_">move</span>();</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">context</span>.<span class="property">globalAlpha</span> = <span class="variable language_">this</span>.<span class="property">fadeoutOpacity</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="title function_">renderParticles</span>();</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">Particle</span>(<span class="params">x, y, vx, vy</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">x</span> = x;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">y</span> = y;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">vx</span> = vx;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">vy</span> = vy;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> <span class="title class_">Canvas</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">fireworks</span>: [],</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">add</span>: <span class="keyword">function</span>(<span class="params">firework</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    firework.<span class="property">canvas</span> = <span class="variable language_">this</span>.<span class="property">canvas</span>;</span></span><br><span class="line"><span class="language-javascript">                    firework.<span class="property">context</span> = <span class="variable language_">this</span>.<span class="property">context</span>;</span></span><br><span class="line"><span class="language-javascript">                    firework.<span class="title function_">initParticles</span>();</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">fireworks</span>.<span class="title function_">push</span>(firework);</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">start</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">startTime</span> = <span class="title class_">Number</span>(<span class="keyword">new</span> <span class="title class_">Date</span>());</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="title function_">update</span>();</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">fill</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">context</span>.<span class="property">globalAlpha</span> = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">context</span>.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">width</span>, <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">height</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// main loop</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">update</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="title function_">fill</span>();</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> passed = <span class="keyword">new</span> <span class="title class_">Date</span>() - <span class="variable language_">this</span>.<span class="property">startTime</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> activeFireworkCount = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">fireworks</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">firework</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">if</span> (firework.<span class="property">isActive</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                            firework.<span class="title function_">update</span>(passed);</span></span><br><span class="line"><span class="language-javascript">                            activeFireworkCount++;</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;.<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (<span class="number">0</span> &lt; activeFireworkCount) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">requestAnimationFrame</span>(<span class="variable language_">this</span>.<span class="property">update</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span></span><br><span class="line"><span class="language-javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">requestAnimationFrame</span>(<span class="variable language_">this</span>.<span class="property">fadeout</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>, <span class="number">20</span>));</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">fadeout</span>: <span class="keyword">function</span>(<span class="params">count</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (count &lt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="property">context</span>.<span class="property">fillStyle</span> = <span class="string">&quot;black&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="property">context</span>.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">width</span>, <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">height</span>);</span></span><br><span class="line"><span class="language-javascript">						<span class="title function_">drawText</span>();</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">return</span>; <span class="comment">// animation end</span></span></span><br><span class="line"><span class="language-javascript">						</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">context</span>.<span class="property">globalAlpha</span> = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">context</span>.<span class="property">fillStyle</span> = <span class="string">&quot;rgba(0, 0, 0, 0.15)&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="title function_">fill</span>();</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">requestAnimationFrame</span>(<span class="variable language_">this</span>.<span class="property">fadeout</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>, count - <span class="number">1</span>));</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">function</span> <span class="title function_">drawText</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="built_in">setInterval</span>(exupdate, <span class="number">1000</span> / <span class="number">60</span>);</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (<span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bind</span> === <span class="literal">undefined</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bind</span> = <span class="keyword">function</span>(<span class="params">obj</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> slice = [].<span class="property">slice</span>,</span></span><br><span class="line"><span class="language-javascript">                    args = slice.<span class="title function_">call</span>(<span class="variable language_">arguments</span>, <span class="number">1</span>),</span></span><br><span class="line"><span class="language-javascript">                    self = <span class="variable language_">this</span>,</span></span><br><span class="line"><span class="language-javascript">                    bound = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">return</span> self.<span class="title function_">apply</span>(obj || <span class="variable language_">window</span>, args.<span class="title function_">concat</span>(slice.<span class="title function_">call</span>(<span class="variable language_">arguments</span>)));</span></span><br><span class="line"><span class="language-javascript">                    &#125;;</span></span><br><span class="line"><span class="language-javascript">                    bound.<span class="property"><span class="keyword">prototype</span></span> = <span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> bound;</span></span><br><span class="line"><span class="language-javascript">                &#125;;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">createParticleImage</span>(<span class="params">radius, color</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> size = radius * <span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;canvas&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                canvas.<span class="property">width</span> = canvas.<span class="property">height</span> = size;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> context = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> gradient = context.<span class="title function_">createRadialGradient</span>(radius, radius, <span class="number">0</span>, radius, radius, size);</span></span><br><span class="line"><span class="language-javascript">                gradient.<span class="title function_">addColorStop</span>(<span class="number">0</span>, <span class="string">&quot;white&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                gradient.<span class="title function_">addColorStop</span>(<span class="number">0.1</span>, <span class="string">&quot;white&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                gradient.<span class="title function_">addColorStop</span>(<span class="number">0.3</span>, color);</span></span><br><span class="line"><span class="language-javascript">                gradient.<span class="title function_">addColorStop</span>(<span class="number">1</span>, <span class="string">&quot;rgba(0, 0, 0, 0)&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                context.<span class="property">fillStyle</span> = gradient;</span></span><br><span class="line"><span class="language-javascript">                context.<span class="title function_">beginPath</span>();</span></span><br><span class="line"><span class="language-javascript">                context.<span class="title function_">arc</span>(radius, radius, radius, <span class="number">0</span>, <span class="variable constant_">PI_2</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">                context.<span class="title function_">fill</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> particle = <span class="keyword">new</span> <span class="title class_">Image</span>();</span></span><br><span class="line"><span class="language-javascript">                particle.<span class="property">src</span> = canvas.<span class="title function_">toDataURL</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> particle;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">			</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            (<span class="keyword">function</span>(<span class="params">w, r</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                w[<span class="string">&#x27;r&#x27;</span> + r] = w[<span class="string">&#x27;r&#x27;</span> + r] || w[<span class="string">&#x27;webkitR&#x27;</span> + r] || w[<span class="string">&#x27;mozR&#x27;</span> + r] || w[<span class="string">&#x27;msR&#x27;</span> + r] || w[<span class="string">&#x27;oR&#x27;</span> + r] ||</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">function</span>(<span class="params">c</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    w.<span class="built_in">setTimeout</span>(c, <span class="number">1000</span> / <span class="number">60</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;;</span></span><br><span class="line"><span class="language-javascript">            &#125;)(<span class="variable language_">window</span>, <span class="string">&#x27;equestAnimationFrame&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">			</span></span><br><span class="line"><span class="language-javascript">			</span></span><br><span class="line"><span class="language-javascript">			</span></span><br><span class="line"><span class="language-javascript">			 <span class="keyword">function</span> <span class="title function_">exupdate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">			 	<span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;firework&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> cxt = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">			 	<span class="keyword">var</span> width = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> height = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">random</span>() &lt; <span class="number">0.1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">explode</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * width, <span class="title class_">Math</span>.<span class="title function_">random</span>() * height, <span class="title function_">randomColor</span>());</span></span><br><span class="line"><span class="language-javascript">               &#125;</span></span><br><span class="line"><span class="language-javascript">			   </span></span><br><span class="line"><span class="language-javascript">                cxt.<span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, width, height);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span> (<span class="keyword">var</span> i = particles.<span class="property">length</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> p = particles[i];</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    p.<span class="property">vx</span> *= p.<span class="property">deceleration</span>;</span></span><br><span class="line"><span class="language-javascript">                    p.<span class="property">vy</span> *= p.<span class="property">deceleration</span>;</span></span><br><span class="line"><span class="language-javascript">                    p.<span class="property">vy</span> += p.<span class="property">gravity</span>;</span></span><br><span class="line"><span class="language-javascript">                    p.<span class="property">x</span> += p.<span class="property">vx</span>;</span></span><br><span class="line"><span class="language-javascript">                    p.<span class="property">y</span> += p.<span class="property">vy</span>;</span></span><br><span class="line"><span class="language-javascript">                    p.<span class="property">energy</span> *= p.<span class="property">deceleration</span>;</span></span><br><span class="line"><span class="language-javascript">                    p.<span class="property">a</span> = <span class="title class_">Math</span>.<span class="title function_">atan2</span>(p.<span class="property">vy</span>, p.<span class="property">vx</span>);</span></span><br><span class="line"><span class="language-javascript">                    p.<span class="property">tx</span> = p.<span class="property">x</span> + p.<span class="property">length</span> * <span class="title class_">Math</span>.<span class="title function_">cos</span>(p.<span class="property">a</span>);</span></span><br><span class="line"><span class="language-javascript">                    p.<span class="property">ty</span> = p.<span class="property">y</span> + p.<span class="property">length</span> * <span class="title class_">Math</span>.<span class="title function_">sin</span>(p.<span class="property">a</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (p.<span class="property">energy</span> &lt; <span class="number">0.05</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        particles.<span class="title function_">splice</span>(i, <span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        cxt.<span class="title function_">beginPath</span>();</span></span><br><span class="line"><span class="language-javascript">                        cxt.<span class="property">fillStyle</span> = p.<span class="property">color</span>;</span></span><br><span class="line"><span class="language-javascript">						cxt.<span class="title function_">fillRect</span>(p.<span class="property">x</span>, p.<span class="property">y</span>, p.<span class="property">tx</span> - p.<span class="property">x</span>, p.<span class="property">ty</span> - p.<span class="property">y</span>);</span></span><br><span class="line"><span class="language-javascript">						cxt.<span class="title function_">fill</span>();</span></span><br><span class="line"><span class="language-javascript">                        cxt.<span class="title function_">stroke</span>();</span></span><br><span class="line"><span class="language-javascript">                        cxt.<span class="title function_">closePath</span>();</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> x = <span class="built_in">parseInt</span>(width)/<span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> y = <span class="built_in">parseInt</span>(height)/<span class="number">2</span></span></span><br><span class="line"><span class="language-javascript">				cxt.<span class="property">font</span> = <span class="string">&quot;60px 宋体 bold&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">           		cxt.<span class="property">textAlign</span> = <span class="string">&#x27;center&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">           	 	cxt.<span class="property">fillStyle</span> = colors[<span class="built_in">parseInt</span>(cIndex)%<span class="number">25</span>];</span></span><br><span class="line"><span class="language-javascript">            	cxt.<span class="title function_">fillText</span>(<span class="string">&#x27;元宵节快乐！&#x27;</span>, x, y, <span class="number">400</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">if</span>(timeTick &gt;<span class="number">10</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">					cIndex = <span class="built_in">parseInt</span>(cIndex) + <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">					timeTick = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">				&#125;</span></span><br><span class="line"><span class="language-javascript">				timeTick = <span class="built_in">parseInt</span>(timeTick) + <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">var</span> colors = [<span class="string">&quot;#fff&quot;</span>,<span class="string">&quot;#ccc&quot;</span>,<span class="string">&quot;#ff0000&quot;</span>,<span class="string">&quot;#00ff00&quot;</span>,<span class="string">&quot;#0000ff&quot;</span>,<span class="string">&quot;#00ffff&quot;</span>,<span class="string">&quot;#ffff00&quot;</span>,<span class="string">&quot;#FF7F00&quot;</span>,<span class="string">&quot;#FF1493&quot;</span>,<span class="string">&quot;#9B30FF&quot;</span>,<span class="string">&quot;#9AFF9A&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">						  <span class="string">&quot;#FFC1C1&quot;</span>,<span class="string">&quot;#FFE1FF&quot;</span>,<span class="string">&quot;#8B7B8B&quot;</span>,<span class="string">&quot;#8B6969&quot;</span>,<span class="string">&quot;#548B54&quot;</span>,<span class="string">&quot;#551A8B&quot;</span>,<span class="string">&quot;#8B0A50&quot;</span>,<span class="string">&quot;#8B4500&quot;</span>,<span class="string">&quot;#8b8b00&quot;</span>,<span class="string">&quot;#008b8b&quot;</span>,<span class="string">&quot;#00008b&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">						  <span class="string">&quot;#008b00&quot;</span>,<span class="string">&quot;#8b0000&quot;</span>,<span class="string">&quot;#666&quot;</span>,<span class="string">&quot;#000&quot;</span>];</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">var</span> cIndex = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">var</span> timeTick = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">var</span> particles = [];</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">explode</span>(<span class="params">x, y, color</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//document.getElementById(&quot;showInfo&quot;).innerHTML = color;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> c = <span class="number">400</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">while</span> (c-- &gt;<span class="number">0</span> ) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> p = &#123;&#125;;</span></span><br><span class="line"><span class="language-javascript">                    p.<span class="property">energy</span> = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">5</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> angle = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> v = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">10</span>;</span></span><br><span class="line"><span class="language-javascript">                    p.<span class="property">vx</span> = <span class="title class_">Math</span>.<span class="title function_">cos</span>(angle) * v;</span></span><br><span class="line"><span class="language-javascript">                    p.<span class="property">vy</span> = <span class="title class_">Math</span>.<span class="title function_">sin</span>(angle) * v;</span></span><br><span class="line"><span class="language-javascript">                    p.<span class="property">x</span> = x;</span></span><br><span class="line"><span class="language-javascript">                    p.<span class="property">y</span> = y;</span></span><br><span class="line"><span class="language-javascript">                    p.<span class="property">color</span> = color;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    p.<span class="property">deceleration</span> = <span class="number">0.95</span>;</span></span><br><span class="line"><span class="language-javascript">                    p.<span class="property">gravity</span> = <span class="number">0.05</span>;</span></span><br><span class="line"><span class="language-javascript">                    p.<span class="property">length</span> = <span class="number">4</span>;</span></span><br><span class="line"><span class="language-javascript">                    particles.<span class="title function_">push</span>(p);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">randomColor</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="string">&quot;#&quot;</span> + <span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">9</span>) + <span class="string">&quot;&quot;</span> + <span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">9</span>) + <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">				            + <span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">9</span>) + <span class="string">&quot;&quot;</span> + <span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">9</span>) + <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">							+ <span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">9</span>) + <span class="string">&quot;&quot;</span> + <span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">9</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;firework&quot;</span>&gt;</span></span><br><span class="line">        	</span><br><span class="line">        <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>节日祝福</category>
      </categories>
  </entry>
  <entry>
    <title>两个HC05蓝牙模块相互之间的通信</title>
    <url>/56859.html</url>
    <content><![CDATA[<p>蓝牙模块具有两种工作模式：命令响应工作模式和自动连接工作模式<br>具体的资料看这里：链接：链接：<a href="https://pan.baidu.com/s/1YB1QLrWcKV19XYg9yY7smg">https://pan.baidu.com/s/1YB1QLrWcKV19XYg9yY7smg</a> 密码：q9mf</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h2 id="两个蓝牙模块通信"><a href="#两个蓝牙模块通信" class="headerlink" title="两个蓝牙模块通信"></a>两个蓝牙模块通信</h2><p>两个蓝牙模块通信，首先是要让两个蓝牙模块进入命令响应工作模式即五下面说说的AT模式（EN接上USB转TTL的VCC或者3.3V，再长按蓝牙模块上的那个键，上电，红灯一秒钟闪一下即进入了AT模式）</p>
<h3 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h3><p><strong>1、</strong> [AT模式]两个蓝牙模块的PIO11接VCC，上电后即进入AT指令模式，都用USB转TTL模块连接到电脑的USB接口。(笔者这里是蓝牙模块的EN连接3.3V)</p>
<p><strong>2、</strong>[打开串口调试助手]开启2个串口调试窗口，一个打开蓝牙A的COM15口，一个打开蓝牙B的COM14口。(默认波特率一般为38400，数据位为8，停止位为1)</p>
<p><strong>3、</strong>[恢复A默认设置]串口调试助手A，端口为com15,将蓝牙A恢复默认设置：AT+ORGL\r\n (\r\n即回车、换行，或者在串口调试助手上输入AT+ORGL再按下回车即可)</p>
<p><strong>4、</strong>[设置A配对码]串口调试助手A，配置蓝牙A的配对码：AT+PSWD&#x3D;1234\r\n,(蓝牙A与蓝牙B的配对码相同，这样才能成功配对)</p>
<p><strong>5、</strong>[设置A主模式]串口调试助手A，将蓝牙A配置为主机模式：AT+ROLE&#x3D;1\r\n</p>
<p><strong>6、</strong>[恢复B默认设置]串口调试助手B,将蓝牙B恢复默认设置：AT+ORGL\r\n</p>
<p><strong>7、</strong>[设置B配对码]串口调试助手B，配置蓝牙B的配对码与蓝牙A一致：AT+PSWD&#x3D;1234\r\n</p>
<p><strong>8、</strong>[设置B从模式]串口调试助手B，将蓝牙B配置为从机模式：AT+ROLE&#x3D;0\r\n</p>
<p><strong>9、</strong>[查询B地址]串口调试助手B，查询蓝牙B的地址：AT+ADDR?\r\n (如：+ADDR:98d3:37:90efca)</p>
<p><strong>10、</strong>[蓝牙A绑定蓝牙B]串口调试助手A，蓝牙A绑定蓝牙B地址：<br>AT+BIND&#x3D;98d3，37，90efca\r\n（注意把地址的冒号换成逗号）</p>
<p><strong>11、</strong>[常规工作模式]2个模块的PIO11引脚都接地，重新上电后进入常规工作模式，自动完成配对。之后，串口调试助手A和串口调试助手B就能互传数据了。（笔者这里是直接将EN脚置空）</p>
<p><strong>注意</strong>：确保2个蓝牙模块的配对码（PSWD）相同，都上电后两个模块会自动相连。<br>（蓝牙的连接模式默认是：0——指定蓝牙地址连接模式，这样蓝牙A才能自动连接绑定的地址，如果不是模式0，设置为模式0：AT+CMODE&#x3D;0 [查询指令：<code>AT+CMODE？</code>]）</p>
<blockquote>
<p>如果连接失败，重新配置一次。连接成功是每秒闪一次，一次闪两下</p>
</blockquote>
<p>注意：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">两个模块波特率及格式相同</span><br><span class="line">密码相同</span><br><span class="line">一个为主机模式，一个为从机模式</span><br><span class="line">连接方式都设置为地址连接</span><br><span class="line">绑定对方地址</span><br></pre></td></tr></table></figure>
<p>下面是笔者用笔记本用两个串口直接测试的图：<br><img data-src="https://pic.imgdb.cn/item/664347ce0ea9cb1403ca6fdc.png" alt="这里写图片描述"><br>（左边是A，右边是B，右边发送命令框所发送的内容显示在左边框中）</p>
<p>此文多处参考<a href="https://wenku.baidu.com/view/97d363d2b04e852458fb770bf78a6529647d3556.html">这篇文章</a>，若有不妥，还请指出。</p>
]]></content>
      <categories>
        <category>嵌入式开发</category>
        <category>蓝牙模块</category>
      </categories>
  </entry>
  <entry>
    <title>Arduino Mega 2560 Reference Design原理图解读</title>
    <url>/40929.html</url>
    <content><![CDATA[<p>Arduino是一款便捷灵活、方便上手的开源电子原型平台。包含硬件（各种型号的Arduino板）和软件（ArduinoIDE）</p>
<span id="more"></span>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<ul>
<li>电源模块<br><img data-src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNTA2MjMxMTA4NTU3?x-oss-process=image/format,png" alt="这里写图片描述"><br>‘IC1’和’IC2’是两个低压差三路稳压器，起着降压以及稳压的作用。图中的输出是+5V，但我们实测输入电压为9V左右，输出电压为4.7V。<br>&emsp;&emsp;这里为什么要进行降压处理了？原因很简单，我们都知道功耗和电压成正比，即电压越大，电子产品的功耗越大（P&#x3D;UI）。但是采用低电压供电在技术和硬件方面的要求更高。<br><img data-src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNTA2MjMyMjM2NTc2?x-oss-process=image/format,png" alt="这里写图片描述"><br>在正常情况下，电压应该是不随时间的改变而改变，但在某些时刻，因为外界的干扰或者电路本身设计的问题会造成电压的衰减。电压衰减造成信号在传输过程的衰减，就可能影响到电路之间的通信。<br><img data-src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNTA2MjMzMDAwMDk4?x-oss-process=image/format,png" alt="这里写图片描述"><br>在理想情况下，电路电压的输入为9V，且不为时间的改变而改变，如上图的虚线所示。但实际项目中，电压往往是不稳定的，如上图波浪线所示。所以我们用一个降压稳压电路来稳定其电压，如上图直线所示。<br><strong>降压电路：</strong>稳定电压，消耗多余功率。（根据公式P&#x3D;UI，电压降低了，其功率也会降低。而降低的功率主要由降压电路所消耗，主要方式为散热，所以这也是为什么一般电路的电源模块温度比其他模块高的原因）。<br><strong>期望</strong> 因为多余的功率通过散热的形式消耗难免让人觉得可惜，所以就<a href="http://baike.baidu.com/link?url=93ZMHJTSc1RxI2RNYP67bV3MIh9wbncsAmpkr9HBIRmJjsfkoWBBmNaRClCC5KrAwx-iwVOhTECsbdYBEdCh4oOAu--9jK7OM0zkW2o2k5EHFc5ewUPZQlikY_Kjrcf0">开关电源</a>就诞生了。</li>
</ul>
<p>同时我们也看到电源模块有几个电容，电容的主要作用是滤波和储能。一般电容为47uF或者470uF。通常使用小电容滤除高频干扰，大电容消除低频干扰。</p>
<p><img data-src="https://pic.imgdb.cn/item/6643490e0ea9cb1403cc1be4.png" alt="这里写图片描述"><br>因为电容的存在，所以高低电平的转换也由左图变成了右图。</p>
<ul>
<li>复位</li>
</ul>
<p><img data-src="https://pic.imgdb.cn/item/6643490d0ea9cb1403cc1b99.png" alt="这里写图片描述"></p>
<p><img data-src="https://pic.imgdb.cn/item/6643490d0ea9cb1403cc1b76.png" alt="这里写图片描述"><br>当按下复位键后，GND和RESET短接，拉低了电平（注意，芯片上的RESET脚和服务模块的RESERT脚是连在一起的，只要中间没有其它电容电阻这些器件，电压是相等的）。用示波器观察，按下复位键时，电平会拉低，当松开时，电平又升高。<br>大家可能注意到30号管脚和其他管脚不一样，在最右边有一个圆圈。这个表示该管脚只对低电平有效。</p>
<ul>
<li>晶振<br><img data-src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNTA3MDAxMjM0MDAx?x-oss-process=image/format,png" alt="这里写图片描述"></li>
</ul>
<p>用郑BOSS的话讲，作为专业人士，看到XTAL就要本能的反应是“晶振”，这里是使用的一个16MHz的晶振，晶振在电路中起着非常重要的作用（具体作用还请读者自行百度），相当于人的心脏。<br>如果用示波器看晶振的波形，你可以看到一个很漂亮的正弦波（这里省略照片，因为在笔者准备拍照的时候电路板被小伙伴给弄冒烟了），感兴趣的同志可以自己试一下。</p>
<ul>
<li><p>运算电路<br><img data-src="https://pic.imgdb.cn/item/6643497b0ea9cb1403ccbd6d.png" alt="这里写图片描述"><br>这个电路实现反馈。如果5脚电压大于+3V3，即7脚翻转为高平。</p>
</li>
<li><p>PWM(Pulse-Width Modulation 脉冲宽度调制)<br><img data-src="https://pic.imgdb.cn/item/6643497b0ea9cb1403ccbd1f.png" alt="这里写图片描述"></p>
</li>
</ul>
<p><img data-src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNTA3MDAyMzU0MzEy?x-oss-process=image/format,png" alt="这里写图片描述"><br>通过改变脉冲列的周期可以调频，改变脉冲的宽度或占空比可以调压，采用适当控制方法即可使电压与频率协调变化。可以通过调整PWM的周期、PWM的占空比而达到控制充电电流的目的。进而来控制步进电机，来一个脉冲步进电机动一下。</p>
<p>最后还有一些关于万用表、示波器、学生电源等仪器的使用，感兴趣的同学自行百度。</p>
<blockquote>
<p>本篇文章对大家看电路原理图有所帮助，如有不妥的地方也请各位老司机多多指出。</p>
</blockquote>
]]></content>
      <categories>
        <category>嵌入式开发</category>
      </categories>
      <tags>
        <tag>硬件</tag>
      </tags>
  </entry>
  <entry>
    <title>摸鱼神器之下班倒计时计时器</title>
    <url>/8861.html</url>
    <content><![CDATA[<p>上班摸鱼是一个打工人的常态，与其不断地盯着时间看还有多久下班，还不如用一个倒计时器帮你计时，让你知道还有多久下班，好准时跑路。</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>具体实现代码（python）下面已经给出,这里博主也生成了.exe可执行文件，如有需要，可以直接私聊博主。如下图<br><img data-src="https://pic.imgdb.cn/item/66433c1f0ea9cb1403b4ae2a.png" alt="效果图"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">refresh_current_time</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;刷新当前时间&quot;&quot;&quot;</span></span><br><span class="line">    clock_time = time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">    curr_time.config(text=clock_time)</span><br><span class="line">    curr_time.after(<span class="number">1000</span>, refresh_current_time)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">refresh_down_time</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;刷新倒计时时间&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 当前时间戳</span></span><br><span class="line">    now_time = <span class="built_in">int</span>(time.time())</span><br><span class="line">    <span class="comment"># 下班时间时分秒数据过滤</span></span><br><span class="line">    work_hour_val = <span class="built_in">int</span>(work_hour.get())</span><br><span class="line">    <span class="keyword">if</span> work_hour_val &gt; <span class="number">23</span>:</span><br><span class="line">        down_label.config(text=<span class="string">&#x27;小时的区间为（00-23）&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    work_minute_val = <span class="built_in">int</span>(work_minute.get())</span><br><span class="line">    <span class="keyword">if</span> work_minute_val &gt; <span class="number">59</span>:</span><br><span class="line">        down_label.config(text=<span class="string">&#x27;分钟的区间为（00-59）&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    work_second_val = <span class="built_in">int</span>(work_second.get())</span><br><span class="line">    <span class="keyword">if</span> work_second_val &gt; <span class="number">59</span>:</span><br><span class="line">        down_label.config(text=<span class="string">&#x27;秒数的区间为（00-59）&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># 下班时间转为时间戳</span></span><br><span class="line">    work_date = <span class="built_in">str</span>(work_hour_val) + <span class="string">&#x27;:&#x27;</span> + <span class="built_in">str</span>(work_minute_val) + <span class="string">&#x27;:&#x27;</span> + <span class="built_in">str</span>(work_second_val)</span><br><span class="line">    work_str_time = time.strftime(<span class="string">&#x27;%Y-%m-%d &#x27;</span>) + work_date</span><br><span class="line">    time_array = time.strptime(work_str_time, <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">    work_time = time.mktime(time_array)</span><br><span class="line">    <span class="keyword">if</span> now_time &gt; work_time:</span><br><span class="line">        down_label.config(text=<span class="string">&#x27;已过下班时间&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        down_label.config(text=<span class="string">&#x27;十分钟后将自动关机&#x27;</span>)</span><br><span class="line">        os.system(<span class="string">&#x27;shutdown -s -t 600&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># 距离下班时间剩余秒数</span></span><br><span class="line">    diff_time = <span class="built_in">int</span>(work_time - now_time)</span><br><span class="line">    <span class="keyword">while</span> diff_time &gt; -<span class="number">1</span>:</span><br><span class="line">        <span class="comment"># 获取倒计时-时分秒</span></span><br><span class="line">        down_minute = diff_time // <span class="number">60</span></span><br><span class="line">        down_second = diff_time % <span class="number">60</span></span><br><span class="line">        down_hour = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> down_minute &gt; <span class="number">60</span>:</span><br><span class="line">            down_hour = down_minute // <span class="number">60</span></span><br><span class="line">            down_minute = down_minute % <span class="number">60</span></span><br><span class="line">        <span class="comment"># 刷新倒计时时间</span></span><br><span class="line">        down_time = <span class="built_in">str</span>(down_hour).zfill(<span class="number">2</span>) + <span class="string">&#x27;时&#x27;</span> + <span class="built_in">str</span>(down_minute).zfill(<span class="number">2</span>) + <span class="string">&#x27;分&#x27;</span> + <span class="built_in">str</span>(down_second).zfill(<span class="number">2</span>) + <span class="string">&#x27;秒&#x27;</span></span><br><span class="line">        down_label.config(text=down_time)</span><br><span class="line">        tk_obj.update()</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> diff_time == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 倒计时结束</span></span><br><span class="line">            down_label.config(text=<span class="string">&#x27;已到下班时间&#x27;</span>)</span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">            down_label.config(text=<span class="string">&#x27;十分钟后将自动关机&#x27;</span>)</span><br><span class="line">            os.system(<span class="string">&#x27;shutdown -s -t 600&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        diff_time -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 程序主入口</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 设置页面数据</span></span><br><span class="line">    tk_obj = Tk()</span><br><span class="line">    tk_obj.geometry(<span class="string">&#x27;400x280&#x27;</span>)</span><br><span class="line">    tk_obj.resizable(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    tk_obj.config(bg=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    tk_obj.title(<span class="string">&#x27;上班摸鱼专用倒计时&#x27;</span>)</span><br><span class="line">    Label(tk_obj, text=<span class="string">&#x27;下班倒计时&#x27;</span>, font=<span class="string">&#x27;宋体 20 bold&#x27;</span>, bg=<span class="string">&#x27;white&#x27;</span>).pack()</span><br><span class="line">    <span class="comment"># 设置当前时间</span></span><br><span class="line">    Label(tk_obj, font=<span class="string">&#x27;宋体 15 bold&#x27;</span>, text=<span class="string">&#x27;当前时间：&#x27;</span>, bg=<span class="string">&#x27;white&#x27;</span>).place(x=<span class="number">50</span>, y=<span class="number">60</span>)</span><br><span class="line">    curr_time = Label(tk_obj, font=<span class="string">&#x27;宋体 15&#x27;</span>, text=<span class="string">&#x27;&#x27;</span>, fg=<span class="string">&#x27;gray25&#x27;</span>, bg=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    curr_time.place(x=<span class="number">160</span>, y=<span class="number">60</span>)</span><br><span class="line">    refresh_current_time()</span><br><span class="line">    <span class="comment"># 设置下班时间</span></span><br><span class="line">    Label(tk_obj, font=<span class="string">&#x27;宋体 15 bold&#x27;</span>, text=<span class="string">&#x27;下班时间：&#x27;</span>, bg=<span class="string">&#x27;white&#x27;</span>).place(x=<span class="number">50</span>, y=<span class="number">110</span>)</span><br><span class="line">    <span class="comment"># 下班时间-小时</span></span><br><span class="line">    work_hour = StringVar()</span><br><span class="line">    Entry(tk_obj, textvariable=work_hour, width=<span class="number">2</span>, font=<span class="string">&#x27;宋体 12&#x27;</span>).place(x=<span class="number">160</span>, y=<span class="number">115</span>)</span><br><span class="line">    work_hour.<span class="built_in">set</span>(<span class="string">&#x27;18&#x27;</span>)</span><br><span class="line">    <span class="comment"># 下班时间-分钟</span></span><br><span class="line">    work_minute = StringVar()</span><br><span class="line">    Entry(tk_obj, textvariable=work_minute, width=<span class="number">2</span>, font=<span class="string">&#x27;宋体 12&#x27;</span>).place(x=<span class="number">185</span>, y=<span class="number">115</span>)</span><br><span class="line">    work_minute.<span class="built_in">set</span>(<span class="string">&#x27;00&#x27;</span>)</span><br><span class="line">    <span class="comment"># 下班时间-秒数</span></span><br><span class="line">    work_second = StringVar()</span><br><span class="line">    Entry(tk_obj, textvariable=work_second, width=<span class="number">2</span>, font=<span class="string">&#x27;宋体 12&#x27;</span>).place(x=<span class="number">210</span>, y=<span class="number">115</span>)</span><br><span class="line">    work_second.<span class="built_in">set</span>(<span class="string">&#x27;00&#x27;</span>)</span><br><span class="line">    <span class="comment"># 设置剩余时间</span></span><br><span class="line">    Label(tk_obj, font=<span class="string">&#x27;宋体 15 bold&#x27;</span>, text=<span class="string">&#x27;剩余时间：&#x27;</span>, bg=<span class="string">&#x27;white&#x27;</span>).place(x=<span class="number">50</span>, y=<span class="number">160</span>)</span><br><span class="line">    down_label = Label(tk_obj, font=<span class="string">&#x27;宋体 23&#x27;</span>, text=<span class="string">&#x27;&#x27;</span>, fg=<span class="string">&#x27;gray25&#x27;</span>, bg=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    down_label.place(x=<span class="number">160</span>, y=<span class="number">155</span>)</span><br><span class="line">    down_label.config(text=<span class="string">&#x27;00时00分00秒&#x27;</span>)</span><br><span class="line">    <span class="comment"># 开始计时按钮</span></span><br><span class="line">    Button(tk_obj, text=<span class="string">&#x27;START&#x27;</span>, bd=<span class="string">&#x27;5&#x27;</span>, command=refresh_down_time, bg=<span class="string">&#x27;green&#x27;</span>, font=<span class="string">&#x27;宋体 10 bold&#x27;</span>).place(x=<span class="number">150</span>, y=<span class="number">220</span>)</span><br><span class="line">    tk_obj.mainloop()</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>日常代码</category>
        <category>工作生活</category>
        <category>Python应用</category>
        <category>实用工具</category>
      </categories>
  </entry>
  <entry>
    <title>在Lua中调用C语言</title>
    <url>/18339.html</url>
    <content><![CDATA[<p>我们说用Lua可以调用C语言函数，但这并不意味着Lua可以调用所有的C函数。当C语言调用Lua函数时，该函数必须遵循一个简单的规则来传递参数和获取结果。</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>同样，当Lua调用C函数时，这个C函数也必须遵循某种规则来获取参数和返回结果。此外，当Lua调用C函数时，我们必须注册该函数，即必须以一种恰当的方式为Lua提供该C函数的地址。<br>Lua调用C函数时，也使用一个与C语言调用Lua函数时相同类型的栈，C函数从栈中获取参数，并将结果压入栈中。<br>此处的重点在于，这个栈不是一个全局结构；每个函数都有其私有的局部栈。当Lua调用一个C函数时，第一个参数总是位于这个局部栈中索引为1的位置。即使一个C函数调用了Lua代码，而且Lua代码又再次调用了同一个C函数，这些调用每一次都只会看到本次调用自己的私有栈，其中索引为1的位置上就是一个参数。</p>
<h2 id="C函数"><a href="#C函数" class="headerlink" title="C函数"></a>C函数</h2><p>先举一个例子，让我们实现一个简化版本的正弦函数，该函数返回某个给定数的正弦值：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">l_sin</span><span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	<span class="type">double</span> d = lua_tonumber(L,<span class="number">1</span>);</span><br><span class="line">	lua_pushnumber(L,<span class="built_in">sin</span>(d));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所有在Lua中注册的函数都必须使用一个相同的原型，该原型就是定义在lua.h中的lua_CFunction:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(*lua_CFunction)</span><span class="params">(lua_State *L)</span>;</span><br></pre></td></tr></table></figure>
<p>从C语言的角度看，这个函数只有一个指向Lua状态类型的指针作为参数，返回值为一个整型数，代表压入栈中的返回值的个数。因此，该函数在压入结果前无须清空栈。在该函数返回后，Lua会自动保存返回值并清空整个栈。<br>在Lua中，调用这个函数前，还必须通过lua_pushcfunction注册该函数。函数lua_pushcfunction会获取一个指向C函数的指针，然后在Lua中创建一个”function”类型，代表待注册的函数。一旦完成注册，C函数就可以像其他Lua函数一样行事了。<br>一种快速测试函数l_sin的方法是，将其代码放到简单解释器中，并将下列代码添加到luaL_openlibs调用的后面：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">lua_pushcfunction(L,l_sin);</span><br><span class="line">lua_setglobal(L,<span class="string">&quot;mysin&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>上述代码的第一行压入一个函数类型的值，第二行将这个值赋给全局变量mysin。完成这些修改后，我们就可以在Lua脚本中使用新函数mysin了。<br>要编写一个更专业的正弦函数，必须检查其参数的类型，而辅助库可以帮助我们完成这个任务。函数luaL_checknumber可以检查指定的参数是否为一个数字：如果出现错误，该函数会抛出一个告知性的错误信息；否则，返回这个数字。只需对上面这个正弦函数稍作修改：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">l_sin</span><span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	<span class="type">double</span> d = luaL_checknumber(L,<span class="number">1</span>);</span><br><span class="line">	lua_pushnumber(L,<span class="built_in">sin</span>(d));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>做了上述修改后，如果调用mysin(‘a’)就会出现如下的错误：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">bad argument #<span class="number">1</span> to <span class="string">&#x27;mysin&#x27;</span> (number expected, got <span class="built_in">string</span>)</span><br></pre></td></tr></table></figure>
<p>函数luaL_checknumber会自动用参数的编号(#1)、函数名(“mysin”)、期望的参数类型及实际的参数类型来填写错误信息。<br>下面是一个更复杂的示例，编写一个函数返回指定目录下的内容。由于ISO C中没有具备这种功能的函数，因此Lua没有在标准库中提供这样的函数。这里，我们假设使用一个POSIX兼容的操作系统。这个函数以一个目录路径字符串作为参数，返回一个列表，列出该目录下的内容。例如，调用dir(“&#x2F;home&#x2F;lua”)会得到形如{“.”,”..”,”src”,”bin”,”lib”}的表。该函数的完整代码如下：</p>
<blockquote>
<p>一个读取目录的函数</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dirent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;lua.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;luaxlib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">l_dir</span><span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	DIR *dir;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> *<span class="title">entry</span>;</span></span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line">	<span class="type">const</span> <span class="type">char</span> *path = lual_checkstring(L,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	dir = opendir(path);</span><br><span class="line">	<span class="keyword">if</span> (dir == <span class="literal">NULL</span>)&#123;</span><br><span class="line">		lua_pushnil(L);</span><br><span class="line">		lua_pushstring(L,strerror(error));</span><br><span class="line">		<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		lua_newtable(L);</span><br><span class="line">		i = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span> ((entry = readdir(dir)) != <span class="literal">NULL</span>)&#123;</span><br><span class="line">			lua_pushinteger(L,i++);</span><br><span class="line">			lua_pushstring(L,entry -&gt; d_name);</span><br><span class="line">			lua_settable(L,<span class="number">3</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			closedir(dir);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该函数先使用与luaL_checknumber类似的函数luaL_checkstring检查目录路径是否为字符串，然后使用函数opendir打开目录。如果无法打开目录，该函数会返回nil以及一条用函数strerror获取的错误信息。在打开目录后，该函数会创建一张新表，然后用目录中的元素填充这张新表。最后，该函数关闭目录并返回1，在C语言中即表示该函数将其栈顶的值返回给了Lua。<br>在某些情况中，l_dir的这种实现可能会造成内存泄露。该函数调用的三个Lua函数均可能由于内存不足而失败。这三个函数中的任意一个执行失败都会引发错误，并中断函数l_dir的执行，进而也就无法调用closedir了。</p>
<h2 id="延续"><a href="#延续" class="headerlink" title="延续"></a>延续</h2><p>通过lua_pcall和lua_call，一个被Lua调用的C函数也可以回调Lua函数。标准库中有一些函数就是这么做的：table.sort调用了排序函数，string.gsub调用了替换函数，pcall和xpcall以保护模式来调用函数。如果你还记得Lua代码本身就是被C代码调用的，那么你应该知道调用顺序类似于：C调用Lua，Lua又调用了C，C又调用了Lua。<br>通常，Lua语言可以处理这种调用顺序；毕竟，与C语言的集成是Lua的一大特点。但是，有一种情况下，这种相互调用会有问题，那就是协程。<br>Lua语言中的每个协程都有自己的栈，其中保存了该协程所挂起调用的信息。具体地说，就是该栈中存储了每一个调用的返回地址、参数及局部变量。对于Lua函数的调用，解释器只需要这个栈即可，我们将其成为软栈。然而，对于C函数的调用，解释器必须使用C语言栈。毕竟，C函数的返回地址是局部变量都位于C语言栈中。<br>对于解释器来说，拥有多个软栈并不难；然而，ISO C的运行时环境却只能拥有一个内部栈。因此，Lua中的协程不能挂起C函数的执行：如果一个C函数位于从resume到对应yield的调用路径中，那么Lua无法保存C函数的状态以便在下次resume时恢复状态。请考虑如下的示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">co = coroutine.wrap(function()</span><br><span class="line">	<span class="built_in">print</span>(pcall(coroutine.<span class="keyword">yield</span>))</span><br><span class="line">end)</span><br><span class="line">co()</span><br><span class="line"></span><br><span class="line">-- false attempt to <span class="keyword">yield</span> across metamethod/C-call boundary</span><br></pre></td></tr></table></figure>
<p>函数pcall是一个C语言函数；因此，Lua5.1不能将其挂起，因为ISO C无法挂起一个C函数并在之后恢复其运行。<br>在Lua5.2及后续版本中，用延续改善了对这个问题的处理。Lua5.2使用长跳转实现了yield，并使用相同的方式实现了错误信息处理。长跳转简单地丢弃了C语言栈中关于C函数的所有信息，因而无法resume这些函数。但是，一个C函数foo可以指定一个延续函数foo_k，该函数也是一个C函数，在要恢复foo的执行时它就会被调用。也就是说，当解释器发现它应该恢复函数foo的执行时，如果长调转已经丢弃了C语言栈中有关foo的信息，则调用foo_k来替代。<br>为了说得更具体些，我们将pcall的实现作为示例。在Lua5.1中，该函数的代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">luaB_pcall</span><span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	<span class="type">int</span> status;</span><br><span class="line">	luaL_checkany(L,<span class="number">1</span>);</span><br><span class="line">	status = lua_pcall(L,lua_gettop(L) - <span class="number">1</span>, LUA_MULTRET,<span class="number">0</span>);</span><br><span class="line">	lua_pushboolean(L,(status == LUA_OK));</span><br><span class="line">	lua_insert(L,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> lua_gettop(L);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果程序正在通过lua_pcall被调用的函数yield，那么后面就不能恢复luaB_pcall的执行。因此，如果我们在保护模式的调用下试图yield时，解释器就会抛出异常。Lua5.3使用基本类似于下面示例中的方式实现了pcall。</p>
<blockquote>
<p>使用延续实现pcall</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">finishpcall</span> <span class="params">(lua_State *L, <span class="type">int</span> status, <span class="type">intptr_t</span> ctx)</span>&#123;</span><br><span class="line">	(<span class="type">void</span>)ctx;</span><br><span class="line">	status = (status != LUA_OK &amp;&amp; status != LUA_YIELD);</span><br><span class="line">	lua_pushboolean (L,(status == <span class="number">0</span> ));</span><br><span class="line">	lua_insert(L,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> lua_gettop(L);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">luaB_pcall</span><span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	<span class="type">int</span> status;</span><br><span class="line">	luaL_checkany(L,<span class="number">1</span>);</span><br><span class="line">	status = lua_pcall(L,lua_gettop(L) - <span class="number">1</span>, LUA_MULTERT,<span class="number">0</span>,<span class="number">0</span>,finishpcall);</span><br><span class="line">	<span class="keyword">return</span> finsihpcall(L,status,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>与Lua5.1中的版本相比，上述实现有三个重要的不同点：首先，新版本用lua_pcallk替换了lua_pcall；其次，新版本在调用完lua_pcallk后把完成的状态传给了新的辅助函数finishpcall；第三，lua_pcallk返回的状态除了LUA_OK或者一个错误外，还可以是LUA_YIELD。<br>如果没有发生yield，那么lua_pcallk的行为与lua_pcall的行为完全一样。但是，如果发生yield，情况则大不相同。如果一个被原来lua_pcall调用的函数想要yield，那么Lua5.3会像Lua5.1版本一样引发错误。但当被新的lua_pcallk调用的函数yield时，则不会出现发生错误：Lua会做一个长跳转并且丢弃C语言栈中有关luaB_pcall的元素，但是会在协程软栈中保存传递给函数lua_pcallk的延续函数的引用。后来，当解释器发现应该返回到luaB_pcall时，它就会调用延续函数。<br>当发生错误时，延续函数finishpcall也可能会被调用。与原来的luaB_pcall不同，finishpcall不能获取lua_pcallk所返回的值。因此，finishpcall通过额外的参数status获取这个结果。当没有错误时，status是LUA_YIELD而不是LUA_OK，因此延续函数可以检查它是如何被调用的。当发生错误时，status还是原来的错误码。<br>除了调用的状态，延续函数还接收一个上下文。lua_pcallk的第5个参数是一个任意的整型数，这个参数被当做延续函数的最后一个参数来传递。这个值允许原来的函数直接向延续函数传递某些任意的信息。<br>Lua5.3的延续体系是一种为了支持yield而设计的精巧机制，但它也不是万能的。某些C函数可能会需要它们的延续传递相当多的上下文。例如，table.sort将C语言栈用于递归，而string.gsub则必须跟踪捕获，还要跟踪和一个用于存放部分结果的缓冲区。虽然这些函数能以”yieldbale”的方式重写，但与增加的复杂性和性能损失相比，这样做似乎并不值得。</p>
<h2 id="C模块"><a href="#C模块" class="headerlink" title="C模块"></a>C模块</h2><p>Lua模块就是一个代码段，其中定义了一些Lua函数并将其存储在恰当的地方。为Lua编写的C语言模块可以模仿这种行为。除了C函数的定义外，C模块还必须定义一个特殊的函数，这个特殊的函数相当于Lua库中的主代码段，用于注册模块中所有的C函数，并将它们存储在恰当的地方。与Lua的主代码段一样，这个函数还应该初始化模块中所有需要初始化的其他东西。<br>Lua通过注册过程感知到C函数。一旦一个C函数用Lua表示和存储，Lua就会通过对其地址的直接引用来调用它。换句话说，一旦一个C函数完成注册，Lua调用它时就不再依赖于其函数名、包的位置以及可见性规则。通常，一个C模块中只有一个用于打开库的公共函数；其他所有的函数都是私有的，在C语言中被声明为static。<br>当我们使用C函数来扩展Lua程序时，将代码设计为一个C模块是个不错的想法。因为即使我们现在只想注册一个函数，但迟早总会需要其他的函数。通常，辅助库为这项工作提供了一个辅助函数。宏luaL_newlib接收一个由C函数及其对应函数名组成的数组，并将这些函数注册到一个新表中。举个例子，假设我们要用之前定义的函数l_dir创建一个库。首先，必须定义这库函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">l_dir</span><span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	同前</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后，声明一个数组，这个数组包含了模块中所有的函数及其名称。数组元素的类型为luaL_Reg，该类型是由两个字段组成的结构体，这两个字段分别是函数名和函数指针。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">luaL_Reg</span> <span class="title">mylib</span>[] =</span> &#123;</span><br><span class="line">	&#123;<span class="string">&quot;dir&quot;</span>,l_dir&#125;,</span><br><span class="line">	&#123;<span class="literal">NULL</span>,<span class="literal">NULL</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在上述例子中，只声明了一个函数。数组的最后一个元素永远是是{NULL,NILL}，并以此标识数组的结尾。最后，我们使用函数luaL_newlib声明一个主函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">luaopen_mylib</span><span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	luaL_newlib(L,mylib);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对函数luaL_newlib的调用会新创建一个表，并使用由数组mylib指定的”函数名-函数指针”填充这个新创建的表。当luaL_newlib返回时，它把这个新创建的表留在栈中，在表中它打开了这个库。然后，函数luaopen_mylib返回1，表示将这个表返回给Lua。<br>编写完这个库以后，我们还必须将其链接到解释器。如果Lua解释器支持动态链接的话，那么最简便的方法是使用动态链接机制。在这种情况下，必须将这个库放到C语言路径中的某个地方。在完成了这些步骤后，就可以使用require在Lua中直接加载这个模块了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">local mylib = requrire <span class="string">&quot;mylib&quot;</span></span><br></pre></td></tr></table></figure>
<p>上述的语句会将动态库mylib链接到Lua，查找函数luaopen_mylib，将其注册为一个C语言函数，然后调用它以打开模块。<br>动态链接器必须知道函数luaopen_mylib的名字才能找到它。它总是寻找名为”luaopen + 模块名”这样的函数。因此，如果我们的模块名为mylib，那么该函数应该命名为luaopen_mylib。<br>如果解释器不支持动态链接，就必须连同新库一起重新编译Lua语言。除了重新编译，还需要以某种方式告诉独立解释器，它应该在打开一个新状态时打开这个库。一个简答的做法是把luaopen_mylib添加到由lua_openlibs打开的标住库列表中，这个列表位于文件linit.c中。</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>好用的网站分享</title>
    <url>/7a62141a.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<table>
<thead>
<tr>
<th>网站1</th>
<th>网站2</th>
<th>网站3</th>
<th>网站4</th>
<th>网站5</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://pagespeed.web.dev/">网站性能测试</a></td>
<td><a href="https://apkcombo.com/zh/">获取线上APK</a></td>
<td><a href="https://zfccd.55cha.com/">字符串长度计算</a></td>
<td><a href="http://www.jsons.cn/urlencode">Url在线解码</a></td>
<td><a href="https://adsense.google.com/start/">谷歌广告</a></td>
</tr>
<tr>
<td><a href="https://www.logosc.cn/logo">字母图标生成</a></td>
<td><a href="https://www.iconfont.cn/">阿里巴巴矢量图标</a></td>
<td><a href="https://girlgenerator.online/">免费的AI绘画</a></td>
<td><a href="https://mac-os.leiyihan.com/">macos网页版</a></td>
<td><a href="https://audiotrimmer.com/cn/">关于音频的6个小工具  </a></td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>基于MATLAB的AM调制解调</title>
    <url>/30360.html</url>
    <content><![CDATA[<p>现在的社会越来越发达，科学技术不断的在更新，在信号和模拟电路里面经常要用到调制与解调，而AM的调制与解调是最基本的，也是经常用到的。用AM调制与解调可以在电路里面实现很多功能，制造出很多有用又实惠的电子产品，为我们的生活带来便利。在我们日常生活中用的收音机就是采用了AM调制的方式，而且在军事和民用领域都有十分重要的研究课题。现用MATLAB中M文件实现本课程设计内容“基于MATLAB的AM调制解调实现”。在课程设计中，系统开发平台为Windows XP，MTALAB 2007，程序设计语言采用MATLAB 2007，程序运行平台为MATLAB 2007。通过MATLAB编写程序并加以调试能够实现AM的调制与调解，完成了课程设计的目标，并经过适当完善后，将可以在实际中应用。</p>
<p><strong>关键词</strong> MATLAB；AM；调制解调</p>
<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p> 模拟调制技术在20世纪中曾有较大的应用，如军事通信、短波通信、模拟移动通信、模拟调频广播和模拟调幅广播等。虽然现在通信的发展趋势为数字化，但数字技术并不能完全替代模拟技术，而且模拟调制技术是通信理论的基本知识。模拟信号的载波调制电路里面经常要用到调制与解调，而AM的调制与解调是最基本的，也是经常用到的，为了进一步了解模拟调幅，展现MATLAB中M文件程序设计优势，本课程设计将在MATLAB中用M文件实现AM调制解调的程序设计。</p>
<h3 id="课程设计目的"><a href="#课程设计目的" class="headerlink" title="课程设计目的"></a>课程设计目的</h3><p>本课程设计课题主要研究基于MATLAB的AM调制解调实现的理论设计和软件仿真方法。掌握模拟系统AM调制解调的原理；掌握AM调制解调模拟系统的理论设计方法；掌握应用MATLAB分析系统时域、频域特性的方法，进一步锻炼应用MATLAB进行编程仿真的能力。</p>
<h3 id="课程设计要求"><a href="#课程设计要求" class="headerlink" title="课程设计要求"></a>课程设计要求</h3><p>熟悉MATLAB中M文件的使用方法，并在掌握AM调制解调原理的基础上，编写AM<br>调制解调程序。绘制出AM信号解调前后在时域和频域中的波形，并观察解调前后频谱有何变化以加深对AM信号解调原理的理解。对信号叠加噪声，并进行解调，绘制出解调前后信号的时频波形，改变噪声功率进行解调，分析噪声对信号传输造成的影响。</p>
<h3 id="课程设计步骤"><a href="#课程设计步骤" class="headerlink" title="课程设计步骤"></a>课程设计步骤</h3><p>(1)给定一个调制信号mes，载波信号Uc，并设计AM调制解调相关参数。<br>(2)分别绘制出调制信号和载波信号的波形图和频谱图。<br>(3)使用modulate()函数对mes信号进行调制。<br>(4)使用demod()函数解调已调信号Uam。<br>(5)使用awgn()函数对已调信号Uam加入噪声，观察加入噪声后对信号的影响。</p>
<h2 id="AM调制解调原理"><a href="#AM调制解调原理" class="headerlink" title="AM调制解调原理"></a>AM调制解调原理</h2><h3 id="AM调制原理"><a href="#AM调制原理" class="headerlink" title="AM调制原理"></a>AM调制原理</h3><p>AM是调幅，用AM调制与解调可以在电路里面实现很多功能，制造出很多有用又实惠的电子产品，为我们的生活带来便利。在我们日常生活中用的收音机就是采用了AM调制方式，而且在军事和民用领域都有十分重要的研究课题。<br>AM是指对信号进行幅度调制。在传送信号的一方将所要传送的信号附加在高频上，再由天线发射出去。高频震荡波就是携带信号的运载工具，也叫载波。振幅调制，就是由调制信号去控制高频载波的振幅，直至随调制信号做线性变化。仿真图如下：<br><img data-src="https://s11.ax1x.com/2024/02/26/pFd9wJs.png" alt="仿真原理图"></p>
<h3 id="AM解调原理"><a href="#AM解调原理" class="headerlink" title="AM解调原理"></a>AM解调原理</h3><p>调制的逆过程叫解调，调制是一个频谱搬移过程，它是将低频信号的频谱搬到载频位置。从已调信号的频谱中，将位于载频的信号频谱搬移回来。调制和解调都完成频谱搬移，各种调幅都是利用乘法器实现的。</p>
<h2 id="仿真过程实现"><a href="#仿真过程实现" class="headerlink" title="仿真过程实现"></a>仿真过程实现</h2><h3 id="AM-信号的产生"><a href="#AM-信号的产生" class="headerlink" title="AM 信号的产生"></a>AM 信号的产生</h3><p>为了产生AM信号，我写了下面部分的代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fc=<span class="number">120</span>;            %载波信号频率</span><br><span class="line">fm=<span class="number">30</span>;             %调制信号频率</span><br><span class="line">Fs=<span class="number">960</span>;             %采样频率</span><br><span class="line">w0=<span class="number">2</span>*fc*pi;</span><br><span class="line">w1=<span class="number">2</span>*fm*pi;</span><br><span class="line">Uc=A0*<span class="built_in">cos</span>(w0*t);            %载波信号  </span><br><span class="line">mes=<span class="number">1</span>+A1*<span class="built_in">cos</span>(w1*t);          %调制信号</span><br><span class="line">Uam=modulate(mes,fc,Fs,<span class="string">&#x27;am&#x27;</span>); 			 %AM已调信号</span><br><span class="line">C3=fft(Uam);			 %对已调信号进行傅里叶变换</span><br><span class="line">asd=<span class="built_in">abs</span>(C3);			 % 求模</span><br></pre></td></tr></table></figure>
<blockquote>
<p>fm为调制信号频率、A0为载波信号振幅、A1为调制信号振幅、mes是调制信号、fc为载波信号频率。Uam为已调信号。</p>
</blockquote>
<p>调制信号是来自信源的调制信号，这些信号是模拟的。高频振荡信号又称载波，是正弦信号。载波由高频信号源直接产生，然后经过高频功率放大器进行放大，作为调幅波的载波，调制信号有低频信号源直接产生，给出以上参数后，在MATLAB中通过modulate()函数得到AM信号Uam。再通过fft()函数和abs()函数对AM信号进行傅里叶变换及求模，得到AM信号的频谱。<br><em>载波信号的波形与频谱图，调制信号的波形与频谱图，已调信号的波形与频谱图如下。</em><br><img data-src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMTEzMjMxMDU3OTY3?x-oss-process=image/format,png" alt="载波信号的波形与频谱图"><br>上图显示了载波信号的时域波形图和频谱图。图中横坐标表示载波持续时间，纵坐标表示载波幅值。从图中可知本次调制使用的载波幅度为1。<br>上图还显示了载波信号的频谱图。图中横坐标表示频率，纵坐标表示信号频谱幅值。从图中可以明显看出载波频谱的频率为120Hz。</p>
<p><img data-src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMTEzMjMxMjU2Mzk5?x-oss-process=image/format,png" alt="调制信号的波形与频谱图"><br>上图显示了调制信号的时域波形图和频谱图。图中的横坐标和纵坐标分别对应表示时间和信号幅度值。从图中可以明显看出调制信号为余弦信号。<br>上图还显示了调制信号的频谱图。图中的横坐标和纵坐标分别对应表示频率和频谱幅值。从图中可以明显看出调制信号的频谱为30Hz。</p>
<p><img data-src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMTEzMjMxNDE3MTEz?x-oss-process=image/format,png" alt="已调信号的波形与频谱图"><br>上图显示了系统中经过AM调制后信号的时域波形图和频谱图。图中横坐标和纵坐标分别对应表示时间和信号幅值。<br>上图还显示了经历调制后信号所对应的频谱。频谱图中横坐标代表频率，纵坐标代表频谱幅值。从图中可知原发送信号经过调制后，频谱明显从原来的低频部分搬移到载波部分。</p>
<h3 id="AM解调实现"><a href="#AM解调实现" class="headerlink" title="AM解调实现"></a>AM解调实现</h3><p>给为对信号进行解调，我写了下面部分的代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Dam=demod(Uam,fc,Fs,<span class="string">&#x27;am&#x27;</span>);  % 对信号进行解调</span><br><span class="line">C4=fft(Dam);              %  对解调信号进行傅里叶变换</span><br><span class="line">wqe=<span class="built_in">abs</span>(C4);           % 求模</span><br></pre></td></tr></table></figure>
<p>fc为载波信号频率，Fs为采样频率，Uam为已调信号，在MATLAB中通过demod()函数对已调信号进行解调，得到Dam。并对Dam解调信号进行傅里叶变换和求模，再绘制出相应的波形图。解调信号的波形与频谱图如下：<br><img data-src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMTEzMjMxNzEyNjAx?x-oss-process=image/format,png" alt="解调信号的波形与频谱图"><br>上图显示了系统中经过AM解调信号的时域波形图和频谱图。图中横坐标和纵坐标分别对应表示时间和信号幅值。解调将已调信号复原了，信号波形与调制信号波形完全吻合，没有出现失真。<br>上图还显示了解调后信号所对应的频谱。频谱图中横坐标代表频率，纵坐标代表频谱幅值。可以看出解调后信号频谱回到了原始频率，没有失真。</p>
<h3 id="叠加噪声的AM解调"><a href="#叠加噪声的AM解调" class="headerlink" title="叠加噪声的AM解调"></a>叠加噪声的AM解调</h3><p>在实际信号传输过程中，通信系统不可能避免的会遇到噪声。这次设计使用的加性高斯白噪声。加性高斯白噪声是最基本的噪声和干扰模型。加性噪声是叠加在信号上的一种噪声，而且无论有无信号，噪声都始终存在，因此通常称它为加性噪声或者加性干扰。白噪声的噪声功率谱密度在所有的频率上均为一常数。如果白噪声取值的概念服从高斯分布，则称这样的噪声为高斯白噪声。通过在信道中叠加噪声，并绘制出相应的波形与频谱图，并与原始信号进行比较，分析噪声对信号的影响。<br>下面程序是在AM信号叠加噪声，并对叠加后的信号进行解调：<br><strong>加大噪声，信噪比为1：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">k=awgn(Uam,<span class="number">1</span>);    %加大噪声，信噪比为<span class="number">1</span></span><br><span class="line">pp=fft(k,<span class="number">300</span>);     %进行傅里叶变换</span><br><span class="line">zs=<span class="built_in">abs</span>(pp);       %求模</span><br><span class="line">qaz=demod(k,fc,Fs,<span class="string">&#x27;am&#x27;</span>); %加大噪声后解调</span><br><span class="line">wsx=fft(qaz,<span class="number">300</span>);    %进行傅里叶变换</span><br><span class="line">edc=<span class="built_in">abs</span>(wsx);         %求模</span><br></pre></td></tr></table></figure>
<p><strong>加小噪声，信噪比为20：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">d=awgn(Uam,<span class="number">20</span>);  %加小噪声，信噪比为<span class="number">20</span></span><br><span class="line">op=fft(d,<span class="number">300</span>);       %进行傅里叶变换</span><br><span class="line">mm=<span class="built_in">abs</span>(op);           %求模</span><br><span class="line">vb=demod(d,fc,Fs,<span class="string">&#x27;am&#x27;</span>); %加小噪声后解调</span><br><span class="line">fg=fft(vb,<span class="number">300</span>);         %进行傅里叶变换</span><br><span class="line">ty=<span class="built_in">abs</span>(fg);            %求模</span><br></pre></td></tr></table></figure>
<p><img data-src="https://pic.imgdb.cn/item/66434b600ea9cb1403cfffce.png" alt="加大噪声后AM信号波形与频谱图"><br>上图是加大噪声后AM信号波形图与频谱图，图中横坐标和纵坐标分别对应表示时间和信号幅值。可以看出加噪声后对信号有很大的影响，最原始的波形表现的不是很明显。<br>上图还显示了解调后信号所对应的频谱。频谱图中横坐标代表频率，纵坐标代表频谱幅值。虽然噪声对频率有明显的影响，但是中心频率还是没有变，出现了失真。</p>
<p><img data-src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMTEzMjMyNDAxNzQ4?x-oss-process=image/format,png" alt="加大噪声解调后的信号波形及频谱图"><br>上图是加大噪声后解调信号波形图与频谱图，图中横坐标和纵坐标分别对应表示时间和信号幅值。可以看出解调后噪声依然对信号有影响，也出现了失真。<br>上图还显示了解调后信号所对应的频谱。频谱图中横坐标代表频率，纵坐标代表频谱幅值。噪声对频率的影响很大，出现了失真，但是中心频率还是没有变。</p>
<p><img data-src="https://pic.imgdb.cn/item/66434b9b0ea9cb1403d041db.png" alt="加小噪声后AM信号波形与频谱图"><br>上图是加小噪声后AM信号波形图与频谱图，图中横坐标和纵坐标分别对应表示时间和信号幅值。可以看出加噪声后对信号有一定的影响，但影响不大，基本可以看出原始波形。<br>上图还显示了解调后信号所对应的频谱。频谱图中横坐标代表频率，纵坐标代表频谱幅值。噪声对频率的影响很小，而且中心频率也没有变，失真很小。</p>
<p><img data-src="https://pic.imgdb.cn/item/66434c030ea9cb1403d14669.png" alt="加小噪声解调后的信号波形及频谱图"><br>上图是加小噪声后解调信号波形图与频谱图，图中横坐标和纵坐标分别对应表示时间和信号幅值。可以看出解调后噪声依然对信号有影响，也出现了一些失真，但基本可以看出原波形。<br>上图还显示了解调后信号所对应的频谱。频谱图中横坐标代表频率，纵坐标代表频谱幅值。解调将频率搬回到原频率，噪声对频率的影响很小，出现了一些失真，但是中心频率还是没有变。<br>从加入噪声的几幅图可以看出不同功率的噪声对信号的影响不同，噪声功率越大，对信号的影响也越大。</p>
<h2 id="遇到的问题及解决办法"><a href="#遇到的问题及解决办法" class="headerlink" title="遇到的问题及解决办法"></a>遇到的问题及解决办法</h2><p>开始对MATLAB这款软件的使用不是很熟悉，连.m文件不会建，弄不清楚fft(),abs()函数是干什么用的，不知道figure(),subplot()是怎么实现图形输出，自己便把以前MATLAB的教材拿出来看，以及上网查和问老师和同学才弄明白。自己在进行AM调制与解调时是用的乘法，这样做容易出错，而且导致程序特别长，将简单问题复杂化了。老师提示可以用modulate()函数进行调制，于是自己去看老师发在网络教学平台的资料以及在MATLAB中输入help modulate()才解决，并通过调用函数demod()函数实现了信号的解调。调制信号开始没有加直流分量，导致调制时频谱不对，缺少原信号的频率。后面给调制信号加上一个直流分量，得到正确结果。在进行调制时是用的Uam&#x3D;modulate(mes,fc,Fs,’am’)，解调时用的Dam&#x3D;demod(Uam,fc,Fs,’amssb’); 这行语句，这样解调波形可以出来，但是有错误，发现是调制与解调设置的参数不对，把解调时的语句改为Dam&#x3D;demod(Uam,fc,Fs,’am’);后能出现正常波形。在加噪声是d&#x3D;Uam+awgn(Uam,20);没有正确的使用awgn()函数，将表达式改为d&#x3D;awgn(Uam,20);，这样得到的波形图才是正确的。</p>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>本设计的主题是基于MATLAB的AM调制解调实现，第二章中队AM调制解调原理进行了理论分析。第三章中根据第二章的理论以及MATLAB的特点，对调制信号进行了调制与解调，最后通过程序得出的仿真结果和理论结果进行比较与分析。<br>本设计开始给定30Hz的调制信号和120Hz的载波，对AM波进行调制与解调。并在已调AM信号上叠加噪声，对信号进行解调。再将之与原始信号进行比较，了解AM信号的抗噪声性能。<br>在开始的时候，自己毫无头绪，不知道该怎么做，在网上找了很多资料，找一份相似的代码就试一下，一心只想着早点做出来交差，但是越想早点做出来，越是做不好，在网上也没有找到合适的代码。老师要检查我们的任务进度的时候就找了一份最相似的代码给老师看，自己也没有认真的去理解，结果犯了一些很低级的错误，在一个模拟信号的仿真中居然还出现了数字信号。老师给我讲解了一下我这个课题该怎么去做，于是自己顺着老师讲解的思路去做。自己先运行网上找的几个相似的代码，对着代码、仿真图去理解代码，有不懂的地方就看以前MATLAB的书以及上网查和向已经完成的同学寻求帮助。发现自己的课题没有想象中的那么难，只是自己没有用心去做。自己开始尝试写代码，其实也就是MATLAB中几个函数就能解决问题。沉下心来自己做，最后将课程设计做了出来。虽然效果不是很好，但也是自己用做的。本次课程设计，自己对AM信号调制解调有很更深刻的理解，能更熟练的使用MATLAB这款软件。也认识到学习要脚踏实地，自己认真去对待，沉下心来做，有些困难并不没有那么难。也感谢老师和同学的帮助。</p>
<h2 id="AM解调程序清单"><a href="#AM解调程序清单" class="headerlink" title="AM解调程序清单"></a>AM解调程序清单</h2><p><a href="https://download.csdn.net/download/Silent_F/85041123">完整代码下载链接</a></p>
]]></content>
      <categories>
        <category>课程设计</category>
      </categories>
  </entry>
  <entry>
    <title>将hexo部署到微信小程序</title>
    <url>/40128d6b.html</url>
    <content><![CDATA[<h3 id="已经上线的小程序"><a href="#已经上线的小程序" class="headerlink" title="已经上线的小程序"></a>已经上线的小程序</h3><p>1、小程序搜索：<strong>it前端农民工</strong><br>2、扫描下方二维码<br><img data-src="https://s1.ax1x.com/2023/07/20/pC7sQz9.png"  alt="" ></p>
<h3 id="hexo部署方法"><a href="#hexo部署方法" class="headerlink" title="hexo部署方法"></a>hexo部署方法</h3><p>安装<code>hexo-generator-wxapi</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-wxapi --save</span><br></pre></td></tr></table></figure>
<p>使用方法看<a href="https://github.com/rr210/hexo-generator-wxapi" class="演示地址">这里</a></p>
<h4 id="接口配置"><a href="#接口配置" class="headerlink" title="接口配置"></a>接口配置</h4><p>1、 在hexo根目录的<code>_config.yml</code>文件中加入一下配置，必须配</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">restful_api:</span><br><span class="line">  # site 可配置为数组选择性生成某些属性</span><br><span class="line">  # site: [&#x27;title&#x27;, &#x27;subtitle&#x27;, &#x27;description&#x27;, &#x27;author&#x27;, &#x27;since&#x27;, email&#x27;, &#x27;favicon&#x27;, &#x27;avatar&#x27;]</span><br><span class="line">  site: true        # hexo.config mix theme.config</span><br><span class="line">  posts_size: 8    # 文章列表分页，0 表示不分页</span><br><span class="line">  posts_props:      # 文章列表项的需要生成的属性</span><br><span class="line">    title: true</span><br><span class="line">    slug: true</span><br><span class="line">    date: true</span><br><span class="line">    updated: true</span><br><span class="line">    comments: true</span><br><span class="line">    path: true</span><br><span class="line">    excerpt: false</span><br><span class="line">    cover: true      # 封面图，取文章第一张图片</span><br><span class="line">    content: false</span><br><span class="line">    keywords:</span><br><span class="line">    categories: true</span><br><span class="line">    tags: true</span><br><span class="line">  categories: true         # 分类数据</span><br><span class="line">  use_category_slug: false # Use slug for filename of category data</span><br><span class="line">  tags: true               # 标签数据</span><br><span class="line">  use_tag_slug: false      # Use slug for filename of tag data</span><br><span class="line">  post: true               # 文章数据</span><br><span class="line">  pages: false            # 额外的 Hexo 页面数据, 如 About</span><br><span class="line">  swipers_list: []          # 生成指定的页面信息,做指定的轮播文章展示</span><br><span class="line">  search_all:                  #  配置全局搜索</span><br><span class="line">    enable: true</span><br><span class="line">    path: api/search.json  </span><br><span class="line">    field: post</span><br><span class="line">    content: true</span><br></pre></td></tr></table></figure>

<h3 id="小程序配置"><a href="#小程序配置" class="headerlink" title="小程序配置"></a>小程序配置</h3><ul>
<li>拉取代码，将文件导入到微信开发者工具中<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/Rr210/hexo-wx-api</span><br></pre></td></tr></table></figure></li>
<li>找到config文件下的config.js进行配置, 如下<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置域名,域名只修改此处。可以配置为根域名 u.mr90.top/blog</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DOMAIN</span> = <span class="string">&quot;lengmo714.top&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">WEBSITENAME</span> = <span class="string">&quot;南锋&quot;</span>; <span class="comment">//网站名称</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">ZANIMAGEURL</span> = <span class="string">&#x27;../../static/images/wechat.png&#x27;</span>; <span class="comment">//微信鼓励的图片链接，用于个人小程序的赞赏</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">LOGO</span> = <span class="string">&quot;../../static/images/logo-icon.png&quot;</span>; <span class="comment">// 网站的logo图片</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">ARTICLE_AUTHOR_NAME</span> = <span class="string">&quot;南锋&quot;</span> <span class="comment">// 文章作者的名称</span></span><br><span class="line"><span class="keyword">const</span> ARTICLE_AUTHOR_img = <span class="string">&quot;../../static/images/author.png&quot;</span> <span class="comment">// 文章作者的头像,这里是相对于文章页的地址</span></span><br><span class="line"><span class="comment">//首页图标导航</span></span><br><span class="line"><span class="comment">//参数说明：&#x27;name&#x27;为名称，&#x27;image&#x27;为图标路径，&#x27;url&#x27;为跳转的页面，&#x27;redirecttype&#x27;为跳转的类型，apppage为本小程序的页面，miniapp为其他微信小程序,webpage为web-view的页面</span></span><br><span class="line"><span class="comment">//redirecttype 是 miniapp 就是跳转其他小程序  url 为其他小程序的页面</span></span><br><span class="line"><span class="comment">//redirecttype 为 apppage 就是跳转本小程序的页面，url为本小程序的页面路径</span></span><br><span class="line"><span class="comment">//&#x27;appid&#x27; 当redirecttype为miniapp时，这个值为其他微信小程序的appid，如果redirecttype为apppage，webpage时，这个值设置为空。</span></span><br><span class="line"><span class="comment">//&#x27;extraData&#x27;当redirecttype为miniapp时，这个值为提交到其他微信小程序的参数，如果redirecttype为apppage，webpage时，这个值设置为空。</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">ISAD</span> = &#123;</span><br><span class="line">  <span class="string">&quot;enable&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;bannerId&quot;</span>:<span class="string">&#x27;adunit-c9dae21126085de9&#x27;</span></span><br><span class="line">&#125;;  <span class="comment">// 是否开启广告</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">INDEXNAV</span> = [&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;热门排行&#x27;</span>,</span><br><span class="line">    <span class="attr">image</span>: <span class="string">&#x27;../../static/icon/index/1.png&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;../hot/hot&#x27;</span>,</span><br><span class="line">    <span class="attr">redirecttype</span>: <span class="string">&#x27;apppage&#x27;</span>,</span><br><span class="line">    <span class="attr">appid</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">extraData</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;5&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;搜索文章&#x27;</span>,</span><br><span class="line">    <span class="attr">image</span>: <span class="string">&#x27;../../static/icon/index/2.png&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;../search/search&#x27;</span>,</span><br><span class="line">    <span class="attr">redirecttype</span>: <span class="string">&#x27;apppage&#x27;</span>,</span><br><span class="line">    <span class="attr">appid</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">extraData</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;7&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;问答讨论&#x27;</span>,</span><br><span class="line">    <span class="attr">image</span>: <span class="string">&#x27;../../static/icon/index/3.png&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;../feng/feng&#x27;</span>,</span><br><span class="line">    <span class="attr">redirecttype</span>: <span class="string">&#x27;apppage&#x27;</span>,</span><br><span class="line">    <span class="attr">appid</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">extraData</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;10&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;关于我们&#x27;</span>,</span><br><span class="line">    <span class="attr">image</span>: <span class="string">&#x27;../../static/icon/index/4.png&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;../about/about&#x27;</span>,</span><br><span class="line">    <span class="attr">redirecttype</span>: <span class="string">&#x27;apppage&#x27;</span>,</span><br><span class="line">    <span class="attr">appid</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">extraData</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">getDomain</span>: <span class="variable constant_">DOMAIN</span>,</span><br><span class="line">  <span class="attr">getWebsiteName</span>: <span class="variable constant_">WEBSITENAME</span>,</span><br><span class="line">  <span class="attr">getIndexNav</span>: <span class="variable constant_">INDEXNAV</span>,</span><br><span class="line">  <span class="attr">getZanImageUrl</span>: <span class="variable constant_">ZANIMAGEURL</span>,</span><br><span class="line">  <span class="attr">getLogo</span>: <span class="variable constant_">LOGO</span>,</span><br><span class="line">  <span class="attr">getAuthorname</span>: <span class="variable constant_">ARTICLE_AUTHOR_NAME</span>,</span><br><span class="line">  <span class="attr">getAuthorImg</span>: ARTICLE_AUTHOR_img,</span><br><span class="line">  <span class="attr">getAd</span>: <span class="variable constant_">ISAD</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>样式的配置在全局文件<code>app.wxss</code>文件中</li>
</ul>
<h3 id="小程序上传"><a href="#小程序上传" class="headerlink" title="小程序上传"></a>小程序上传</h3><p>这里就比较简单了，操作很简单，稍微百度下都会。<br>审核也不难，比较容易过，就是现在这个样子直接提交就能通过审核了~<br><img data-src="https://s1.ax1x.com/2023/07/20/pC7sQz9.png"  alt="" ></p>
<p>希望对您有所帮助！</p>
]]></content>
      <categories>
        <category>hexo</category>
        <category>小程序开发</category>
      </categories>
  </entry>
  <entry>
    <title>Facebook应用未启用，这款应用目前无法使用，应用开发者已得知这个问题，应用重新启用后，你便能登录</title>
    <url>/9375648f.html</url>
    <content><![CDATA[<p>facebook接入解决所有报错问题后，又来了一个新问题<code>应用未启用，这款应用目前无法使用，应用开发者已得知这个问题，应用重新启用后，你便能登录</code></p>
<span id="more"></span>
<p>如下图：<br><img data-src="https://pic.imgdb.cn/item/6646e99fd9c307b7e9d5208b.png" alt="" /></p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>我这里是因为我们的应用还没有经过Facebook的审核，然而自己登录的facebook账号不是测试账号，所以出现了这个问题。</p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>在facebook后台添加测试账号，或者是用自己的开发者账号登录就不会出现这个问题了。</p>
]]></content>
      <categories>
        <category>android studio</category>
        <category>facebook</category>
      </categories>
      <tags>
        <tag>facebook</tag>
      </tags>
  </entry>
  <entry>
    <title>我们未能验证您的支付方式，请选择另一支付方式并重试。We are unable to authenticate your payment menthod.please choose a different method and try again.</title>
    <url>/386fc021.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>今天在准备用万事达的信用卡开通<code>ChatGPT-4</code>，在最后的关头，提示这条信息<code>We are unable to authenticate your payment menthod.please choose a different method and try again.</code>。中文意思是<code>我们无法验证您的付款方式。请选择其他方法，然后重试</code>。</p>
<p>在网上查资料，很多人说是当前使用的网络环境问题，而并非信用卡或者付款方式的问题。我却不死心，接连试了好几张信用卡，发现都一样，无奈，只能放弃自己用信用卡充值了~</p>
]]></content>
  </entry>
  <entry>
    <title>批量修改图片名</title>
    <url>/a80afa50.html</url>
    <content><![CDATA[<blockquote>
<p>前言:最近在工作中，使用到了一些图片，因为图片比较多，一个一个修改图片名比较麻烦，便想着弄个小工具批量修改图片名（网上可能也有这样的工具，一时没有找到）</p>
</blockquote>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h3 id="脚本功能"><a href="#脚本功能" class="headerlink" title="脚本功能"></a>脚本功能</h3><p>此脚本用来批量修改图片名，在原本图片名前加入指定前缀</p>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>python 3.x 以上版本</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取用户输入的原始文件夹路径</span></span><br><span class="line">src_folder = <span class="built_in">input</span>(<span class="string">&quot;请输入图片文件所在的文件夹路径: &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取用户输入的目标文件夹路径</span></span><br><span class="line">dest_folder = <span class="built_in">input</span>(<span class="string">&quot;请输入要保存重命名图片的目标文件夹路径: &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取用户输入的前缀</span></span><br><span class="line">prefix = <span class="built_in">input</span>(<span class="string">&quot;请输入要添加的前缀: &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保原始文件夹路径存在</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(src_folder):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;指定的原始文件夹路径不存在&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 确保目标文件夹路径存在，如果不存在则创建</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dest_folder):</span><br><span class="line">        os.makedirs(dest_folder)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取原始文件夹中的所有文件</span></span><br><span class="line">    files = os.listdir(src_folder)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 循环处理每个文件</span></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">        <span class="keyword">if</span> file.endswith(<span class="string">&#x27;.jpg&#x27;</span>) <span class="keyword">or</span> file.endswith(<span class="string">&#x27;.png&#x27;</span>):</span><br><span class="line">            <span class="comment"># 构建新的文件名，添加前缀</span></span><br><span class="line">            new_name = prefix + file</span><br><span class="line">            <span class="comment"># 旧文件的完整路径</span></span><br><span class="line">            old_path = os.path.join(src_folder, file)</span><br><span class="line">            <span class="comment"># 新文件的完整路径</span></span><br><span class="line">            new_path = os.path.join(dest_folder, new_name)</span><br><span class="line">            <span class="comment"># 拷贝文件到目标文件夹并重命名</span></span><br><span class="line">            shutil.copy2(old_path, new_path)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;Copied and Renamed: <span class="subst">&#123;file&#125;</span> to <span class="subst">&#123;new_name&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工具脚本</category>
      </categories>
  </entry>
  <entry>
    <title>情人节表白代码</title>
    <url>/b8f8cdc8.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>马上就情人节了，这里写一个情人节表白代码，快给你的女神准备我们程序员的浪漫吧。</p>
<h4 id="js代码"><a href="#js代码" class="headerlink" title="js代码"></a>js代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> charIndex = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> stringLength = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> inputText;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">writeContent</span>(<span class="params">init</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (init) &#123;</span><br><span class="line">        inputText = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;contentToWrite&#x27;</span>).<span class="property">innerHTML</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (charIndex == -<span class="number">1</span>) &#123;</span><br><span class="line">        charIndex = <span class="number">0</span>;</span><br><span class="line">        stringLength = inputText.<span class="property">length</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> initString = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myContent&#x27;</span>).<span class="property">innerHTML</span>;</span><br><span class="line">    initString = initString.<span class="title function_">replace</span>(<span class="regexp">/&lt;SPAN.*$/gi</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> theChar = inputText.<span class="title function_">charAt</span>(charIndex);</span><br><span class="line">    <span class="keyword">var</span> nextFourChars = inputText.<span class="title function_">substr</span>(charIndex, <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">if</span> (nextFourChars == <span class="string">&#x27;&lt;BR&gt;&#x27;</span> || nextFourChars == <span class="string">&#x27;&lt;br&gt;&#x27;</span>) &#123;</span><br><span class="line">        theChar = <span class="string">&#x27;&lt;BR&gt;&#x27;</span>;</span><br><span class="line">        charIndex += <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    initString = initString + theChar + <span class="string">&quot;&lt;SPAN id=&#x27;blink&#x27;&gt;_&lt;/SPAN&gt;&quot;</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myContent&#x27;</span>).<span class="property">innerHTML</span> = initString;</span><br><span class="line">    charIndex = charIndex / <span class="number">1</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (charIndex % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;blink&#x27;</span>).<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;blink&#x27;</span>).<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;inline&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (charIndex &lt;= stringLength) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="string">&#x27;writeContent(false)&#x27;</span>, <span class="number">300</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">blinkSpan</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> currentStyle = <span class="string">&#x27;inline&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">blinkSpan</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (currentStyle == <span class="string">&#x27;inline&#x27;</span>) &#123;</span><br><span class="line">        currentStyle = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        currentStyle = <span class="string">&#x27;inline&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;blink&#x27;</span>).<span class="property">style</span>.<span class="property">display</span> = currentStyle;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="string">&#x27;blinkSpan()&#x27;</span>, <span class="number">300</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="html"><a href="#html" class="headerlink" title="html"></a>html</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;情人节快乐&lt;/title&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        html, body &#123;</span><br><span class="line"> </span><br><span class="line">            width: 500px;</span><br><span class="line">            height:300px;</span><br><span class="line">            left:50px;</span><br><span class="line">            top:30px;</span><br><span class="line">            margin: 100px 289px;</span><br><span class="line"> </span><br><span class="line">            background: #f6d8e2;</span><br><span class="line">        &#125;</span><br><span class="line">        pp1&#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 20px;</span><br><span class="line">            left: 20px;</span><br><span class="line">        &#125;</span><br><span class="line">        canvas &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            width: 1000px;</span><br><span class="line">            height: 500px;</span><br><span class="line">            left:135px;</span><br><span class="line">            top:50px;</span><br><span class="line">        &#125;&lt;/style&gt;</span><br><span class="line">    &lt;link href=&quot;css/default.css&quot; type=&quot;text/css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;d.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;</span><br><span class="line"> </span><br><span class="line">        // 18秒以后再跳转</span><br><span class="line">        setTimeout(&quot;javascript:location.href=&#x27;./index.html&#x27;&quot;, 15000);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/head&gt;</span><br><span class="line"> </span><br><span class="line">&lt;div id=&quot;myContent&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;contentToWrite&quot; class=&quot;comments&quot; style=&quot;display:none;&quot;&gt;燕子，没有你我怎么活&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt; writeContent(true); &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"> </span><br><span class="line">&lt;canvas id=&quot;pinkboard&quot;&gt;&lt;/canvas&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line">    /*</span><br><span class="line">     * Settings</span><br><span class="line">     */</span><br><span class="line">    var settings = &#123;</span><br><span class="line">        particles: &#123;</span><br><span class="line">            length:   500, // maximum amount of particles</span><br><span class="line">            duration:   2, // particle duration in sec</span><br><span class="line">            velocity: 100, // particle velocity in pixels/sec</span><br><span class="line">            effect: -0.75, // play with this for a nice effect</span><br><span class="line">            size:      30, // particle size in pixels</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    /*</span><br><span class="line">     * RequestAnimationFrame polyfill by Erik M?ller</span><br><span class="line">     */</span><br><span class="line">    (function()&#123;var b=0;var c=[&quot;ms&quot;,&quot;moz&quot;,&quot;webkit&quot;,&quot;o&quot;];for(var a=0;a&lt;c.length&amp;&amp;!window.requestAnimationFrame;++a)&#123;window.requestAnimationFrame=window[c[a]+&quot;RequestAnimationFrame&quot;];window.cancelAnimationFrame=window[c[a]+&quot;CancelAnimationFrame&quot;]||window[c[a]+&quot;CancelRequestAnimationFrame&quot;]&#125;if(!window.requestAnimationFrame)&#123;window.requestAnimationFrame=function(h,e)&#123;var d=new Date().getTime();var f=Math.max(0,16-(d-b));var g=window.setTimeout(function()&#123;h(d+f)&#125;,f);b=d+f;return g&#125;&#125;if(!window.cancelAnimationFrame)&#123;window.cancelAnimationFrame=function(d)&#123;clearTimeout(d)&#125;&#125;&#125;());</span><br><span class="line"> </span><br><span class="line">    /*</span><br><span class="line">     * Point class</span><br><span class="line">     */</span><br><span class="line">    var Point = (function() &#123;</span><br><span class="line">        function Point(x, y) &#123;</span><br><span class="line">            this.x = (typeof x !== &#x27;undefined&#x27;) ? x : 0;</span><br><span class="line">            this.y = (typeof y !== &#x27;undefined&#x27;) ? y : 0;</span><br><span class="line">        &#125;</span><br><span class="line">        Point.prototype.clone = function() &#123;</span><br><span class="line">            return new Point(this.x, this.y);</span><br><span class="line">        &#125;;</span><br><span class="line">        Point.prototype.length = function(length) &#123;</span><br><span class="line">            if (typeof length == &#x27;undefined&#x27;)</span><br><span class="line">                return Math.sqrt(this.x * this.x + this.y * this.y);</span><br><span class="line">            this.normalize();</span><br><span class="line">            this.x *= length;</span><br><span class="line">            this.y *= length;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;;</span><br><span class="line">        Point.prototype.normalize = function() &#123;</span><br><span class="line">            var length = this.length();</span><br><span class="line">            this.x /= length;</span><br><span class="line">            this.y /= length;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;;</span><br><span class="line">        return Point;</span><br><span class="line">    &#125;)();</span><br><span class="line"> </span><br><span class="line">    /*</span><br><span class="line">     * Particle class</span><br><span class="line">     */</span><br><span class="line">    var Particle = (function() &#123;</span><br><span class="line">        function Particle() &#123;</span><br><span class="line">            this.position = new Point();</span><br><span class="line">            this.velocity = new Point();</span><br><span class="line">            this.acceleration = new Point();</span><br><span class="line">            this.age = 0;</span><br><span class="line">        &#125;</span><br><span class="line">        Particle.prototype.initialize = function(x, y, dx, dy) &#123;</span><br><span class="line">            this.position.x = x;</span><br><span class="line">            this.position.y = y;</span><br><span class="line">            this.velocity.x = dx;</span><br><span class="line">            this.velocity.y = dy;</span><br><span class="line">            this.acceleration.x = dx * settings.particles.effect;</span><br><span class="line">            this.acceleration.y = dy * settings.particles.effect;</span><br><span class="line">            this.age = 0;</span><br><span class="line">        &#125;;</span><br><span class="line">        Particle.prototype.update = function(deltaTime) &#123;</span><br><span class="line">            this.position.x += this.velocity.x * deltaTime;</span><br><span class="line">            this.position.y += this.velocity.y * deltaTime;</span><br><span class="line">            this.velocity.x += this.acceleration.x * deltaTime;</span><br><span class="line">            this.velocity.y += this.acceleration.y * deltaTime;</span><br><span class="line">            this.age += deltaTime;</span><br><span class="line">        &#125;;</span><br><span class="line">        Particle.prototype.draw = function(context, image) &#123;</span><br><span class="line">            function ease(t) &#123;</span><br><span class="line">                return (--t) * t * t + 1;</span><br><span class="line">            &#125;</span><br><span class="line">            var size = image.width * ease(this.age / settings.particles.duration);</span><br><span class="line">            context.globalAlpha = 1 - this.age / settings.particles.duration;</span><br><span class="line">            context.drawImage(image, this.position.x - size / 2, this.position.y - size / 2, size, size);</span><br><span class="line">        &#125;;</span><br><span class="line">        return Particle;</span><br><span class="line">    &#125;)();</span><br><span class="line"> </span><br><span class="line">    /*</span><br><span class="line">     * ParticlePool class</span><br><span class="line">     */</span><br><span class="line">    var ParticlePool = (function() &#123;</span><br><span class="line">        var particles,</span><br><span class="line">            firstActive = 0,</span><br><span class="line">            firstFree   = 0,</span><br><span class="line">            duration    = settings.particles.duration;</span><br><span class="line"> </span><br><span class="line">        function ParticlePool(length) &#123;</span><br><span class="line">            // create and populate particle pool</span><br><span class="line">            particles = new Array(length);</span><br><span class="line">            for (var i = 0; i &lt; particles.length; i++)</span><br><span class="line">                particles[i] = new Particle();</span><br><span class="line">        &#125;</span><br><span class="line">        ParticlePool.prototype.add = function(x, y, dx, dy) &#123;</span><br><span class="line">            particles[firstFree].initialize(x, y, dx, dy);</span><br><span class="line"> </span><br><span class="line">            // handle circular queue</span><br><span class="line">            firstFree++;</span><br><span class="line">            if (firstFree   == particles.length) firstFree   = 0;</span><br><span class="line">            if (firstActive == firstFree       ) firstActive++;</span><br><span class="line">            if (firstActive == particles.length) firstActive = 0;</span><br><span class="line">        &#125;;</span><br><span class="line">        ParticlePool.prototype.update = function(deltaTime) &#123;</span><br><span class="line">            var i;</span><br><span class="line"> </span><br><span class="line">            // update active particles</span><br><span class="line">            if (firstActive &lt; firstFree) &#123;</span><br><span class="line">                for (i = firstActive; i &lt; firstFree; i++)</span><br><span class="line">                    particles[i].update(deltaTime);</span><br><span class="line">            &#125;</span><br><span class="line">            if (firstFree &lt; firstActive) &#123;</span><br><span class="line">                for (i = firstActive; i &lt; particles.length; i++)</span><br><span class="line">                    particles[i].update(deltaTime);</span><br><span class="line">                for (i = 0; i &lt; firstFree; i++)</span><br><span class="line">                    particles[i].update(deltaTime);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            // remove inactive particles</span><br><span class="line">            while (particles[firstActive].age &gt;= duration &amp;&amp; firstActive != firstFree) &#123;</span><br><span class="line">                firstActive++;</span><br><span class="line">                if (firstActive == particles.length) firstActive = 0;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        &#125;;</span><br><span class="line">        ParticlePool.prototype.draw = function(context, image) &#123;</span><br><span class="line">            // draw active particles</span><br><span class="line">            if (firstActive &lt; firstFree) &#123;</span><br><span class="line">                for (i = firstActive; i &lt; firstFree; i++)</span><br><span class="line">                    particles[i].draw(context, image);</span><br><span class="line">            &#125;</span><br><span class="line">            if (firstFree &lt; firstActive) &#123;</span><br><span class="line">                for (i = firstActive; i &lt; particles.length; i++)</span><br><span class="line">                    particles[i].draw(context, image);</span><br><span class="line">                for (i = 0; i &lt; firstFree; i++)</span><br><span class="line">                    particles[i].draw(context, image);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        return ParticlePool;</span><br><span class="line">    &#125;)();</span><br><span class="line"> </span><br><span class="line">    /*</span><br><span class="line">     * Putting it all together</span><br><span class="line">     */</span><br><span class="line">    (function(canvas) &#123;</span><br><span class="line">        var context = canvas.getContext(&#x27;2d&#x27;),</span><br><span class="line">            particles = new ParticlePool(settings.particles.length),</span><br><span class="line">            particleRate = settings.particles.length / settings.particles.duration, // particles/sec</span><br><span class="line">            time;</span><br><span class="line"> </span><br><span class="line">        // get point on heart with -PI &lt;= t &lt;= PI</span><br><span class="line">        function pointOnHeart(t) &#123;</span><br><span class="line">            return new Point(</span><br><span class="line">                180 * Math.pow(Math.sin(t), 3),</span><br><span class="line">                160 * Math.cos(t) - 50 * Math.cos(2 * t) - 20 * Math.cos(3 * t) - 10 * Math.cos(4 * t) + 25</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        // creating the particle image using a dummy canvas</span><br><span class="line">        var image = (function() &#123;</span><br><span class="line">            var canvas  = document.createElement(&#x27;canvas&#x27;),</span><br><span class="line">                context = canvas.getContext(&#x27;2d&#x27;);</span><br><span class="line">            canvas.width  = settings.particles.size;</span><br><span class="line">            canvas.height = settings.particles.size;</span><br><span class="line">            // helper function to create the path</span><br><span class="line">            function to(t) &#123;</span><br><span class="line">                var point = pointOnHeart(t);</span><br><span class="line">                point.x = settings.particles.size / 2 + point.x * settings.particles.size / 350;</span><br><span class="line">                point.y = settings.particles.size / 2 - point.y * settings.particles.size / 350;</span><br><span class="line">                return point;</span><br><span class="line">            &#125;</span><br><span class="line">            // create the path</span><br><span class="line">            context.beginPath();</span><br><span class="line">            var t = -Math.PI;</span><br><span class="line">            var point = to(t);</span><br><span class="line">            context.moveTo(point.x, point.y);</span><br><span class="line">            while (t &lt; Math.PI) &#123;</span><br><span class="line">                t += 0.01; // baby steps!</span><br><span class="line">                point = to(t);</span><br><span class="line">                context.lineTo(point.x, point.y);</span><br><span class="line">            &#125;</span><br><span class="line">            context.closePath();</span><br><span class="line">            // create the fill</span><br><span class="line">            context.fillStyle = &#x27;#fa759f&#x27;;</span><br><span class="line">            context.fill();</span><br><span class="line">            // create the image</span><br><span class="line">            var image = new Image();</span><br><span class="line">            image.src = canvas.toDataURL();</span><br><span class="line">            return image;</span><br><span class="line">        &#125;)();</span><br><span class="line"> </span><br><span class="line">        // render that thing!</span><br><span class="line">        function render() &#123;</span><br><span class="line">            // next animation frame</span><br><span class="line">            requestAnimationFrame(render);</span><br><span class="line"> </span><br><span class="line">            // update time</span><br><span class="line">            var newTime   = new Date().getTime() / 1000,</span><br><span class="line">                deltaTime = newTime - (time || newTime);</span><br><span class="line">            time = newTime;</span><br><span class="line"> </span><br><span class="line">            // clear canvas</span><br><span class="line">            context.clearRect(0, 0, canvas.width, canvas.height);</span><br><span class="line"> </span><br><span class="line">            // create new particles</span><br><span class="line">            var amount = particleRate * deltaTime;</span><br><span class="line">            for (var i = 0; i &lt; amount; i++) &#123;</span><br><span class="line">                var pos = pointOnHeart(Math.PI - 2 * Math.PI * Math.random());</span><br><span class="line">                var dir = pos.clone().length(settings.particles.velocity);</span><br><span class="line">                particles.add(canvas.width / 2 + pos.x, canvas.height / 2 - pos.y, dir.x, -dir.y);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            // update and draw particles</span><br><span class="line">            particles.update(deltaTime);</span><br><span class="line">            particles.draw(context, image);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        // handle (re-)sizing of the canvas</span><br><span class="line">        function onResize() &#123;</span><br><span class="line">            canvas.width  = canvas.clientWidth;</span><br><span class="line">            canvas.height = canvas.clientHeight;</span><br><span class="line">        &#125;</span><br><span class="line">        window.onresize = onResize;</span><br><span class="line"> </span><br><span class="line">        // delay rendering bootstrap</span><br><span class="line">        setTimeout(function() &#123;</span><br><span class="line">            onResize();</span><br><span class="line">            render();</span><br><span class="line">        &#125;, 50);</span><br><span class="line">    &#125;)(document.getElementById(&#x27;pinkboard&#x27;));&lt;/script&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/body&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/html&gt;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>]]></content>
      <categories>
        <category>日常代码</category>
      </categories>
  </entry>
  <entry>
    <title>微信对话生成器，把&quot;造假&quot;玩得太6了</title>
    <url>/f8d1933c.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p><a href="https://lengmo714.top/libs/wechat/index.html">体验地址</a></p>
<p>一款整蛊好玩的小工具，可以很方便生成微信聊天的截图。<br><strong>外观设置：</strong>有许多细节设置，包括手机信号、网络状态、手机时间、充电状态、电量、消息数等，还可以设置聊天背景。</p>
<p>**对话设置:**可以选择聊天用户，设置头像，添加红包，添加语音时间，细节绝对是拉满，连红包备注、转账备注等都可以添加。另外，对话的修改也很方便，鼠标放在对话上，会出现一个红×，直接可以删除，也可以清空聊天内容。</p>
<p>这个小工具，可以说细节完全是拉满了，绝对可以以假乱真，所以网上的各类聊天截图，还是不能轻易相信的。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>数据手套的设计与实现</title>
    <url>/33907.html</url>
    <content><![CDATA[<p><strong>摘要 :</strong> 数据手套在人机交互中提供了一种有效的人机交互手段，从数据手套的理论出发，本论文利用一些硬件设备以及软件开发环境，设计了一款可以与机械臂、虚拟手等终端交互的数据手套。硬件设备包括弯曲度传感器、MPU6050六轴传感器、HC-05蓝牙串口通信模块、TFT显示屏、STM32F103最小系统开发板，数据手套软件开发平台为Keil uVision5，所用的开发语言为C语言，在系统调试的时候用到了匿名四轴上位机和串口调试助手，用来对MPU6050六轴传感器和弯曲度传感器进行调试，此外在整个系统中移植了UCOS-II嵌入式实时操作系统，保证了数据在传输时的实时性和高效性。实现了数据手套对五轴机械臂的控制以及人手到虚拟手的动作映射。</p>
<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>人机交互是研究系统与用户之间的交互关系[1]。随着社会的不断发展和科学技术水平的提高，传统的计算机输入设备（鼠标、键盘）已不再唯一。越来越多的场合出现了各种不同的人机交互的应用场景，比如人脸识别、人体感应游戏、VR（虚拟现实）[2]。数据手套作为一种新型的人机交互工具，目前在越来越多的领域得到了广泛的应用。其目的在于能够通过内置的传感器，实时获取手部包括手掌、手指等有效部位的弯曲等角度的数据[3]。而且手部某一个关节的运动，不仅会作用于对应的传感器的数据变化，而且通过软组织的相互作用，使得其他的传感器数据也发生变化，这就要求为保证一定的数据精度，必须对求得的数据进行一定的处理[4]。本课题所研究的数据手套硬件部分主要包括嵌入式控制器、TFT显示屏、弯曲度传感器、蓝牙串口通信模块、MPU6050六轴传感器等，具有可穿戴，无线连接，使用灵活等特点。目的在于做出一款可用于控制机械臂、与虚拟手交互映射等娱乐交互的数据手套。</p>
<h2 id="系统硬件设计"><a href="#系统硬件设计" class="headerlink" title="系统硬件设计"></a>系统硬件设计</h2><p>本论文所研究的数据手套在功能上要求能够实时的检测到使用者手指的弯曲以及整个手姿态变化的数据信息[5]，并对检测到的数据信息做出判断后发送相应的指令给与之交互的终端。根据数据手套在功能上的要求，本课题设计出了以下解决方案：<br>（1）采用弯曲度传感器采集手指弯曲的数据信息，弯曲度传感器具有柔韧性好，可折叠，测量范围广等特点，比较适合用来收集弯曲即手指的数据信息。<br>（2）MPU6050传感器是全球首例9轴运动处理传感器。它集成了3MEMS陀螺仪，3轴MEMS加速度计，以及一个可扩展的数字运动处理器DMP（Digital  Motion Processor），可以使用I2C接口连接一个第三方的数字传感器。MPU6050传感器还免除了组合陀螺仪与加速度器时之轴间差的问题，减少了大量的封装空间，而且MPU6050支持mpu的dmp官方解算库，可以直接输出四元数，欧拉角格式的数据。<br>（3）在通信方式的选择上，考虑到本课题需要无线通信、功耗低，能快速连接且组网简单的通信特点，最终选择了蓝牙无线通信方式，使用的是HC-05蓝牙通信模块，HC-05蓝牙通信模块是一款高性能主从一体蓝牙串口模块，可以不用知道太多蓝牙相关知识就可以很好的上手。<br>（4）电源可以使用USB数据线接PC机供电，也可以使用大容量锂电池供电。锂电池具有续航时间长、可循环充电、绿色环保且重量轻等特点。<br>数据手套硬件系统主要包括以下几个功能模块：主控芯片模块、弯曲度传感器模块、MPU6050传感器模块、电源模块、蓝牙通信模块、数据显示模块，硬件系统图、硬件实物图分别如图2.1、图2.2所示</p>
<!-- [![图2.1数据手套硬件系统图](https://s1.ax1x.com/2022/11/03/xqy9DP.png)](https://imgse.com/i/xqy9DP) -->
<img data-src="https://s1.ax1x.com/2022/11/03/xqy9DP.png" alt="图2.1数据手套硬件系统图" />
<!-- [![图2.2硬件实物图](https://s1.ax1x.com/2022/11/03/xqyuD0.png)](https://imgse.com/i/xqyuD0) -->
<img data-src="https://s1.ax1x.com/2022/11/03/xqyuD0.png" alt="图2.2硬件实物图" />
## 系统软件设计及调试
数据手套软件开发平台为Keil uVision5，所用的开发语言为C语言，在系统调试的时候用到了匿名四轴上位机和串口调试助手，用来对MPU6050六轴传感器和弯曲度传感器进行调试，此外在整个系统中移植了UCOS-II嵌入式实时操作系统，保证了数据在传输时的实时性和高效性。
UCOS-II嵌入式实时操作系统是一个可移植、可固化的、可裁剪的、占先式多任务实时内核，它适用于多种微处理器，微控制器和数字处理芯片[6]。本系统软件主流程图如图3.1所示：
<!-- [![xqyk4g.png](https://s1.ax1x.com/2022/11/03/xqyk4g.png)](https://imgse.com/i/xqyk4g) -->
<img data-src="https://s1.ax1x.com/2022/11/03/xqyk4g.png" alt="" />

<p>UCOS的原理就是当一个任务A正在执行的时候，如果它释放了CPU的控制权，先对任务A进行现场保护，然后从任务就绪表中查找其他就绪任务去执行，等到任务A的等待时间到了，它可能重新获得CPU控制权，这个时候恢复任务A的现场，从而继续执行任务A，这样看起来就好像是两个任务同时执行了。实际上，任何时候都只有一个任务可以获得CPU控制权。所谓的任务，其实就是一个死循环函数，该函数实现一定的工程，一个工程可以有很多这样的任务，UCOS-II对这些任务进行调度管理，让这些任务可以并发工作。本课题中创建了五个用户任务，分别是led_task，led闪烁提示系统工作状态；gui_task，显示屏实时显示姿态数据；adc_task弯曲度传感器采集手指弯曲信息；mpu6050_task，mpu6050传感器采集姿态信息；hc05_task蓝牙发送数据。<br>弯曲度传感器数据是利用STM32F103单片机接收经过电阻——电压转换电路转换过的弯曲度传感器的电压信号，每只手有五根手指，在单片机上设置五个ADC规则通道，用自带的AD转换电路进行AD转换得到手指的弯曲程度，ADC通道0~4分别代表大拇指、食指、中指、无名指、小指弯曲度的值。通过PC上串口调试助手读出其经过AD转换过后不同弯曲程度时的数值[7]，并对其进行分别量化和判断处理，的到最后的手指弯曲数据。<br>MPU6050传感器的数据可以通过对MPU6050传感器的软件设置可以直接读出传感器采集到的加速度和角速度原始数据，不过这些原始数据，在本课题研究中用处不大，我们期望得到的是姿态数据，也就是欧拉角。首先我们在PC端上通过匿名四轴上位机对MPU6050传感器的原始数据输出波形进行分析并对其进行滤波处理，在此原始数据的基础上还需要通过对加速度计和陀螺仪进行融合计算得出的欧拉角，得到三个轴上的欧拉角，以度为单位。MPU6050搭载有一个运动处理器（DMP），可以将采集到的原始数据直接转换输出四元数，再根据输出的四元数计算出对应的欧拉角。<br>欧拉角到姿态矩阵的转换关系为：</p>
<!-- [![xqyput.png](https://s1.ax1x.com/2022/11/03/xqyput.png)](https://imgse.com/i/xqyput) -->
<img data-src="https://s1.ax1x.com/2022/11/03/xqyput.png" alt=""/>
<!-- [![xqyiE8.png](https://s1.ax1x.com/2022/11/03/xqyiE8.png)](https://imgse.com/i/xqyiE8) -->
<img data-src="https://s1.ax1x.com/2022/11/03/xqyiE8.png" alt=""/>

<!-- [![姿态矩阵T解算得到欧拉角：](https://s1.ax1x.com/2022/11/03/xqyECQ.png)](https://imgse.com/i/xqyECQ) -->
<img data-src="https://s1.ax1x.com/2022/11/03/xqyECQ.png" alt="姿态矩阵T解算得到欧拉角" />
可以直接使用欧拉角微分方程进行姿态解算：
<!-- [![欧拉角微分方程](https://s1.ax1x.com/2022/11/03/xqyV3j.png)](https://imgse.com/i/xqyV3j) -->
<img data-src="https://s1.ax1x.com/2022/11/03/xqyV3j.png" alt="欧拉角微分方程" />
上式中，等式左边是输出的欧拉角，分别对应三个旋转轴，等式右边是根据上一个周期测算出来的角度，每个旋转轴上的角度都是根据陀螺仪传感器实际测量的角速度和时间间隔周期计算出来的，单位为弧度。所以，根据以上微分方程即可解算出当前传感器在每个旋转轴上的欧拉角。
HC-05蓝牙模块式一款高性能的主从一体蓝牙串口模块，可以同各种带蓝牙功能的电脑、蓝牙主机、手机等职能终端配对，该模块支持非常宽的波特率范围：4800~1382400，并且模块兼容5V或3.3V单片机系统，使用非常灵活、方便。在使用的时候，首先将蓝牙模块处于AT指令模式，在PC上通过串口调试助手进行AT指令配置。蓝牙配置好后， 主控芯片将获取到的弯曲度传感器的数据和MPU6050的数据信息用特定的数据包格式通过蓝牙发送。
显示模块的主要功能是在一块TFT显示屏上显示当前手部在空间中x,y,z轴的一个姿态,分别用欧拉角pitch（俯仰角）、yaw（偏航角）、roll（翻滚角）表示。
## 应用场景展示
数据手套作为一种人机交互设备，可应用与多个领域多个行业，理论上与本设备交互设备能具备蓝牙通信功能，在通信协议一致的情况下便都能与本设备进行交互。在本课题中只要应用于与五轴机械臂交互和与虚拟手的交互映射。
###4.1 与五轴机械臂交互
数据手套与之交互的五轴机械臂为安诺五轴机械臂，这款机械臂的主控芯片为arduino，控制方式是使用现在数字程序中常使用的指令——G代码，机械臂的五个轴从下到上分别是A轴、B轴、C轴、D轴和X轴，每个轴分为正向转动和反向转动，所以控制机械臂只需要十个控制指令即可。本课题在控制的时，五根手指分别控制五个轴，当pitch的值小于20时手指控制机械臂的五个轴正向转动，当pitch的值大于20时，手指控制机械臂的五个轴反向转动。手部首先分别读取五个弯曲传感器的初始值（即五个手指没有弯曲时的值），再给定一个触发条件，当达到这个触发条件时，数据手套发送控制指令。如：pitch的值为15，ADC通道0的初始值为200，触发条件为ADC通道0的值大于300，当ADC通道0的值大于300时，数据手套控制五轴机械臂A轴的正向转动。交互图如图4.1所示。

<!-- [![xqynuq.png](https://s1.ax1x.com/2022/11/03/xqynuq.png)](https://imgse.com/i/xqynuq) -->
<img data-src="https://s1.ax1x.com/2022/11/03/xqynuq.png" alt=""/>
###4.2 与虚拟手的交互映射
虚拟手的开发平台为Unity3D，所用的开发语言为C#。数据手套与之交互时所用到的通信协议为：
0x55+0x53+aacx_t+pitch_s+aacy_t+roll_s+aacz_t+yaw_s+0xaa+finger0+finger1+finger2 +finger3 +finger4 +0xbb共15（byte）,虚拟手接收到数据包后对数据包进行解析，首先是对MPU6050的数据进行解析。MPU6050的数据有16位，其中aacx、aacy、aacz代表高八位，pitch_s、roll_s、yaw_s代表低八位，要得到一个MPU6050的数据，需要将高八位左移八位，然后与第八位进行或运算，具体的计算方法如下：

<!-- [![xqyZgs.png](https://s1.ax1x.com/2022/11/03/xqyZgs.png)](https://imgse.com/i/xqyZgs) -->
<img data-src="https://s1.ax1x.com/2022/11/03/xqyZgs.png"  alt=""/>
然后对五跟手指即五个弯曲度传感器的值进行解析。假设接口上所读取到的X，用X来除以0.06，即X/0.06即(a1~a5)为弯曲传感器上的电压值的量化`Vx*3.3/4096（Vx为传感器上的电压）`

<!-- [![xqyevn.png](https://s1.ax1x.com/2022/11/03/xqyevn.png)](https://imgse.com/i/xqyevn) -->
<img data-src="https://s1.ax1x.com/2022/11/03/xqyevn.png" alt="" />
根据以上方程便可求出R的阻值。
R的阻值与弯曲传感器的弯曲程度成相关比例，X的值和弯曲度成正相关。当手做出某个手势时，主控芯片获取当前五根手指的弯曲数据及手部在空间中的姿态数据，通过蓝牙发送给虚拟手，虚拟手接收到数据后进行解析，然后做出相应的手势。交互图如图4.2、图4.3、图4.4、图4.5、图4.6所示。

<!-- [![xqyQET.png](https://s1.ax1x.com/2022/11/03/xqyQET.png)](https://imgse.com/i/xqyQET) -->
<!-- [![xqyKbV.png](https://s1.ax1x.com/2022/11/03/xqyKbV.png)](https://imgse.com/i/xqyKbV) -->
<!-- [![xqylUU.png](https://s1.ax1x.com/2022/11/03/xqylUU.png)](https://imgse.com/i/xqylUU) -->
<!-- [![xqy15F.png](https://s1.ax1x.com/2022/11/03/xqy15F.png)](https://imgse.com/i/xqy15F) -->
<!-- [![xqy8C4.png](https://s1.ax1x.com/2022/11/03/xqy8C4.png)](https://imgse.com/i/xqy8C4) -->
<table>
<thead>
<tr>
<th><img data-src="https://s1.ax1x.com/2022/11/03/xqyQET.png" style="width:300px;height:200px" alt=""/></th>
<th><img data-src="https://s1.ax1x.com/2022/11/03/xqyKbV.png" style="width:300px;height:200px" alt=""/></th>
<th><img data-src="https://s1.ax1x.com/2022/11/03/xqylUU.png" style="width:300px;height:200px" alt=""/></th>
</tr>
</thead>
<tbody><tr>
<td><img data-src="https://s1.ax1x.com/2022/11/03/xqy15F.png" style="width:300px;height:200px" alt=""/></td>
<td><img data-src="https://s1.ax1x.com/2022/11/03/xqy8C4.png" style="width:300px;height:200px" alt=""/></td>
<td></td>
</tr>
</tbody></table>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>本课题从理论出发，完成了UCOS嵌入式操作系统在ARM平台上的移植，提高了系统稳定性，一步步的设计到实现，通过获取手指的弯曲度数据、手部在空间中姿态数据，进行了数据的分析及处理，给出了与五轴机械臂的交互及与虚拟手交互映射的方法，以实际的应用测试了数据采集和手势识别的准确性和实时性，基本达到了本课题的目的。</p>
<blockquote>
<p>手套代码去我的下载查看<br><a href="https://download.csdn.net/download/silent_f/10612775">数据手套上位机代码</a><br><a href="https://download.csdn.net/download/silent_f/10612768">数据手套控制虚拟手代码</a><br><a href="https://download.csdn.net/download/silent_f/10612762">数据手套控制机械臂代码</a></p>
</blockquote>
]]></content>
      <categories>
        <category>嵌入式开发</category>
      </categories>
  </entry>
  <entry>
    <title>openssl:无法将&quot;openssl&quot;项识别为cmdlet、函数、脚本文件或可运行程序的名称</title>
    <url>/7da3d242.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>项目需要集成<code>Facebook第三方登录</code>，在<code>生成秘钥散列</code>的时候出现了下面问题：<br><img data-src="https://pic.imgdb.cn/item/6643241b0ea9cb140389b7e7.png"  alt="" /></p>
<h3 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h3><p>本地环境没有安装openssl库</p>
<h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>安装openssl-for-windows库即可</p>
<h4 id="下载链接："><a href="#下载链接：" class="headerlink" title="下载链接："></a>下载链接：</h4><p><img data-src="https://code.google.com/archive/p/openssl-for-windows/downloads" alt="openssl-for-windows"></p>
<p>下载好后，添加到本地环境系统变量<br><img data-src="https://pic.imgdb.cn/item/664324200ea9cb140389bd42.png"  alt="" /></p>
<p>双击Path项，添加<code>D:\android\openssl-0.9.8e_X64\bin</code>将这个路径改成自己的文件路径。<br>打开终端，输入<code>openssl version</code>，如果出现下图所示的内容即代表安装成功<br><img data-src="https://pic.imgdb.cn/item/664324230ea9cb140389bff7.png"  alt="" /><br>回到<code>Android studio</code>重新生成散列密钥即可。</p>
]]></content>
  </entry>
  <entry>
    <title>此应用专为旧版本Android打造，因此可能无法正常运行。请尝试检查更新或与开发者联系</title>
    <url>/dc26bed4.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>最近在打安卓包的时候，打开应用后总是弹出下面弹窗：<br><img data-src="https://pic.imgdb.cn/item/664328cb0ea9cb140393500c.png" alt="" /></p>
<p>刚开始还以为是<code>android studio</code>的版本更新了，自己的版本没有更新，于是更新了<code>android studio</code>的版本，更新版本后发现还是有这个问题。在网上查了下，发现是<code>targetSdkVersion</code>的版本太低了。于是乎修改下<code>targetSdkVersion</code>的版本就好了。<br>在修改的时候发现有几个文件中都有<code>targetSdkVersion</code>版本的设置，如下：<br>targetSdkVersion PROP_TARGET_SDK_VERSION<br>如果每个地方都手动改的话比较麻烦，我们直接修改<code>PROP_TARGET_SDK_VERSION</code>的值。<br>打开<code>gradle.properties</code>这个文件，找到<code>PROP_TARGET_SDK_VERSION</code>，将它的值改为31即可。如下图</p>
<img data-src="https://pic.imgdb.cn/item/664329fb0ea9cb1403957107.png" alt="" />]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
        <tag>Android</tag>
        <tag>shader</tag>
      </tags>
  </entry>
  <entry>
    <title>深圳中认企业咨询管理有限公司</title>
    <url>/zhongren.html</url>
    <content><![CDATA[<img data-src="https://s1.ax1x.com/2023/09/04/pPrNOld.jpg" style="width:100px;height:100px" alt="" />
 
<h1 id="深圳中认企业咨询管理有限公司"><a href="#深圳中认企业咨询管理有限公司" class="headerlink" title="深圳中认企业咨询管理有限公司"></a>深圳中认企业咨询管理有限公司</h1><p>深圳中认企业咨询管理有限公司是一家提供企业认证相关服务的公司，帮助企业完成各种类型的认证程序，确保企业符合相关标准和法规，并获得相应的认证证书。这些服务包括但不限于ISO认证、质量管理体系认证、环境管理体系认证、职业健康安全管理体系认证等。<br>帮助分析企业需求，帮助制定认证计划，提供必要的培训和指导，评估企业现有的流程和体系，并提出改进建议。<br>帮助企业提高管理水平，提升竞争力，树立良好的企业形象，并为企业在国内外市场上获取信任和认可提供支持。</p>
<h2 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h2><p>微信：<br><img data-src="/images/caiyun.JPG" style="width:100px;height:100px" alt="" /><br>电话：<br>15816884862 (张女士)</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>]]></content>
      <categories>
        <category>广告</category>
      </categories>
  </entry>
  <entry>
    <title>创意之爱 - 用 HTML 实现的爱心效果</title>
    <url>/4ef715.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><img data-src="https://pic.imgdb.cn/item/664338930ea9cb1403af800e.png" alt="效果图" />

<h3 id="演示链接"><a href="#演示链接" class="headerlink" title="演示链接"></a>演示链接</h3><a href="https://lengmo714.top/libs/love.html" title="" target="">爱心代码演示,</a>

<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>love<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.loveMargin</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">148deg</span>, <span class="number">#f00</span>, transparent <span class="number">2px</span>), <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, pink <span class="number">0px</span>, transparent <span class="number">3px</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-size</span>: <span class="number">10px</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* backdrop-filter: saturate(75%) blur(0px); */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">animation</span>: scaleDraw <span class="number">3s</span> infinite;</span></span><br><span class="line"><span class="language-css">            -webkit-<span class="attribute">animation</span>: scaleDraw <span class="number">3s</span> infinite;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.loveMargin</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: -<span class="number">142px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">148deg</span>, <span class="number">#f00</span>, transparent <span class="number">2px</span>), <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, pink <span class="number">0px</span>, transparent <span class="number">3px</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-size</span>: <span class="number">10px</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* backdrop-filter: saturate(75%) blur(0px); */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.loveMargin</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: -<span class="number">137px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">148deg</span>, <span class="number">#f00</span>, transparent <span class="number">2px</span>), <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, pink <span class="number">0px</span>, transparent <span class="number">3px</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-size</span>: <span class="number">10px</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* backdrop-filter: saturate(75%) blur(0px); */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.a1</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.2</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.a2</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.9</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.a2</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.9</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: -<span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: -<span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.a4</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: -<span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: -<span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.a5</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.9</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: -<span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.a6</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.9</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: -<span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.loveContent</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">148deg</span>, <span class="number">#fff</span>, transparent <span class="number">2px</span>), <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, <span class="number">#c55473</span> <span class="number">0px</span>, transparent <span class="number">3px</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-size</span>: <span class="number">10px</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">z-index</span>: <span class="number">200</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* animation: scaleDraw 2s infinite;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            -webkit-animation: scaleDraw 2s infinite; */</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.loveContent</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: -<span class="number">142px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">148deg</span>, <span class="number">#fff</span>, transparent <span class="number">2px</span>), <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, <span class="number">#c55473</span> <span class="number">0px</span>, transparent <span class="number">3px</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-size</span>: <span class="number">10px</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* backdrop-filter: saturate(75%) blur(0px); */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">z-index</span>: <span class="number">200</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.loveContent</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: -<span class="number">137px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">148deg</span>, <span class="number">#fff</span>, transparent <span class="number">2px</span>), <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, <span class="number">#c55473</span> <span class="number">0px</span>, transparent <span class="number">3px</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-size</span>: <span class="number">10px</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* backdrop-filter: saturate(75%) blur(0px); */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">z-index</span>: <span class="number">200</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.c1</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">z-index</span>: <span class="number">200</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.c2</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">z-index</span>: <span class="number">210</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">23px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">23px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.c3</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">z-index</span>: <span class="number">205</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.c4</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">z-index</span>: <span class="number">280</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">21px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.c5</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">z-index</span>: <span class="number">206</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.c6</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">z-index</span>: <span class="number">220</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.c7</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">z-index</span>: <span class="number">211</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">19px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">19px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.c8</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">z-index</span>: <span class="number">221</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">23px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.loveItem</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">148deg</span>, <span class="number">#000</span>, transparent <span class="number">2px</span>), <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, <span class="number">#c55473</span> <span class="number">0px</span>, transparent <span class="number">3px</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">z-index</span>: <span class="number">300</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">57px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">51px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* #c55473 */</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* background: #983647; */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-size</span>: <span class="number">10px</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">animation</span>: scaleDraw <span class="number">2s</span> infinite;</span></span><br><span class="line"><span class="language-css">            -webkit-<span class="attribute">animation</span>: scaleDraw <span class="number">2s</span> infinite;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.loveItem</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">z-index</span>: <span class="number">300</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: -<span class="number">142px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">148deg</span>, <span class="number">#000</span>, transparent <span class="number">2px</span>), <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, <span class="number">#c55473</span> <span class="number">0px</span>, transparent <span class="number">3px</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-size</span>: <span class="number">10px</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* backdrop-filter: saturate(75%) blur(0px); */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.loveItem</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">z-index</span>: <span class="number">300</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: -<span class="number">137px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">148deg</span>, <span class="number">#000</span>, transparent <span class="number">2px</span>), <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, <span class="number">#c55473</span> <span class="number">0px</span>, transparent <span class="number">3px</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-size</span>: <span class="number">10px</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* backdrop-filter: saturate(75%) blur(0px); */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">        <span class="keyword">@keyframes</span> scaleDraw &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*定义关键帧、scaleDrew是需要绑定到选择器的关键帧名称*/</span></span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">            <span class="number">0%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="language-css">                <span class="comment">/*开始为原始大小*/</span></span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">            <span class="number">50%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.1</span>);</span></span><br><span class="line"><span class="language-css">                <span class="comment">/*放大1.1倍*/</span></span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">            <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="language-css">                <span class="comment">/*开始为原始大小*/</span></span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.i1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">57px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">51px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.i2</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">51px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">57px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.i3</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">52px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.i4</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.i5</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">58px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">51px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.i6</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">58px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">52px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.i7</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">62px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.i8</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">68px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">61px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;transform: rotate(45deg);&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loveMargin a1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loveMargin  a2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loveMargin  a3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loveMargin  a4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loveMargin  a5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loveMargin  a6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loveContent c1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loveContent c2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loveContent c3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loveContent c4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loveContent c5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loveContent c6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loveContent c7&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loveContent c8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loveContent c9&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loveItem i1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loveItem i2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loveItem i3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loveItem i4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loveItem i5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loveItem i6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loveItem i7&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loveItem i8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="小白使用教程"><a href="#小白使用教程" class="headerlink" title="小白使用教程"></a>小白使用教程</h3><p>先在电脑桌面新建一个<code>记事本</code>,然后打开记事本，将上面代码复制粘贴记事本，修改文件后缀为<code>.html</code>，然后用浏览器打开该文件即可</p>
]]></content>
      <categories>
        <category>创意编程</category>
      </categories>
  </entry>
  <entry>
    <title>用python写一个俄罗斯方块</title>
    <url>/12496.html</url>
    <content><![CDATA[<p>自己比较贪玩，今天用上班摸鱼的时间，用python写了一个俄罗斯方块的游戏。</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">pygame.init()</span><br><span class="line"></span><br><span class="line">GRID_WIDTH = <span class="number">20</span></span><br><span class="line">GRID_NUM_WIDTH = <span class="number">15</span></span><br><span class="line">GRID_NUM_HEIGHT = <span class="number">25</span></span><br><span class="line">WIDTH, HEIGHT = GRID_WIDTH * GRID_NUM_WIDTH, GRID_WIDTH * GRID_NUM_HEIGHT</span><br><span class="line">SIDE_WIDTH = <span class="number">200</span></span><br><span class="line">SCREEN_WIDTH = WIDTH + SIDE_WIDTH</span><br><span class="line">WHITE = (<span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xff</span>)</span><br><span class="line">BLACK = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">LINE_COLOR = (<span class="number">0x33</span>, <span class="number">0x33</span>, <span class="number">0x33</span>)</span><br><span class="line"></span><br><span class="line">CUBE_COLORS = [</span><br><span class="line">    (<span class="number">0xcc</span>, <span class="number">0x99</span>, <span class="number">0x99</span>), (<span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0x99</span>), (<span class="number">0x66</span>, <span class="number">0x66</span>, <span class="number">0x99</span>),</span><br><span class="line">    (<span class="number">0x99</span>, <span class="number">0x00</span>, <span class="number">0x66</span>), (<span class="number">0xff</span>, <span class="number">0xcc</span>, <span class="number">0x00</span>), (<span class="number">0xcc</span>, <span class="number">0x00</span>, <span class="number">0x33</span>),</span><br><span class="line">    (<span class="number">0xff</span>, <span class="number">0x00</span>, <span class="number">0x33</span>), (<span class="number">0x00</span>, <span class="number">0x66</span>, <span class="number">0x99</span>), (<span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0x33</span>),</span><br><span class="line">    (<span class="number">0x99</span>, <span class="number">0x00</span>, <span class="number">0x33</span>), (<span class="number">0xcc</span>, <span class="number">0xff</span>, <span class="number">0x66</span>), (<span class="number">0xff</span>, <span class="number">0x99</span>, <span class="number">0x00</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">screen = pygame.display.set_mode((SCREEN_WIDTH, HEIGHT))</span><br><span class="line">pygame.display.set_caption(<span class="string">&quot;俄罗斯方块&quot;</span>)</span><br><span class="line">clock = pygame.time.Clock()</span><br><span class="line">FPS = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">score = <span class="number">0</span></span><br><span class="line">level = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">screen_color_matrix = [[<span class="literal">None</span>] * GRID_NUM_WIDTH <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(GRID_NUM_HEIGHT)]</span><br><span class="line"></span><br><span class="line">base_folder = os.path.dirname(__file__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_text</span>(<span class="params">surf, text, size, x, y, color=WHITE</span>):</span><br><span class="line">    font_name = os.path.join(base_folder, <span class="string">&#x27;font.ttf&#x27;</span>)</span><br><span class="line">    font = pygame.font.Font(font_name, size)</span><br><span class="line">    text_surface = font.render(text, <span class="literal">True</span>, color)</span><br><span class="line">    text_rect = text_surface.get_rect()</span><br><span class="line">    text_rect.midtop = (x, y)</span><br><span class="line">    surf.blit(text_surface, text_rect)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CubeShape</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    SHAPES = [<span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;Z&#x27;</span>]</span><br><span class="line">    I = [[(<span class="number">0</span>, -<span class="number">1</span>), (<span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">1</span>), (<span class="number">0</span>, <span class="number">2</span>)],</span><br><span class="line">         [(-<span class="number">1</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">2</span>, <span class="number">0</span>)]]</span><br><span class="line">    J = [[(-<span class="number">2</span>, <span class="number">0</span>), (-<span class="number">1</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, -<span class="number">1</span>)],</span><br><span class="line">         [(-<span class="number">1</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">1</span>), (<span class="number">0</span>, <span class="number">2</span>)],</span><br><span class="line">         [(<span class="number">0</span>, <span class="number">1</span>), (<span class="number">0</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">2</span>, <span class="number">0</span>)],</span><br><span class="line">         [(<span class="number">0</span>, -<span class="number">2</span>), (<span class="number">0</span>, -<span class="number">1</span>), (<span class="number">0</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">0</span>)]]</span><br><span class="line">    L = [[(-<span class="number">2</span>, <span class="number">0</span>), (-<span class="number">1</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">1</span>)],</span><br><span class="line">         [(<span class="number">1</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">1</span>), (<span class="number">0</span>, <span class="number">2</span>)],</span><br><span class="line">         [(<span class="number">0</span>, -<span class="number">1</span>), (<span class="number">0</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">2</span>, <span class="number">0</span>)],</span><br><span class="line">         [(<span class="number">0</span>, -<span class="number">2</span>), (<span class="number">0</span>, -<span class="number">1</span>), (<span class="number">0</span>, <span class="number">0</span>), (-<span class="number">1</span>, <span class="number">0</span>)]]</span><br><span class="line">    O = [[(<span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">1</span>)]]</span><br><span class="line">    S = [[(-<span class="number">1</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">1</span>)],</span><br><span class="line">         [(<span class="number">1</span>, -<span class="number">1</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">1</span>)]]</span><br><span class="line">    T = [[(<span class="number">0</span>, -<span class="number">1</span>), (<span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">1</span>), (-<span class="number">1</span>, <span class="number">0</span>)],</span><br><span class="line">         [(-<span class="number">1</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">1</span>)],</span><br><span class="line">         [(<span class="number">0</span>, -<span class="number">1</span>), (<span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">0</span>)],</span><br><span class="line">         [(-<span class="number">1</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">0</span>, -<span class="number">1</span>)]]</span><br><span class="line">    Z = [[(<span class="number">0</span>, -<span class="number">1</span>), (<span class="number">0</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">1</span>)],</span><br><span class="line">         [(-<span class="number">1</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, -<span class="number">1</span>), (<span class="number">1</span>, -<span class="number">1</span>)]]</span><br><span class="line">    SHAPES_WITH_DIR = &#123;</span><br><span class="line">        <span class="string">&#x27;I&#x27;</span>: I, <span class="string">&#x27;J&#x27;</span>: J, <span class="string">&#x27;L&#x27;</span>: L, <span class="string">&#x27;O&#x27;</span>: O, <span class="string">&#x27;S&#x27;</span>: S, <span class="string">&#x27;T&#x27;</span>: T, <span class="string">&#x27;Z&#x27;</span>: Z</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.shape = self.SHAPES[random.randint(<span class="number">0</span>, <span class="built_in">len</span>(self.SHAPES) - <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">        self.center = (<span class="number">2</span>, GRID_NUM_WIDTH // <span class="number">2</span>)</span><br><span class="line">        self.<span class="built_in">dir</span> = random.randint(<span class="number">0</span>, <span class="built_in">len</span>(self.SHAPES_WITH_DIR[self.shape]) - <span class="number">1</span>)</span><br><span class="line">        self.color = CUBE_COLORS[random.randint(<span class="number">0</span>, <span class="built_in">len</span>(CUBE_COLORS) - <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_all_gridpos</span>(<span class="params">self, center=<span class="literal">None</span></span>):</span><br><span class="line">        curr_shape = self.SHAPES_WITH_DIR[self.shape][self.<span class="built_in">dir</span>]</span><br><span class="line">        <span class="keyword">if</span> center <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            center = [self.center[<span class="number">0</span>], self.center[<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [(cube[<span class="number">0</span>] + center[<span class="number">0</span>], cube[<span class="number">1</span>] + center[<span class="number">1</span>])</span><br><span class="line">                <span class="keyword">for</span> cube <span class="keyword">in</span> curr_shape]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">conflict</span>(<span class="params">self, center</span>):</span><br><span class="line">        <span class="keyword">for</span> cube <span class="keyword">in</span> self.get_all_gridpos(center):</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> cube[<span class="number">0</span>] &lt; <span class="number">0</span> <span class="keyword">or</span> cube[<span class="number">1</span>] &lt; <span class="number">0</span> <span class="keyword">or</span> cube[<span class="number">0</span>] &gt;= GRID_NUM_HEIGHT <span class="keyword">or</span> \</span><br><span class="line">                    cube[<span class="number">1</span>] &gt;= GRID_NUM_WIDTH:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> screen_color_matrix[cube[<span class="number">0</span>]][cube[<span class="number">1</span>]] <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rotate</span>(<span class="params">self</span>):</span><br><span class="line">        new_dir = self.<span class="built_in">dir</span> + <span class="number">1</span></span><br><span class="line">        new_dir %= <span class="built_in">len</span>(self.SHAPES_WITH_DIR[self.shape])</span><br><span class="line">        old_dir = self.<span class="built_in">dir</span></span><br><span class="line">        self.<span class="built_in">dir</span> = new_dir</span><br><span class="line">        <span class="keyword">if</span> self.conflict(self.center):</span><br><span class="line">            self.<span class="built_in">dir</span> = old_dir</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">down</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        center = (self.center[<span class="number">0</span>] + <span class="number">1</span>, self.center[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">if</span> self.conflict(center):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        self.center = center</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">left</span>(<span class="params">self</span>):</span><br><span class="line">        center = (self.center[<span class="number">0</span>], self.center[<span class="number">1</span>] - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> self.conflict(center):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        self.center = center</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">right</span>(<span class="params">self</span>):</span><br><span class="line">        center = (self.center[<span class="number">0</span>], self.center[<span class="number">1</span>] + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> self.conflict(center):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        self.center = center</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> cube <span class="keyword">in</span> self.get_all_gridpos():</span><br><span class="line">            pygame.draw.rect(screen, self.color,</span><br><span class="line">                             (cube[<span class="number">1</span>] * GRID_WIDTH, cube[<span class="number">0</span>] * GRID_WIDTH,</span><br><span class="line">                              GRID_WIDTH, GRID_WIDTH))</span><br><span class="line">            pygame.draw.rect(screen, WHITE,</span><br><span class="line">                             (cube[<span class="number">1</span>] * GRID_WIDTH, cube[<span class="number">0</span>] * GRID_WIDTH,</span><br><span class="line">                              GRID_WIDTH, GRID_WIDTH),</span><br><span class="line">                             <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_grids</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(GRID_NUM_WIDTH):</span><br><span class="line">        pygame.draw.line(screen, LINE_COLOR,</span><br><span class="line">                         (i * GRID_WIDTH, <span class="number">0</span>), (i * GRID_WIDTH, HEIGHT))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(GRID_NUM_HEIGHT):</span><br><span class="line">        pygame.draw.line(screen, LINE_COLOR,</span><br><span class="line">                         (<span class="number">0</span>, i * GRID_WIDTH), (WIDTH, i * GRID_WIDTH))</span><br><span class="line"></span><br><span class="line">    pygame.draw.line(screen, WHITE,</span><br><span class="line">                     (GRID_WIDTH * GRID_NUM_WIDTH, <span class="number">0</span>),</span><br><span class="line">                     (GRID_WIDTH * GRID_NUM_WIDTH, GRID_WIDTH * GRID_NUM_HEIGHT))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_matrix</span>():</span><br><span class="line">    <span class="keyword">for</span> i, row <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="built_in">range</span>(GRID_NUM_HEIGHT), screen_color_matrix):</span><br><span class="line">        <span class="keyword">for</span> j, color <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="built_in">range</span>(GRID_NUM_WIDTH), row):</span><br><span class="line">            <span class="keyword">if</span> color <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                pygame.draw.rect(screen, color,</span><br><span class="line">                                 (j * GRID_WIDTH, i * GRID_WIDTH,</span><br><span class="line">                                  GRID_WIDTH, GRID_WIDTH))</span><br><span class="line">                pygame.draw.rect(screen, WHITE,</span><br><span class="line">                                 (j * GRID_WIDTH, i * GRID_WIDTH,</span><br><span class="line">                                  GRID_WIDTH, GRID_WIDTH), <span class="number">2</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_score</span>():</span><br><span class="line">    show_text(screen, <span class="string">u&#x27;得分：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(score), <span class="number">20</span>, WIDTH + SIDE_WIDTH // <span class="number">2</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove_full_line</span>():</span><br><span class="line">    <span class="keyword">global</span> screen_color_matrix</span><br><span class="line">    <span class="keyword">global</span> score</span><br><span class="line">    <span class="keyword">global</span> level</span><br><span class="line">    new_matrix = [[<span class="literal">None</span>] * GRID_NUM_WIDTH <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(GRID_NUM_HEIGHT)]</span><br><span class="line">    index = GRID_NUM_HEIGHT - <span class="number">1</span></span><br><span class="line">    n_full_line = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(GRID_NUM_HEIGHT - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        is_full = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(GRID_NUM_WIDTH):</span><br><span class="line">            <span class="keyword">if</span> screen_color_matrix[i][j] <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                is_full = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_full:</span><br><span class="line">            new_matrix[index] = screen_color_matrix[i]</span><br><span class="line">            index -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            n_full_line += <span class="number">1</span></span><br><span class="line">    score += n_full_line</span><br><span class="line">    level = score // <span class="number">20</span> + <span class="number">1</span></span><br><span class="line">    screen_color_matrix = new_matrix</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_welcome</span>(<span class="params">screen</span>):</span><br><span class="line">    show_text(screen, <span class="string">u&#x27;俄罗斯方块&#x27;</span>, <span class="number">30</span>, WIDTH / <span class="number">2</span>, HEIGHT / <span class="number">2</span>)</span><br><span class="line">    show_text(screen, <span class="string">u&#x27;按任意键开始游戏&#x27;</span>, <span class="number">20</span>, WIDTH / <span class="number">2</span>, HEIGHT / <span class="number">2</span> + <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">running = <span class="literal">True</span></span><br><span class="line">gameover = <span class="literal">True</span></span><br><span class="line">counter = <span class="number">0</span></span><br><span class="line">live_cube = <span class="literal">None</span></span><br><span class="line"><span class="keyword">while</span> running:</span><br><span class="line">    clock.tick(FPS)</span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">            running = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">elif</span> event.<span class="built_in">type</span> == pygame.KEYDOWN:</span><br><span class="line">            <span class="keyword">if</span> gameover:</span><br><span class="line">                gameover = <span class="literal">False</span></span><br><span class="line">                live_cube = CubeShape()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> event.key == pygame.K_LEFT:</span><br><span class="line">                live_cube.left()</span><br><span class="line">            <span class="keyword">elif</span> event.key == pygame.K_RIGHT:</span><br><span class="line">                live_cube.right()</span><br><span class="line">            <span class="keyword">elif</span> event.key == pygame.K_DOWN:</span><br><span class="line">                live_cube.down()</span><br><span class="line">            <span class="keyword">elif</span> event.key == pygame.K_UP:</span><br><span class="line">                live_cube.rotate()</span><br><span class="line">            <span class="keyword">elif</span> event.key == pygame.K_SPACE:</span><br><span class="line">                <span class="keyword">while</span> live_cube.down() == <span class="literal">True</span>:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">            remove_full_line()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> gameover <span class="keyword">is</span> <span class="literal">False</span> <span class="keyword">and</span> counter % (FPS // level) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> live_cube.down() == <span class="literal">False</span>:</span><br><span class="line">            <span class="keyword">for</span> cube <span class="keyword">in</span> live_cube.get_all_gridpos():</span><br><span class="line">                screen_color_matrix[cube[<span class="number">0</span>]][cube[<span class="number">1</span>]] = live_cube.color</span><br><span class="line">            live_cube = CubeShape()</span><br><span class="line">            <span class="keyword">if</span> live_cube.conflict(live_cube.center):</span><br><span class="line">                gameover = <span class="literal">True</span></span><br><span class="line">                score = <span class="number">0</span></span><br><span class="line">                live_cube = <span class="literal">None</span></span><br><span class="line">                screen_color_matrix = [[<span class="literal">None</span>] * GRID_NUM_WIDTH <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(GRID_NUM_HEIGHT)]</span><br><span class="line"></span><br><span class="line">        remove_full_line()</span><br><span class="line">    counter += <span class="number">1</span></span><br><span class="line">    screen.fill(BLACK)</span><br><span class="line">    draw_grids()</span><br><span class="line">    draw_matrix()</span><br><span class="line">    draw_score()</span><br><span class="line">    <span class="keyword">if</span> live_cube <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        live_cube.draw()</span><br><span class="line">    <span class="keyword">if</span> gameover:</span><br><span class="line">        show_welcome(screen)</span><br><span class="line">    pygame.display.update()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>日常代码</category>
        <category>Python应用</category>
        <category>游戏开发</category>
        <category>俄罗斯方块</category>
      </categories>
  </entry>
  <entry>
    <title>用python写一个漂亮的烟花</title>
    <url>/cca71b02.html</url>
    <content><![CDATA[<p>还有几个小时就2023年了，用python写一个烟花代码，庆祝下~</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>注意:代码中需要用到字体文件，需要自己修改字体文件路径</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint, uniform, choice</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line">  </span><br><span class="line">vector = pygame.math.Vector2</span><br><span class="line">gravity = vector(<span class="number">0</span>, <span class="number">0.3</span>)</span><br><span class="line">DISPLAY_WIDTH = <span class="number">800</span></span><br><span class="line">DISPLAY_HEIGHT = <span class="number">700</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">trail_colours = [(<span class="number">45</span>, <span class="number">45</span>, <span class="number">45</span>), (<span class="number">60</span>, <span class="number">60</span>, <span class="number">60</span>), (<span class="number">75</span>, <span class="number">75</span>, <span class="number">75</span>), (<span class="number">125</span>, <span class="number">125</span>, <span class="number">125</span>), (<span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>)]</span><br><span class="line">dynamic_offset = <span class="number">1</span></span><br><span class="line">static_offset = <span class="number">3</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Firework</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.colour = (randint(<span class="number">0</span>, <span class="number">255</span>), randint(<span class="number">0</span>, <span class="number">255</span>), randint(<span class="number">0</span>, <span class="number">255</span>))</span><br><span class="line">        self.colours = (</span><br><span class="line">            (randint(<span class="number">0</span>, <span class="number">255</span>), randint(<span class="number">0</span>, <span class="number">255</span>), randint(<span class="number">0</span>, <span class="number">255</span>)),</span><br><span class="line">            (randint(<span class="number">0</span>, <span class="number">255</span>), randint(<span class="number">0</span>, <span class="number">255</span>), randint(<span class="number">0</span>, <span class="number">255</span>)),</span><br><span class="line">            (randint(<span class="number">0</span>, <span class="number">255</span>), randint(<span class="number">0</span>, <span class="number">255</span>), randint(<span class="number">0</span>, <span class="number">255</span>)))</span><br><span class="line">        self.firework = Particle(randint(<span class="number">0</span>, DISPLAY_WIDTH), DISPLAY_HEIGHT, <span class="literal">True</span>,</span><br><span class="line">                                 self.colour)  <span class="comment"># Creates the firework particle</span></span><br><span class="line">        self.exploded = <span class="literal">False</span></span><br><span class="line">        self.particles = []</span><br><span class="line">        self.min_max_particles = vector(<span class="number">100</span>, <span class="number">225</span>)</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, win</span>):  <span class="comment"># called every frame</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.exploded:</span><br><span class="line">            self.firework.apply_force(gravity)</span><br><span class="line">            self.firework.move()</span><br><span class="line">            <span class="keyword">for</span> tf <span class="keyword">in</span> self.firework.trails:</span><br><span class="line">                tf.show(win)</span><br><span class="line">  </span><br><span class="line">            self.show(win)</span><br><span class="line">  </span><br><span class="line">            <span class="keyword">if</span> self.firework.vel.y &gt;= <span class="number">0</span>:</span><br><span class="line">                self.exploded = <span class="literal">True</span></span><br><span class="line">                self.explode()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> particle <span class="keyword">in</span> self.particles:</span><br><span class="line">                particle.apply_force(vector(gravity.x + uniform(-<span class="number">1</span>, <span class="number">1</span>) / <span class="number">20</span>, gravity.y / <span class="number">2</span> + (randint(<span class="number">1</span>, <span class="number">8</span>) / <span class="number">100</span>)))</span><br><span class="line">                particle.move()</span><br><span class="line">                <span class="keyword">for</span> t <span class="keyword">in</span> particle.trails:</span><br><span class="line">                    t.show(win)</span><br><span class="line">                particle.show(win)</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">explode</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        amount = randint(self.min_max_particles.x, self.min_max_particles.y)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(amount):</span><br><span class="line">            self.particles.append(Particle(self.firework.pos.x, self.firework.pos.y, <span class="literal">False</span>, self.colours))</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self, win</span>):</span><br><span class="line">        pygame.draw.circle(win, self.colour, (<span class="built_in">int</span>(self.firework.pos.x), <span class="built_in">int</span>(self.firework.pos.y)), self.firework.size)</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.exploded:</span><br><span class="line">            <span class="keyword">for</span> p <span class="keyword">in</span> self.particles:</span><br><span class="line">                <span class="keyword">if</span> p.remove <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">                    self.particles.remove(p)</span><br><span class="line">  </span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(self.particles) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Particle</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y, firework, colour</span>):</span><br><span class="line">        self.firework = firework</span><br><span class="line">        self.pos = vector(x, y)</span><br><span class="line">        self.origin = vector(x, y)</span><br><span class="line">        self.radius = <span class="number">20</span></span><br><span class="line">        self.remove = <span class="literal">False</span></span><br><span class="line">        self.explosion_radius = randint(<span class="number">5</span>, <span class="number">18</span>)</span><br><span class="line">        self.life = <span class="number">0</span></span><br><span class="line">        self.acc = vector(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="comment"># trail variables</span></span><br><span class="line">        self.trails = []  <span class="comment"># stores the particles trail objects</span></span><br><span class="line">        self.prev_posx = [-<span class="number">10</span>] * <span class="number">10</span>  <span class="comment"># stores the 10 last positions</span></span><br><span class="line">        self.prev_posy = [-<span class="number">10</span>] * <span class="number">10</span>  <span class="comment"># stores the 10 last positions</span></span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> self.firework:</span><br><span class="line">            self.vel = vector(<span class="number">0</span>, -randint(<span class="number">17</span>, <span class="number">20</span>))</span><br><span class="line">            self.size = <span class="number">5</span></span><br><span class="line">            self.colour = colour</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">                self.trails.append(Trail(i, self.size, <span class="literal">True</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.vel = vector(uniform(-<span class="number">1</span>, <span class="number">1</span>), uniform(-<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">            self.vel.x *= randint(<span class="number">7</span>, self.explosion_radius + <span class="number">2</span>)</span><br><span class="line">            self.vel.y *= randint(<span class="number">7</span>, self.explosion_radius + <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">            self.size = randint(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">            self.colour = choice(colour)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">                self.trails.append(Trail(i, self.size, <span class="literal">False</span>))</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">apply_force</span>(<span class="params">self, force</span>):</span><br><span class="line">        self.acc += force</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.firework:</span><br><span class="line">            self.vel.x *= <span class="number">0.8</span></span><br><span class="line">            self.vel.y *= <span class="number">0.8</span></span><br><span class="line">        self.vel += self.acc</span><br><span class="line">        self.pos += self.vel</span><br><span class="line">        self.acc *= <span class="number">0</span></span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> self.life == <span class="number">0</span> <span class="keyword">and</span> <span class="keyword">not</span> self.firework:  <span class="comment"># check if particle is outside explosion radius</span></span><br><span class="line">            distance = math.sqrt((self.pos.x - self.origin.x) ** <span class="number">2</span> + (self.pos.y - self.origin.y) ** <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">if</span> distance &gt; self.explosion_radius:</span><br><span class="line">                self.remove = <span class="literal">True</span></span><br><span class="line">  </span><br><span class="line">        self.decay()</span><br><span class="line">  </span><br><span class="line">        self.trail_update()</span><br><span class="line">  </span><br><span class="line">        self.life += <span class="number">1</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self, win</span>):</span><br><span class="line">        pygame.draw.circle(win, (self.colour[<span class="number">0</span>], self.colour[<span class="number">1</span>], self.colour[<span class="number">2</span>], <span class="number">0</span>), (<span class="built_in">int</span>(self.pos.x), <span class="built_in">int</span>(self.pos.y)),</span><br><span class="line">                           self.size)</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decay</span>(<span class="params">self</span>):  <span class="comment"># random decay of the particles</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">50</span> &gt; self.life &gt; <span class="number">10</span>:  <span class="comment"># early stage their is a small chance of decay</span></span><br><span class="line">            ran = randint(<span class="number">0</span>, <span class="number">30</span>)</span><br><span class="line">            <span class="keyword">if</span> ran == <span class="number">0</span>:</span><br><span class="line">                self.remove = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> self.life &gt; <span class="number">50</span>:</span><br><span class="line">            ran = randint(<span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line">            <span class="keyword">if</span> ran == <span class="number">0</span>:</span><br><span class="line">                self.remove = <span class="literal">True</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">trail_update</span>(<span class="params">self</span>):</span><br><span class="line">        self.prev_posx.pop()</span><br><span class="line">        self.prev_posx.insert(<span class="number">0</span>, <span class="built_in">int</span>(self.pos.x))</span><br><span class="line">        self.prev_posy.pop()</span><br><span class="line">        self.prev_posy.insert(<span class="number">0</span>, <span class="built_in">int</span>(self.pos.y))</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">for</span> n, t <span class="keyword">in</span> <span class="built_in">enumerate</span>(self.trails):</span><br><span class="line">            <span class="keyword">if</span> t.dynamic:</span><br><span class="line">                t.get_pos(self.prev_posx[n + dynamic_offset], self.prev_posy[n + dynamic_offset])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                t.get_pos(self.prev_posx[n + static_offset], self.prev_posy[n + static_offset])</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Trail</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n, size, dynamic</span>):</span><br><span class="line">        self.pos_in_line = n</span><br><span class="line">        self.pos = vector(-<span class="number">10</span>, -<span class="number">10</span>)</span><br><span class="line">        self.dynamic = dynamic</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> self.dynamic:</span><br><span class="line">            self.colour = trail_colours[n]</span><br><span class="line">            self.size = <span class="built_in">int</span>(size - n / <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.colour = (<span class="number">255</span>, <span class="number">255</span>, <span class="number">200</span>)</span><br><span class="line">            self.size = size - <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> self.size &lt; <span class="number">0</span>:</span><br><span class="line">                self.size = <span class="number">0</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_pos</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        self.pos = vector(x, y)</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self, win</span>):</span><br><span class="line">        pygame.draw.circle(win, self.colour, (<span class="built_in">int</span>(self.pos.x), <span class="built_in">int</span>(self.pos.y)), self.size)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">win, fireworks</span>):</span><br><span class="line">    <span class="keyword">for</span> fw <span class="keyword">in</span> fireworks:</span><br><span class="line">        fw.update(win)</span><br><span class="line">        <span class="keyword">if</span> fw.remove():</span><br><span class="line">            fireworks.remove(fw)</span><br><span class="line">  </span><br><span class="line">    pygame.display.update()</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    pygame.init()</span><br><span class="line">    pygame.font.init()</span><br><span class="line">    pygame.display.set_caption(<span class="string">&quot;元旦烟花&quot;</span>) </span><br><span class="line">    background = pygame.image.load(<span class="string">&quot;img/1.png&quot;</span>)  </span><br><span class="line">    myfont = pygame.font.Font(<span class="string">&quot;img/font.ttf&quot;</span>,<span class="number">80</span>)</span><br><span class="line">    myfont1 = pygame.font.Font(<span class="string">&quot;img/font.ttf&quot;</span>, <span class="number">30</span>)</span><br><span class="line">  </span><br><span class="line">    testsurface = myfont.render(<span class="string">&quot;元旦节快乐&quot;</span>,<span class="literal">False</span>,(<span class="number">251</span>, <span class="number">59</span>, <span class="number">85</span>))</span><br><span class="line">    <span class="comment"># pygame.image.load(&quot;&quot;)</span></span><br><span class="line">    win = pygame.display.set_mode((DISPLAY_WIDTH, DISPLAY_HEIGHT))</span><br><span class="line">    <span class="comment"># win.blit(background)</span></span><br><span class="line">    clock = pygame.time.Clock()</span><br><span class="line">  </span><br><span class="line">    fireworks = [Firework() <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]  <span class="comment"># create the first fireworks</span></span><br><span class="line">    running = <span class="literal">True</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">while</span> running:</span><br><span class="line">        clock.tick(<span class="number">60</span>)</span><br><span class="line">        <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">            <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">                running = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.KEYDOWN:  <span class="comment"># Change game speed with number keys</span></span><br><span class="line">                <span class="keyword">if</span> event.key == pygame.K_1: <span class="comment"># 按下 1</span></span><br><span class="line">                    fireworks.append(Firework())</span><br><span class="line">                <span class="keyword">if</span> event.key == pygame.K_2: <span class="comment"># 按下 2 加入10个烟花</span></span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">                        fireworks.append(Firework())</span><br><span class="line">        win.fill((<span class="number">20</span>, <span class="number">20</span>, <span class="number">30</span>))  <span class="comment"># draw background</span></span><br><span class="line">        win.blit(background,(<span class="number">800</span>,<span class="number">800</span>))</span><br><span class="line">        win.blit(testsurface,(<span class="number">200</span>,<span class="number">30</span>))</span><br><span class="line">        <span class="keyword">if</span> randint(<span class="number">0</span>, <span class="number">20</span>) == <span class="number">1</span>:  <span class="comment"># create new firework</span></span><br><span class="line">            fireworks.append(Firework())</span><br><span class="line">        update(win, fireworks)</span><br><span class="line">    pygame.quit()</span><br><span class="line">    quit()</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>日常代码</category>
        <category>Python应用</category>
        <category>图形设计</category>
        <category>烟花效果</category>
      </categories>
  </entry>
  <entry>
    <title>用python检测微信好友是否删除自己</title>
    <url>/40902.html</url>
    <content><![CDATA[<p>我们在平时生活中使用微信发现微信中有很多已经将自己删除了的好友，如何在不打扰别人的情况下知道哪些好友删除了自己了？下面我们就用python程序来实现。</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<blockquote>
<p>使用该程序有个前提条件：那就是自己的微信能够登录网页版微信，不然无法使用哦~<br>开发环境：python2</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> urllib, urllib2</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> cookielib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> xml.dom.minidom</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="comment"># from gevent import monkey</span></span><br><span class="line"></span><br><span class="line">DEBUG = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">MAX_GROUP_NUM = <span class="number">35</span> <span class="comment"># 每组人数</span></span><br><span class="line"></span><br><span class="line">QRImagePath = os.getcwd() + <span class="string">&#x27;/qrcode.jpg&#x27;</span></span><br><span class="line"></span><br><span class="line">tip = <span class="number">0</span></span><br><span class="line">uuid = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">base_uri = <span class="string">&#x27;&#x27;</span></span><br><span class="line">redirect_uri = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">skey = <span class="string">&#x27;&#x27;</span></span><br><span class="line">wxsid = <span class="string">&#x27;&#x27;</span></span><br><span class="line">wxuin = <span class="string">&#x27;&#x27;</span></span><br><span class="line">pass_ticket = <span class="string">&#x27;&#x27;</span></span><br><span class="line">deviceId = <span class="string">&#x27;e000000000000000&#x27;</span></span><br><span class="line"></span><br><span class="line">BaseRequest = &#123;&#125;</span><br><span class="line"></span><br><span class="line">ContactList = []</span><br><span class="line">My = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getUUID</span>():</span><br><span class="line">  <span class="keyword">global</span> uuid</span><br><span class="line"></span><br><span class="line">  url = <span class="string">&#x27;https://login.weixin.qq.com/jslogin&#x27;</span></span><br><span class="line">  params = &#123;</span><br><span class="line">    <span class="string">&#x27;appid&#x27;</span>: <span class="string">&#x27;wx782c26e4c19acffb&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;fun&#x27;</span>: <span class="string">&#x27;new&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;lang&#x27;</span>: <span class="string">&#x27;zh_CN&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;_&#x27;</span>: <span class="built_in">int</span>(time.time()),</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  request = urllib2.Request(url = url, data = urllib.urlencode(params))</span><br><span class="line">  response = urllib2.urlopen(request)</span><br><span class="line">  data = response.read()</span><br><span class="line"></span><br><span class="line">  <span class="comment"># print data</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># window.QRLogin.code = 200; window.QRLogin.uuid = &quot;oZwt_bFfRg==&quot;;</span></span><br><span class="line">  regx = <span class="string">r&#x27;window.QRLogin.code = (\d+); window.QRLogin.uuid = &quot;(\S+?)&quot;&#x27;</span></span><br><span class="line">  pm = re.search(regx, data)</span><br><span class="line"></span><br><span class="line">  code = pm.group(<span class="number">1</span>)</span><br><span class="line">  uuid = pm.group(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> code == <span class="string">&#x27;200&#x27;</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">showQRImage</span>():</span><br><span class="line">  <span class="keyword">global</span> tip</span><br><span class="line"></span><br><span class="line">  url = <span class="string">&#x27;https://login.weixin.qq.com/qrcode/&#x27;</span> + uuid</span><br><span class="line">  params = &#123;</span><br><span class="line">    <span class="string">&#x27;t&#x27;</span>: <span class="string">&#x27;webwx&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;_&#x27;</span>: <span class="built_in">int</span>(time.time()),</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  request = urllib2.Request(url = url, data = urllib.urlencode(params))</span><br><span class="line">  response = urllib2.urlopen(request)</span><br><span class="line"></span><br><span class="line">  tip = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  f = <span class="built_in">open</span>(QRImagePath, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">  f.write(response.read())</span><br><span class="line">  f.close()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> sys.platform.find(<span class="string">&#x27;darwin&#x27;</span>) &gt;= <span class="number">0</span>:</span><br><span class="line">    os.system(<span class="string">&#x27;open %s&#x27;</span> % QRImagePath)</span><br><span class="line">  <span class="keyword">elif</span> sys.platform.find(<span class="string">&#x27;linux&#x27;</span>) &gt;= <span class="number">0</span>:</span><br><span class="line">    os.system(<span class="string">&#x27;xdg-open %s&#x27;</span> % QRImagePath)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    os.system(<span class="string">&#x27;call %s&#x27;</span> % QRImagePath)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span> <span class="string">&#x27;请使用微信扫描二维码以登录&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">waitForLogin</span>():</span><br><span class="line">  <span class="keyword">global</span> tip, base_uri, redirect_uri</span><br><span class="line"></span><br><span class="line">  url = <span class="string">&#x27;https://login.weixin.qq.com/cgi-bin/mmwebwx-bin/login?tip=%s&amp;uuid=%s&amp;_=%s&#x27;</span> % (tip, uuid, <span class="built_in">int</span>(time.time()))</span><br><span class="line"></span><br><span class="line">  request = urllib2.Request(url = url)</span><br><span class="line">  response = urllib2.urlopen(request)</span><br><span class="line">  data = response.read()</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># print data</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># window.code=500;</span></span><br><span class="line">  regx = <span class="string">r&#x27;window.code=(\d+);&#x27;</span></span><br><span class="line">  pm = re.search(regx, data)</span><br><span class="line"></span><br><span class="line">  code = pm.group(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> code == <span class="string">&#x27;201&#x27;</span>: <span class="comment">#已扫描</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;成功扫描,请在手机上点击确认以登录&#x27;</span></span><br><span class="line">    tip = <span class="number">0</span></span><br><span class="line">  <span class="keyword">elif</span> code == <span class="string">&#x27;200&#x27;</span>: <span class="comment">#已登录</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;正在登录...&#x27;</span></span><br><span class="line">    regx = <span class="string">r&#x27;window.redirect_uri=&quot;(\S+?)&quot;;&#x27;</span></span><br><span class="line">    pm = re.search(regx, data)</span><br><span class="line">    redirect_uri = pm.group(<span class="number">1</span>) + <span class="string">&#x27;&amp;fun=new&#x27;</span></span><br><span class="line">    base_uri = redirect_uri[:redirect_uri.rfind(<span class="string">&#x27;/&#x27;</span>)]</span><br><span class="line">  <span class="keyword">elif</span> code == <span class="string">&#x27;408&#x27;</span>: <span class="comment">#超时</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  <span class="comment"># elif code == &#x27;400&#x27; or code == &#x27;500&#x27;:</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> code</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">  <span class="keyword">global</span> skey, wxsid, wxuin, pass_ticket, BaseRequest</span><br><span class="line"></span><br><span class="line">  request = urllib2.Request(url = redirect_uri)</span><br><span class="line">  response = urllib2.urlopen(request)</span><br><span class="line">  data = response.read()</span><br><span class="line"></span><br><span class="line">  <span class="comment"># print data</span></span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    &lt;error&gt;</span></span><br><span class="line"><span class="string">      &lt;ret&gt;0&lt;/ret&gt;</span></span><br><span class="line"><span class="string">      &lt;message&gt;OK&lt;/message&gt;</span></span><br><span class="line"><span class="string">      &lt;skey&gt;xxx&lt;/skey&gt;</span></span><br><span class="line"><span class="string">      &lt;wxsid&gt;xxx&lt;/wxsid&gt;</span></span><br><span class="line"><span class="string">      &lt;wxuin&gt;xxx&lt;/wxuin&gt;</span></span><br><span class="line"><span class="string">      &lt;pass_ticket&gt;xxx&lt;/pass_ticket&gt;</span></span><br><span class="line"><span class="string">      &lt;isgrayscale&gt;1&lt;/isgrayscale&gt;</span></span><br><span class="line"><span class="string">    &lt;/error&gt;</span></span><br><span class="line"><span class="string">  &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">  doc = xml.dom.minidom.parseString(data)</span><br><span class="line">  root = doc.documentElement</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> node <span class="keyword">in</span> root.childNodes:</span><br><span class="line">    <span class="keyword">if</span> node.nodeName == <span class="string">&#x27;skey&#x27;</span>:</span><br><span class="line">      skey = node.childNodes[<span class="number">0</span>].data</span><br><span class="line">    <span class="keyword">elif</span> node.nodeName == <span class="string">&#x27;wxsid&#x27;</span>:</span><br><span class="line">      wxsid = node.childNodes[<span class="number">0</span>].data</span><br><span class="line">    <span class="keyword">elif</span> node.nodeName == <span class="string">&#x27;wxuin&#x27;</span>:</span><br><span class="line">      wxuin = node.childNodes[<span class="number">0</span>].data</span><br><span class="line">    <span class="keyword">elif</span> node.nodeName == <span class="string">&#x27;pass_ticket&#x27;</span>:</span><br><span class="line">      pass_ticket = node.childNodes[<span class="number">0</span>].data</span><br><span class="line"></span><br><span class="line">  <span class="comment"># print &#x27;skey: %s, wxsid: %s, wxuin: %s, pass_ticket: %s&#x27; % (skey, wxsid, wxuin, pass_ticket)</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> skey == <span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> wxsid == <span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> wxuin == <span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> pass_ticket == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">  BaseRequest = &#123;</span><br><span class="line">    <span class="string">&#x27;Uin&#x27;</span>: <span class="built_in">int</span>(wxuin),</span><br><span class="line">    <span class="string">&#x27;Sid&#x27;</span>: wxsid,</span><br><span class="line">    <span class="string">&#x27;Skey&#x27;</span>: skey,</span><br><span class="line">    <span class="string">&#x27;DeviceID&#x27;</span>: deviceId,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">webwxinit</span>():</span><br><span class="line"></span><br><span class="line">  url = base_uri + <span class="string">&#x27;/webwxinit?pass_ticket=%s&amp;skey=%s&amp;r=%s&#x27;</span> % (pass_ticket, skey, <span class="built_in">int</span>(time.time()))</span><br><span class="line">  params = &#123;</span><br><span class="line">    <span class="string">&#x27;BaseRequest&#x27;</span>: BaseRequest</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  request = urllib2.Request(url = url, data = json.dumps(params))</span><br><span class="line">  request.add_header(<span class="string">&#x27;ContentType&#x27;</span>, <span class="string">&#x27;application/json; charset=UTF-8&#x27;</span>)</span><br><span class="line">  response = urllib2.urlopen(request)</span><br><span class="line">  data = response.read()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> DEBUG == <span class="literal">True</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(os.getcwd() + <span class="string">&#x27;/webwxinit.json&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    f.write(data)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line">  <span class="comment"># print data</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">global</span> ContactList, My</span><br><span class="line">  dic = json.loads(data)</span><br><span class="line">  ContactList = dic[<span class="string">&#x27;ContactList&#x27;</span>]</span><br><span class="line">  My = dic[<span class="string">&#x27;User&#x27;</span>]</span><br><span class="line"></span><br><span class="line">  ErrMsg = dic[<span class="string">&#x27;BaseResponse&#x27;</span>][<span class="string">&#x27;ErrMsg&#x27;</span>]</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">len</span>(ErrMsg) &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span> ErrMsg</span><br><span class="line"></span><br><span class="line">  Ret = dic[<span class="string">&#x27;BaseResponse&#x27;</span>][<span class="string">&#x27;Ret&#x27;</span>]</span><br><span class="line">  <span class="keyword">if</span> Ret != <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">  <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">webwxgetcontact</span>():</span><br><span class="line">  </span><br><span class="line">  url = base_uri + <span class="string">&#x27;/webwxgetcontact?pass_ticket=%s&amp;skey=%s&amp;r=%s&#x27;</span> % (pass_ticket, skey, <span class="built_in">int</span>(time.time()))</span><br><span class="line"></span><br><span class="line">  request = urllib2.Request(url = url)</span><br><span class="line">  request.add_header(<span class="string">&#x27;ContentType&#x27;</span>, <span class="string">&#x27;application/json; charset=UTF-8&#x27;</span>)</span><br><span class="line">  response = urllib2.urlopen(request)</span><br><span class="line">  data = response.read()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> DEBUG == <span class="literal">True</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(os.getcwd() + <span class="string">&#x27;/webwxgetcontact.json&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    f.write(data)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line">  <span class="comment"># print data</span></span><br><span class="line"></span><br><span class="line">  dic = json.loads(data)</span><br><span class="line">  MemberList = dic[<span class="string">&#x27;MemberList&#x27;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 倒序遍历,不然删除的时候出问题..</span></span><br><span class="line">  SpecialUsers = [<span class="string">&#x27;newsapp&#x27;</span>, <span class="string">&#x27;fmessage&#x27;</span>, <span class="string">&#x27;filehelper&#x27;</span>, <span class="string">&#x27;weibo&#x27;</span>, <span class="string">&#x27;qqmail&#x27;</span>, <span class="string">&#x27;fmessage&#x27;</span>, <span class="string">&#x27;tmessage&#x27;</span>, <span class="string">&#x27;qmessage&#x27;</span>, <span class="string">&#x27;qqsync&#x27;</span>, <span class="string">&#x27;floatbottle&#x27;</span>, <span class="string">&#x27;lbsapp&#x27;</span>, <span class="string">&#x27;shakeapp&#x27;</span>, <span class="string">&#x27;medianote&#x27;</span>, <span class="string">&#x27;qqfriend&#x27;</span>, <span class="string">&#x27;readerapp&#x27;</span>, <span class="string">&#x27;blogapp&#x27;</span>, <span class="string">&#x27;facebookapp&#x27;</span>, <span class="string">&#x27;masssendapp&#x27;</span>, <span class="string">&#x27;meishiapp&#x27;</span>, <span class="string">&#x27;feedsapp&#x27;</span>, <span class="string">&#x27;voip&#x27;</span>, <span class="string">&#x27;blogappweixin&#x27;</span>, <span class="string">&#x27;weixin&#x27;</span>, <span class="string">&#x27;brandsessionholder&#x27;</span>, <span class="string">&#x27;weixinreminder&#x27;</span>, <span class="string">&#x27;wxid_novlwrv3lqwv11&#x27;</span>, <span class="string">&#x27;gh_22b87fa7cb3c&#x27;</span>, <span class="string">&#x27;officialaccounts&#x27;</span>, <span class="string">&#x27;notification_messages&#x27;</span>, <span class="string">&#x27;wxid_novlwrv3lqwv11&#x27;</span>, <span class="string">&#x27;gh_22b87fa7cb3c&#x27;</span>, <span class="string">&#x27;wxitil&#x27;</span>, <span class="string">&#x27;userexperience_alarm&#x27;</span>, <span class="string">&#x27;notification_messages&#x27;</span>]</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="built_in">len</span>(MemberList) - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    Member = MemberList[i]</span><br><span class="line">    <span class="keyword">if</span> Member[<span class="string">&#x27;VerifyFlag&#x27;</span>] &amp; <span class="number">8</span> != <span class="number">0</span>: <span class="comment"># 公众号/服务号</span></span><br><span class="line">      MemberList.remove(Member)</span><br><span class="line">    <span class="keyword">elif</span> Member[<span class="string">&#x27;UserName&#x27;</span>] <span class="keyword">in</span> SpecialUsers: <span class="comment"># 特殊账号</span></span><br><span class="line">      MemberList.remove(Member)</span><br><span class="line">    <span class="keyword">elif</span> Member[<span class="string">&#x27;UserName&#x27;</span>].find(<span class="string">&#x27;@@&#x27;</span>) != -<span class="number">1</span>: <span class="comment"># 群聊</span></span><br><span class="line">      MemberList.remove(Member)</span><br><span class="line">    <span class="keyword">elif</span> Member[<span class="string">&#x27;UserName&#x27;</span>] == My[<span class="string">&#x27;UserName&#x27;</span>]: <span class="comment"># 自己</span></span><br><span class="line">      MemberList.remove(Member)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> MemberList</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">createChatroom</span>(<span class="params">UserNames</span>):</span><br><span class="line">  MemberList = []</span><br><span class="line">  <span class="keyword">for</span> UserName <span class="keyword">in</span> UserNames:</span><br><span class="line">    MemberList.append(&#123;<span class="string">&#x27;UserName&#x27;</span>: UserName&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  url = base_uri + <span class="string">&#x27;/webwxcreatechatroom?pass_ticket=%s&amp;r=%s&#x27;</span> % (pass_ticket, <span class="built_in">int</span>(time.time()))</span><br><span class="line">  params = &#123;</span><br><span class="line">    <span class="string">&#x27;BaseRequest&#x27;</span>: BaseRequest,</span><br><span class="line">    <span class="string">&#x27;MemberCount&#x27;</span>: <span class="built_in">len</span>(MemberList),</span><br><span class="line">    <span class="string">&#x27;MemberList&#x27;</span>: MemberList,</span><br><span class="line">    <span class="string">&#x27;Topic&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  request = urllib2.Request(url = url, data = json.dumps(params))</span><br><span class="line">  request.add_header(<span class="string">&#x27;ContentType&#x27;</span>, <span class="string">&#x27;application/json; charset=UTF-8&#x27;</span>)</span><br><span class="line">  response = urllib2.urlopen(request)</span><br><span class="line">  data = response.read()</span><br><span class="line"></span><br><span class="line">  <span class="comment"># print data</span></span><br><span class="line"></span><br><span class="line">  dic = json.loads(data)</span><br><span class="line">  ChatRoomName = dic[<span class="string">&#x27;ChatRoomName&#x27;</span>]</span><br><span class="line">  MemberList = dic[<span class="string">&#x27;MemberList&#x27;</span>]</span><br><span class="line">  DeletedList = []</span><br><span class="line">  <span class="keyword">for</span> Member <span class="keyword">in</span> MemberList:</span><br><span class="line">    <span class="keyword">if</span> Member[<span class="string">&#x27;MemberStatus&#x27;</span>] == <span class="number">4</span>: <span class="comment">#被对方删除了</span></span><br><span class="line">      DeletedList.append(Member[<span class="string">&#x27;UserName&#x27;</span>])</span><br><span class="line"></span><br><span class="line">  ErrMsg = dic[<span class="string">&#x27;BaseResponse&#x27;</span>][<span class="string">&#x27;ErrMsg&#x27;</span>]</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">len</span>(ErrMsg) &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span> ErrMsg</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (ChatRoomName, DeletedList)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deleteMember</span>(<span class="params">ChatRoomName, UserNames</span>):</span><br><span class="line">  url = base_uri + <span class="string">&#x27;/webwxupdatechatroom?fun=delmember&amp;pass_ticket=%s&#x27;</span> % (pass_ticket)</span><br><span class="line">  params = &#123;</span><br><span class="line">    <span class="string">&#x27;BaseRequest&#x27;</span>: BaseRequest,</span><br><span class="line">    <span class="string">&#x27;ChatRoomName&#x27;</span>: ChatRoomName,</span><br><span class="line">    <span class="string">&#x27;DelMemberList&#x27;</span>: <span class="string">&#x27;,&#x27;</span>.join(UserNames),</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  request = urllib2.Request(url = url, data = json.dumps(params))</span><br><span class="line">  request.add_header(<span class="string">&#x27;ContentType&#x27;</span>, <span class="string">&#x27;application/json; charset=UTF-8&#x27;</span>)</span><br><span class="line">  response = urllib2.urlopen(request)</span><br><span class="line">  data = response.read()</span><br><span class="line"></span><br><span class="line">  <span class="comment"># print data</span></span><br><span class="line"></span><br><span class="line">  dic = json.loads(data)</span><br><span class="line">  ErrMsg = dic[<span class="string">&#x27;BaseResponse&#x27;</span>][<span class="string">&#x27;ErrMsg&#x27;</span>]</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">len</span>(ErrMsg) &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span> ErrMsg</span><br><span class="line"></span><br><span class="line">  Ret = dic[<span class="string">&#x27;BaseResponse&#x27;</span>][<span class="string">&#x27;Ret&#x27;</span>]</span><br><span class="line">  <span class="keyword">if</span> Ret != <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">  <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addMember</span>(<span class="params">ChatRoomName, UserNames</span>):</span><br><span class="line">  url = base_uri + <span class="string">&#x27;/webwxupdatechatroom?fun=addmember&amp;pass_ticket=%s&#x27;</span> % (pass_ticket)</span><br><span class="line">  params = &#123;</span><br><span class="line">    <span class="string">&#x27;BaseRequest&#x27;</span>: BaseRequest,</span><br><span class="line">    <span class="string">&#x27;ChatRoomName&#x27;</span>: ChatRoomName,</span><br><span class="line">    <span class="string">&#x27;AddMemberList&#x27;</span>: <span class="string">&#x27;,&#x27;</span>.join(UserNames),</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  request = urllib2.Request(url = url, data = json.dumps(params))</span><br><span class="line">  request.add_header(<span class="string">&#x27;ContentType&#x27;</span>, <span class="string">&#x27;application/json; charset=UTF-8&#x27;</span>)</span><br><span class="line">  response = urllib2.urlopen(request)</span><br><span class="line">  data = response.read()</span><br><span class="line"></span><br><span class="line">  <span class="comment"># print data</span></span><br><span class="line"></span><br><span class="line">  dic = json.loads(data)</span><br><span class="line">  MemberList = dic[<span class="string">&#x27;MemberList&#x27;</span>]</span><br><span class="line">  DeletedList = []</span><br><span class="line">  <span class="keyword">for</span> Member <span class="keyword">in</span> MemberList:</span><br><span class="line">    <span class="keyword">if</span> Member[<span class="string">&#x27;MemberStatus&#x27;</span>] == <span class="number">4</span>: <span class="comment">#被对方删除了</span></span><br><span class="line">      DeletedList.append(Member[<span class="string">&#x27;UserName&#x27;</span>])</span><br><span class="line"></span><br><span class="line">  ErrMsg = dic[<span class="string">&#x27;BaseResponse&#x27;</span>][<span class="string">&#x27;ErrMsg&#x27;</span>]</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">len</span>(ErrMsg) &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span> ErrMsg</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> DeletedList</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"></span><br><span class="line">  opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cookielib.CookieJar()))</span><br><span class="line">  urllib2.install_opener(opener)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> getUUID() == <span class="literal">False</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;获取uuid失败&#x27;</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  showQRImage()</span><br><span class="line">  time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> waitForLogin() != <span class="string">&#x27;200&#x27;</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">  os.remove(QRImagePath)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> login() == <span class="literal">False</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;登录失败&#x27;</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> webwxinit() == <span class="literal">False</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;初始化失败&#x27;</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  MemberList = webwxgetcontact()</span><br><span class="line"></span><br><span class="line">  MemberCount = <span class="built_in">len</span>(MemberList)</span><br><span class="line">  <span class="built_in">print</span> <span class="string">&#x27;通讯录共%s位好友&#x27;</span> % MemberCount</span><br><span class="line"></span><br><span class="line">  ChatRoomName = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  result = []</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>, <span class="built_in">int</span>(math.ceil(MemberCount / <span class="built_in">float</span>(MAX_GROUP_NUM)))):</span><br><span class="line">    UserNames = []</span><br><span class="line">    NickNames = []</span><br><span class="line">    DeletedList = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">0</span>, MAX_GROUP_NUM):</span><br><span class="line">      <span class="keyword">if</span> i * MAX_GROUP_NUM + j &gt;= MemberCount:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">      Member = MemberList[i * MAX_GROUP_NUM + j]</span><br><span class="line">      UserNames.append(Member[<span class="string">&#x27;UserName&#x27;</span>])</span><br><span class="line">      NickNames.append(Member[<span class="string">&#x27;NickName&#x27;</span>].encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">            </span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;第%s组...&#x27;</span> % (i + <span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;, &#x27;</span>.join(NickNames)</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;回车键继续...&#x27;</span></span><br><span class="line">    raw_input()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 新建群组/添加成员</span></span><br><span class="line">    <span class="keyword">if</span> ChatRoomName == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">      (ChatRoomName, DeletedList) = createChatroom(UserNames)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      DeletedList = addMember(ChatRoomName, UserNames)</span><br><span class="line"></span><br><span class="line">    DeletedCount = <span class="built_in">len</span>(DeletedList)</span><br><span class="line">    <span class="keyword">if</span> DeletedCount &gt; <span class="number">0</span>:</span><br><span class="line">      result += DeletedList</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;找到%s个被删好友&#x27;</span> % DeletedCount</span><br><span class="line">    <span class="comment"># raw_input()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除成员</span></span><br><span class="line">    deleteMember(ChatRoomName, UserNames)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># todo 删除群组</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  resultNames = []</span><br><span class="line">  <span class="keyword">for</span> Member <span class="keyword">in</span> MemberList:</span><br><span class="line">    <span class="keyword">if</span> Member[<span class="string">&#x27;UserName&#x27;</span>] <span class="keyword">in</span> result:</span><br><span class="line">      NickName = Member[<span class="string">&#x27;NickName&#x27;</span>]</span><br><span class="line">      <span class="keyword">if</span> Member[<span class="string">&#x27;RemarkName&#x27;</span>] != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        NickName += <span class="string">&#x27;(%s)&#x27;</span> % Member[<span class="string">&#x27;RemarkName&#x27;</span>]</span><br><span class="line">      resultNames.append(NickName.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span> <span class="string">&#x27;---------- 被删除的好友列表 ----------&#x27;</span></span><br><span class="line">  <span class="built_in">print</span> <span class="string">&#x27;\n&#x27;</span>.join(resultNames)</span><br><span class="line">  <span class="built_in">print</span> <span class="string">&#x27;-----------------------------------&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># windows下编码问题修复</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UnicodeStreamFilter</span>: </span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, target</span>): </span><br><span class="line">    self.target = target </span><br><span class="line">    self.encoding = <span class="string">&#x27;utf-8&#x27;</span> </span><br><span class="line">    self.errors = <span class="string">&#x27;replace&#x27;</span> </span><br><span class="line">    self.encode_to = self.target.encoding </span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">self, s</span>): </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(s) == <span class="built_in">str</span>: </span><br><span class="line">      s = s.decode(<span class="string">&#x27;utf-8&#x27;</span>) </span><br><span class="line">    s = s.encode(self.encode_to, self.errors).decode(self.encode_to) </span><br><span class="line">    self.target.write(s) </span><br><span class="line">     </span><br><span class="line"><span class="keyword">if</span> sys.stdout.encoding == <span class="string">&#x27;cp936&#x27;</span>: </span><br><span class="line">  sys.stdout = UnicodeStreamFilter(sys.stdout)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span> :</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span> <span class="string">&#x27;本程序的查询结果可能会引起一些心理上的不适,请小心使用...&#x27;</span></span><br><span class="line">  <span class="built_in">print</span> <span class="string">&#x27;回车键继续...&#x27;</span></span><br><span class="line">  raw_input()</span><br><span class="line">  <span class="comment"># monkey.patch_all()</span></span><br><span class="line">  main()</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span> <span class="string">&#x27;回车键结束&#x27;</span></span><br><span class="line">  raw_input()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>日常代码</category>
        <category>Python应用</category>
        <category>微信</category>
        <category>数据抓取</category>
      </categories>
  </entry>
  <entry>
    <title>用python画一只兔子</title>
    <url>/92589552.html</url>
    <content><![CDATA[<p>先看下效果图<br><img data-src="https://s1.ax1x.com/2023/01/21/pSGUd9x.jpg" alt="效果图" /></p>
<blockquote>
<p> 注意，python版本太高可能没有该效果</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> turtle <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_start</span>(<span class="params">x, y, w=<span class="number">0.5</span>, c=<span class="string">&#x27;black&#x27;</span></span>):</span><br><span class="line">    penup()</span><br><span class="line">    setx(x)</span><br><span class="line">    sety(y)</span><br><span class="line">    setheading(towards(<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    width(w)</span><br><span class="line">    pencolor(c)</span><br><span class="line">    pendown()</span><br><span class="line">    speed(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">left_rotate</span>(<span class="params">time, angle, length</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(time):</span><br><span class="line">        left(angle)</span><br><span class="line">        forward(length)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">right_rotate</span>(<span class="params">time, angle, length</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(time):</span><br><span class="line">        right(angle)</span><br><span class="line">        forward(length)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fill_color</span>(<span class="params">color</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator_all</span>(<span class="params">func</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            begin_fill()</span><br><span class="line">            func(*args, **kwargs)</span><br><span class="line">            fillcolor(color)</span><br><span class="line">            end_fill()</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator_all</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fill_color_patch</span>(<span class="params">x, y, c=<span class="string">&#x27;white&#x27;</span></span>):</span><br><span class="line">    set_start(x, y, <span class="number">1</span>, c=c)</span><br><span class="line">    forward(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_circle</span>(<span class="params">radius, color, color2=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">    <span class="keyword">if</span> color2 == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        color2 = color</span><br><span class="line">    penup()</span><br><span class="line">    setheading(towards(<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    right(<span class="number">90</span>)</span><br><span class="line">    pencolor(color)</span><br><span class="line">    pendown()</span><br><span class="line">    begin_fill()</span><br><span class="line">    circle(radius)</span><br><span class="line">    fillcolor(color2)</span><br><span class="line">    end_fill()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_ear</span>():</span><br><span class="line">    <span class="comment"># 左侧耳朵</span></span><br><span class="line">    fill_color_patch(-<span class="number">50</span>, <span class="number">86</span>, c=<span class="string">&#x27;#9392B3&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(-<span class="number">50</span>, <span class="number">86</span>, w=<span class="number">4</span>, c=<span class="string">&#x27;#9392B3&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">174</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">5</span>, <span class="number">5</span>, <span class="number">15</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">6</span>, <span class="number">15</span>)</span><br><span class="line">    width(<span class="number">3</span>)</span><br><span class="line">    right_rotate(<span class="number">2</span>, <span class="number">4</span>, <span class="number">13</span>)</span><br><span class="line">    right_rotate(<span class="number">2</span>, <span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">9</span>, <span class="number">12</span>)</span><br><span class="line">    width(<span class="number">4</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">128</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">9.5</span>, <span class="number">31</span>)</span><br><span class="line">    right_rotate(<span class="number">5</span>, <span class="number">7</span>, <span class="number">25</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">80</span>, <span class="number">10</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">7</span>, <span class="number">12</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    width(<span class="number">3</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">160</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">20</span>, <span class="number">10</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">8</span>, <span class="number">20</span>)</span><br><span class="line">    width(<span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">2</span>, <span class="number">15</span>)</span><br><span class="line">    left_rotate(<span class="number">5</span>, <span class="number">5</span>, <span class="number">15</span>)</span><br><span class="line">    left_rotate(<span class="number">4</span>, <span class="number">3</span>, <span class="number">15</span>)</span><br><span class="line">    fill_color_patch(-<span class="number">35</span>, <span class="number">105</span>, c=<span class="string">&#x27;#E6E6FA&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(-<span class="number">35</span>, <span class="number">105</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#E6E6FA&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">170</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">8</span>, <span class="number">25</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">11</span>, <span class="number">23</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">130</span>, <span class="number">20</span>)</span><br><span class="line">    right_rotate(<span class="number">5</span>, <span class="number">8</span>, <span class="number">25</span>)</span><br><span class="line">    goto(-<span class="number">35</span>, <span class="number">105</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#E6E6FA&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(-<span class="number">32</span>, <span class="number">110</span>, c=<span class="string">&#x27;#D6D2F6&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(-<span class="number">32</span>, <span class="number">110</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#D6D2F6&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">170</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">7</span>, <span class="number">23</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">11</span>, <span class="number">20</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">131</span>, <span class="number">20</span>)</span><br><span class="line">    right_rotate(<span class="number">5</span>, <span class="number">8</span>, <span class="number">23</span>)</span><br><span class="line">    goto(-<span class="number">32</span>, <span class="number">110</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#D6D2F6&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    set_start(-<span class="number">48.87</span>, <span class="number">85.22</span>, w=<span class="number">3</span>, c=<span class="string">&#x27;#9392B3&#x27;</span>)</span><br><span class="line">    setheading(<span class="number">195.67</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">160</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">20</span>, <span class="number">10</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">8</span>, <span class="number">20</span>)</span><br><span class="line">    width(<span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">2</span>, <span class="number">15</span>)</span><br><span class="line">    left_rotate(<span class="number">5</span>, <span class="number">5</span>, <span class="number">15</span>)</span><br><span class="line">    left_rotate(<span class="number">4</span>, <span class="number">3</span>, <span class="number">15</span>)</span><br><span class="line">    <span class="comment"># 右侧耳朵</span></span><br><span class="line">    fill_color_patch(<span class="number">90</span>, <span class="number">67</span>, c=<span class="string">&#x27;#9392B3&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">90</span>, <span class="number">67</span>, w=<span class="number">4</span>, c=<span class="string">&#x27;#9392B3&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">180</span>, <span class="number">10</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">5</span>, <span class="number">13</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">8</span>, <span class="number">15</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">6</span>, <span class="number">15</span>)</span><br><span class="line">    left_rotate(<span class="number">4</span>, <span class="number">5</span>, <span class="number">15</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">5.5</span>, <span class="number">8</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">132</span>, <span class="number">15</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">8</span>, <span class="number">18</span>)</span><br><span class="line">    left_rotate(<span class="number">5</span>, <span class="number">5</span>, <span class="number">18</span>)</span><br><span class="line">    left_rotate(<span class="number">4</span>, <span class="number">4</span>, <span class="number">17</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">70</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>)</span><br><span class="line">    goto(<span class="number">90</span>, <span class="number">67</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">180</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">63</span>, <span class="number">10</span>)</span><br><span class="line">    left_rotate(<span class="number">4</span>, <span class="number">2</span>, <span class="number">12</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">3</span>, <span class="number">16</span>)</span><br><span class="line">    width(<span class="number">3</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">6</span>, <span class="number">15</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">5</span>, <span class="number">13.5</span>)</span><br><span class="line">    fill_color_patch(<span class="number">90</span>, <span class="number">80</span>, c=<span class="string">&#x27;#E6E6FA&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">90</span>, <span class="number">80</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#E6E6FA&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">175</span>, <span class="number">10</span>)</span><br><span class="line">    left_rotate(<span class="number">4</span>, <span class="number">10</span>, <span class="number">12</span>)</span><br><span class="line">    left_rotate(<span class="number">4</span>, <span class="number">7</span>, <span class="number">15</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">5</span>, <span class="number">9</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">150</span>, <span class="number">15</span>)</span><br><span class="line">    left_rotate(<span class="number">4</span>, <span class="number">7.5</span>, <span class="number">15</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">3</span>, <span class="number">15</span>)</span><br><span class="line">    right_rotate(<span class="number">2</span>, <span class="number">2</span>, <span class="number">10</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">7</span>, <span class="number">12</span>)</span><br><span class="line">    goto(<span class="number">90</span>, <span class="number">80</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#E6E6FA&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(<span class="number">90</span>, <span class="number">85</span>, c=<span class="string">&#x27;#D6D2F6&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">90</span>, <span class="number">85</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#D6D2F6&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">175</span>, <span class="number">10</span>)</span><br><span class="line">    left_rotate(<span class="number">4</span>, <span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">    left_rotate(<span class="number">4</span>, <span class="number">6</span>, <span class="number">15</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">153</span>, <span class="number">15</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">9.5</span>, <span class="number">15</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">2</span>, <span class="number">15</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">    goto(<span class="number">90</span>, <span class="number">85</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#D6D2F6&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    set_start(<span class="number">90.00</span>, <span class="number">67.00</span>, w=<span class="number">4</span>, c=<span class="string">&#x27;#9392B3&#x27;</span>)</span><br><span class="line">    setheading(<span class="number">327.67</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">180</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">63</span>, <span class="number">10</span>)</span><br><span class="line">    left_rotate(<span class="number">4</span>, <span class="number">2</span>, <span class="number">12</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">3</span>, <span class="number">16</span>)</span><br><span class="line">    width(<span class="number">3</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">6</span>, <span class="number">15</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">5</span>, <span class="number">13.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_cat</span>():</span><br><span class="line">    set_start(<span class="number">34</span>, <span class="number">141</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#C65B03&#x27;</span>)</span><br><span class="line">    draw_circle(<span class="number">5</span>, <span class="string">&#x27;#C65B03&#x27;</span>, color2=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    set_start(<span class="number">33.5</span>, <span class="number">139</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#ED9C22&#x27;</span>)</span><br><span class="line">    draw_circle(<span class="number">3</span>, <span class="string">&#x27;#ED9C22&#x27;</span>, color2=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    fill_color_patch(-<span class="number">23</span>, <span class="number">90</span>, c=<span class="string">&#x27;#850009&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(-<span class="number">23</span>, <span class="number">90</span>, w=<span class="number">2</span>, c=<span class="string">&#x27;#850009&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">80</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">6</span>, <span class="number">4</span>, <span class="number">14.2</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">105</span>, <span class="number">9</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">8</span>, <span class="number">8</span>)</span><br><span class="line">    width(<span class="number">3</span>)</span><br><span class="line">    left_rotate(<span class="number">11</span>, <span class="number">12</span>, <span class="number">10</span>)</span><br><span class="line">    width(<span class="number">2</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">12</span>, <span class="number">12</span>)</span><br><span class="line">    goto(-<span class="number">23</span>, <span class="number">90</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#B80705&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(<span class="number">46</span>, <span class="number">110</span>, c=<span class="string">&#x27;#850009&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">46</span>, <span class="number">110</span>, w=<span class="number">3</span>, c=<span class="string">&#x27;#850009&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">145</span>, <span class="number">9</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">16</span>, <span class="number">8</span>)</span><br><span class="line">    width(<span class="number">2</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">22</span>, <span class="number">2</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">12</span>, <span class="number">9</span>)</span><br><span class="line">    goto(<span class="number">46</span>, <span class="number">110</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#E50703&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(-<span class="number">23</span>, <span class="number">90</span>, c=<span class="string">&#x27;#BE7728&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(-<span class="number">23</span>, <span class="number">90</span>, w=<span class="number">2</span>, c=<span class="string">&#x27;#BE7728&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">80</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">6</span>, <span class="number">4</span>, <span class="number">14.2</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">105</span>, <span class="number">9</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">8</span>, <span class="number">8</span>)</span><br><span class="line">    width(<span class="number">3</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">55</span>, <span class="number">10</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">5</span>, <span class="number">15</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">6.5</span>, <span class="number">16</span>)</span><br><span class="line">    width(<span class="number">2</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">55</span>, <span class="number">10</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">10</span>, <span class="number">8</span>)</span><br><span class="line">    goto(-<span class="number">23</span>, <span class="number">90</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#E4C127&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(<span class="number">20</span>, <span class="number">98</span>, c=<span class="string">&#x27;#DC960D&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">20</span>, <span class="number">98</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#DC960D&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">75</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">12</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">33</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">35</span>, <span class="number">1</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">28</span>, <span class="number">2</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">35</span>, <span class="number">3</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">30</span>, <span class="number">2</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">45</span>, <span class="number">2</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">30</span>, <span class="number">2</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">25</span>, <span class="number">1</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">45</span>, <span class="number">2</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">30</span>, <span class="number">2</span>)</span><br><span class="line">    goto(<span class="number">20</span>, <span class="number">98</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#DC960D&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(<span class="number">22</span>, <span class="number">99</span>, c=<span class="string">&#x27;#839D76&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">22</span>, <span class="number">99</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#839D76&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">25</span>, <span class="number">0</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">30</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">30</span>, <span class="number">2</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">30</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">30</span>, <span class="number">2</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#839D76&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">24</span>, <span class="number">99</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#398640&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">25</span>, <span class="number">0</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">30</span>, <span class="number">2.5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">30</span>, <span class="number">2</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">30</span>, <span class="number">2.5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">30</span>, <span class="number">2</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#398640&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">25.5</span>, <span class="number">101</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#0ADBC9&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">25</span>, <span class="number">0</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">30</span>, <span class="number">1.8</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">30</span>, <span class="number">1</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">30</span>, <span class="number">1.8</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">30</span>, <span class="number">1</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#0ADBC9&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_head</span>():</span><br><span class="line">    fill_color_patch(<span class="number">46</span>, <span class="number">83</span>, c=<span class="string">&#x27;#9392B3&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">46</span>, <span class="number">83</span>, w=<span class="number">4</span>, c=<span class="string">&#x27;#9392B3&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">105</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">8</span>, <span class="number">20</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">10</span>, <span class="number">22</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">13</span>, <span class="number">15</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">3</span>, <span class="number">9</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">12</span>, <span class="number">6</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">30</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">15</span>, <span class="number">3</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">135</span>, <span class="number">8</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">8</span>, <span class="number">8</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">140</span>, <span class="number">8</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">10</span>, <span class="number">8</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">130</span>, <span class="number">8</span>)</span><br><span class="line">    right_rotate(<span class="number">5</span>, <span class="number">7.5</span>, <span class="number">7.5</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">140</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">125</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">5</span>, <span class="number">8</span>, <span class="number">6</span>)</span><br><span class="line">    goto(<span class="number">125</span>, -<span class="number">130</span>)</span><br><span class="line">    set_start(<span class="number">125</span>, -<span class="number">130</span>, w=<span class="number">4</span>, c=<span class="string">&#x27;#9392B3&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">78</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">5</span>, <span class="number">18</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">6</span>, <span class="number">21</span>)</span><br><span class="line">    right_rotate(<span class="number">5</span>, <span class="number">5</span>, <span class="number">18</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">7</span>, <span class="number">20</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">15</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">7</span>, <span class="number">6.5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">130</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">11</span>, <span class="number">4.5</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">140</span>, <span class="number">7</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">12</span>, <span class="number">6</span>)</span><br><span class="line">    right_rotate(<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">130</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">13</span>, <span class="number">3</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">120</span>, <span class="number">8</span>)</span><br><span class="line">    right_rotate(<span class="number">5</span>, <span class="number">10</span>, <span class="number">6.5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">95</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">12</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">5</span>, <span class="number">12</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">5</span>, <span class="number">12</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">5</span>, <span class="number">13</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">6</span>, <span class="number">6</span>)</span><br><span class="line">    left_rotate(<span class="number">5</span>, <span class="number">13.5</span>, <span class="number">7</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">158</span>, <span class="number">8</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">7</span>, <span class="number">7</span>)</span><br><span class="line">    right_rotate(<span class="number">5</span>, <span class="number">15</span>, <span class="number">5</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_face</span>():</span><br><span class="line">    fill_color_patch(<span class="number">46</span>, <span class="number">80</span>, c=<span class="string">&#x27;#E6E6F0&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">46</span>, <span class="number">80</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#E6E6F0&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">105</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">9</span>, <span class="number">20</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">10</span>, <span class="number">22</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">10</span>, <span class="number">15</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">10</span>, <span class="number">6</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">30</span>, <span class="number">1</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">6</span>, <span class="number">6</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">45</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">8</span>, <span class="number">6</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">42</span>, <span class="number">1</span>)</span><br><span class="line">    right_rotate(<span class="number">5</span>, <span class="number">7</span>, <span class="number">5.5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">45</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">15</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">130</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">8</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">30</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">7</span>, <span class="number">18</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">6</span>, <span class="number">21</span>)</span><br><span class="line">    right_rotate(<span class="number">5</span>, <span class="number">5</span>, <span class="number">18</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">7</span>, <span class="number">17</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">15</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">4</span>, <span class="number">5.5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">125</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">11</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">40</span>, <span class="number">4</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">8</span>, <span class="number">7</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">140</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">10</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">4</span>, <span class="number">33</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">5</span>, <span class="number">8</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">100</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">13</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">7</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">4</span>, <span class="number">12</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">5.5</span>, <span class="number">13</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">6</span>, <span class="number">8</span>)</span><br><span class="line">    left_rotate(<span class="number">5</span>, <span class="number">11</span>, <span class="number">6</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">150</span>, <span class="number">8</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">12</span>, <span class="number">7</span>)</span><br><span class="line">    goto(<span class="number">46</span>, <span class="number">80</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#E6E6F0&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(<span class="number">46</span>, <span class="number">75</span>, c=<span class="string">&#x27;#F0F0FA&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">46</span>, <span class="number">75</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#F0F0FA&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">105</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">12</span>, <span class="number">20</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">12</span>, <span class="number">8</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">20</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">10</span>, <span class="number">9</span>)</span><br><span class="line">    left_rotate(<span class="number">5</span>, <span class="number">17</span>, <span class="number">15</span>)</span><br><span class="line">    right_rotate(<span class="number">5</span>, <span class="number">18</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">8</span>, <span class="number">10</span>, <span class="number">21</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">8</span>, <span class="number">20</span>)</span><br><span class="line">    right_rotate(<span class="number">6</span>, <span class="number">15</span>, <span class="number">15</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">    left_rotate(<span class="number">4</span>, <span class="number">18</span>, <span class="number">7</span>)</span><br><span class="line">    right_rotate(<span class="number">5</span>, <span class="number">20</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">6</span>, <span class="number">9</span>, <span class="number">20</span>)</span><br><span class="line">    goto(<span class="number">46</span>, <span class="number">75</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#F0F0FA&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(<span class="number">90</span>, <span class="number">30</span>, c=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">90</span>, <span class="number">30</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">120</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">6</span>, <span class="number">20</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">10</span>, <span class="number">9</span>)</span><br><span class="line">    left_rotate(<span class="number">6</span>, <span class="number">18</span>, <span class="number">15</span>)</span><br><span class="line">    right_rotate(<span class="number">6</span>, <span class="number">20</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">7</span>, <span class="number">7.5</span>, <span class="number">21</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">13</span>, <span class="number">20</span>)</span><br><span class="line">    right_rotate(<span class="number">6</span>, <span class="number">18</span>, <span class="number">14</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">18</span>, <span class="number">9</span>)</span><br><span class="line">    left_rotate(<span class="number">4</span>, <span class="number">20</span>, <span class="number">9</span>)</span><br><span class="line">    right_rotate(<span class="number">7</span>, <span class="number">20</span>, <span class="number">5.5</span>)</span><br><span class="line">    right_rotate(<span class="number">2</span>, <span class="number">15</span>, <span class="number">4.5</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">10</span>, <span class="number">13</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">12</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">2</span>, <span class="number">12</span>)</span><br><span class="line">    left_rotate(<span class="number">6</span>, <span class="number">28</span>, <span class="number">4</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">    right_rotate(<span class="number">5</span>, <span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">    goto(<span class="number">90</span>, <span class="number">30</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    set_start(<span class="number">10.94</span>, <span class="number">89.73</span>, w=<span class="number">4</span>, c=<span class="string">&#x27;#9392B3&#x27;</span>)</span><br><span class="line">    setheading(<span class="number">354.88</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">6</span>, <span class="number">6</span>)</span><br><span class="line">    left_rotate(<span class="number">5</span>, <span class="number">13.5</span>, <span class="number">7</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">158</span>, <span class="number">8</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">7</span>, <span class="number">7</span>)</span><br><span class="line">    right_rotate(<span class="number">5</span>, <span class="number">15</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_mouth</span>():</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(-<span class="number">22</span>, -<span class="number">115</span>, w=<span class="number">2</span>, c=<span class="string">&#x27;#C8C3E2&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">110</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line">    width(<span class="number">3</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">16</span>, <span class="number">5</span>)</span><br><span class="line">    width(<span class="number">2</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">12</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">12</span>, <span class="number">4</span>)</span><br><span class="line">    set_start(-<span class="number">20</span>, -<span class="number">112</span>, w=<span class="number">4</span>, c=<span class="string">&#x27;#9790B5&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">106</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">15</span>, <span class="number">4</span>)</span><br><span class="line">    width(<span class="number">3</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">18</span>, <span class="number">4</span>)</span><br><span class="line">    width(<span class="number">2</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">20</span>, <span class="number">4</span>)</span><br><span class="line">    fill_color_patch(-<span class="number">20</span>, -<span class="number">68</span>, c=<span class="string">&#x27;#ABA9B4&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(-<span class="number">20</span>, -<span class="number">68</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#ABA9B4&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">170</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">5</span>, <span class="number">20</span>, <span class="number">7.2</span>)</span><br><span class="line">    left_rotate(<span class="number">5</span>, <span class="number">15</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">4</span>, <span class="number">6</span>, <span class="number">5</span>)</span><br><span class="line">    goto(-<span class="number">20</span>, -<span class="number">68</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#ABA9B4&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(-<span class="number">18</span>, -<span class="number">70</span>, c=<span class="string">&#x27;#BC958C&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(-<span class="number">18</span>, -<span class="number">70</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#BC958C&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">170</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">7</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">5</span>, <span class="number">20</span>, <span class="number">6.2</span>)</span><br><span class="line">    left_rotate(<span class="number">4</span>, <span class="number">18.5</span>, <span class="number">6.2</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line">    goto(-<span class="number">18</span>, -<span class="number">70</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#550900&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(-<span class="number">22</span>, -<span class="number">90</span>, c=<span class="string">&#x27;#D04C36&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(-<span class="number">22</span>, -<span class="number">90</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#D04C36&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">152</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">17</span>, <span class="number">4.8</span>)</span><br><span class="line">    left_rotate(<span class="number">5</span>, <span class="number">14.5</span>, <span class="number">4.5</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">85</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">5</span>, <span class="number">14</span>, <span class="number">5.8</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#D04C36&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(-<span class="number">15</span>, -<span class="number">65</span>, c=<span class="string">&#x27;#DAB4C5&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(-<span class="number">15</span>, -<span class="number">65</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#DAB4C5&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">170</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">7</span>, <span class="number">4.5</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">30</span>, <span class="number">2</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">6</span>, <span class="number">5.5</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">32</span>, <span class="number">2</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">8</span>, <span class="number">5</span>)</span><br><span class="line">    goto(-<span class="number">15</span>, -<span class="number">65</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#DAB4C5&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(-<span class="number">14</span>, -<span class="number">6</span>, c=<span class="string">&#x27;#AAA6AA&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(-<span class="number">14</span>, -<span class="number">65</span>, w=<span class="number">1.5</span>, c=<span class="string">&#x27;#AAA6AA&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">155</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">10</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">4</span>, <span class="number">18</span>, <span class="number">2</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">6</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">30</span>, <span class="number">2</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>)</span><br><span class="line">    goto(-<span class="number">14</span>, -<span class="number">65</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    set_start(-<span class="number">3</span>, -<span class="number">78</span>, w=<span class="number">1.5</span>, c=<span class="string">&#x27;#AAA6AA&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">    fill_color_patch(-<span class="number">2</span>, -<span class="number">62</span>, c=<span class="string">&#x27;#ADA5BC&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(-<span class="number">2</span>, -<span class="number">62</span>, w=<span class="number">2</span>, c=<span class="string">&#x27;#ADA5BC&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">150</span>, <span class="number">4</span>)</span><br><span class="line">    width(<span class="number">3</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">12</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">18</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">16</span>, <span class="number">5.5</span>)</span><br><span class="line">    width(<span class="number">2</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">16</span>, <span class="number">5.5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">23</span>, <span class="number">5</span>)</span><br><span class="line">    set_start(-<span class="number">2</span>, -<span class="number">62</span>, w=<span class="number">2</span>, c=<span class="string">&#x27;#ADA5BC&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">135</span>, <span class="number">4</span>)</span><br><span class="line">    width(<span class="number">3</span>)</span><br><span class="line">    right_rotate(<span class="number">2</span>, <span class="number">13</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">2</span>, <span class="number">18</span>, <span class="number">4</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">16</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">22</span>, <span class="number">5</span>)</span><br><span class="line">    width(<span class="number">2</span>)</span><br><span class="line">    right_rotate(<span class="number">2</span>, <span class="number">22</span>, <span class="number">5</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(<span class="number">0</span>, -<span class="number">60</span>, c=<span class="string">&#x27;#F0F0FA&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">0</span>, -<span class="number">60</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#F0F0FA&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">140</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">12</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">20</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">16</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">28</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">100</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">5</span>, <span class="number">11</span>, <span class="number">9.8</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">95</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">30</span>, <span class="number">4.5</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">18</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">17</span>, <span class="number">4.5</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line">    goto(<span class="number">0</span>, -<span class="number">60</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#F0F0FA&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(<span class="number">0</span>, -<span class="number">60</span>, c=<span class="string">&#x27;#F0F0FA&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">0</span>, -<span class="number">60</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#F0F0FA&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">140</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">12</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">20</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">16</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">28</span>, <span class="number">3</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">110</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">5</span>, <span class="number">10</span>, <span class="number">4</span>)</span><br><span class="line">    goto(<span class="number">0</span>, -<span class="number">60</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">20</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">5</span>, <span class="number">8</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">130</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">22</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">18</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">16</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">8</span>, <span class="number">4</span>)</span><br><span class="line">    goto(<span class="number">0</span>, -<span class="number">60</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#E6E6F0&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_eye</span>():</span><br><span class="line">    <span class="comment"># 左眼</span></span><br><span class="line">    fill_color_patch(-<span class="number">40</span>, -<span class="number">30</span>, c=<span class="string">&#x27;#6A654C&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(-<span class="number">40</span>, -<span class="number">30</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#6A654C&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">175</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">2</span>, <span class="number">12</span>, <span class="number">9</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">12</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">15.5</span>, <span class="number">7</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">10</span>, <span class="number">8.8</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">35</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">90</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">16</span>, <span class="number">4</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">145</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">15</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">16</span>, <span class="number">2</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">14</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">17</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">10</span>, <span class="number">9</span>)</span><br><span class="line">    goto(-<span class="number">40</span>, -<span class="number">30</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#6A654C&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(-<span class="number">42</span>, -<span class="number">30</span>, c=<span class="string">&#x27;#6A654C&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(-<span class="number">42</span>, -<span class="number">30</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#6A654C&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">180</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">2</span>, <span class="number">12</span>, <span class="number">9</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">13</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">17</span>, <span class="number">7</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">40</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">12</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">18</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">11</span>, <span class="number">10</span>)</span><br><span class="line">    goto(-<span class="number">42</span>, -<span class="number">30</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(-<span class="number">56</span>, -<span class="number">25</span>, c=<span class="string">&#x27;#2E0601&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(-<span class="number">56</span>, -<span class="number">25</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#2E0601&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">145</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">2</span>, <span class="number">16</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">5</span>, <span class="number">14</span>, <span class="number">6</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">17</span>, <span class="number">6</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">11</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">13</span>, <span class="number">6</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">16</span>, <span class="number">6</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">15</span>, <span class="number">6</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">13</span>, <span class="number">5</span>)</span><br><span class="line">    goto(-<span class="number">56</span>, -<span class="number">25</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#2E0601&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(-<span class="number">59</span>, -<span class="number">25</span>, c=<span class="string">&#x27;#B80C01&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(-<span class="number">59</span>, -<span class="number">25</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#B80C01&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">150</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">2</span>, <span class="number">18</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">5</span>, <span class="number">14</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">16</span>, <span class="number">6</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">14</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">17.5</span>, <span class="number">6</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">14</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">13</span>, <span class="number">5</span>)</span><br><span class="line">    goto(-<span class="number">59</span>, -<span class="number">25</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#B80C01&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    set_start(-<span class="number">87</span>, -<span class="number">15</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">    draw_circle(<span class="number">12</span>, <span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">    set_start(-<span class="number">90.3</span>, -<span class="number">4.5</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    draw_circle(<span class="number">6.5</span>, <span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    set_start(-<span class="number">81</span>, -<span class="number">26</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    draw_circle(<span class="number">3</span>, <span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    <span class="comment"># 右眼</span></span><br><span class="line">    fill_color_patch(<span class="number">53</span>, -<span class="number">51</span>, c=<span class="string">&#x27;#6A654C&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">53</span>, -<span class="number">51</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#6A654C&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">150</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">12</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">4</span>, <span class="number">13.5</span>, <span class="number">10</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">13</span>, <span class="number">7</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">10.5</span>, <span class="number">9.5</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">30</span>, <span class="number">3</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">80</span>, <span class="number">3</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">16</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">145</span>, <span class="number">4</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">16</span>, <span class="number">3</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">16</span>, <span class="number">2</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">15</span>, <span class="number">10</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">17</span>, <span class="number">10</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">12</span>, <span class="number">9</span>)</span><br><span class="line">    goto(<span class="number">53</span>, -<span class="number">51</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#6A654C&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(<span class="number">56</span>, -<span class="number">50</span>, c=<span class="string">&#x27;#6A654C&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">56</span>, -<span class="number">50</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#6A654C&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">160</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">12</span>, <span class="number">9</span>)</span><br><span class="line">    left_rotate(<span class="number">4</span>, <span class="number">15</span>, <span class="number">10</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">16</span>, <span class="number">7</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">41</span>, <span class="number">4.5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">13</span>, <span class="number">11</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">18</span>, <span class="number">10</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">14.5</span>, <span class="number">9</span>)</span><br><span class="line">    goto(<span class="number">56</span>, -<span class="number">50</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(<span class="number">67</span>, -<span class="number">50</span>, c=<span class="string">&#x27;#2E0601&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">67</span>, -<span class="number">50</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#2E0601&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">148</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">13</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">5</span>, <span class="number">14</span>, <span class="number">6</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">16</span>, <span class="number">6</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">17</span>, <span class="number">6</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">15</span>, <span class="number">6</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">12.5</span>, <span class="number">6</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">12</span>, <span class="number">4</span>)</span><br><span class="line">    goto(<span class="number">67</span>, -<span class="number">50</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#2E0601&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(<span class="number">70</span>, -<span class="number">50</span>, c=<span class="string">&#x27;#2E0601&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">70</span>, -<span class="number">50</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#2E0601&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">150</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">16</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">5</span>, <span class="number">12</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">18</span>, <span class="number">6</span>)</span><br><span class="line">    left_rotate(<span class="number">4</span>, <span class="number">14</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">16</span>, <span class="number">6</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">15</span>, <span class="number">6</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">13</span>, <span class="number">5</span>)</span><br><span class="line">    goto(<span class="number">70</span>, -<span class="number">50</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#B80C01&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    set_start(<span class="number">101</span>, -<span class="number">49</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">    draw_circle(<span class="number">12</span>, <span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">    set_start(<span class="number">88.8</span>, -<span class="number">37</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    draw_circle(<span class="number">6.5</span>, <span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    set_start(<span class="number">91</span>, -<span class="number">57</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    draw_circle(<span class="number">3</span>, <span class="string">&#x27;white&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_eyebrow</span>():</span><br><span class="line">    set_start(-<span class="number">114.42</span>, <span class="number">43.96</span>, w=<span class="number">2</span>, c=<span class="string">&#x27;#9392B3&#x27;</span>)</span><br><span class="line">    setheading(<span class="number">50.88</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">5</span>, <span class="number">9</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">10</span>, <span class="number">13</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">2</span>, <span class="number">12</span>)</span><br><span class="line">    left_rotate(<span class="number">6</span>, <span class="number">28</span>, <span class="number">3.5</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">    right_rotate(<span class="number">5</span>, <span class="number">10</span>, <span class="number">12</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">11</span>, <span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_nose</span>():</span><br><span class="line">    fill_color_patch(<span class="number">0</span>, -<span class="number">28</span>, c=<span class="string">&#x27;#361C12&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">0</span>, -<span class="number">28</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#361C12&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">105</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">12</span>, <span class="number">3</span>)</span><br><span class="line">    left_rotate(<span class="number">7</span>, <span class="number">15</span>, <span class="number">3</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">15</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">4</span>, <span class="number">21</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">15</span>, <span class="number">2</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">7</span>, <span class="number">3.5</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#361C12&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(<span class="number">0</span>, -<span class="number">32</span>, c=<span class="string">&#x27;#6A2807&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">0</span>, -<span class="number">32</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#6C3D25&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">105</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">14</span>, <span class="number">3</span>)</span><br><span class="line">    left_rotate(<span class="number">6</span>, <span class="number">17</span>, <span class="number">2</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">8</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">14</span>, <span class="number">3.2</span>)</span><br><span class="line">    left_rotate(<span class="number">4</span>, <span class="number">21</span>, <span class="number">3</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">15</span>, <span class="number">2.5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">7</span>, <span class="number">2.5</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#6A2807&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(<span class="number">10</span>, -<span class="number">39</span>, c=<span class="string">&#x27;#B14D14&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">9</span>, -<span class="number">39</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#B14D14&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">30</span>, <span class="number">0</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">30</span>, <span class="number">1.5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">30</span>, <span class="number">1</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">30</span>, <span class="number">1.5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">30</span>, <span class="number">1</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#B14D14&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_cheek</span>():</span><br><span class="line">    <span class="comment"># 脸蛋</span></span><br><span class="line">    fill_color_patch(-<span class="number">77</span>, -<span class="number">57</span>, c=<span class="string">&#x27;#FCE5E7&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(-<span class="number">77</span>, -<span class="number">57</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#FCE5E7&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">70</span>, <span class="number">0</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">30</span>, <span class="number">9</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">30</span>, <span class="number">6</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">30</span>, <span class="number">9</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">30</span>, <span class="number">6</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#FCE5E7&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(-<span class="number">80</span>, -<span class="number">59</span>, c=<span class="string">&#x27;#FDBFC8&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(-<span class="number">80</span>, -<span class="number">59</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#FDBFC8&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">70</span>, <span class="number">0</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">30</span>, <span class="number">7</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">30</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">30</span>, <span class="number">7</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">30</span>, <span class="number">4</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#FDBFC8&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(<span class="number">94</span>, -<span class="number">87</span>, c=<span class="string">&#x27;#FCE5E7&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">94</span>, -<span class="number">87</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#FCE5E7&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">25</span>, <span class="number">0</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">30</span>, <span class="number">10</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">30</span>, <span class="number">7</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">30</span>, <span class="number">10</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">30</span>, <span class="number">7</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#FCE5E7&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(<span class="number">90</span>, -<span class="number">89</span>, c=<span class="string">&#x27;#FDBFC8&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">90</span>, -<span class="number">89</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#FDBFC8&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">25</span>, <span class="number">0</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">30</span>, <span class="number">7</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">30</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">30</span>, <span class="number">7</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">30</span>, <span class="number">5</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#FDBFC8&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_forehead</span>():</span><br><span class="line">    <span class="comment"># 额头</span></span><br><span class="line">    set_start(<span class="number">22</span>, <span class="number">39</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#C81C0F&#x27;</span>)</span><br><span class="line">    draw_circle(<span class="number">4</span>, <span class="string">&#x27;#C81C0F&#x27;</span>)</span><br><span class="line">    fill_color_patch(<span class="number">27</span>, <span class="number">36.5</span>, c=<span class="string">&#x27;#C81C0F&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">27</span>, <span class="number">36.5</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#C81C0F&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">90</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">30</span>, <span class="number">4.5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">18</span>, <span class="number">3</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">140</span>, <span class="number">3</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">15</span>, <span class="number">5</span>)</span><br><span class="line">    goto(<span class="number">27</span>, <span class="number">36.5</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#EF0F0C&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(<span class="number">21</span>, <span class="number">42.5</span>, c=<span class="string">&#x27;#C81C0F&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">21</span>, <span class="number">42.5</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#C81C0F&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">145</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">32</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">23</span>, <span class="number">3</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">130</span>, <span class="number">3</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">18</span>, <span class="number">4.5</span>)</span><br><span class="line">    goto(<span class="number">21</span>, <span class="number">42.5</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#EF0F0C&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(<span class="number">13</span>, <span class="number">39</span>, c=<span class="string">&#x27;#C81C0F&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">13</span>, <span class="number">39</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#C81C0F&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">170</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">32</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">23</span>, <span class="number">3</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">130</span>, <span class="number">3</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">18</span>, <span class="number">4.5</span>)</span><br><span class="line">    goto(<span class="number">13</span>, <span class="number">39</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#EF0F0C&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(<span class="number">12</span>, <span class="number">32.5</span>, c=<span class="string">&#x27;#C81C0F&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">12</span>, <span class="number">32.5</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#C81C0F&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">132</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">32</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">23</span>, <span class="number">3</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">130</span>, <span class="number">3</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">20</span>, <span class="number">4.5</span>)</span><br><span class="line">    goto(<span class="number">12</span>, <span class="number">32.5</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#EF0F0C&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(<span class="number">18</span>, <span class="number">28</span>, c=<span class="string">&#x27;#C81C0F&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">18</span>, <span class="number">28</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#C81C0F&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">32</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">32</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">23</span>, <span class="number">2.5</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">130</span>, <span class="number">2</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">20</span>, <span class="number">4</span>)</span><br><span class="line">    goto(<span class="number">18</span>, <span class="number">28</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#EF0F0C&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(<span class="number">26</span>, <span class="number">32</span>, c=<span class="string">&#x27;#C81C0F&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">26</span>, <span class="number">32</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#C81C0F&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">18</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">30</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">20</span>, <span class="number">2.8</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">140</span>, <span class="number">2</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">20</span>, <span class="number">4</span>)</span><br><span class="line">    goto(<span class="number">26</span>, <span class="number">32</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#EF0F0C&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_foot</span>():</span><br><span class="line">    <span class="comment"># 右脚</span></span><br><span class="line">    fill_color_patch(<span class="number">72</span>, -<span class="number">253</span>, c=<span class="string">&#x27;#452100&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">72</span>, -<span class="number">253</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#452100&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">150</span>, <span class="number">8</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">20</span>, <span class="number">4</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">9</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">12</span>, <span class="number">6</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">11</span>, <span class="number">6</span>)</span><br><span class="line">    goto(<span class="number">72</span>, -<span class="number">253</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#C782B0&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(<span class="number">70</span>, -<span class="number">253</span>, c=<span class="string">&#x27;#452100&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">70</span>, -<span class="number">253</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#452100&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">150</span>, <span class="number">6</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">20</span>, <span class="number">4</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">14</span>, <span class="number">6</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">11</span>, <span class="number">6</span>)</span><br><span class="line">    goto(<span class="number">70</span>, -<span class="number">253</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#E6D1E6&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(<span class="number">72</span>, -<span class="number">253</span>, c=<span class="string">&#x27;#452100&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">72</span>, -<span class="number">253</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#452100&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">150</span>, <span class="number">8</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">20</span>, <span class="number">4</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">9</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">12</span>, <span class="number">6</span>)</span><br><span class="line">    right_rotate(<span class="number">2</span>, <span class="number">11</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">95</span>, <span class="number">6</span>)</span><br><span class="line">    right_rotate(<span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>)</span><br><span class="line">    goto(<span class="number">72</span>, -<span class="number">253</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#552603&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(<span class="number">70</span>, -<span class="number">253</span>, c=<span class="string">&#x27;#452100&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">70</span>, -<span class="number">253</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#452100&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">150</span>, <span class="number">8</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">18</span>, <span class="number">3</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">12</span>, <span class="number">6</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">14</span>, <span class="number">6</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">10</span>, <span class="number">4</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">95</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">5</span>, <span class="number">5.8</span>, <span class="number">5</span>)</span><br><span class="line">    goto(<span class="number">70</span>, -<span class="number">253</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#8E4B05&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(<span class="number">33</span>, -<span class="number">270</span>, c=<span class="string">&#x27;#561B03&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">33</span>, -<span class="number">270</span>, w=<span class="number">2</span>, c=<span class="string">&#x27;#561B03&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">64</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">7</span>, <span class="number">4.8</span>)</span><br><span class="line">    width(<span class="number">1</span>)</span><br><span class="line">    right_rotate(<span class="number">2</span>, <span class="number">7</span>, <span class="number">4.8</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">80</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">8</span>, <span class="number">3</span>)</span><br><span class="line">    right_rotate(<span class="number">5</span>, <span class="number">40</span>, <span class="number">2</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">50</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">50</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">2</span>, <span class="number">33</span>, <span class="number">6</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">33</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">7</span>, <span class="number">4</span>)</span><br><span class="line">    goto(<span class="number">33</span>, -<span class="number">270</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#E3A830&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(<span class="number">68</span>, -<span class="number">263</span>, c=<span class="string">&#x27;#561B03&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">68</span>, -<span class="number">263</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#561B03&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">50</span>, <span class="number">0</span>)</span><br><span class="line">    right_rotate(<span class="number">6</span>, <span class="number">40</span>, <span class="number">1.5</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">10</span>, <span class="number">1.5</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">10</span>, <span class="number">1.5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">110</span>, <span class="number">1.5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">10</span>, <span class="number">1.5</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">10</span>, <span class="number">1.5</span>)</span><br><span class="line">    right_rotate(<span class="number">6</span>, <span class="number">40</span>, <span class="number">1.7</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#E3A830&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    <span class="comment"># 左脚</span></span><br><span class="line">    fill_color_patch(-<span class="number">26</span>, -<span class="number">257</span>, c=<span class="string">&#x27;#452100&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(-<span class="number">26</span>, -<span class="number">257</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#452100&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">150</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">12</span>, <span class="number">4</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">20</span>, <span class="number">4</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">5.5</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">12.5</span>, <span class="number">6</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">10</span>, <span class="number">6</span>)</span><br><span class="line">    goto(-<span class="number">26</span>, -<span class="number">257</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#C782B0&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(-<span class="number">27</span>, -<span class="number">257</span>, c=<span class="string">&#x27;#452100&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(-<span class="number">27</span>, -<span class="number">257</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#452100&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">152</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">2</span>, <span class="number">12</span>, <span class="number">4</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">24</span>, <span class="number">4</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">11</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">20</span>, <span class="number">6</span>)</span><br><span class="line">    right_rotate(<span class="number">2</span>, <span class="number">10</span>, <span class="number">8</span>)</span><br><span class="line">    goto(-<span class="number">27</span>, -<span class="number">257</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#E6D1E6&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(-<span class="number">26</span>, -<span class="number">257</span>, c=<span class="string">&#x27;#452100&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(-<span class="number">26</span>, -<span class="number">257</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#452100&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">150</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">12</span>, <span class="number">4</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">20</span>, <span class="number">4</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">5.5</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">12.5</span>, <span class="number">6</span>)</span><br><span class="line">    right_rotate(<span class="number">2</span>, <span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">100</span>, <span class="number">6</span>)</span><br><span class="line">    right_rotate(<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">60</span>, <span class="number">6</span>)</span><br><span class="line">    right_rotate(<span class="number">2</span>, <span class="number">7</span>, <span class="number">5</span>)</span><br><span class="line">    goto(-<span class="number">26</span>, -<span class="number">257</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#703507&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(-<span class="number">27</span>, -<span class="number">257</span>, c=<span class="string">&#x27;#753507&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(-<span class="number">27</span>, -<span class="number">257</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#753507&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">152</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">2</span>, <span class="number">12</span>, <span class="number">4</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">24</span>, <span class="number">4</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">11</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">20</span>, <span class="number">6</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">100</span>, <span class="number">6</span>)</span><br><span class="line">    right_rotate(<span class="number">5</span>, <span class="number">5</span>, <span class="number">4.5</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">60</span>, <span class="number">6</span>)</span><br><span class="line">    right_rotate(<span class="number">2</span>, <span class="number">7</span>, <span class="number">5</span>)</span><br><span class="line">    goto(-<span class="number">27</span>, -<span class="number">257</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#BC6A19&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(-<span class="number">71</span>, -<span class="number">263</span>, c=<span class="string">&#x27;#753507&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(-<span class="number">71</span>, -<span class="number">263</span>, w=<span class="number">2</span>, c=<span class="string">&#x27;#753507&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">68</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">2</span>, <span class="number">10</span>, <span class="number">4.3</span>)</span><br><span class="line">    pencolor(<span class="string">&#x27;#753507&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">80</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">12</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">80</span>, <span class="number">4</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">10</span>, <span class="number">4</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">93</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">12</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">45</span>, <span class="number">4</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">60</span>, <span class="number">3</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">18</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">18</span>, <span class="number">5</span>)</span><br><span class="line">    pencolor(<span class="string">&#x27;#561B03&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">9</span>, <span class="number">4.8</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">92</span>, <span class="number">4</span>)</span><br><span class="line">    goto(-<span class="number">71</span>, -<span class="number">263</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#E3A830&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(-<span class="number">39</span>, -<span class="number">272</span>, c=<span class="string">&#x27;#561B03&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(-<span class="number">39</span>, -<span class="number">272</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#561B03&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">80</span>, <span class="number">0</span>)</span><br><span class="line">    right_rotate(<span class="number">7</span>, <span class="number">35</span>, <span class="number">1.7</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">25</span>, <span class="number">2.3</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">15</span>, <span class="number">2</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">100</span>, <span class="number">1.5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">12</span>, <span class="number">1.7</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">10</span>, <span class="number">1.7</span>)</span><br><span class="line">    right_rotate(<span class="number">6</span>, <span class="number">40</span>, <span class="number">1.8</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#E3A830&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_body</span>():</span><br><span class="line">    <span class="comment"># 身体轮廓</span></span><br><span class="line">    fill_color_patch(<span class="number">28</span>, -<span class="number">162</span>, c=<span class="string">&#x27;#94020C&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">28</span>, -<span class="number">162</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#94020C&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">145</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">5</span>, <span class="number">11.5</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">8</span>, <span class="number">3</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">50</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">6</span>, <span class="number">6.3</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">90</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">3</span>, <span class="number">12</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">3</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">2</span>, <span class="number">15</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">18</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">20</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">6</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">30</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">5</span>, <span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">12</span>, <span class="number">5</span>)</span><br><span class="line">    goto(<span class="number">28</span>, -<span class="number">162</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#94020C&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    <span class="comment"># 脖子</span></span><br><span class="line">    fill_color_patch(<span class="number">10</span>, -<span class="number">160</span>, c=<span class="string">&#x27;#FFB58A&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">9</span>, -<span class="number">160</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#FFB58A&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">142</span>, <span class="number">3</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">16</span>, <span class="number">4.8</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">15</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">2</span>, <span class="number">8</span>, <span class="number">4</span>)</span><br><span class="line">    goto(<span class="number">10</span>, -<span class="number">160</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#FFB58A&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    <span class="comment"># 右衣领</span></span><br><span class="line">    fill_color_patch(<span class="number">20</span>, -<span class="number">162</span>, c=<span class="string">&#x27;#E5B712&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">20</span>, -<span class="number">162</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#E5B712&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">140</span>, <span class="number">3</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">8</span>, <span class="number">3.5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">32</span>, <span class="number">7</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">7</span>, <span class="number">1.5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">142</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">11</span>, <span class="number">4</span>)</span><br><span class="line">    goto(<span class="number">20</span>, -<span class="number">162</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#E5B712&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    <span class="comment"># 中间最大的衣领</span></span><br><span class="line">    fill_color_patch(-<span class="number">29</span>, -<span class="number">155</span>, c=<span class="string">&#x27;#E5B712&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(-<span class="number">29</span>, -<span class="number">155</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#E5B712&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">135</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">8</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">7</span>, <span class="number">8</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">17</span>, <span class="number">1</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">1</span>, <span class="number">9</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">19</span>, <span class="number">4</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">17.5</span>, <span class="number">1.5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">4</span>, <span class="number">10</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">2</span>, <span class="number">12.5</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">19</span>, <span class="number">1.8</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">140</span>, <span class="number">1</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">23</span>, <span class="number">1.8</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">6</span>, <span class="number">2</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">132</span>, <span class="number">7</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">59</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">62</span>, <span class="number">2.5</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">17</span>, <span class="number">1</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">3</span>, <span class="number">2.5</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">26</span>, <span class="number">1</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">5</span>, <span class="number">2.5</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">20</span>, <span class="number">1.5</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">82</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">6</span>, <span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">2.8</span>, <span class="number">4.7</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">34</span>, <span class="number">3</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">1</span>, <span class="number">4.8</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">8</span>, <span class="number">3</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">20.8</span>, <span class="number">2.5</span>)</span><br><span class="line">    right_rotate(<span class="number">6</span>, <span class="number">8</span>, <span class="number">6</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">6.8</span>, <span class="number">5</span>)</span><br><span class="line">    goto(-<span class="number">29</span>, -<span class="number">155</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#E5B712&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    set_start(-<span class="number">70</span>, -<span class="number">214</span>, w=<span class="number">1.5</span>, c=<span class="string">&#x27;#94020C&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">175</span>, <span class="number">2</span>)</span><br><span class="line">    left_rotate(<span class="number">7</span>, <span class="number">35</span>, <span class="number">1.8</span>)</span><br><span class="line">    set_start(-<span class="number">50</span>, -<span class="number">211</span>, w=<span class="number">1.5</span>, c=<span class="string">&#x27;#94020C&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">170</span>, <span class="number">3</span>)</span><br><span class="line">    right_rotate(<span class="number">5</span>, <span class="number">36</span>, <span class="number">1.7</span>)</span><br><span class="line">    <span class="comment"># 左侧手臂黄边</span></span><br><span class="line">    fill_color_patch(-<span class="number">41.5</span>, -<span class="number">153</span>, c=<span class="string">&#x27;#E5B712&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(-<span class="number">41.5</span>, -<span class="number">153</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#E5B712&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">154</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">10.2</span>, <span class="number">6</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">10.5</span>, <span class="number">4.5</span>)</span><br><span class="line">    right_rotate(<span class="number">5</span>, <span class="number">5.5</span>, <span class="number">4.7</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">115</span>, <span class="number">5.5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">65</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">4</span>, <span class="number">11.5</span>, <span class="number">6</span>)</span><br><span class="line">    left_rotate(<span class="number">5</span>, <span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line">    goto(-<span class="number">41.5</span>, -<span class="number">153</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#E5B712&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    <span class="comment"># 右下衣角</span></span><br><span class="line">    fill_color_patch(<span class="number">57</span>, -<span class="number">218</span>, c=<span class="string">&#x27;#E5B712&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">57</span>, -<span class="number">218</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#E5B712&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">175</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">6</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">31</span>, <span class="number">0.5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">10</span>, <span class="number">1.5</span>)</span><br><span class="line">    right_rotate(<span class="number">2</span>, <span class="number">35</span>, <span class="number">1.5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">76</span>, <span class="number">11</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">100</span>, <span class="number">1</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">20</span>, <span class="number">2</span>)</span><br><span class="line">    goto(<span class="number">57</span>, -<span class="number">218</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#E5B712&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    set_start(<span class="number">53</span>, -<span class="number">219</span>, w=<span class="number">1.5</span>, c=<span class="string">&#x27;#94020C&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">170</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">6</span>, <span class="number">40</span>, <span class="number">1.4</span>)</span><br><span class="line">    <span class="comment"># 修复头的边框</span></span><br><span class="line">    set_start(<span class="number">125</span>, -<span class="number">130</span>, w=<span class="number">4</span>, c=<span class="string">&#x27;#9392B3&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">78</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">5</span>, <span class="number">18</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">6</span>, <span class="number">21</span>)</span><br><span class="line">    right_rotate(<span class="number">5</span>, <span class="number">5</span>, <span class="number">18</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">7</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_hand</span>():</span><br><span class="line">    <span class="comment"># 右手</span></span><br><span class="line">    fill_color_patch(<span class="number">81</span>, -<span class="number">179</span>, c=<span class="string">&#x27;#877E96&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">81</span>, -<span class="number">179</span>, w=<span class="number">2</span>, c=<span class="string">&#x27;#877E96&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">125</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">2</span>, <span class="number">15</span>, <span class="number">4</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">30</span>, <span class="number">1.5</span>)</span><br><span class="line">    right_rotate(<span class="number">2</span>, <span class="number">30</span>, <span class="number">2</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">148</span>, <span class="number">6</span>)</span><br><span class="line">    right_rotate(<span class="number">2</span>, <span class="number">30</span>, <span class="number">3</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">50</span>, <span class="number">3</span>)</span><br><span class="line">    right_rotate(<span class="number">2</span>, <span class="number">20</span>, <span class="number">3</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">155</span>, <span class="number">6</span>)</span><br><span class="line">    right_rotate(<span class="number">2</span>, <span class="number">30</span>, <span class="number">3</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">50</span>, <span class="number">3</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">30</span>, <span class="number">3.5</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">155</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">30</span>, <span class="number">3</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">55</span>, <span class="number">3</span>)</span><br><span class="line">    right_rotate(<span class="number">2</span>, <span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line">    goto(<span class="number">81</span>, -<span class="number">179</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#DFDBF1&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(<span class="number">51.68</span>, -<span class="number">193.93</span>, c=<span class="string">&#x27;#A0A6A1&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">51.68</span>, -<span class="number">193.93</span>, w=<span class="number">2</span>, c=<span class="string">&#x27;#A0A6A1&#x27;</span>)</span><br><span class="line">    setheading(<span class="number">295</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">94</span>, <span class="number">3</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">12</span>, <span class="number">4.5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">110</span>, <span class="number">4</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">7</span>, <span class="number">4.5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">60</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">7</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">2</span>, <span class="number">12</span>, <span class="number">4.5</span>)</span><br><span class="line">    width(<span class="number">1</span>)</span><br><span class="line">    pencolor(<span class="string">&#x27;#94020C&#x27;</span>)</span><br><span class="line">    goto(<span class="number">51.68</span>, -<span class="number">193.93</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#DFE9E1&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(<span class="number">28</span>, -<span class="number">162</span>, c=<span class="string">&#x27;#94020C&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">28</span>, -<span class="number">162</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#94020C&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">145</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line">    pencolor(<span class="string">&#x27;#A0A6A1&#x27;</span>)</span><br><span class="line">    width(<span class="number">2</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">94</span>, <span class="number">3</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">13</span>, <span class="number">4</span>)</span><br><span class="line">    pencolor(<span class="string">&#x27;#824A0C&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">55</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">4</span>, <span class="number">6.2</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line">    width(<span class="number">1</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">18</span>, <span class="number">3</span>)</span><br><span class="line">    pencolor(<span class="string">&#x27;#F2D95D&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line">    goto(<span class="number">28</span>, -<span class="number">163</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#F2D918&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    <span class="comment"># 左手</span></span><br><span class="line">    fill_color_patch(-<span class="number">71.76</span>, -<span class="number">185.88</span>, c=<span class="string">&#x27;#94020C&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(-<span class="number">71.76</span>, -<span class="number">185.88</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#94020C&#x27;</span>)</span><br><span class="line">    setheading(<span class="number">44.8</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">30</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">5</span>, <span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">12</span>, <span class="number">5</span>)</span><br><span class="line">    pencolor(<span class="string">&#x27;#996B09&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">50</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">75</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">5</span>, <span class="number">2</span>, <span class="number">7.5</span>)</span><br><span class="line">    width(<span class="number">2</span>)</span><br><span class="line">    pencolor(<span class="string">&#x27;#B4660D&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">75</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">4</span>, <span class="number">8</span>, <span class="number">4</span>)</span><br><span class="line">    goto(-<span class="number">71.76</span>, -<span class="number">185.88</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#F2D918&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(-<span class="number">88</span>, -<span class="number">134</span>, c=<span class="string">&#x27;#877E96&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(-<span class="number">88</span>, -<span class="number">134</span>, w=<span class="number">2</span>, c=<span class="string">&#x27;#877E96&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">95</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">10</span>, <span class="number">4</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">48</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">8</span>, <span class="number">3</span>)</span><br><span class="line">    left_rotate(<span class="number">5</span>, <span class="number">29</span>, <span class="number">2</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">8</span>, <span class="number">3</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">45</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">24</span>, <span class="number">3.5</span>)</span><br><span class="line">    set_start(-<span class="number">106.5</span>, -<span class="number">129</span>, w=<span class="number">2</span>, c=<span class="string">&#x27;#877E96&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">140</span>, <span class="number">6</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">8</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">10</span>, <span class="number">3</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">35</span>, <span class="number">2.5</span>)</span><br><span class="line">    set_start(-<span class="number">119</span>, -<span class="number">141</span>, w=<span class="number">2</span>, c=<span class="string">&#x27;#877E96&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">150</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">15</span>, <span class="number">3.7</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">40</span>, <span class="number">2.5</span>)</span><br><span class="line">    set_start(-<span class="number">118</span>, -<span class="number">149</span>, w=<span class="number">2</span>, c=<span class="string">&#x27;#877E96&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">150</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">15</span>, <span class="number">4.5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">40</span>, <span class="number">2.5</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">15</span>, <span class="number">3</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">55</span>, <span class="number">10</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">70</span>, <span class="number">10</span>)</span><br><span class="line">    left_rotate(<span class="number">5</span>, <span class="number">16</span>, <span class="number">6.5</span>)</span><br><span class="line">    goto(-<span class="number">88</span>, -<span class="number">134</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#DFDBF1&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(-<span class="number">112</span>, -<span class="number">164</span>, c=<span class="string">&#x27;#A0A6A1&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(-<span class="number">112</span>, -<span class="number">164</span>, w=<span class="number">2</span>, c=<span class="string">&#x27;#A0A6A1&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">130</span>, <span class="number">3</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">13</span>, <span class="number">3</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">16</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">13</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">10</span>, <span class="number">7</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">15</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">45</span>, <span class="number">22</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">160</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">17</span>, <span class="number">5</span>)</span><br><span class="line">    width(<span class="number">3</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">17</span>, <span class="number">4</span>)</span><br><span class="line">    goto(-<span class="number">112</span>, -<span class="number">164</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#DFE9E1&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_clothes</span>():</span><br><span class="line">    <span class="comment"># 右侧衣服颜色</span></span><br><span class="line">    fill_color_patch(<span class="number">32</span>, -<span class="number">170</span>, c=<span class="string">&#x27;#AB1A21&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">32</span>, -<span class="number">170</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#AB1A21&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">150</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">8</span>, <span class="number">13</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">28</span>, <span class="number">2</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">40</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>)</span><br><span class="line">    goto(<span class="number">25.18</span>, -<span class="number">208.63</span>)</span><br><span class="line">    setheading(<span class="number">85.632</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">9</span>, <span class="number">12</span>)</span><br><span class="line">    right_rotate(<span class="number">2</span>, <span class="number">30</span>, <span class="number">4</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">20</span>, <span class="number">4</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">25</span>, <span class="number">2</span>)</span><br><span class="line">    goto(<span class="number">32</span>, -<span class="number">170</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#AB1A21&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(<span class="number">32</span>, -<span class="number">170</span>, c=<span class="string">&#x27;#D5464D&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">32</span>, -<span class="number">170</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#D5464D&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">150</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">8</span>, <span class="number">13</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">35</span>, <span class="number">1</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">9</span>, <span class="number">14</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">    goto(<span class="number">32</span>, -<span class="number">170</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#D5464D&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(<span class="number">20</span>, -<span class="number">175</span>, c=<span class="string">&#x27;#E61110&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">20</span>, -<span class="number">175</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#E61110&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">152</span>, <span class="number">7</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">8</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">35</span>, <span class="number">1.5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">30</span>, <span class="number">1</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">8</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">34</span>, <span class="number">1.5</span>)</span><br><span class="line">    goto(<span class="number">20</span>, -<span class="number">175</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#E61110&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    <span class="comment"># 左侧衣服颜色</span></span><br><span class="line">    fill_color_patch(-<span class="number">36</span>, -<span class="number">159</span>, c=<span class="string">&#x27;#E80604&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(-<span class="number">36</span>, -<span class="number">159</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#E80604&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">140</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">8</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">8</span>, <span class="number">8</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">9</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">11</span>, <span class="number">3</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">15</span>, <span class="number">1</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">19</span>, <span class="number">1</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">15.5</span>, <span class="number">1.2</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">4</span>, <span class="number">9</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">28</span>, <span class="number">2</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">12</span>, <span class="number">7</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>)</span><br><span class="line">    goto(-<span class="number">37</span>, -<span class="number">159</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#E80604&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    <span class="comment"># 裙子黄边</span></span><br><span class="line">    fill_color_patch(<span class="number">68</span>, -<span class="number">244</span>, c=<span class="string">&#x27;#E5B712&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">68</span>, -<span class="number">244</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#E5B712&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">175</span>, <span class="number">6.5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">92</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">4</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">3.2</span>, <span class="number">17</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">5</span>, <span class="number">15</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">80</span>, <span class="number">6</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">103</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">4.8</span>, <span class="number">15</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">3.6</span>, <span class="number">15</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">3.6</span>, <span class="number">10</span>)</span><br><span class="line">    goto(<span class="number">68</span>, -<span class="number">244</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#E5B712&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    <span class="comment"># 裙子颜色</span></span><br><span class="line">    fill_color_patch(<span class="number">66</span>, -<span class="number">243</span>, c=<span class="string">&#x27;#E80604&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">66</span>, -<span class="number">243</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#E80604&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">92</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">4</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">3</span>, <span class="number">15</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">32</span>, <span class="number">1.5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">8</span>, <span class="number">8</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">35</span>, <span class="number">1.5</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">3</span>, <span class="number">15</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">6</span>, <span class="number">15</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">4.5</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line">    goto(<span class="number">66</span>, -<span class="number">243</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#E80604&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(<span class="number">66</span>, -<span class="number">243</span>, c=<span class="string">&#x27;#AB1A21&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">66</span>, -<span class="number">243</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#AB1A21&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">92</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">32</span>, <span class="number">1.5</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">8</span>, <span class="number">9</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">122</span>, <span class="number">1</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line">    goto(<span class="number">66</span>, -<span class="number">243</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#AB1A21&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(<span class="number">67</span>, -<span class="number">243</span>, c=<span class="string">&#x27;#D5464D&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">67</span>, -<span class="number">243</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#D5464D&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">91</span>, <span class="number">3</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">30</span>, <span class="number">1</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">5</span>, <span class="number">4.5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">145</span>, <span class="number">1</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line">    goto(<span class="number">67</span>, -<span class="number">243</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#D5464D&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    <span class="comment"># 纽扣</span></span><br><span class="line">    fill_color_patch(<span class="number">9</span>, -<span class="number">179</span>, c=<span class="string">&#x27;#865908&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">9</span>, -<span class="number">179</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#865908&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">105</span>, <span class="number">9</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">90</span>, <span class="number">1</span>)</span><br><span class="line">    left_rotate(<span class="number">5</span>, <span class="number">32</span>, <span class="number">2</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">60</span>, <span class="number">1</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">35</span>, <span class="number">1.7</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">35</span>, <span class="number">1.2</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">80</span>, <span class="number">2</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">35</span>, <span class="number">2</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">32</span>, <span class="number">1.5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">110</span>, <span class="number">9</span>)</span><br><span class="line">    goto(<span class="number">9</span>, -<span class="number">179</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#E5B712&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    set_start(-<span class="number">5</span>, -<span class="number">183</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#865908&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">160</span>, <span class="number">0</span>)</span><br><span class="line">    left_rotate(<span class="number">5</span>, <span class="number">38</span>, <span class="number">1.2</span>)</span><br><span class="line">    set_start(-<span class="number">5</span>, -<span class="number">188</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#865908&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">10</span>, <span class="number">0</span>)</span><br><span class="line">    right_rotate(<span class="number">5</span>, <span class="number">38</span>, <span class="number">1.2</span>)</span><br><span class="line">    fill_color_patch(<span class="number">13</span>, -<span class="number">196</span>, c=<span class="string">&#x27;#865908&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">13</span>, -<span class="number">196</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#865908&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">90</span>, <span class="number">8</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">85</span>, <span class="number">0</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">30</span>, <span class="number">2</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">30</span>, <span class="number">1.5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">60</span>, <span class="number">1</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">35</span>, <span class="number">1.9</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">35</span>, <span class="number">1.3</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">80</span>, <span class="number">2</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">35</span>, <span class="number">1.8</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">33</span>, <span class="number">1.3</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">95</span>, <span class="number">10</span>)</span><br><span class="line">    goto(<span class="number">13</span>, -<span class="number">196</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#E5B712&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    set_start(-<span class="number">2</span>, -<span class="number">198</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#865908&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">160</span>, <span class="number">0</span>)</span><br><span class="line">    left_rotate(<span class="number">5</span>, <span class="number">36</span>, <span class="number">1.2</span>)</span><br><span class="line">    set_start(-<span class="number">1</span>, -<span class="number">202</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#865908&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">10</span>, <span class="number">0</span>)</span><br><span class="line">    right_rotate(<span class="number">5</span>, <span class="number">36</span>, <span class="number">1</span>)</span><br><span class="line">    fill_color_patch(<span class="number">15</span>, -<span class="number">176</span>, c=<span class="string">&#x27;#865908&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">15</span>, -<span class="number">176</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#865908&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">60</span>, <span class="number">2</span>)</span><br><span class="line">    left_rotate(<span class="number">9</span>, <span class="number">30</span>, <span class="number">3</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">30</span>, <span class="number">2</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">80</span>, <span class="number">6</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">70</span>, <span class="number">1</span>)</span><br><span class="line">    left_rotate(<span class="number">5</span>, <span class="number">32</span>, <span class="number">2</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">60</span>, <span class="number">1</span>)</span><br><span class="line">    left_rotate(<span class="number">5</span>, <span class="number">35</span>, <span class="number">1.7</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">80</span>, <span class="number">2</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">32</span>, <span class="number">2</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">35</span>, <span class="number">1.5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">110</span>, <span class="number">5</span>)</span><br><span class="line">    goto(<span class="number">15</span>, -<span class="number">176</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#E5B712&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    set_start(<span class="number">22</span>, -<span class="number">172</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#865908&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">160</span>, <span class="number">0</span>)</span><br><span class="line">    left_rotate(<span class="number">5</span>, <span class="number">35</span>, <span class="number">1.2</span>)</span><br><span class="line">    set_start(<span class="number">25</span>, -<span class="number">176</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#865908&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">10</span>, <span class="number">0</span>)</span><br><span class="line">    right_rotate(<span class="number">5</span>, <span class="number">35</span>, <span class="number">1</span>)</span><br><span class="line">    fill_color_patch(<span class="number">20</span>, -<span class="number">194</span>, c=<span class="string">&#x27;#865908&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">20</span>, -<span class="number">194</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#865908&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">60</span>, <span class="number">3</span>)</span><br><span class="line">    left_rotate(<span class="number">9</span>, <span class="number">29</span>, <span class="number">3</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">30</span>, <span class="number">2</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">80</span>, <span class="number">6</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">70</span>, <span class="number">1</span>)</span><br><span class="line">    left_rotate(<span class="number">5</span>, <span class="number">32</span>, <span class="number">2</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">60</span>, <span class="number">1</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">35</span>, <span class="number">1.7</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">35</span>, <span class="number">1.5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">90</span>, <span class="number">2</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">32</span>, <span class="number">1.5</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">35</span>, <span class="number">1.7</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">100</span>, <span class="number">5</span>)</span><br><span class="line">    goto(<span class="number">20</span>, -<span class="number">194</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#E5B712&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    set_start(<span class="number">28</span>, -<span class="number">193</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#865908&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">160</span>, <span class="number">0</span>)</span><br><span class="line">    left_rotate(<span class="number">5</span>, <span class="number">35</span>, <span class="number">1</span>)</span><br><span class="line">    set_start(<span class="number">30</span>, -<span class="number">197</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#865908&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">10</span>, <span class="number">0</span>)</span><br><span class="line">    right_rotate(<span class="number">5</span>, <span class="number">35</span>, <span class="number">1</span>)</span><br><span class="line">    fill_color_patch(<span class="number">13.2</span>, -<span class="number">184</span>, c=<span class="string">&#x27;#801C00&#x27;</span>)</span><br><span class="line">    set_start(<span class="number">13.2</span>, -<span class="number">184</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#801C00&#x27;</span>)</span><br><span class="line">    draw_circle(<span class="number">3.5</span>, <span class="string">&#x27;#801C00&#x27;</span>)</span><br><span class="line">    fill_color_patch(<span class="number">12.8</span>, -<span class="number">183</span>, c=<span class="string">&#x27;#DB2E32&#x27;</span>)</span><br><span class="line">    set_start(<span class="number">12.8</span>, -<span class="number">183</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#DB2E32&#x27;</span>)</span><br><span class="line">    draw_circle(<span class="number">2.3</span>, <span class="string">&#x27;#DB2E32&#x27;</span>)</span><br><span class="line">    fill_color_patch(<span class="number">13</span>, -<span class="number">181</span>, c=<span class="string">&#x27;#F06243&#x27;</span>)</span><br><span class="line">    set_start(<span class="number">13</span>, -<span class="number">181</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#F06243&#x27;</span>)</span><br><span class="line">    draw_circle(<span class="number">1</span>, <span class="string">&#x27;#F06243&#x27;</span>)</span><br><span class="line">    fill_color_patch(<span class="number">17</span>, -<span class="number">202</span>, c=<span class="string">&#x27;#801C00&#x27;</span>)</span><br><span class="line">    set_start(<span class="number">17</span>, -<span class="number">202</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#801C00&#x27;</span>)</span><br><span class="line">    draw_circle(<span class="number">3.5</span>, <span class="string">&#x27;#801C00&#x27;</span>)</span><br><span class="line">    fill_color_patch(<span class="number">16.8</span>, -<span class="number">201</span>, c=<span class="string">&#x27;#DB2E32&#x27;</span>)</span><br><span class="line">    set_start(<span class="number">16.8</span>, -<span class="number">201</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#DB2E32&#x27;</span>)</span><br><span class="line">    draw_circle(<span class="number">2.3</span>, <span class="string">&#x27;#DB2E32&#x27;</span>)</span><br><span class="line">    fill_color_patch(<span class="number">16.8</span>, -<span class="number">199</span>, c=<span class="string">&#x27;#F06243&#x27;</span>)</span><br><span class="line">    set_start(<span class="number">16.8</span>, -<span class="number">199</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#F06243&#x27;</span>)</span><br><span class="line">    draw_circle(<span class="number">1</span>, <span class="string">&#x27;#F06243&#x27;</span>)</span><br><span class="line">    <span class="comment"># 画衣服上的圆形图案</span></span><br><span class="line">    fill_color_patch(<span class="number">55</span>, -<span class="number">212</span>, c=<span class="string">&#x27;#DF3370&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">55</span>, -<span class="number">212</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#AB1A21&#x27;</span>)</span><br><span class="line">    setheading(<span class="number">287</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">28</span>, <span class="number">2</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">40</span>, <span class="number">5</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">70</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">18</span>, <span class="number">4</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">25</span>, <span class="number">2.5</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">15</span>, <span class="number">2.5</span>)</span><br><span class="line">    goto(<span class="number">55</span>, -<span class="number">212</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#DF3370&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    set_start(<span class="number">52</span>, -<span class="number">213</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#AB1A21&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">80</span>, <span class="number">4.5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">90</span>, <span class="number">3</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">90</span>, <span class="number">4.5</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">90</span>, <span class="number">1</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">15</span>, <span class="number">1.5</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">60</span>, <span class="number">3.5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">90</span>, <span class="number">3</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">90</span>, <span class="number">3</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">90</span>, <span class="number">1</span>)</span><br><span class="line">    left_rotate(<span class="number">5</span>, <span class="number">20</span>, <span class="number">1.2</span>)</span><br><span class="line">    set_start(<span class="number">39</span>, -<span class="number">212</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#AB1A21&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">105</span>, <span class="number">5.5</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">95</span>, <span class="number">3</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">90</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">90</span>, <span class="number">1</span>)</span><br><span class="line">    right_rotate(<span class="number">2</span>, <span class="number">15</span>, <span class="number">1.5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">60</span>, <span class="number">3.5</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">95</span>, <span class="number">3</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">90</span>, <span class="number">4</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">90</span>, <span class="number">1</span>)</span><br><span class="line">    right_rotate(<span class="number">5</span>, <span class="number">20</span>, <span class="number">1.2</span>)</span><br><span class="line">    fill_color_patch(<span class="number">55</span>, -<span class="number">233</span>, c=<span class="string">&#x27;#DF3370&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(<span class="number">55</span>, -<span class="number">233</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#DF3370&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">155</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">30</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">18</span>, <span class="number">3.5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">78</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line">    goto(<span class="number">55</span>, -<span class="number">233</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#DF3370&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    set_start(<span class="number">50</span>, -<span class="number">242</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#AB1A21&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">90</span>, <span class="number">4</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">90</span>, <span class="number">0</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">15</span>, <span class="number">1.5</span>)</span><br><span class="line">    set_start(<span class="number">53</span>, -<span class="number">233</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#AB1A21&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">80</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">90</span>, <span class="number">3</span>)</span><br><span class="line">    set_start(<span class="number">46</span>, -<span class="number">243</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#AB1A21&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">90</span>, <span class="number">6</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">100</span>, <span class="number">0</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">18</span>, <span class="number">1.8</span>)</span><br><span class="line">    set_start(<span class="number">36</span>, -<span class="number">235</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#AB1A21&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">95</span>, <span class="number">9</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">95</span>, <span class="number">3.5</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">90</span>, <span class="number">7</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">90</span>, <span class="number">1</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">15</span>, <span class="number">1.2</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">50</span>, <span class="number">5</span>)</span><br><span class="line">    fill_color_patch(-<span class="number">32</span>, -<span class="number">220</span>, c=<span class="string">&#x27;#94020C&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(-<span class="number">32</span>, -<span class="number">220</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#94020C&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">140</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">24</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">15</span>, <span class="number">2</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">55</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">50</span>, <span class="number">4</span>)</span><br><span class="line">    goto(-<span class="number">32</span>, -<span class="number">220</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#B23253&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    set_start(-<span class="number">42</span>, -<span class="number">240</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#94020C&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">10</span>, <span class="number">7</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">95</span>, <span class="number">8</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">100</span>, <span class="number">0</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">22</span>, <span class="number">2.5</span>)</span><br><span class="line">    set_start(-<span class="number">30</span>, -<span class="number">230</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#94020C&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">98</span>, <span class="number">11</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">90</span>, <span class="number">4</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">90</span>, <span class="number">9</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">90</span>, <span class="number">0</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">20</span>, <span class="number">1.8</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">35</span>, <span class="number">7</span>)</span><br><span class="line">    fill_color_patch(-<span class="number">75</span>, -<span class="number">199</span>, c=<span class="string">&#x27;#B23253&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(-<span class="number">75</span>, -<span class="number">199</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#B23253&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">100</span>, <span class="number">1</span>)</span><br><span class="line">    right_rotate(<span class="number">2</span>, <span class="number">20</span>, <span class="number">1</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">17</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">40</span>, <span class="number">1</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">113</span>, <span class="number">5</span>)</span><br><span class="line">    right_rotate(<span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line">    goto(-<span class="number">75</span>, -<span class="number">199</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#B23253&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    set_start(-<span class="number">77</span>, -<span class="number">203</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#94020C&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">80</span>, <span class="number">3</span>)</span><br><span class="line">    set_start(-<span class="number">73</span>, -<span class="number">208</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#94020C&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">100</span>, <span class="number">3</span>)</span><br><span class="line">    set_start(-<span class="number">77</span>, -<span class="number">212</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#94020C&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">80</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_jade</span>():</span><br><span class="line">    <span class="comment"># 玉佩</span></span><br><span class="line">    fill_color_patch(-<span class="number">60</span>, -<span class="number">225</span>, c=<span class="string">&#x27;#964B14&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(-<span class="number">60</span>, -<span class="number">225</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#964B14&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">100</span>, <span class="number">2</span>)</span><br><span class="line">    right_rotate(<span class="number">2</span>, <span class="number">30</span>, <span class="number">2</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">30</span>, <span class="number">2</span>)</span><br><span class="line">    right_rotate(<span class="number">2</span>, <span class="number">30</span>, <span class="number">3</span>)</span><br><span class="line">    right_rotate(<span class="number">2</span>, <span class="number">18</span>, <span class="number">2.5</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">50</span>, <span class="number">0</span>)</span><br><span class="line">    right_rotate(<span class="number">6</span>, <span class="number">30</span>, <span class="number">7</span>)</span><br><span class="line">    right_rotate(<span class="number">4</span>, <span class="number">18</span>, <span class="number">3.2</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">90</span>, <span class="number">0</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">28</span>, <span class="number">2</span>)</span><br><span class="line">    right_rotate(<span class="number">2</span>, <span class="number">20</span>, <span class="number">4</span>)</span><br><span class="line">    left_rotate(<span class="number">2</span>, <span class="number">30</span>, <span class="number">1</span>)</span><br><span class="line">    right_rotate(<span class="number">2</span>, <span class="number">30</span>, <span class="number">1.5</span>)</span><br><span class="line">    goto(-<span class="number">60</span>, -<span class="number">225</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#D99024&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(-<span class="number">69.8</span>, -<span class="number">252.5</span>, c=<span class="string">&#x27;#2D5835&#x27;</span>)</span><br><span class="line">    set_start(-<span class="number">69.8</span>, -<span class="number">252.5</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#2D5835&#x27;</span>)</span><br><span class="line">    draw_circle(<span class="number">9.5</span>, <span class="string">&#x27;#2D5835&#x27;</span>)</span><br><span class="line">    fill_color_patch(-<span class="number">69</span>, -<span class="number">251</span>, c=<span class="string">&#x27;#289884&#x27;</span>)</span><br><span class="line">    set_start(-<span class="number">69</span>, -<span class="number">251</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#289884&#x27;</span>)</span><br><span class="line">    draw_circle(<span class="number">8</span>, <span class="string">&#x27;#289884&#x27;</span>)</span><br><span class="line">    fill_color_patch(-<span class="number">67</span>, -<span class="number">248.5</span>, c=<span class="string">&#x27;#36D0C4&#x27;</span>)</span><br><span class="line">    set_start(-<span class="number">67</span>, -<span class="number">248.5</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#36D0C4&#x27;</span>)</span><br><span class="line">    draw_circle(<span class="number">6</span>, <span class="string">&#x27;#36D0C4&#x27;</span>)</span><br><span class="line">    set_start(-<span class="number">58</span>, -<span class="number">223</span>, w=<span class="number">2</span>, c=<span class="string">&#x27;#791500&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">185</span>, <span class="number">10</span>)</span><br><span class="line">    set_start(-<span class="number">60.8</span>, -<span class="number">222</span>, w=<span class="number">2</span>, c=<span class="string">&#x27;#791500&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">175</span>, <span class="number">10</span>)</span><br><span class="line">    fill_color_patch(-<span class="number">73</span>, -<span class="number">255</span>, c=<span class="string">&#x27;#964B14&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(-<span class="number">73</span>, -<span class="number">255</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#964B14&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">145</span>, <span class="number">6</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">90</span>, <span class="number">2.5</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">80</span>, <span class="number">5.5</span>)</span><br><span class="line">    goto(-<span class="number">73</span>, -<span class="number">255</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#D99024&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fill_color_patch(-<span class="number">84</span>, -<span class="number">257</span>, c=<span class="string">&#x27;#791500&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    set_start(-<span class="number">84</span>, -<span class="number">257</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#791500&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">40</span>, <span class="number">4</span>)</span><br><span class="line">    right_rotate(<span class="number">5</span>, <span class="number">30</span>, <span class="number">2</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">30</span>, <span class="number">4</span>)</span><br><span class="line">    set_start(-<span class="number">84</span>, -<span class="number">257</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#791500&#x27;</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">90</span>, <span class="number">2</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">15</span>, <span class="number">2</span>)</span><br><span class="line">    right_rotate(<span class="number">1</span>, <span class="number">30</span>, <span class="number">1</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">20</span>, <span class="number">3</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">42</span>, <span class="number">2</span>)</span><br><span class="line">    left_rotate(<span class="number">3</span>, <span class="number">33</span>, <span class="number">2</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">47</span>, <span class="number">1</span>)</span><br><span class="line">    right_rotate(<span class="number">3</span>, <span class="number">7</span>, <span class="number">2.5</span>)</span><br><span class="line">    goto(-<span class="number">84</span>, -<span class="number">257</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#E43628&#x27;</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    set_start(-<span class="number">87</span>, -<span class="number">261</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#791500&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">140</span>, <span class="number">4</span>)</span><br><span class="line">    set_start(-<span class="number">86</span>, -<span class="number">263</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#791500&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">140</span>, <span class="number">3</span>)</span><br><span class="line">    set_start(-<span class="number">85</span>, -<span class="number">264</span>, w=<span class="number">1</span>, c=<span class="string">&#x27;#791500&#x27;</span>)</span><br><span class="line">    left_rotate(<span class="number">1</span>, <span class="number">140</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    title(<span class="string">&#x27;前途似锦&#x27;</span>)</span><br><span class="line">    wide = <span class="number">800</span></span><br><span class="line">    height = <span class="number">600</span></span><br><span class="line">    screensize(wide, height, <span class="string">&#x27;#DC0058&#x27;</span>)</span><br><span class="line">    setup(wide+<span class="number">30</span>, height+<span class="number">30</span>, <span class="number">50</span>, <span class="number">10</span>)</span><br><span class="line">    shape(name=<span class="string">&#x27;turtle&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    draw_ear()</span><br><span class="line">    draw_cat()</span><br><span class="line">    draw_head()</span><br><span class="line">    draw_face()</span><br><span class="line">    draw_mouth()</span><br><span class="line">    draw_eye()</span><br><span class="line">    draw_eyebrow()</span><br><span class="line">    draw_nose()</span><br><span class="line">    draw_cheek()</span><br><span class="line">    draw_forehead()</span><br><span class="line">    draw_foot()</span><br><span class="line">    draw_body()</span><br><span class="line">    draw_hand()</span><br><span class="line">    draw_clothes()</span><br><span class="line">    draw_jade()</span><br><span class="line"></span><br><span class="line">    set_start(<span class="number">1000</span>, <span class="number">1000</span>, <span class="number">2.5</span>)</span><br><span class="line">    done()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>本文参考链接</p>
<a href="https://blog.csdn.net/weixin_43790276/article/details/128650616" title="" target="">用Python画一只小兔子，祝您新年前途似锦，大展宏图,</a>]]></content>
      <categories>
        <category>日常代码</category>
        <category>Python绘图</category>
        <category>创意编程</category>
        <category>抖音热门</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>绘图</tag>
        <tag>创意编程</tag>
      </tags>
  </entry>
  <entry>
    <title>python实现微信不断给好友发消息</title>
    <url>/20289.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<blockquote>
<p>温馨提示：对好友谨慎使用，以免被删好友</p>
</blockquote>
<span id="more"></span>
<p>微信需要能够登录网页版微信才能使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itchat</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;扫一下弹出来的二维码&#x27;</span>)</span><br><span class="line">itchat.auto_login(hotReload = <span class="literal">True</span>)</span><br><span class="line">boom_remark_name = <span class="built_in">input</span>(<span class="string">&#x27;输入你要发消息的人的微信备注，按回车键继续：&#x27;</span>)</span><br><span class="line">message = <span class="built_in">input</span>(<span class="string">&#x27;输入你要发送的内容，按回车键开始发送：&#x27;</span>)</span><br><span class="line">boom_obj = itchat.search_friends(remarkName = boom_remark_name)[<span class="number">0</span>][<span class="string">&#x27;UserName&#x27;</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">	time.sleep(<span class="number">0.5</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;消息已经发送&#x27;</span>)</span><br><span class="line">	itchat.send_msg(msg=message, toUserName=boom_obj)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>日常代码</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>用python画一只草莓熊</title>
    <url>/390fff19.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><img data-src="https://pic.imgdb.cn/item/6643385f0ea9cb1403af5129.png" alt="效果图" />

<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><blockquote>
<p> 注意，python版本太高可能没有该效果</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> t</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置背景颜色，窗口位置以及大小</span></span><br><span class="line"> </span><br><span class="line">t.colormode(<span class="number">255</span>)<span class="comment"># 颜色模式</span></span><br><span class="line">t.speed(<span class="number">0</span>)</span><br><span class="line">t.screensize(<span class="number">850</span>,<span class="number">760</span>,<span class="string">&quot;white&quot;</span>)<span class="comment">#画布大小背景颜色</span></span><br><span class="line">t.setup(width=<span class="number">850</span>, height=<span class="number">760</span>,startx=<span class="number">260</span>, starty=<span class="number">0</span>) <span class="comment">#绘图窗口的大小和起始坐标</span></span><br><span class="line"><span class="comment"># t.bgpic(&quot;C:/Users/Angle/Desktop/1.gif&quot;)</span></span><br><span class="line">t.title(<span class="string">&quot;专属宝贝的草莓熊！&quot;</span>)<span class="comment">#设置绘图窗口的标题</span></span><br><span class="line">t.resizemode(<span class="string">&#x27;noresize&#x27;</span>)  <span class="comment">#大小调整模式:auto,user,noresize</span></span><br><span class="line">t.tracer(<span class="number">1</span>)   </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">scolor=[<span class="string">&quot;#E6005C&quot;</span>,<span class="string">&quot;#00BFFF&quot;</span>,<span class="string">&quot;#538a30&quot;</span>,<span class="string">&quot;#F28500&quot;</span>]   <span class="comment"># 深色列表</span></span><br><span class="line">qcolor=[<span class="string">&quot;#FF007F&quot;</span>,<span class="string">&quot;#87CEFA&quot;</span>,<span class="string">&quot;#7fbc2b&quot;</span>,<span class="string">&quot;#FFA500&quot;</span>]  <span class="comment"># 浅色列表</span></span><br><span class="line">blsize=<span class="number">80</span>                     <span class="comment"># blsize值，blsize，是大等腰直角三角形的斜边风车等比例缩放</span></span><br><span class="line">bs=<span class="number">2</span>**<span class="number">0.5</span>/<span class="number">2</span>*blsize             <span class="comment"># bs是直角边，2**0.5 表示数学中的“根号2”</span></span><br><span class="line"><span class="comment"># zjsjxxb是小等腰直角三角形的斜边，zjb是直角边</span></span><br><span class="line">zjb=blsize/<span class="number">2</span> <span class="comment"># zjb是小等腰直角三角形的直角边</span></span><br><span class="line">zjsjxxb=<span class="number">2</span>**<span class="number">0.5</span> *zjb  <span class="comment"># zjsjxxb是小等腰直角三角形的斜边</span></span><br><span class="line">length=<span class="number">1.7</span>*blsize <span class="comment"># 风车杆长</span></span><br><span class="line">width=<span class="number">2</span>/<span class="number">15</span>*blsize <span class="comment"># 风车杆宽</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fongche</span>():<span class="comment">#风车 </span></span><br><span class="line">    t.penup()</span><br><span class="line">    t.goto(-<span class="number">205</span>,-<span class="number">42</span>)</span><br><span class="line">    t.begin_fill()</span><br><span class="line">    t.pensize(<span class="number">4</span>)</span><br><span class="line">    t.pencolor(<span class="string">&quot;#321320&quot;</span>)</span><br><span class="line">    t.fillcolor(<span class="string">&quot;#D2B48C&quot;</span>)</span><br><span class="line">    t.circle(<span class="number">15</span>)</span><br><span class="line">    t.end_fill()</span><br><span class="line">    t.penup()</span><br><span class="line">    t.goto(-<span class="number">220</span>,<span class="number">80</span>)</span><br><span class="line">    t.pendown()</span><br><span class="line">    t.setheading(-<span class="number">90</span>)</span><br><span class="line">    t.pensize(width)</span><br><span class="line">    t.pencolor(<span class="string">&quot;#5f4a1d&quot;</span>)</span><br><span class="line">    t.forward(length)</span><br><span class="line">    t.pensize(<span class="number">2</span>)</span><br><span class="line">    t.backward(length)</span><br><span class="line">    t.setheading(<span class="number">90</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        <span class="comment"># 小等腰直角三角形</span></span><br><span class="line">        t.color(scolor[i])  <span class="comment"># 遍历深色列表scolor</span></span><br><span class="line">        t.begin_fill()</span><br><span class="line">        t.forward(zjb)</span><br><span class="line">        t.left(<span class="number">90</span>)</span><br><span class="line">        t.forward(zjb)</span><br><span class="line">        t.left(<span class="number">135</span>)</span><br><span class="line">        t.forward(zjsjxxb)</span><br><span class="line">        t.end_fill()</span><br><span class="line">        <span class="comment">#t.pencolor(scolor[i])</span></span><br><span class="line">        <span class="comment">#t.pensize(4)</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 大等腰直角三角形</span></span><br><span class="line">        t.color(qcolor[i])  <span class="comment"># 遍历浅色列表qcolor</span></span><br><span class="line">        t.begin_fill()</span><br><span class="line">        t.backward(zjsjxxb)</span><br><span class="line">        t.right(<span class="number">90</span>)</span><br><span class="line">        t.forward(bs)</span><br><span class="line">        t.left(<span class="number">135</span>)</span><br><span class="line">        t.forward(blsize)</span><br><span class="line">        t.end_fill()</span><br><span class="line">        <span class="comment">#t.pencolor(scolor[i])</span></span><br><span class="line">        <span class="comment">#t.pensize(4)</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 旋转180度后，画下一片风车叶片</span></span><br><span class="line">        t.right(<span class="number">180</span>)</span><br><span class="line">        t.penup()</span><br><span class="line"> </span><br><span class="line">mling_circle_list = <span class="built_in">iter</span>([  <span class="comment"># 每段弧线（半径，弧角度数）</span></span><br><span class="line">    (<span class="number">18</span>, <span class="number">360</span>), (<span class="number">14</span>, <span class="number">360</span>), (<span class="number">10</span>, <span class="number">360</span>), (<span class="number">6</span>, <span class="number">360</span>),</span><br><span class="line">    (<span class="number">18</span>, <span class="number">360</span>), (<span class="number">14</span>, <span class="number">360</span>), (<span class="number">10</span>, <span class="number">360</span>), (<span class="number">6</span>, <span class="number">360</span>),</span><br><span class="line">])</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mling_draw_eyeball</span>(<span class="params">zb1,zb2,zb3,zb4</span>):  </span><br><span class="line">    <span class="keyword">for</span> zb, color_ <span class="keyword">in</span> <span class="built_in">zip</span>([zb1,zb2,zb3,zb4], [<span class="string">&#x27;#ffffff&#x27;</span>, <span class="string">&#x27;#482d08&#x27;</span>, <span class="string">&#x27;#000000&#x27;</span>, <span class="string">&#x27;#ffffff&#x27;</span>]):</span><br><span class="line">        t.penup()</span><br><span class="line">        t.goto(*zb)</span><br><span class="line">        t.pendown()</span><br><span class="line">        t.begin_fill()</span><br><span class="line">        t.setheading(<span class="number">0</span>)</span><br><span class="line">        t.color(color_)</span><br><span class="line">        t.pencolor(<span class="string">&#x27;#000000&#x27;</span>)</span><br><span class="line">        t.pensize(<span class="number">2</span>)</span><br><span class="line">        t.circle(*<span class="built_in">next</span>(mling_circle_list))</span><br><span class="line">        t.end_fill()</span><br><span class="line"> </span><br><span class="line">t.penup()</span><br><span class="line">p = t.home()</span><br><span class="line">t.pencolor(<span class="string">&quot;#321320&quot;</span>)</span><br><span class="line">t.fillcolor(<span class="string">&quot;#cb3263&quot;</span>)</span><br><span class="line">t.pensize(<span class="number">4</span>)</span><br><span class="line">t.goto(<span class="number">120</span>,<span class="number">110</span>)</span><br><span class="line">t.pendown()</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.goto(<span class="number">200</span>,<span class="number">0</span>)</span><br><span class="line">t.left(-<span class="number">40</span>)</span><br><span class="line">t.circle(-<span class="number">110</span>,<span class="number">105</span>)</span><br><span class="line">t.left(<span class="number">75</span>)</span><br><span class="line">t.goto(<span class="number">170</span>,-<span class="number">110</span>)</span><br><span class="line">t.left(-<span class="number">80</span>)</span><br><span class="line">t.circle(<span class="number">30</span>,<span class="number">40</span>)</span><br><span class="line">t.left(<span class="number">60</span>)</span><br><span class="line">t.circle(-<span class="number">80</span>,<span class="number">70</span>)</span><br><span class="line">t.left(<span class="number">83</span>)</span><br><span class="line">t.circle(-<span class="number">35</span>,<span class="number">95</span>)</span><br><span class="line">t.goto(<span class="number">60</span>,-<span class="number">270</span>)</span><br><span class="line">t.left(-<span class="number">80</span>)</span><br><span class="line">t.circle(-<span class="number">65</span>,<span class="number">70</span>)</span><br><span class="line">t.left(<span class="number">63</span>)</span><br><span class="line">t.circle(<span class="number">35</span>,<span class="number">30</span>)</span><br><span class="line">t.left(<span class="number">130</span>)</span><br><span class="line">t.circle(-<span class="number">65</span>,<span class="number">70</span>)</span><br><span class="line">t.goto(-<span class="number">120</span>,-<span class="number">270</span>)</span><br><span class="line">t.left(-<span class="number">110</span>)</span><br><span class="line">t.circle(-<span class="number">35</span>,<span class="number">80</span>)</span><br><span class="line">t.left(<span class="number">83</span>)</span><br><span class="line">t.circle(-<span class="number">80</span>,<span class="number">50</span>)</span><br><span class="line">t.left(<span class="number">60</span>)</span><br><span class="line">t.circle(-<span class="number">80</span>,<span class="number">60</span>)</span><br><span class="line">t.left(<span class="number">60</span>)</span><br><span class="line">t.circle(<span class="number">30</span>,<span class="number">30</span>)</span><br><span class="line">t.left(<span class="number">20</span>)</span><br><span class="line">t.circle(<span class="number">80</span>,<span class="number">80</span>)</span><br><span class="line">t.left(-<span class="number">105</span>)</span><br><span class="line">t.circle(-<span class="number">70</span>,<span class="number">150</span>)</span><br><span class="line">t.left(<span class="number">50</span>)</span><br><span class="line">t.circle(-<span class="number">170</span>,<span class="number">50</span>)</span><br><span class="line">t.goto(<span class="number">120</span>,<span class="number">110</span>)</span><br><span class="line"><span class="comment">#Author:Adversity Awake</span></span><br><span class="line">t.end_fill()</span><br><span class="line">t.penup()</span><br><span class="line">p = t.home()</span><br><span class="line">t.pencolor(<span class="string">&quot;#321320&quot;</span>)</span><br><span class="line">t.fillcolor(<span class="string">&quot;#ffffff&quot;</span>)</span><br><span class="line">t.pensize(<span class="number">4</span>)</span><br><span class="line">t.goto(<span class="number">90</span>,<span class="number">60</span>)</span><br><span class="line">t.pendown()</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.right(<span class="number">30</span>)</span><br><span class="line">t.circle(-<span class="number">130</span>,<span class="number">360</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line">t.penup()</span><br><span class="line">p = t.home()</span><br><span class="line">t.pencolor(<span class="string">&quot;#321320&quot;</span>)</span><br><span class="line">t.fillcolor(<span class="string">&quot;#f3d2ad&quot;</span>)</span><br><span class="line">t.pensize(<span class="number">4</span>)</span><br><span class="line">t.goto(-<span class="number">250</span>,-<span class="number">55</span>)</span><br><span class="line">t.seth(<span class="number">0</span>)</span><br><span class="line">t.pendown()</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.right(-<span class="number">55</span>)</span><br><span class="line">t.circle(-<span class="number">45</span>,<span class="number">270</span>)</span><br><span class="line">t.goto(-<span class="number">220</span>,-<span class="number">75</span>)</span><br><span class="line">t.goto(-<span class="number">250</span>,-<span class="number">55</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line"> </span><br><span class="line">fongche()</span><br><span class="line"> </span><br><span class="line">t.penup()</span><br><span class="line">p = t.home()</span><br><span class="line">t.pencolor(<span class="string">&quot;#321320&quot;</span>)</span><br><span class="line">t.fillcolor(<span class="string">&quot;#f3d2ad&quot;</span>)</span><br><span class="line">t.pensize(<span class="number">4</span>)</span><br><span class="line">t.goto(<span class="number">185</span>,-<span class="number">90</span>)</span><br><span class="line">t.pendown()</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.right(<span class="number">140</span>)</span><br><span class="line">t.circle(<span class="number">43</span>,<span class="number">95</span>)</span><br><span class="line">t.goto(<span class="number">185</span>,-<span class="number">90</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line">t.penup()</span><br><span class="line">t.seth(<span class="number">0</span>)</span><br><span class="line">t.pencolor(<span class="string">&#x27;#321320&#x27;</span>)</span><br><span class="line">t.fillcolor(<span class="string">&#x27;#cb3263&#x27;</span>)</span><br><span class="line">t.pensize(<span class="number">4</span>)</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.goto(<span class="number">21</span>,<span class="number">0</span>)</span><br><span class="line">t.pendown()</span><br><span class="line">t.circle(<span class="number">123</span>,<span class="number">134</span>)</span><br><span class="line">t.left(-<span class="number">90</span>)</span><br><span class="line">t.circle(<span class="number">40</span>,<span class="number">185</span>)</span><br><span class="line">t.left(-<span class="number">60</span>)</span><br><span class="line">t.circle(<span class="number">120</span>,<span class="number">60</span>)</span><br><span class="line">t.left(-<span class="number">90</span>)</span><br><span class="line">t.circle(<span class="number">50</span>,<span class="number">200</span>)</span><br><span class="line">t.left(-<span class="number">90</span>)</span><br><span class="line">t.circle(<span class="number">100</span>,<span class="number">100</span>)</span><br><span class="line">t.left(-<span class="number">12</span>)</span><br><span class="line">t.circle(<span class="number">100</span>,<span class="number">40</span>)</span><br><span class="line">t.goto(<span class="number">21</span>,<span class="number">0</span>)</span><br><span class="line">t.penup()</span><br><span class="line"><span class="comment">#Author:Adversity Awake</span></span><br><span class="line">t.end_fill()</span><br><span class="line">t.penup()</span><br><span class="line">t.goto(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">t.seth(<span class="number">0</span>)</span><br><span class="line">t.pencolor(<span class="string">&#x27;#321320&#x27;</span>)</span><br><span class="line">t.fillcolor(<span class="string">&#x27;#ffffff&#x27;</span>)</span><br><span class="line">t.pensize(<span class="number">4</span>)</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.goto(-<span class="number">70</span>,<span class="number">210</span>)</span><br><span class="line">t.left(<span class="number">140</span>)</span><br><span class="line">t.pendown()</span><br><span class="line">t.circle(<span class="number">30</span>,<span class="number">200</span>)</span><br><span class="line">t.goto(-<span class="number">70</span>,<span class="number">210</span>)</span><br><span class="line">t.penup()</span><br><span class="line">t.end_fill()</span><br><span class="line">t.penup()</span><br><span class="line">t.goto(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">t.seth(<span class="number">0</span>)</span><br><span class="line">t.pencolor(<span class="string">&#x27;#321320&#x27;</span>)</span><br><span class="line">t.fillcolor(<span class="string">&#x27;#ffffff&#x27;</span>)</span><br><span class="line">t.pensize(<span class="number">4</span>)</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.goto(<span class="number">90</span>,<span class="number">220</span>)</span><br><span class="line">t.left(<span class="number">45</span>)</span><br><span class="line">t.pendown()</span><br><span class="line">t.circle(<span class="number">22</span>,<span class="number">200</span>)</span><br><span class="line">t.goto(<span class="number">90</span>,<span class="number">220</span>)</span><br><span class="line">t.penup()</span><br><span class="line">t.end_fill()</span><br><span class="line">t.penup()</span><br><span class="line">t.goto(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">t.seth(<span class="number">0</span>)</span><br><span class="line">t.pencolor(<span class="string">&#x27;#321320&#x27;</span>)</span><br><span class="line">t.fillcolor(<span class="string">&#x27;#ffffff&#x27;</span>)</span><br><span class="line">t.pensize(<span class="number">4</span>)</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.left(-<span class="number">98</span>)</span><br><span class="line">t.left(<span class="number">90</span>)</span><br><span class="line">t.goto(<span class="number">18</span>,<span class="number">10</span>)</span><br><span class="line">t.pendown()</span><br><span class="line">t.circle(<span class="number">100</span>,<span class="number">134</span>)</span><br><span class="line">t.left(<span class="number">10</span>)</span><br><span class="line">t.circle(<span class="number">110</span>,<span class="number">30</span>)</span><br><span class="line">t.left(<span class="number">10</span>)</span><br><span class="line">t.circle(<span class="number">160</span>,<span class="number">40</span>)</span><br><span class="line">t.circle(<span class="number">85</span>,<span class="number">40</span>)</span><br><span class="line">t.left(<span class="number">2</span>)</span><br><span class="line">t.circle(<span class="number">95</span>,<span class="number">40</span>)</span><br><span class="line">t.left(<span class="number">5</span>)</span><br><span class="line">t.circle(<span class="number">95</span>,<span class="number">60</span>)</span><br><span class="line">t.goto(<span class="number">18</span>,<span class="number">10</span>)</span><br><span class="line">t.penup()</span><br><span class="line">t.end_fill()</span><br><span class="line">t.penup()</span><br><span class="line">p = t.home()</span><br><span class="line">t.pencolor(<span class="string">&quot;#321320&quot;</span>)</span><br><span class="line">t.fillcolor(<span class="string">&quot;#8f3a52&quot;</span>)</span><br><span class="line">t.pensize(<span class="number">2</span>)</span><br><span class="line">t.goto(<span class="number">25</span>,<span class="number">240</span>)</span><br><span class="line">t.pendown()</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.goto(<span class="number">60</span>,<span class="number">235</span>)</span><br><span class="line">t.left(<span class="number">30</span>)</span><br><span class="line">t.fd(<span class="number">8</span>)</span><br><span class="line">t.left(<span class="number">90</span>)</span><br><span class="line">t.fd(<span class="number">22</span>)</span><br><span class="line">t.circle(<span class="number">90</span>, <span class="number">8</span>)</span><br><span class="line">t.left(<span class="number">20</span>)</span><br><span class="line">t.circle(<span class="number">90</span>, <span class="number">8</span>)</span><br><span class="line">t.left(<span class="number">20</span>)</span><br><span class="line">t.circle(<span class="number">90</span>, <span class="number">20</span>)</span><br><span class="line">t.left(<span class="number">40</span>)</span><br><span class="line">t.circle(<span class="number">50</span>, <span class="number">20</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line">t.penup()</span><br><span class="line">t.pensize(<span class="number">12</span>)</span><br><span class="line">t.goto(-<span class="number">2</span>,<span class="number">250</span>)</span><br><span class="line">t.pencolor(<span class="string">&quot;#4D1F00&quot;</span>)</span><br><span class="line">t.fillcolor(<span class="string">&quot;#4D1F00&quot;</span>)</span><br><span class="line">t.pendown()</span><br><span class="line">t.goto(<span class="number">60</span>,<span class="number">240</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line">t.penup()</span><br><span class="line">p = t.home()</span><br><span class="line">t.pencolor(<span class="string">&quot;#321320&quot;</span>)</span><br><span class="line">t.fillcolor(<span class="string">&quot;#8f3a52&quot;</span>)</span><br><span class="line">t.pensize(<span class="number">2</span>)</span><br><span class="line">t.goto(-<span class="number">55</span>,<span class="number">193</span>)</span><br><span class="line">t.pendown()</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.left(<span class="number">65</span>)</span><br><span class="line">t.circle(-<span class="number">90</span>, <span class="number">25</span>)</span><br><span class="line">t.goto(-<span class="number">10</span>,<span class="number">230</span>)</span><br><span class="line">t.left(<span class="number">30</span>)</span><br><span class="line">t.fd(<span class="number">8</span>)</span><br><span class="line">t.left(<span class="number">90</span>)</span><br><span class="line">t.fd(<span class="number">18</span>)</span><br><span class="line">t.circle(<span class="number">90</span>, <span class="number">8</span>)</span><br><span class="line">t.left(<span class="number">20</span>)</span><br><span class="line">t.circle(<span class="number">90</span>, <span class="number">10</span>)</span><br><span class="line">t.left(<span class="number">40</span>)</span><br><span class="line">t.circle(<span class="number">90</span>, <span class="number">30</span>)</span><br><span class="line">t.left(<span class="number">30</span>)</span><br><span class="line">t.circle(<span class="number">40</span>, <span class="number">20</span>)</span><br><span class="line">t.penup()</span><br><span class="line">t.end_fill()</span><br><span class="line">t.pensize(<span class="number">12</span>)</span><br><span class="line">t.goto(-<span class="number">63</span>,<span class="number">195</span>)</span><br><span class="line">t.pencolor(<span class="string">&quot;#4D1F00&quot;</span>)</span><br><span class="line">t.fillcolor(<span class="string">&quot;#4D1F00&quot;</span>)</span><br><span class="line">t.pendown()</span><br><span class="line">t.left(<span class="number">100</span>)</span><br><span class="line">t.circle(-<span class="number">85</span>,<span class="number">45</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line"> </span><br><span class="line">mling_draw_eyeball((-<span class="number">20</span>,<span class="number">180</span>), (-<span class="number">23</span>,<span class="number">185</span>), (-<span class="number">25</span>,<span class="number">188</span>), (-<span class="number">30</span>,<span class="number">200</span>)) </span><br><span class="line">mling_draw_eyeball((<span class="number">30</span>, <span class="number">193</span>), (<span class="number">27</span>, <span class="number">200</span>), (<span class="number">25</span>,<span class="number">203</span>), (<span class="number">20</span>,<span class="number">213</span>)) </span><br><span class="line"> </span><br><span class="line">t.penup()</span><br><span class="line">p = t.home()</span><br><span class="line">t.pencolor(<span class="string">&quot;#321320&quot;</span>)</span><br><span class="line">t.fillcolor(<span class="string">&quot;#8f3a52&quot;</span>)</span><br><span class="line">t.pensize(<span class="number">3</span>)</span><br><span class="line">t.goto(<span class="number">25</span>,<span class="number">105</span>)</span><br><span class="line">p = t.pos()</span><br><span class="line">t.pendown()</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.circle(<span class="number">85</span>, <span class="number">65</span>)</span><br><span class="line">t.left(<span class="number">16</span>)</span><br><span class="line">t.circle(<span class="number">30</span>, <span class="number">55</span>)</span><br><span class="line">t.left(<span class="number">20</span>)</span><br><span class="line">t.circle(<span class="number">145</span>, <span class="number">58</span>)</span><br><span class="line">t.left(<span class="number">8</span>)</span><br><span class="line">t.circle(<span class="number">20</span>, <span class="number">55</span>)</span><br><span class="line">t.left(<span class="number">8</span>)</span><br><span class="line">t.circle(<span class="number">50</span>, <span class="number">65</span>)</span><br><span class="line">t.left(-<span class="number">5</span>)</span><br><span class="line">t.circle(<span class="number">310</span>, <span class="number">8</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line">t.penup()</span><br><span class="line">t.goto(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">t.seth(<span class="number">0</span>)</span><br><span class="line">t.pencolor(<span class="string">&#x27;#321320&#x27;</span>)</span><br><span class="line">t.fillcolor(<span class="string">&#x27;#a93e54&#x27;</span>)</span><br><span class="line">t.pensize(<span class="number">3</span>)</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.left(-<span class="number">20</span>)</span><br><span class="line">t.goto(<span class="number">9</span>,<span class="number">66</span>)</span><br><span class="line">t.pendown()</span><br><span class="line">t.circle(<span class="number">68</span>,<span class="number">40</span>)</span><br><span class="line">t.left(<span class="number">10</span>)</span><br><span class="line">t.circle(<span class="number">65</span>,<span class="number">40</span>)</span><br><span class="line">t.left(<span class="number">160</span>)</span><br><span class="line">t.circle(-<span class="number">75</span>,<span class="number">85</span>)</span><br><span class="line">t.left(<span class="number">158</span>)</span><br><span class="line">t.circle(<span class="number">48</span>,<span class="number">37</span>)</span><br><span class="line">t.goto(<span class="number">9</span>,<span class="number">66</span>)</span><br><span class="line">t.penup()</span><br><span class="line">t.end_fill()</span><br><span class="line">t.color(<span class="string">&#x27;#321320&#x27;</span>)</span><br><span class="line">t.penup()</span><br><span class="line">t.goto(<span class="number">380</span>,<span class="number">60</span>)</span><br><span class="line">t.pendown()</span><br><span class="line">t.write(<span class="string">&quot;我\n们\n要\n幸\n福\n哦\n&quot;</span>,align=<span class="string">&quot;center&quot;</span>,font=(<span class="string">&quot;黑体&quot;</span>,<span class="number">20</span>,<span class="string">&quot;normal&quot;</span>))</span><br><span class="line">t.penup()</span><br><span class="line">t.goto(<span class="number">290</span>,<span class="number">183</span>)</span><br><span class="line">t.pendown()</span><br><span class="line"><span class="comment"># t.write(&quot;成\n功\n上\n岸\n&quot;,align=&quot;center&quot;,font=(&quot;黑体&quot;,10,&quot;normal&quot;))</span></span><br><span class="line">t.hideturtle()</span><br><span class="line"><span class="comment"># t.done()</span></span><br><span class="line">t.fillcolor(<span class="string">&quot;red&quot;</span>)</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.circle(<span class="number">10</span>, <span class="number">180</span>)</span><br><span class="line">t.circle(<span class="number">25</span>, <span class="number">110</span>)</span><br><span class="line">t.left(<span class="number">50</span>)</span><br><span class="line">t.circle(<span class="number">60</span>, <span class="number">45</span>)</span><br><span class="line">t.circle(<span class="number">20</span>, <span class="number">170</span>)</span><br><span class="line">t.right(<span class="number">24</span>)</span><br><span class="line">t.fd(<span class="number">30</span>)</span><br><span class="line">t.left(-<span class="number">8</span>)<span class="comment">#原本是10</span></span><br><span class="line">t.circle(<span class="number">30</span>, <span class="number">110</span>)</span><br><span class="line">t.fd(<span class="number">20</span>)</span><br><span class="line">t.left(<span class="number">40</span>)</span><br><span class="line">t.circle(<span class="number">90</span>, <span class="number">70</span>)</span><br><span class="line">t.circle(<span class="number">30</span>, <span class="number">150</span>)</span><br><span class="line">t.right(<span class="number">30</span>)</span><br><span class="line">t.fd(<span class="number">15</span>)</span><br><span class="line">t.circle(<span class="number">80</span>, <span class="number">90</span>)</span><br><span class="line">t.left(<span class="number">15</span>)</span><br><span class="line">t.fd(<span class="number">45</span>)</span><br><span class="line">t.right(<span class="number">165</span>)</span><br><span class="line">t.fd(<span class="number">20</span>)</span><br><span class="line">t.left(<span class="number">155</span>)</span><br><span class="line">t.circle(<span class="number">150</span>, <span class="number">80</span>)</span><br><span class="line">t.left(<span class="number">50</span>)</span><br><span class="line">t.circle(<span class="number">150</span>, <span class="number">90</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 花瓣1</span></span><br><span class="line">t.left(<span class="number">150</span>)</span><br><span class="line">t.circle(-<span class="number">90</span>, <span class="number">70</span>)</span><br><span class="line">t.left(<span class="number">20</span>)</span><br><span class="line">t.circle(<span class="number">75</span>, <span class="number">105</span>)</span><br><span class="line">t.setheading(<span class="number">60</span>)</span><br><span class="line">t.circle(<span class="number">80</span>, <span class="number">98</span>)</span><br><span class="line">t.circle(-<span class="number">90</span>, <span class="number">40</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 花瓣2</span></span><br><span class="line">t.left(<span class="number">180</span>)</span><br><span class="line">t.circle(<span class="number">90</span>, <span class="number">40</span>)</span><br><span class="line">t.circle(-<span class="number">80</span>, <span class="number">98</span>)</span><br><span class="line">t.setheading(-<span class="number">83</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 叶子1</span></span><br><span class="line">t.fd(<span class="number">30</span>)</span><br><span class="line">t.left(<span class="number">90</span>)</span><br><span class="line">t.fd(<span class="number">25</span>)</span><br><span class="line">t.left(<span class="number">45</span>)</span><br><span class="line">t.fillcolor(<span class="string">&quot;green&quot;</span>)</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.circle(-<span class="number">80</span>, <span class="number">90</span>)</span><br><span class="line">t.right(<span class="number">90</span>)</span><br><span class="line">t.circle(-<span class="number">80</span>, <span class="number">90</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line">t.right(<span class="number">135</span>)</span><br><span class="line">t.fd(<span class="number">60</span>)</span><br><span class="line">t.left(<span class="number">180</span>)</span><br><span class="line">t.fd(<span class="number">85</span>)</span><br><span class="line">t.left(<span class="number">90</span>)</span><br><span class="line">t.fd(<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 叶子2</span></span><br><span class="line">t.right(<span class="number">90</span>)</span><br><span class="line">t.right(<span class="number">45</span>)</span><br><span class="line">t.fillcolor(<span class="string">&quot;green&quot;</span>)</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.circle(<span class="number">80</span>, <span class="number">90</span>)</span><br><span class="line">t.left(<span class="number">90</span>)</span><br><span class="line">t.circle(<span class="number">80</span>, <span class="number">90</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line">t.left(<span class="number">135</span>)</span><br><span class="line">t.fd(<span class="number">60</span>)</span><br><span class="line">t.left(<span class="number">180</span>)</span><br><span class="line">t.fd(<span class="number">60</span>)</span><br><span class="line">t.right(<span class="number">90</span>)</span><br><span class="line">t.circle(<span class="number">200</span>, <span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">t.done()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>日常代码</category>
        <category>Python绘图</category>
        <category>创意编程</category>
        <category>抖音热门</category>
      </categories>
  </entry>
  <entry>
    <title>用树莓派搭建虚拟专用网络服务器</title>
    <url>/43611.html</url>
    <content><![CDATA[<p>笔者这里是使用树莓派搭建虚拟专用网络服务器,树莓派是用的ubuntu系统,所以该方法使用于所有的ubuntu系统的服务器.</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>想要用服务器搭建虚拟专用网络服务器,你首先得上手一个树莓派,可以参考<a href="http://www.fengpla.cn/2017/03/15/RaspberryPi/">这里</a>.或者你对虚拟专用网络不够了解,可以参考<a href="http://baike.baidu.com/link?url=7C5A528WHc_Gn3TdgwgnkopwGa2wtHcKkV-n1bu2SX95OWgtCWvGd9JfU4duT1M4S9TiTN4VYICrMl_kTWH2CSqSH8zb7CpCWnVQgfwmL35yKjEsn-W5OnXrtsjz00CKRQncleqMuhQdX1csUP-0y7JNmlktQJP2OKTM6E4J2nuyW6GGrz8zN-hepNE8m65y">这里</a>.</p>
<h3 id="安装pptp"><a href="#安装pptp" class="headerlink" title="安装pptp"></a>安装pptp</h3><p>在终端输入下面命令并回车.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sudo apt-get install pptpd</span><br></pre></td></tr></table></figure>

<h3 id="配置内网ip策略"><a href="#配置内网ip策略" class="headerlink" title="配置内网ip策略"></a>配置内网ip策略</h3><p>在终端输入下面命令并回车,进入vim编辑器.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/pptpd.<span class="property">conf</span></span><br></pre></td></tr></table></figure>
<ul>
<li>注释<code>logwtmp</code>,即在前面加一个<code>#</code>.</li>
<li>在<code># TAG:localip</code>后面增加2行<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">localip <span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">remoteip <span class="number">192.168</span><span class="number">.0</span><span class="number">.234</span>-<span class="number">238</span>,<span class="number">192.168</span><span class="number">.0</span><span class="number">.245</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面配置的localip为服务器的ip地址,在搭建虚拟专用网络的时候要根据自己服务器的地址来设置.<br>remoteip为连接虚拟专用网络的客户端ip地址,一般情况下不需要更改.</p>
</blockquote>
</li>
</ul>
<h3 id="配置dns"><a href="#配置dns" class="headerlink" title="配置dns"></a>配置dns</h3><p>在终端输入下面命令并回车,进入vim编辑器.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/ppp/pptpd-options</span><br></pre></td></tr></table></figure>
<p>在<code>#ms-dns</code>后面增加2行,也可以配置其他dns</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ms-dns <span class="number">121.42</span><span class="number">.42</span><span class="number">.51</span></span><br><span class="line">ms-dns <span class="number">114.114</span><span class="number">.114</span><span class="number">.114</span></span><br></pre></td></tr></table></figure>

<h3 id="配置虚拟专用网络帐号"><a href="#配置虚拟专用网络帐号" class="headerlink" title="配置虚拟专用网络帐号"></a>配置虚拟专用网络帐号</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/ppp/chap-secrets</span><br></pre></td></tr></table></figure>
<p>在其中依次添加帐号,服务器名,密码和IP限制,一个帐号一行,每个参数中间用<code>tab</code>或者空格间隔.如:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">zhangsan pptpd <span class="number">123456</span> *</span><br></pre></td></tr></table></figure>
<blockquote>
<p>其中user,passwd为自己设置的账户名和密码.<br>**注意:**这里的<code>IP addresses</code> 不是设置为自己服务器的IP,而是设置为<code>*</code>,笔者之前在这里耽误了一点时间.</p>
</blockquote>
<h3 id="设置TCP-IP数据转发"><a href="#设置TCP-IP数据转发" class="headerlink" title="设置TCP&#x2F;IP数据转发"></a>设置TCP&#x2F;IP数据转发</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/sysctl.<span class="property">conf</span></span><br></pre></td></tr></table></figure>
<p>插入一行,或者找到这行注释掉</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">net.<span class="property">ipv4</span>.<span class="property">ip_forward</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>保存并退出vim<br>执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sudo sysctl -p</span><br></pre></td></tr></table></figure>
<p>提示<code>net.ipv4.ip_forward=1</code>说明配置生效<br><img data-src="https://pic.imgdb.cn/item/66433ef60ea9cb1403b8aa32.png" alt="这里写图片描述"></p>
<h3 id="开放网络端口"><a href="#开放网络端口" class="headerlink" title="开放网络端口"></a>开放网络端口</h3><p>安装<code>iptables</code>(已经安装请忽略)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sudo apt-get install iptables</span><br></pre></td></tr></table></figure>
<p>开放1723端口</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sudo iptables -l <span class="variable constant_">INPUT</span> -p tcp -dport <span class="number">1723</span> -j <span class="variable constant_">ACCEPT</span>  </span><br><span class="line">或者: sudo iptables -l <span class="variable constant_">INPUT</span> -p tcp -dport <span class="number">1723</span> -j <span class="variable constant_">ACCEPT</span></span><br></pre></td></tr></table></figure>

<h3 id="重启pptpd"><a href="#重启pptpd" class="headerlink" title="重启pptpd"></a>重启pptpd</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sudo /etc/init.<span class="property">d</span>/procps restart</span><br></pre></td></tr></table></figure>
<p><img data-src="https://pic.imgdb.cn/item/66433ef60ea9cb1403b8aa21.png" alt="这里写图片描述"></p>
<p>到这里就搭建完毕了.</p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p><strong>1</strong> 如果虚拟专用网络 打不开浏览器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sudo iptables -A <span class="variable constant_">FORWARD</span> -s <span class="number">192.168</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> -p tcp -m tcp --tcp-flags <span class="variable constant_">SYN</span>,<span class="variable constant_">RST</span> <span class="variable constant_">SYN</span> -j <span class="variable constant_">TCPMSS</span> --set-mss <span class="number">1200</span></span><br></pre></td></tr></table></figure>
<p><strong>2</strong> 如果上不去网</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sudo iptables -t nat -A <span class="variable constant_">POSTROUTING</span> -s <span class="number">192.168</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> -o eth0 -jMASQUERADE</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如有不妥还请各位读者多多指出,这里多处参考网上资源</p>
</blockquote>
]]></content>
      <categories>
        <category>树莓派</category>
        <category>服务器搭建</category>
        <category>虚拟专用网络</category>
      </categories>
  </entry>
  <entry>
    <title>创建WiFi热点方法分享</title>
    <url>/1879.html</url>
    <content><![CDATA[<p>此方法创建wifi热点，笔记本和台式电脑都适用，但有两个基本要求<br>1、电脑有无线网卡<br>2、电脑接入有线网</p>
<p>具体步骤如下：<br><strong>1、</strong>打开电脑<code>运行</code>，输入<code>cmd</code>回车，打开命令行窗口；</p>
<p><strong>2、</strong>在命令行窗口中输入命令</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">netsh wlan set hostednetwork mode=allow ssid=fengge key=fengge520</span><br></pre></td></tr></table></figure>

<p>ssid&#x3D;fengge 此处设置wifi帐号，fengge为wifi 热点账号<br>key&#x3D;fengge520 此处设置wifi密码，fengge520为wifi热点密码</p>
<p><strong>3、</strong> 点击右下角网络图标,打开网络共享中心.</p>
<p><strong>4、</strong> 更改适配器设置<br><strong>5、</strong>我们会发现默认的无线网络连接之外多了一个<code>无线网络连接2</code>.这个就是用来承载wifi的无线连接<br><strong>6、</strong>右击<code>本地连接</code>,选择<code>属性</code>,再选择<code>共享</code>,并把连接共享下面的两个勾上</p>
<p>注意:家庭网络连接选择刚刚新增的无线网络连接,笔者这里是无线网络连接2</p>
<p><strong>7、</strong>再回到命令行窗口,输入下面命令，启动wifi热点</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">netsh wlan start hostednetwork</span><br></pre></td></tr></table></figure>

<p>如果显示<code>已承载网络</code>,说明wifi已经成功启动.</p>
<p>这里,您在其他的电脑或者手机上就能搜索到您自己设置的wifi热点了<br><strong>8、</strong>如果要关闭wifi热点,输入命令</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">netsh wlan stop hostednetwork</span><br></pre></td></tr></table></figure>
<p>如果显示<code>停止承载网络</code>,说明wifi关闭成功</p>
<p><strong>该方法在每次使用的时候都需要进行第7步，如果您觉得麻烦，可以在电脑桌面新建一个脚本文件，每次使用的时候只需要运行脚本即可，方法如下：</strong><br>首先在桌面新建一个文本文档，在文本文档中输入<code>netsh wlan start hostednetwork</code>这条启动wifi热点的命令</p>
<p>然后再保存退出，将文件名改为英文，文件后缀改为<code>.bat</code>,再用鼠标双击运行该脚本即可。<br>注意，改完后文件会变成下面这个样子</p>
<p>本博客仅供参考，希望对您有所帮助</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
  </entry>
  <entry>
    <title>Lua连续教程之Lua线程和状态</title>
    <url>/43588.html</url>
    <content><![CDATA[<p>Lua语言不支持真正的多线程，即不支持共享内存的抢占式线程。原因有两个，其一是IOS C没有提供这样的功能，因此也没有可移植的方法能在Lua中实现这种机制：</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>其二，也是更重要的原因，在于我们认为在Lua中引入多线程不是一个好主意。<br>多线程一般用于底层编程。像信号量和监视器这样的同步机制一般都是操作系统上下文提供的，而非应用程序提供。要查找和纠正多线程相关的bug是很困难的，其中有些Bug还会导致安全隐患。此外，程序中的一些需要同步的临界区还可能由于同步而导致性能问题。<br>多线程的这些问题源于线程抢占和共享内存，因此如果使用非抢先式的线程后者不使用共享内存就可以避免这些问题。Lua语言同时支持这两种方案。Lua语言的线程是协作式的，因此可以避免因不可预知的线程切换而带来的问题。另一方面，Lua状态之间不共享内存，因此也为Lua语言中实现并行化提供了良好基础。</p>
<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>在Lua语言中，协程的本质就是线程。我们可以认为协程是带有良好编程接口的线程，也可以认为线程是带有底层API的协程。<br>从C API的角度来看，把线程当作一个栈会比较有用；而从实现的角度来看，栈实际上就是线程。每个站都保存着一个线程中挂起的函数调用信息，外加每个函数调用的参数和局部变量。换句话说，一个栈包括了一个线程得以继续运行所需的所有信息。因此，多个线程就意味着多个独立的栈。<br>Lua语言中 CAPI的大多数函数操作的特定的栈，Lua是如何知道应该使用哪个栈的呢？当调用lua_pushnumber时，是怎么制定将数字压入何处的呢？秘密在于lua_State类型，即这些函数的第一个参数，它不仅表示一个Lua状态，还表示带有该状态的一个线程。<br>当创建一个Lua状态时，Lua就会自动用这个状态创建一个主线程，并返回代表该线程的lua_State。这个主线程永远不会被垃圾回收，它只会调用lua_close关闭状态时随着状态一起释放。与线程无关的程序会在这个主线程中运行所有的代码。<br>调用lua_newthread可以在一个状态中创建其他的线程：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">lua_State *<span class="title function_">lua_newthread</span> <span class="params">(lua_State *L)</span>;</span><br></pre></td></tr></table></figure>
<p>该函数会将新线程作为一个”thread”类型的值压入栈中，并返回一个表示新线程的lua_State类型的指针。例如，考虑如下的语句：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">L1 = lua_newthread(L);</span><br></pre></td></tr></table></figure>
<p>执行上述代码后，我们就有了两个线程L1和L，它们都在内部引用了相同的Lua状态。每个线程都有其自己的栈。新线程L1从空栈开始运行，而老线程L在其栈顶会引用这个新线程：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,lua_gettop(L1));  -- <span class="number">0</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,luaL_typename(L,<span class="number">-1</span>));   -- thread</span><br></pre></td></tr></table></figure>
<p>除主线程以外，线程和其他的Lua对象一样都是垃圾回收的对象。当新建一个线程时，新创建的线程会被压入栈中，这样就保证了新线程不会被垃圾收集。永远不要使用未被正确锚定在Lua状态中的线程。所有对LuaAPI的调用都有可能回收未锚定的线程，即使是在正在使用这个线程的函数调用。例如，考虑如下的代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">lua_State *L1 = lua_newthread(L);</span><br><span class="line">lua_pop(L,<span class="number">1</span>);</span><br><span class="line">lua_pushstring(L1,<span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>调用lua_pushstring可能会触发垃圾收集器并回收L1，从而导致应用崩溃，尽管L1正在被使用。要避免这种情况，应该在诸如一个已锚定线程的栈、注册表或Lua变量中保留一个对使用中线程的引用。<br>一旦拥有一个新线程，我们就可以像使用主线程一样来使用它了。我们可以将元素压入栈中，或者从栈中弹出元素，还可以用它来调用函数等等。例如，如下代码在新线程中调用了f(5)，然后将结果传递到老线程中：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">lua_getglobal(L1,<span class="string">&quot;f&quot;</span>);  <span class="comment">/* 假设&#x27;f&#x27;是一个全局函数 */</span></span><br><span class="line">lua_pushinteger(L1,<span class="number">5</span>);</span><br><span class="line">lua_call(L1,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">lua_xmove(L1,L,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>函数lua_xmove可以在同一个Lua状态的两个栈之间移动Lua值。一个形如lua_xmove(F,T,n)的调用会从栈F中弹出n个元素，并将它们压入栈T中。<br>不过，对于这类用法，我们不需要用新线程，用主线程就足够了。使用多线程的主要目的是实现协程，从而可以挂起某些协程的执行，并在之后恢复执行。因此，我们需要用到函数lua_resume：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">lua_resume</span> <span class="params">(lua_State *L,lua_State *from, <span class="type">int</span> narg)</span>;</span><br></pre></td></tr></table></figure>
<p>要启动一个协程，我们可以像使用lua_pcall一样使用lua_resume：将待调用函数压入栈，然后压入协程的参数，并以参数的数量作为参数narg调用lua_resume（参数from是正在执行调用的线程，或为NULL）。这个行为与lua_pcall类似，但有三个不同点。首先，lua_resume中没有表示期望结果数量的参数，它总是返回被调用函数的额所有结果。其次，它没有表示错误处理函数的参数，发生错误时不会进行栈展开，这样我们就可以在错误发生后检查栈的情况。最后，如果正在运行的哈数被挂起，lua_resume就会返回代码LUA_YIELD,并将线程置于一个可以后续再恢复执行的状态中。<br>当lua_resume返回LUA_YIELD时，线程栈中的可见部分只包含传递给yield的值。调用lua_gettop会返回这些值的个数。如果要将这些值转移到另一个线程，可以使用lua_xmove。<br>要恢复一个挂起的线程，可以再次调用lua_resume。在这种调用中，Lua假设栈中所有的值都会被调用的yield返回。例如，如果在一个lua_resume返回后到再次调用lua_resume时不改变线程的栈，那么yield会原样返回它产生的值。<br>通常，我们会把一个Lua函数作为协程启动协程。这个Lua函数可以调用其他Lua函数，并且其中任意一个函数都可以挂起，从而结束对lua_resume的调用。例如，假设有如下定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">function <span class="title function_">foo</span><span class="params">(x)</span> coroutine.<span class="title function_">yield</span><span class="params">(<span class="number">10</span>,x)</span> end</span><br><span class="line">function <span class="title function_">foo1</span><span class="params">(x)</span> <span class="title function_">foo</span><span class="params">(x + <span class="number">1</span>)</span>; <span class="keyword">return</span> <span class="number">3</span> end</span><br></pre></td></tr></table></figure>
<p>现在运行一下C语言代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">lua_State *L1 = lua_newthread(L);</span><br><span class="line">lua_getglobal(L1,<span class="string">&quot;foo1&quot;</span>);</span><br><span class="line">lua_pushinteger(L1,<span class="number">20</span>);</span><br><span class="line">lua_Resume(L1,L,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>调用lua_resume会返回LUA_YIELD，表示线程已交出了控制权。此时，L1的栈便有了位yield指定的值：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,lua_gettpo(L1));			--&gt; <span class="number">2</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,lua_tointeger(L1,<span class="number">1</span>));   --&gt; <span class="number">10</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,lua_tointeger(L1,<span class="number">2</span>));   --&gt; <span class="number">21</span></span><br></pre></td></tr></table></figure>
<p>当恢复此线程时，它会从挂起的地方（即调用yield的地方）继续执行。此时，foo会返回到foo1，foo1继而又返回到lua_resume:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">lua_resume(L1,L,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,lua_gettpo(L1));   --&gt; <span class="number">1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,lua_tointeger(L1,<span class="number">1</span>));  --&gt;<span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>第二次调用lua_resume是会返回NULL_OK，表示一个正常的返回。<br>一个协程也可以调用C语言函数，而C语言函数又可以反过来调用其他Lua函数。我们已经讨论过如何使用延续来让这些Lua函数交出控制权。C语言函数也可以交出控制权。在这这种情况下，它必须提供一个在线恢复时被调用的延续函数。要交出控制权，C语言函数必须调用如下的函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">lua_yield</span> <span class="params">(lua_State *L, <span class="type">int</span> nresults, <span class="type">int</span> ctx, lua_CFunction k)</span>;</span><br></pre></td></tr></table></figure>
<p>在返回语句中我们应该始终使用这个函数，例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> inf <span class="title function_">myCfunction</span><span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	...</span><br><span class="line">	<span class="keyword">return</span> lua_yieldk(L,nreseults,ctx, k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个调用会立即挂起正在运行的协程。参数nresults是将要返回给对应的lua_resume的栈中的值的个数；参数ctx是传递给延续的上下文信息；参数k是延续函数。当协程恢复运行时，控制权会直接交给延续函数k；当协程交出控制权后，myCfunction就不会再有其他任何动作，它必须将所有后续的工作委托给延续函数处理。<br>让我们看一个典型的例子。假设要编写一个读取数据的函数，如果无数据可读则交出控制权。我们可能会用C语言写出一个这样的函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">readK</span> <span class="params">(lua_State *L,<span class="type">int</span> status, lua_KContext ctx)</span>&#123;</span><br><span class="line">	(<span class="type">void</span>)status;(<span class="type">void</span>)ctx; <span class="comment">/* 未使用的参数 */</span></span><br><span class="line">	<span class="keyword">if</span> (something_to_read())&#123;</span><br><span class="line">		lua_pushstring(L,read_some_data());</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> lua_yieldk(L,<span class="number">0</span>,<span class="number">0</span>,&amp;readK);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">prim_read</span><span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> readK(L,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个示例中，prim_read无须做任何初始化，因此它可以直接调用延续函数。如果有数据可读。readK会读取并返回数据；否则，它会交出控制权。当线程恢复时，prim_read会再次调用延续函数，该延续函数会再次尝试读取数据。<br>如果C语言函数在交出控制权之后什么都不做，那么它可以不带延续函数调用lua_yieldk或者使用宏lua_yield:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> lua_yield(L,nres);</span><br></pre></td></tr></table></figure>
<p>在这一句调用之后，当线程恢复时，控制权会返回到名为myCfunction的函数中。</p>
<h2 id="Lua状态"><a href="#Lua状态" class="headerlink" title="Lua状态"></a>Lua状态</h2><p>每次调用luaL_newstate(或lua_newstate)都会创建一个新的Lua状态。不同的Lua状态之间是完全独立的，它们根本不共享数据。也就是说，无论在一个Lua状态中发生了什么，都不会影响其他Lua状态。这也意味着Lua状态之间不能直接通信，因而必须借助一些C语言代码的帮助。例如，给定两个状态L1和L2，如下命令会将L1栈顶的字符串压入L2的栈中：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">lua_pushstring(L2,lua_tostring(L1,<span class="number">-1</span>));</span><br></pre></td></tr></table></figure>
<p>由于所有数据必须由C语言进行传递，因此Lua状态之间只能交换能够使用C语言表示的类型，例如字符串和数值。其他诸如表之类的类型必须序列化后才能传递。<br>在支持多线程的系统中，一种有趣的设计是为每个线程创建一个独立的Lua状态。这种设计使得线程类似于POSIX进程，它实现了非共享内存的并发。在本节中，我们会根据这种方法开发一个多线程的原型实现。在这个实现中，将会使用POSIX线程。因为这些代码只使用了一些基础功能，所以将它们移植到其他线程系统中并不难。<br>我们要开发的系统很简单，其主要目的是演示一个多线程环境中使用多个Lua状态。在这个系统开始运行之后，我们可以为它添加几个高级功能。我们把这个库称为lproc，它只提供4个函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">lproc.start(chunk)</span><br></pre></td></tr></table></figure>
<p>启动一个新进程来运行指定的代码段（一个字符串）。这个库将Lua进程实现为一个C语言进程外加与其相关联的Lua状态。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">lproc.send(channel,val1,val2,...)</span><br></pre></td></tr></table></figure>
<p>将所有指定值（应为字符串）发送给指定的、由名称（也是一个字符串）标识的通道。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">lproc.receive(channel)</span><br></pre></td></tr></table></figure>
<p>接收发送给指定通道的值。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">lproc.<span class="built_in">exit</span>()</span><br></pre></td></tr></table></figure>
<p>结束一个进程。只有主进程需要这个函数。如果主程序不调用lproc.exit就直接结束，那么整个程序会终止，而不会等待其他进程结束。<br>这个库通过字符串标识不同的通道，并通过字符串来匹配发送者和接收这。一个发送操作可以发送任意数量的字符串，这些字符串由对应的接收操作返回。所有的通信都是同步的，向通道发送消息的进程会一直阻塞，知道有进程从该通道接收信息，从而通道接收信息的进程会一直阻塞，直至有进程向其发送消息。<br>lproc的实现像其接口一样简单，它使用了两个循环双向链表，一个用于等待发送消息的进程，另一个用于等待接收消息的进程。lproc使用一个互斥量来控制对着两个链表的访问。每个进程有一个关联的条件变量。当进程要向通道发送一条消息时，它会遍历接收链表以查找一个在该通道上等到的进程。如果找到了这样的进程，它会将该进程从等待链表中删除，并将消息的值从自身转移到找到的进程中，然后通知其他进程；否则，它就将自己插入发送链表，然后等待其条件变量发生变化。接收消息的操作也与此基本类似。<br>在这种实现中，主要的元素之一就是表示进程的结构体：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;lua.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;luaxlib.h&quot;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Proc</span>&#123;</span></span><br><span class="line">	lua_State *L;</span><br><span class="line">	<span class="type">pthread_t</span> thread;</span><br><span class="line">	<span class="type">pthread_cond_t</span> cond;</span><br><span class="line">	<span class="type">const</span> <span class="type">char</span> *channel;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Proc</span> *<span class="title">previous</span>, *<span class="title">next</span>;</span></span><br><span class="line">&#125;Proc;</span><br></pre></td></tr></table></figure>
<p>前两个字段表示进程使用的Lua状态和运行该进程的C线程。第三个字段cond是条件变量，线程会在等待匹配的发送&#x2F;接收时用它来使自己进入则塞状态。第四个字段保存了进程正在等待的通过。最后两个字段previous和next将进程的结构体组成等待链表。<br>下面的代码声明了两个等待链表及关联的互斥量：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> Proc *waitsend = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">static</span> Proc *waitreceive = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">pthread_mutex_t</span> kernel_access = PTHERAD_MUTEX_INITIALIZER;</span><br></pre></td></tr></table></figure>
<p>每个进程都需要一个Proc结构体，并且进程脚本调用send或receive时就需要访问这个结构体。这些函数接收的唯一参数就是进程的Lua状态；因此，每个进程都应该将其Proc结构体保存在其Lua状态中。在我们的实现中，每个状态都将其对应的Proc结构体作为完整的用户数据存储在注册表中，关联的键为”_SELF”。辅助函数getself可以从指定的状态中获取相关联的Prco结构体：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> Proc *<span class="title function_">getself</span><span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	Proc *p;</span><br><span class="line">	lua_getfield(L&lt;LUA_REGISTRYINDEX,<span class="string">&quot;_SELF&quot;</span>);</span><br><span class="line">	p = (Proc *)lua_touserdata(L,<span class="number">-1</span>);</span><br><span class="line">	lua_pop(L,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下一个函数，movevalues，将值从发送进程移动到接收进程：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">movevalues</span><span class="params">(lua_State *send, lua_State *rec)</span>&#123;</span><br><span class="line">	<span class="type">int</span> n = lua_gettop(send);</span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line">	lua_checkstack(rec,n,<span class="string">&quot;too many results&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">		lua_pushstring(rec,lua_tostring(send,i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个函数将发送进程的栈中所有的值移动到接收进程的栈中。请注意，在压入任意数量的元素时，需要检查栈空间。<br>示例定义了函数searchhmatch,该函数会遍历列表以寻找等待指定通道的进程。</p>
<blockquote>
<p>示例 用于寻找等待通道的进程的函数</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> Proc *<span class="title function_">serachmatch</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *channel, Proc **<span class="built_in">list</span>)</span>&#123;</span><br><span class="line">	Proc *node;</span><br><span class="line">	<span class="keyword">for</span> (node = *<span class="built_in">list</span>; node != <span class="literal">NULL</span>; node = node -&gt;next)&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">strcmp</span>(channel, node -&gt;channel) == <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span> (*<span class="built_in">list</span> == node)</span><br><span class="line">				*<span class="built_in">list</span> = (node-&gt;next == node)?<span class="literal">NULL</span>:node-&gt;next;</span><br><span class="line">			node-&gt;provious-&gt;next = node -&gt;next;</span><br><span class="line">			node-&gt;next-&gt;previous = node -&gt;previous;</span><br><span class="line">			<span class="keyword">return</span> node;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果找到一个进程，那么该函数会将这个进程从列表中移除并返回该进程；否则，该函数会返回NULL。<br>当找不到匹配的进程时，会调用最后的辅助函数，参见下例</p>
<blockquote>
<p>示例 用于在等待列表中新增一个进程的函数</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">waitonlist</span> <span class="params">(lua_State *L, <span class="type">const</span> <span class="type">char</span> *channel, Proc **<span class="built_in">list</span>)</span>&#123;</span><br><span class="line">	Proc *p = getself(L);</span><br><span class="line">	<span class="keyword">if</span> (*<span class="built_in">list</span> == <span class="literal">NULL</span>)&#123;</span><br><span class="line">		*<span class="built_in">list</span> = p;</span><br><span class="line">		p-&gt;previous = p-&gt;next = p;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		p-&gt;previous = (*<span class="built_in">list</span>)-&gt; previous;</span><br><span class="line">		p-&gt;next = *<span class="built_in">list</span>;</span><br><span class="line">		p-&gt;previous-&gt;next = p-&gt;next-&gt;previous = p;</span><br><span class="line">	&#125;</span><br><span class="line">	p-&gt;channel = channel;</span><br><span class="line">	<span class="keyword">do</span>&#123;</span><br><span class="line">		pthread_cond_wait(&amp;p-&gt;cond,&amp;kernel_access);</span><br><span class="line">	&#125;<span class="keyword">while</span>(p-&gt;channel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这种情况下，进程会将自己链接到相应等待链表的末尾，然后进入等待状态，知道另一个进程与之匹配并将其唤醒。当一个进程唤醒另一个进程时，它会将另一个进程的channel字段设置为NULL。因此，如果p-&gt;channel不是NULL，那就表示尚未出现与进程p匹配的进程，所以需要继续等待。<br>有了这些辅助函数，我们就可以编写send和receive了</p>
<blockquote>
<p>示例 用于发送和接收消息的函数</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">ll_send</span><span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	Proc *p;</span><br><span class="line">	<span class="type">const</span> <span class="type">char</span> *channel = luaL_checkstring(L,<span class="number">1</span>);</span><br><span class="line">	pthread_mutex_lock(&amp;kernel_access);</span><br><span class="line">	p = searchmatch(channel,&amp;waitreceive);</span><br><span class="line">	<span class="keyword">if</span>(p)&#123;</span><br><span class="line">		movevalues(L,p-&gt;L);</span><br><span class="line">		p-&gt;channel = <span class="literal">NULL</span>;</span><br><span class="line">		pthread_cond_signal(&amp;p-&gt;cond);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		waitonlist(L,channel,&amp;waitsend);</span><br><span class="line"></span><br><span class="line">	pthread_mutex_unlock(&amp;kernel_access);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">ll_receive</span> <span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	Proc *p;</span><br><span class="line">	<span class="type">const</span> <span class="type">char</span> *channel = luaL_checkstring(L,<span class="number">1</span>);</span><br><span class="line">	lua_settop(L,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	pthread_mutex_lock(&amp;kernel_access);</span><br><span class="line">	p = searchmatch(channel,&amp;waitsend);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(p)&#123;</span><br><span class="line">		movevalues(p-&gt;L,L);</span><br><span class="line">		p-&gt;channel = <span class="literal">NULL</span>;</span><br><span class="line">		pthread_cond_signal(&amp;p-&gt;cond);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		waitonlist(L,channel,&amp;waitreceive);</span><br><span class="line"></span><br><span class="line">	pthread_mutex_unlock(&amp;kernel_access);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> lua_gettop(L) <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>函数ll_send先获取通道，然后锁住互斥量并搜索匹配的接收进程。如果找到了，就把待发送的值传递给这个接收进程，然后将接收进程标记为就绪状态并唤醒接收进程。否则，发送进程就将自己放入等待链表。当操作完成后，ll_send解锁互斥量且不向Lua返回任何值。函数ll_receive与之类似，但它会返回所有接收到的值。<br>现在，让我们看一下如何创建新进程。新进程需要一个新的POSIX线程，而POSIX线程的运行需要一个线程体。我们会在后面的内容中定义这个线程体。在此，先看一下它的原型，这是pthreads所需求的：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> *<span class="title function_">ll_thread</span><span class="params">(<span class="type">void</span> *arg)</span>;</span><br></pre></td></tr></table></figure>
<p>要创建并运行一个新进程，我们开发的系统必须创建一个新的Lua状态，启动一个新线程，编译指定的代码段，调用该代码段，最后释放其资源。原线程会完成前面三个任务，而新线程则负责其余任务。<br>函数ll_start可以创建一个新的进程。</p>
<blockquote>
<p>示例 用于创建进程的函数</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">ll_start</span><span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	<span class="type">pthread_t</span> thread;</span><br><span class="line">	<span class="type">const</span> <span class="type">char</span> *chunk = luaL_checkstring(L,<span class="number">1</span>);</span><br><span class="line">	lua_State *L1 = luaL_newstate();</span><br><span class="line">	<span class="keyword">if</span>(L1 == <span class="literal">NULL</span>)</span><br><span class="line">		lua_error(L,<span class="string">&quot;unable to create new state&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (luaL_loadstring(L1,chunk) ！= <span class="number">0</span>)</span><br><span class="line">		luaL_error(L,<span class="string">&quot;error in thread body:%s&quot;</span>,lua_tostring(L1,<span class="number">-1</span>));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(pthread_create(&amp;thread,<span class="literal">NULL</span>,ll_thread,L1)!=<span class="number">0</span>)</span><br><span class="line">		luaL_error(L,<span class="string">&quot;unable to create new thread&quot;</span>);</span><br><span class="line"></span><br><span class="line">	pthread_detach(thread);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该函数创建了一个新的Lua状态L1，并在其中编译了指定的代码段。如果有错误发生，该函数会把错误传递给原来的状态L。然后，该函数使用ll_thread作为线程体创建一个新线程，同时将新状态L1作为参数传递给这个线程体。最后，该函数调用pthread_detach通知系统我们不需要该线程的任何运行结果。<br>每个新线程的线程体都是函数ll_thread，它接手相应的Lua状态，这个Lua状态的栈中只含有预编译的主代码段。</p>
<blockquote>
<p>示例  新线程的线程体</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">luaopen_lproc</span><span class="params">(lua_State *L)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *<span class="title function_">ll_thread</span><span class="params">(<span class="type">void</span> *arg)</span>&#123;</span><br><span class="line">	lua_State *L = (lua_State *) arg;</span><br><span class="line">	Proc *self;</span><br><span class="line"></span><br><span class="line">	openlibs(L);</span><br><span class="line">	luaL_requiref(L,<span class="string">&quot;lproc&quot;</span>,luaopen_lproc,<span class="number">1</span>);</span><br><span class="line">	lua_pop(L,<span class="number">1</span>);</span><br><span class="line">	self = (Proc *)lua_newuserdata(L,<span class="keyword">sizeof</span>(Proc));</span><br><span class="line">	lua_setfield(L,LUA_REGISTRYINDEX, <span class="string">&quot;_SELF&quot;</span>);</span><br><span class="line">	self-&gt;L = L;</span><br><span class="line">	self-&gt;thread = pthread_self();</span><br><span class="line">	self-&gt;channel = <span class="literal">NULL</span>;</span><br><span class="line">	pthread_cond_init(&amp;self-&gt;cond,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(lua_pcall(L,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,)!=<span class="number">0</span>)</span><br><span class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;thread error: %s&quot;</span>,lua_tostring(L,<span class="number">-1</span>));</span><br><span class="line"></span><br><span class="line">	pthread_cond_destroy(&amp;getself(L)-&gt;cond);</span><br><span class="line">	lua_close(L);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先，该函数打开Lua标准库和库lproc；之后，它创建并初始化其自身的控制块；然后，调用主代码段；最后，销毁其条件变量并关闭Lua状态。<br>请注意使用luaL_requiref打开库lproc的用法。这个函数在某种意义上等价于require，但它用指定函数来打开库而没有搜索打开函数。在调用这个打开函数后，luaL_requiref会在表package.loaded中注册结果，这样以后再调用require加载这个库时就无须再次打开库了。当luaL_requiref的最后一个参数为真时，该函数还会在相应的全局变量中注册这个库。<br>示例演示了这个模块中的最后一个函数</p>
<blockquote>
<p>示例 模块lproc的其他函数</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> inti <span class="title function_">ll_exit</span><span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">luaL_Reg</span> <span class="title">l_funcs</span>[] =</span>&#123;</span><br><span class="line">	&#123;<span class="string">&quot;start&quot;</span>,ll_start&#125;,</span><br><span class="line">	&#123;<span class="string">&quot;send&quot;</span>,ll_send&#125;,</span><br><span class="line">	&#123;<span class="string">&quot;receive&quot;</span>,ll_receive&#125;,</span><br><span class="line">	&#123;<span class="string">&quot;exit&quot;</span>,ll_exit&#125;,</span><br><span class="line">	&#123;<span class="literal">NULL</span>,<span class="literal">NULL</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">luaopen_lproc</span><span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	luaL_newlib(L,ll_funcs);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这两个函数都很简单。函数ll_exit应该只能在主进程结束时由主进程调用，以避免整个程序立即结束。函数luaopen_lproc是用于打开这个模块的标准函数。<br>正如笔者之前说过的，在Lua语言中这种进程的实现方式非常简单。我们可以对它进行各种改进，这里简单介绍几种。<br>第一种显而易见的改进是改变对匹配通道的线性查找，更好的选择是用哈希表来寻找通道，并为每个通道设置一个独立的等待列表。<br>另一种改进涉及创建进程的效率。创建一个新的Lua状态时一个轻量级操作，但打开所有的标准库可不是轻量级的，并且大部分进程可能并不需要用到所有的标准库。我们可以通过对库进行预注册来避免打开无用的库。相对于为每个标准库调用luaL_requiref，使用这种方法时我们只需要将库的打开函数放入表package.preload中即可。当且仅当进程调用require”lib”时，require才会调用这个与库相关的函数来打开库。</p>
<blockquote>
<p>示例 注册按需打开的库</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">registerlib</span> <span class="params">(lua_State *L, <span class="type">const</span> <span class="type">char</span> *name,lua_CFunction f)</span>&#123;</span><br><span class="line">	lua_getglobal(L,<span class="string">&quot;package&quot;</span>);</span><br><span class="line">	lua_getfield(L,<span class="number">-1</span>,<span class="string">&quot;preload&quot;</span>);</span><br><span class="line">	lua_pushcfunction(L,f);</span><br><span class="line">	lua_setfield(L,<span class="number">-2</span>,name);</span><br><span class="line">	lua_pop(L,<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">openlibs</span><span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	luaL_requiref(L,<span class="string">&quot;_G&quot;</span>,luaopen_base,<span class="number">1</span>);</span><br><span class="line">	lua_requiref(L,<span class="string">&quot;package&quot;</span>,luaopen_package,<span class="number">1</span>);</span><br><span class="line">	lua_pop(L,<span class="number">2</span>);</span><br><span class="line">	registerlib(L,<span class="string">&quot;coroutine&quot;</span>,luaopen_coroutine);</span><br><span class="line">	registerlib(L,<span class="string">&quot;table&quot;</span>,luaopen_table);</span><br><span class="line">	registerlib(L,<span class="string">&quot;io&quot;</span>,luaopen_io);</span><br><span class="line">	registerlib(L,<span class="string">&quot;os&quot;</span>,luaopen_os);</span><br><span class="line">	registerlib(L,<span class="string">&quot;string&quot;</span>,luaopen_string);</span><br><span class="line">	registerlib(L,<span class="string">&quot;math&quot;</span>,luaopen_math);</span><br><span class="line">	registerlib(L,<span class="string">&quot;utf8&quot;</span>,luaopen_utf8);</span><br><span class="line">	registerlib(L,<span class="string">&quot;debug&quot;</span>,luaopen_debug);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一般情况都需要打开基础库。另外，我们还需要package库；如果没有package库，就无法通过require来打开其他库。所有其他的库都是可选的。因此，除了调用luaL_openlibs之外，可以在打开新状态时调用我们自己的函数openlibs。当进程需要用到其中任意一个库时，只需显式地调用require，require就会调用相应的luaopen_*函数ll_start可以创建一个新的进程。<br>另一个改进涉及通信原语。例如，为lproc.send和lproc.receive设置一个等待匹配的时间阀值会非常有用。特别的，当等待时间阈值为零时，这两个函数会成为非阻塞的。在POSIX线程中，可以用pthread_cond_timedwait实现这个功能。</p>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>Lua编程</category>
        <category>并发编程</category>
      </categories>
  </entry>
  <entry>
    <title>给hexo博客添加历史上的今天侧边栏</title>
    <url>/bfdsa78.html</url>
    <content><![CDATA[<h3 id="故事背景"><a href="#故事背景" class="headerlink" title="故事背景"></a>故事背景</h3><p>趁着周末，将文章的主题升级了一遍，不小心把<code>历史上的今天</code>侧边栏给弄丢了，今天是花了一点时间找了回来，并记录一下，万一下次不见了，就不用到处找了~</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h3 id="做的原因"><a href="#做的原因" class="headerlink" title="做的原因"></a>做的原因</h3><p>或许很多人会很奇怪，博客为什么一定要有<code>历史上的今天</code>。原因很简单，因为我弄了个抖音，就是发这个历史上的今天，视频直接就是网站录屏，如果博客没有这个东西，我就要断更了(其实已经断更一天了)，顺带贴下自己的抖音，各位小伙伴有可以关注下啦~</p>
<p><a href="https://www.douyin.com/user/MS4wLjABAAAAGVvxXoafRJrfCUH8PiT5yO--ToMDJnA_7UpHsFucUuQDDEF4aHy6XOAIedS4rD7W">抖音链接</a></p>
<h3 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h3><p>网上有很多实现方法，但是大部分都比较繁琐，我这里就简单介绍下我的做法吧。</p>
<ol>
<li>安装插件，执行下面命令<br><code>npm i hexo-history-calendar --save</code></li>
<li>安装好插件后，在站点的<code>_config.yml</code>文件夹中添加下面语句：<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 那年今日</span></span><br><span class="line"><span class="attr">history_calendar:</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">4</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">layout:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">class</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sticky_layout</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">temple_html:</span> <span class="string">&#x27;&lt;div class=&quot;card-widget card-history&quot;&gt;&lt;div class=&quot;card-content&quot;&gt;&lt;div class=&quot;item-headline&quot;&gt;&lt;i class=&quot;fas fa-clock fa-spin&quot;&gt;&lt;/i&gt;&lt;span&gt;那年今日&lt;/span&gt;&lt;/div&gt;&lt;div id=&quot;history-baidu&quot; style=&quot;height: 100px;overflow: hidden&quot;&gt;&lt;div class=&quot;history_swiper-container&quot; id=&quot;history-container&quot; style=&quot;width: 100%;height: 100%&quot;&gt;&lt;div class=&quot;swiper-wrapper&quot; id=&quot;history_container_wrapper&quot; style=&quot;height:20px&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&#x27;</span></span><br></pre></td></tr></table></figure>
上面都做好后，一键三连就可以看到效果啦~</li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>用python画一只布朗熊</title>
    <url>/37340.html</url>
    <content><![CDATA[<p>无意间在抖音发了一个用python画布朗熊的视频，没想到想要代码的人还挺多，现在就把代码发布在这里，需要的朋友自取。</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<blockquote>
<p>特别注意：python版本过高可能报turtle版本低的错误。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> turtle <span class="keyword">import</span> *</span><br><span class="line">ht()</span><br><span class="line">setup(<span class="number">400</span>,<span class="number">800</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">seth(<span class="number">0</span>)</span><br><span class="line">pensize(<span class="number">3</span>)</span><br><span class="line">pencolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">pu()  <span class="comment">#penup()</span></span><br><span class="line">goto(<span class="number">0</span>,<span class="number">100</span>)</span><br><span class="line">pd()  <span class="comment">#pendown()</span></span><br><span class="line">fillcolor(<span class="string">&quot;brown&quot;</span>)</span><br><span class="line">begin_fill()</span><br><span class="line">circle(<span class="number">100</span>)</span><br><span class="line">end_fill()</span><br><span class="line">pu()</span><br><span class="line">goto(<span class="number">0</span>,<span class="number">150</span>)</span><br><span class="line">pd()</span><br><span class="line">fillcolor(<span class="string">&quot;white&quot;</span>)</span><br><span class="line">begin_fill()</span><br><span class="line">pencolor(<span class="string">&quot;white&quot;</span>)</span><br><span class="line">circle(<span class="number">30</span>)</span><br><span class="line">end_fill()</span><br><span class="line">pencolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">pu()</span><br><span class="line">goto(<span class="number">0</span>,<span class="number">179</span>)</span><br><span class="line">lt(<span class="number">45</span>)</span><br><span class="line">fd(<span class="number">35</span>)</span><br><span class="line">rt(<span class="number">45</span>)</span><br><span class="line">pd()</span><br><span class="line">fillcolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">begin_fill()</span><br><span class="line">circle(<span class="number">10</span>)</span><br><span class="line">end_fill()</span><br><span class="line">pu()</span><br><span class="line">goto(<span class="number">0</span>,<span class="number">179</span>)</span><br><span class="line">lt(<span class="number">135</span>)</span><br><span class="line">fd(<span class="number">35</span>)</span><br><span class="line">rt(<span class="number">135</span>)</span><br><span class="line">pd()</span><br><span class="line">fillcolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">begin_fill()</span><br><span class="line">circle(<span class="number">10</span>)</span><br><span class="line">end_fill()</span><br><span class="line">pu()</span><br><span class="line">goto(<span class="number">0</span>,<span class="number">180</span>)</span><br><span class="line">pd()</span><br><span class="line">fillcolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">begin_fill()</span><br><span class="line">circle(<span class="number">6</span>)</span><br><span class="line">end_fill()</span><br><span class="line">goto(-<span class="number">3</span>,<span class="number">180</span>)</span><br><span class="line">seth(-<span class="number">135</span>)</span><br><span class="line">pensize(<span class="number">5</span>)</span><br><span class="line">fd(<span class="number">12</span>)</span><br><span class="line">pu()</span><br><span class="line">goto(<span class="number">3</span>,<span class="number">180</span>)</span><br><span class="line">pd()</span><br><span class="line">seth(-<span class="number">45</span>)</span><br><span class="line">pensize(<span class="number">5</span>)</span><br><span class="line">fd(<span class="number">12</span>)</span><br><span class="line">pensize(<span class="number">3</span>)</span><br><span class="line">pu()</span><br><span class="line">goto(<span class="number">0</span>,<span class="number">200</span>)</span><br><span class="line">seth(<span class="number">30</span>)</span><br><span class="line">fd(<span class="number">100</span>)</span><br><span class="line">pd()</span><br><span class="line">fillcolor(<span class="string">&quot;brown&quot;</span>)</span><br><span class="line">begin_fill()</span><br><span class="line">circle(<span class="number">30</span>,<span class="number">215</span>)</span><br><span class="line">end_fill()</span><br><span class="line">pu()</span><br><span class="line">goto(<span class="number">0</span>,<span class="number">200</span>)</span><br><span class="line">seth(<span class="number">150</span>)</span><br><span class="line">fd(<span class="number">100</span>)</span><br><span class="line">pd()</span><br><span class="line">fillcolor(<span class="string">&quot;brown&quot;</span>)</span><br><span class="line">begin_fill()</span><br><span class="line">circle(-<span class="number">30</span>,<span class="number">215</span>)</span><br><span class="line">end_fill()</span><br><span class="line">pu()</span><br><span class="line">goto(<span class="number">50</span>*<span class="built_in">pow</span>(<span class="number">3</span>,<span class="number">0.5</span>),<span class="number">152</span>) <span class="comment">#pow(x,y)=x**y</span></span><br><span class="line">seth(<span class="number">60</span>)</span><br><span class="line">pd()</span><br><span class="line">fillcolor(<span class="string">&quot;brown&quot;</span>)</span><br><span class="line">begin_fill()</span><br><span class="line">circle(-<span class="number">15</span>,<span class="number">180</span>)</span><br><span class="line">circle(-<span class="number">130</span>,<span class="number">30</span>)</span><br><span class="line">seth(-<span class="number">90</span>)</span><br><span class="line">circle(-<span class="number">1000</span>,<span class="number">8</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">         seth(-<span class="number">90</span>)</span><br><span class="line">         circle(-<span class="number">27</span>,<span class="number">180</span>)</span><br><span class="line">lt(<span class="number">10</span>)</span><br><span class="line">circle(-<span class="number">1000</span>,<span class="number">8</span>)</span><br><span class="line">seth(<span class="number">150</span>)</span><br><span class="line">circle(-<span class="number">130</span>,<span class="number">30</span>)</span><br><span class="line">circle(-<span class="number">16</span>,<span class="number">180</span>)</span><br><span class="line">circle(<span class="number">100</span>,<span class="number">120</span>)</span><br><span class="line">end_fill()</span><br><span class="line">pu()</span><br><span class="line">goto(<span class="number">0</span>,<span class="number">80</span>)</span><br><span class="line">seth(<span class="number">0</span>)</span><br><span class="line">pd()</span><br><span class="line">pencolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">fillcolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">begin_fill()</span><br><span class="line">circle(-<span class="number">40</span>)</span><br><span class="line">end_fill()</span><br><span class="line">done()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>日常代码</category>
        <category>Python绘图</category>
        <category>创意编程</category>
        <category>抖音热门</category>
      </categories>
  </entry>
  <entry>
    <title>Lua连续教程之编写C函数的技巧</title>
    <url>/44511.html</url>
    <content><![CDATA[<p>Lua中的“数组”就是特殊方式使用的表。像lua-settable和lua-gettable这种用来操作表的通用函数，也可用于操作数组。不过，CAPI为使用整数索引的表的访问和封信提供了专门的函数。</p>
<span id="more"></span>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">lua_geti</span> <span class="params">(lua_State *L, <span class="type">int</span> index, <span class="type">int</span> key)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">lua_seti</span> <span class="params">(lua_State *L, <span class="type">int</span> index, <span class="type">int</span> key)</span>;</span><br></pre></td></tr></table></figure>
<p>Lua5.3之前的版本只提供了这些函数的原始版本，即lua_rawgeti和lua_rawseti。这两个函数类似于lua_geti和lua_seti，但进行的是原始访问。当区别并不明显时，那么原始版本可能会稍微快一点。<br>lua_geti和lua_seti的描述有一点令人困惑，因为其用了两个索引：index表示在栈中的位置，key表示元素在表中的位置。当t为正数时，那么调用lua_geti(L,t,key)等价于如下的代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">lua_pushnumber(L,key);</span><br><span class="line">lua_gettable(L,t);</span><br></pre></td></tr></table></figure>
<p>调用lua_seti(L,t,key)等价于如下的代码：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">lua_pushnumber(L,key);</span><br><span class="line">lua_insert(L,<span class="number">-2</span>);</span><br><span class="line">lua_settable(L,t);</span><br></pre></td></tr></table></figure>
<p>作为使用这些函数的具体示例，下面实现了函数map，该函数对数组中的所有元素调用一个指定的函数，然后用词函数返回的结果替换掉对应的数组元素。</p>
<blockquote>
<p>C语言中的函数map</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">l_map</span><span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	<span class="type">int</span> i , n;</span><br><span class="line">	<span class="comment">/*第一个参数必须是一张表(t) */</span></span><br><span class="line">	luaL_checktype(L,<span class="number">1</span>,LUA_TTABLE);</span><br><span class="line">	<span class="comment">/*第二个参数必须是一个函数(f) */</span></span><br><span class="line">	luaL_checktype(L,<span class="number">2</span>,LUA_TFUNCTION);</span><br><span class="line">	n = luaL_len(L,<span class="number">1</span>);<span class="comment">/*获取表的大小*/</span></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>;i &lt;=n; i++)&#123;</span><br><span class="line">		lua_pushvalue(L,<span class="number">2</span>); <span class="comment">/*压入f*/</span></span><br><span class="line">		lua_geti(L,<span class="number">1</span>,i); <span class="comment">/*压入t[i]*/</span></span><br><span class="line">		lua_call(L,<span class="number">1</span>,<span class="number">1</span>); <span class="comment">/*调用f(t[i])*/</span></span><br><span class="line">		lua_seti(L,<span class="number">1</span>,i); <span class="comment">/*t[i] = result */</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; <span class="comment">/* 没有返回值*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个示例还引入了三个新函数：luaL_checktype、luaL_len和lua_call。<br>函数luaL_checktype确保指定的参数具有指定的类型，否则它会引发一个错误。<br>原始的lua_len类似于长度运算符。由于元方法的存在，该运算符能够返回任意类型的对象，而不仅仅是数字；因此，lua_len会在栈中返回其结果。函数luaL_len会将长度作为整型数返回，如果无法进行强制类型转换则会引发错误。<br>函数lua_call做的是不受保护的调用，该函数类似于lua_pcall，但在发生错误时lua_call会传播错误而不是返回错误码。在一个应用中编写主函数时，不应使用lua_call，因为我们需要捕获所有的错误。不过，编写一个函数时，一般情况下使用lua_call是个不错的注意；如果发生错误，就留给关心错误的人去处理吧。</p>
<h2 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h2><p>当C函数接收到一个Lua字符串为参数时，必须遵守两条规则：在使用字符串期间不能从栈中将其弹出，而且不应该修改字符串。<br>当C函数需要创建一个返回给Lua的字符串时，要求则更高。此时，是C语言代码负责缓冲区的分配&#x2F;释放、缓冲区溢出，以及其他对C语言来说比较困难的任务。因此，LuaAPI提供了一些函数来帮助完成这些任务。<br>标准API为两种常用的字符串操作提供了支持，即子串提取和字符串连接。要提取子串，那么基本的操作lua_pushlstring可以获取字符串长度作为额外的参数。因此，如果要把字符串s从i到j（包含）的子串传递给Lua，就必须：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lua_pushlstring(L,s+i,j-i+1);</span><br></pre></td></tr></table></figure>
<p>举个例子，假设需要编写一个函数，该函数根据指定的分隔符来分隔字符串，并返回一张包含子串的表。例如，调用split(“hi:ho:there”,”:”)应该返回表{“hi”,”ho”,”there”}。下面示例演示了该函数的一种简单实现：</p>
<blockquote>
<p>分隔字符串</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">l_split</span><span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	<span class="type">const</span> <span class="type">char</span> *s = luaL_checkstring(L,<span class="number">1</span>);</span><br><span class="line">	<span class="type">const</span> <span class="type">char</span> *sep = luaL_checkstring(L,<span class="number">2</span>);</span><br><span class="line">	<span class="type">const</span> <span class="type">char</span> *e;</span><br><span class="line">	<span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">	lua_newtable(L); <span class="comment">/*结果表*/</span></span><br><span class="line">	<span class="comment">/* 依次处理每个分隔符*/</span></span><br><span class="line">	<span class="keyword">while</span> ((e = <span class="built_in">strchr</span>(s,*sep)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		lua_pushlstring(L,s,e - s); <span class="comment">/*压入子串*/</span></span><br><span class="line">		lua_rawseti(L,<span class="number">-2</span>,i++); <span class="comment">/* 向表中插入*/</span></span><br><span class="line">		s = e + <span class="number">1</span>; <span class="comment">/*跳过分隔符*/</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/* 插入最后一个子串*/</span></span><br><span class="line">	lua_pushstring(L,s);</span><br><span class="line">	lua_rawseti(L,<span class="number">-2</span>,i);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;<span class="comment">/*将结果表返回*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该函数无须缓冲区，并能处理任意长度的字符串，Lua语言会负责处理所有的内存分配。<br>要连接字符串，Lua提供了一个名为lua_concat的特殊函数，该函数类似于Lua中的连接操作符(..)，它会将数字转换为字符串，并在必要时调用元方法。此外，该函数还能一次连接两个以上的字符串。调用lua_concat(L,n)会连接栈最顶端的n个值，并将结果压入栈。<br>另一个有帮助的函数是lua_pushfstring:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span> *<span class="title function_">lua_pushfstring</span><span class="params">(lua_State *L, <span class="type">const</span> <span class="type">char</span> *fmt, ...)</span>;</span><br></pre></td></tr></table></figure>

<p>该函数在某种程度上类似于C函数sprintf，它们都会根据格式字符串和额外的参数来创建字符串。然而，与sprintf不同，使用lua_pushfstring时不需要提供缓冲区。不管字符串有多大，Lua都会动态地为我们创建。lua_pushfstring会将结果字符串压入栈中并返回一个指向它的指针，该函数能够接受如下所示字符。</p>
<hr>
<p>%s 						插入一个以\0结尾的字符串<br>%d						插入一个int<br>%f 						插入一个Lua语言的浮点数<br>%p 						插入一个浮点数<br>%I 						插入一个Lua语言的整型数<br>%c 						插入一个以int表示的单字节字符<br>%U						插入一个以int表示的UTF-8字节序列<br>%%						插入一个百分号</p>
<hr>
<p>该函数不能使用诸如宽度或者精度之类的修饰符。<br>当只需要连接几个字符串时，lua_concat和lua_pushfstring都很有用。不过，如果需要连接很多字符串，此时，我们可以用由辅助库提供的缓冲机制。<br>缓冲机制的简单用法只包含两个函数：一个用于在组装字符串时提供任意大小的缓冲区；另一个用于将缓冲区中的内容转换为一个Lua字符串。下面示例用源文件lstrlib.c中string.upper的实现演示了这些函数。</p>
<blockquote>
<p>函数string.upper</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">str_upper</span> <span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	<span class="type">size_t</span> l;</span><br><span class="line">	<span class="type">size_t</span> i;</span><br><span class="line">	luaL_Buffer b;</span><br><span class="line">	<span class="type">const</span> <span class="type">char</span> *s = luaL_checklstring(L,<span class="number">1</span>,&amp;<span class="number">1</span>);</span><br><span class="line">	<span class="type">char</span> *p = luaL_buffinitsize(L,&amp;b,l);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i&lt; l; i++)</span><br><span class="line">		p[i] = <span class="built_in">toupper</span>(uchar(s[i]));</span><br><span class="line">	luaL_pushresultsize(&amp;b,l);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用辅助库中缓冲区的第一步是声明一个luaL_Buffer类型的变量。第二步是调用luaL_buffinitsize获取一个指向指定大小缓冲区的指针，之后就可以自由地使用该缓冲区来创建字符串了。最后需要调用luaL_pushresultsize将缓冲区中的内容转换为一个新的Lua字符串，并将该字符串压栈。其中，第二步调用时就确定了字符串的最终长度。通常情况下，像我们的示例一样，字符串的最终大小与缓冲区大小相等，但也可能更小。加入我们并不知道返回字符串的准确长度，但知道其最大不超过多少，那么可以操守地为其分配一个较大的空间。<br>请注意，luaL_pushresultsize并未获取Lua状态作为其第一个参数。在初始化之后，缓冲区保存了对Lua状态的引用，因此在调用其他操作缓冲区的函数时无需再传递该状态。<br>加入不知道返回结果大小的上限值，我们还可以通过逐步增加内容的方式来使用辅助库的缓冲区。辅助库提供了一个用于缓冲区中增加内容的函数：luaL_addvalue用于在栈顶增加一个Lua字符串，luaL_addlstring用于增加一个长度明确的字符串，luaL_addstring用于增加一个以\0结尾的字符串，luaL_addchar用于增加一单个字符。这些函数的原型如下：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">void luaL_buffinit   (lua_State *L, luaL_Buffer *B);</span><br><span class="line">void luaL_addvalue   (luaL_Buffer *B);</span><br><span class="line">void lua_addlstring  (luaL_Buffer *B, const <span class="built_in">char</span> *s, size_t l);</span><br><span class="line">void lua_addstring   (luaL_Buffer *B, const <span class="built_in">char</span> *s);</span><br><span class="line">void luaL_addchar	(luaL_Buffer *B, <span class="built_in">char</span> c);</span><br><span class="line">void luaL_pushresult (luaL_Buffer *B);</span><br></pre></td></tr></table></figure>
<p>下面示例通过函数table.concat的一个简化的实现演示了这些函数的使用。</p>
<blockquote>
<p>示例 函数table.concat的一个简化的实现</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">tconcat</span> <span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	luaL_Buffer b;</span><br><span class="line">	<span class="type">int</span> i , n;</span><br><span class="line">	luaL_checktype(L,<span class="number">1</span>,LUA_TTABLE);</span><br><span class="line">	n = luaL_len(L,<span class="number">1</span>);</span><br><span class="line">	luaL_buffinit(L,&amp;b);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		lua_geti(L,<span class="number">1</span>,i);</span><br><span class="line">		luaL_addvalue(b);</span><br><span class="line">	&#125;</span><br><span class="line">	luaL_pushresult(&amp;b);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该函数中，首先调用luaL_buffinti来初始化缓冲区。然后，向缓冲区中逐个增加元素，本例中用的是luaL_addvalue。最后，luaL_pushresult刷新缓冲区并在栈顶留下最终的结果字符串。<br>在使用辅助库的缓冲区时，我们必须注意一个细节。初始化一个缓冲区后，Lua栈可能还会保留某些内部数据。因此，我们不能假设在使用缓冲区之前栈顶仍然停留在最初的位置。此外，尽管使用缓冲区时我们可以将该栈用于其他用途，但在访问栈之前，对栈的压入和弹出次数必须平衡。唯一的例外是luaL_addvalue，该函数会假设要添加到缓冲区的字符串是位于栈顶的。</p>
<h2 id="在C函数中保存状态"><a href="#在C函数中保存状态" class="headerlink" title="在C函数中保存状态"></a>在C函数中保存状态</h2><p>通常情况下，C函数需要保存一些非局部数据，即生存时间超出C函数执行时间的数据。在C语言中，我们通常使用全局变量或静态变量来满足这种需求。然而，当我们为Lua编写库函数时，这并不是一个好办法。首先，我们无法在一个C语言变量中保存普通的Lua值。其次，使用这类变量的库无法用于多个Lua状态。<br>更好的办法是从Lua语言中寻求帮助。Lua函数有两个地方可用于存储非局部数据，即全局变量和非局部变量，而CAPI也提供了两个类似的地方来存储非局部数据，即注册表和上值。</p>
<h3 id="注册表"><a href="#注册表" class="headerlink" title="注册表"></a>注册表</h3><p>注册表是一张只能被C代码访问的全局表。通常情况下，我们使用注册表来存储多个模块间共享的数据。<br>注册表总是位于伪索引LUA_REGISTRYINDEX中。伪索引就像是一个栈中的索引，但它所关联的值不在栈中。LuaAPI中大多数接受索引作为参数的函数也能将伪索引作为参数，像lua_remove和lua_insert这种操作栈本身的函数除外。例如，要获取注册表中键为”key”的值，可以使用如下的调用：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">lua_getfield(L,LUA_REGISTRYINDEX,<span class="string">&quot;Key&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>注册表是一个普通的Lua表，因此可以使用除nil外的任意Lua值来检索它。不过，由于所有的C语言模块共享的是同一个注册表，为了避免冲突，我们必须谨慎地选择作为键的值。当允许其他独立的库访问我们的数据时，字符串类型的键尤为有用，因为这些库只需知道键的名字就可以了。对于浙西键，选择名字时没有一种可以绝对避免冲突的方法；不过，诸如避免使用常见的名字，以及用库名或类似的东西作为键名的前缀，仍然是好的做法。<br>在注册表中不能使用数值类型的键，因为Lua语言将其用作引用系统的保留字。引用系统由辅助库中的一对函数组成，有了这两个函数，我们在表中存储值时不必担心如何创建唯一的键。函数luaL_ref用于创建新的引用：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> ref = luaL_ref(L,LUA_REGISTRYINDEX);</span><br></pre></td></tr></table></figure>
<p>上述调用会从栈中弹出一个值，然后分配一个新的整型的键，使用这个键将从栈中弹出的值保存到注册表中，最后返回该整型键，而这个键就被称为引用。<br>顾名思义，我们主要是在需要一个C语言结构体中保存一个指向Lua值的引用时使用引用。正如我们之前所看到的，不应该将指向Lua字符串的指针保存在获取该指针的函数之外。此外，Lua语言甚至没有提供指向其他对象的指针。因此，我们无法通过指针来引用Lua对象。当需要这种指针时，我们可以创建一个引用并将其保存在C语言中。<br>要将于引用ref关联的值压入栈中，只要这样写就行：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">lua_rawgeti(L,LUA_REGISTRYINDEX,ref);</span><br></pre></td></tr></table></figure>
<p>最后，要释放值和引用，我们可以调用luaL_unref:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">luaL_unref(L,LUA_REGISTRYINDEX,ref);</span><br></pre></td></tr></table></figure>
<p>在这句调用后，再次调用luaL_ref会再次返回相同的引用。<br>引用系统将nil视为一种特殊情况。无论何时为一个nil值调用luaL_ref都不会创建新的引用，而是会返回一个常量引用LUA_REFNIL。如下的调用没什么好处：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">luaL_unref(L,LUA_REGISTRYINDEX,LUA_REFNIL);</span><br></pre></td></tr></table></figure>
<p>而如下的代码则会像我们期望地一样像栈中压入一个nil：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">lua_rawgeti(L,LUA_REGISTRYINDEX,LUA_REFNIL);</span><br></pre></td></tr></table></figure>
<p>引用系统还定义了一个常量LUA_NOREF，这是一个不同于其他合法引用的整数，它可以用于表示无效的引用。<br>当创建Lua状态时，注册表中有两个预定义的引用：<br>LUA_RIDX_MAINTHREAD<br>指向Lua状态本身，也就是其主线程。<br>LUA_RIDX_GLOBALS<br>指向全局变量。<br>另一种在注册表中创建唯一键的方法是，使用代码中静态变量的地址，C语言的链接编辑器会确保键在所有已加载的库中的唯一性。要使用这种方法，需要用到函数lua_pushlightuserdata，该函数会在栈中压入一个表示C语言指针的值。下面的代码演示了如何使用这种方法在注册表中保存和获取字符串：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*具有唯一地址的变量*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">char</span> Key = <span class="string">&#x27;k&#x27;</span>;</span><br><span class="line"><span class="comment">/* 保存字符串*/</span></span><br><span class="line">lua_pushlightuserdata(L,(<span class="type">void</span> *)&amp;Key); <span class="comment">/* 压入地址*/</span></span><br><span class="line">lua_pushstring(L,myStr); <span class="comment">/*压入值*/</span></span><br><span class="line">lua_settable(L,LUA_REGISTRYINDEX); <span class="comment">/* registry[&amp;Key] = myStr */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取字符串*/</span></span><br><span class="line">lua_pushlightuserdata(L,(<span class="type">void</span> *)&amp;Key); <span class="comment">/* 压入地址*/</span></span><br><span class="line">lua_gettbale(L,LUA_REGISTRYINDEX); <span class="comment">/* 获取值 */</span></span><br><span class="line">myStr = lua_tostring(L,<span class="number">-1</span>); <span class="comment">/*转换为字符串*/</span></span><br></pre></td></tr></table></figure>
<p>为了简化将变量地址用作唯一键的方法，Lua5.2中引入了两个新函数：lua_rawgetp和lua_rawsetp。这两个函数类似于lua_rawgeti和lua_rawseti，但它们使用C语言指针作为键。使用这两个函数，可以将上面的代码重写为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">char</span> Key = <span class="string">&#x27;k&#x27;</span>;</span><br><span class="line"><span class="comment">/* 保存字符串 */</span></span><br><span class="line">lua_pushstring(L,myStr);</span><br><span class="line">lua_rawsetp(L,LUA_REGISTRYINDEX,(<span class="type">void</span> *)&amp;Key);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获取字符串*/</span></span><br><span class="line">lua_rawgetp(L,LUA_REGISTRYINDEX,(<span class="type">void</span> *)&amp;Key);</span><br><span class="line">myStr = lua_toshtring(L,<span class="number">-1</span>);</span><br></pre></td></tr></table></figure>
<p>这两个函数都使用了原始访问。由于注册表没有元素，因此原始访问和普通访问相同，而且效率还会稍微高一些。</p>
<h3 id="上值"><a href="#上值" class="headerlink" title="上值"></a>上值</h3><p>注册表提供了全局变量，而上值则实现了一种类似于C语言静态变量的机制。每一次在Lua中创建新的C函数时，都可以将任意数量的上值与这个函数相关联，而每个上值都可以保存一个Lua值。后面在调用该函数时，可以通过伪索引来自由地访问这些上值。<br>我们将这种C函数与其上值的关联称为闭包。C语言闭包类似于Lua语言闭包。 特别的，可以用相同的函数代码来创建不同的闭包，每个闭包可以拥有不同的上值。<br>接下来看一个简单的示例，让我们用C语言创建一个函数newCounter。该函数是一个工厂函数，每次调用都会返回一个新的计数函数，如下所示：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">c1 = newCounter()</span><br><span class="line">print(c1(),c1(),c1())			-- <span class="number">1</span>	<span class="number">2</span>	<span class="number">3</span></span><br><span class="line">c2 = newCounter()</span><br><span class="line">print(c2(),c2(),c2())			-- <span class="number">1</span>	<span class="number">2</span>	<span class="number">4</span></span><br></pre></td></tr></table></figure>
<p>尽管所有的计数器都适用相同的C语言代码，但它们各自都保留了独立的计数器。工厂函数的代码形如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">counter</span> <span class="params">(lua_State *L)</span>;  <span class="comment">/*前向声明*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">newCounter</span> <span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	lua_pushinteger(L,<span class="number">0</span>);</span><br><span class="line">	lua_pushcclosure(L,&amp;counter,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的关键函数是lua_pushcclosure，该函数会创建一个新的闭包。lua_pushcclosure的第二个参数是一个基础函数，第三个参数是上值的数量。在创建一个新的闭包前，我们必须将上值的初始值压栈。在此示例中，我们压入了零作为唯一一个上值的初始值。正如我们预想的那样，lua_pushcclosure会将一个新的闭包留在栈中，并将其作为newCounter的返回值。<br>现在，来看一下counter的定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">counter</span> <span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	<span class="type">int</span> val = lua_tointeger(L, lua_upvalueindex(<span class="number">1</span>));</span><br><span class="line">	lua_pushinteger(L,++val);<span class="comment">/*新值*/</span></span><br><span class="line">	lua_copy(L,<span class="number">-1</span>,lua_upvalueindex(<span class="number">1</span>)); <span class="comment">/*更新上值*/</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>; <span class="comment">/*返回新值*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的关键是宏lua_upvalueindex,它可以生成上值的伪索引。特别的，表达式lua_upvalueindex(1)给出了正在运行的函数的第一个上值的伪索引，该为索引同其他的栈索引一样，唯一区别的是它不存在与栈中。因此，调用lua_tointeger会以整型返回一个上值的当前值。然后，函数counter将新值++val压栈，并将其复制一份作为新上值的值，再将其返回。<br>接下来是一个更高级的示例，我们将使用上值来实现元组。元组是一种具有匿名字段的常量结构，我们可以用一个数值索引来获取某个特定的字段，或者一次性地获取所有字段。在我们的实现中，将元组表示为函数，元组的值存储在函数的上值中。当使用数值参数来调用该函数时，函数会返回特定的字段。当不使用参数来调用该函数时，则返回所有字段。一下代码演示了元组的使用：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">x = tuple.new(<span class="number">10</span>,<span class="string">&quot;hi&quot;</span>,&#123;&#125;,<span class="number">3</span>)</span><br><span class="line">print(x(<span class="number">1</span>))			-- <span class="number">10</span></span><br><span class="line">print(x(<span class="number">2</span>))			-- hi</span><br><span class="line">print(x(<span class="number">3</span>))			-- <span class="number">10</span> hi table:ox8087878 <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>在C语言中，我们会用同一个函数t_tuple来表示所有的元组，代码参考下示例。</p>
<blockquote>
<p>元组的实现</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;luaxlib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">t_tuple</span><span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	lua_Integer op = luaL_optinteger(L,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (op == <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="type">int</span> i;</span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">1</span>; !lua_isnone(L,lua_upvalueindex(i)); i++)</span><br><span class="line">			lua_pushvalue(L,lua_upvalueindex(i));</span><br><span class="line">		<span class="keyword">return</span> i - <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		luaL_argcheck(L,<span class="number">0</span>&lt;op &amp;&amp; op &lt;= <span class="number">256</span>,<span class="number">1</span>,<span class="string">&quot;index out of range&quot;</span>);</span><br><span class="line">		<span class="keyword">if</span> (lua_isnone(L,lua_upvalueindex(op)))</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		lua_pushvalue(L,lua_upvalueindex(op));</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">t_new</span><span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	<span class="type">int</span> top = lua_gettop(L);</span><br><span class="line">	luaL_argcheck(L, top&lt; <span class="number">256</span>, top ,<span class="string">&quot;too many fields&quot;</span>);</span><br><span class="line">	lua_pushcclosure(L,t_tuple,top);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">luaL_Reg</span> <span class="title">tuplelib</span>[] =</span> &#123;</span><br><span class="line">	&#123;<span class="string">&quot;new&quot;</span>,t_new&#125;,</span><br><span class="line">	&#123;<span class="literal">NULL</span>,<span class="literal">NULL</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">luaopen_tuple</span> <span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	luaL_newlib(L,tuplelib);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于调用元组时既可以使用数字作为参数也可以不用数字作为参数，因此t_tuple使用luaL_optinteger来获取可选参数。该函数类似于luaL_checkinteger,但当参数不存在时不会报错，而是返回指定的默认值。<br>C语言函数中最多可以有255个上值，而lua_upvaluindex的最大索引值是256。因此，我们使用luaL_argcheck来确保这些范围的有效性。<br>当访问一个不存在的上值时，结果是一个类型为LUA_TNONE的伪值。函数t_tuple使用lua_isnone测试指定的上值是否存在。不过，我们永远不应该使用负数或者超过256的索引值来调用lua_upvalueindex，因此必须对用户提供索引进行检查。函数luaL_argcheck可用于检查给定的条件，如果条件不符合，则会引发错误并返回一条友好的错误信息：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&gt; t = tuple.new(<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">&gt; t(<span class="number">300</span>)</span><br><span class="line">--&gt; <span class="built_in">stdin</span>:<span class="number">1</span>:bad argument #<span class="number">1</span> to <span class="string">&#x27;t&#x27;</span> (index out of range)</span><br></pre></td></tr></table></figure>
<p>luaL_argcheck的第三个参数表示错误信息的参数编号，第四个参数表示对信息的不出。<br>创建元组的函数t_new很简单，由于其参数已经在栈中，因此该函数先检查字段的数量是否符合闭包中上值个数的限制，然后将所有上值作为参数调用lua_pushcclosure来创建一个t_tuple的闭包。最后，数组tuplelib和函数luaopen_tuple是创建tuple库的标准代码，该库只有一个函数new。</p>
<h3 id="共享的上值"><a href="#共享的上值" class="headerlink" title="共享的上值"></a>共享的上值</h3><p>我们经常需要同一个库的所有函数之间共享某些值或变量，虽然可以用注册表来完成这个任务，但也可以使用上值。<br>与Lua语言的闭包不同，C语言的闭包不能共享上值，每个闭包都有其独立的上值。但是，我们可以设置不同函数的上值指向一张共同的表，这张表就成为了一个共同的环境，函数在其中能够共享数据。<br>Lua语言提供了一个函数，该函数可以简化同一个库中所有函数间共享上值的任务。我们已经使用luaL_newlib打开了C语言库。Lua将这个函数实现为如下的宏：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> luaL_newlib(L,lib) \ (luaL_newlibtable(L,lib),(luaL_setfuncs(L,lib,0))</span></span><br></pre></td></tr></table></figure>
<p>宏luaL_newlibtable只是为库创建了一张新表。然后，函数luaL_setfuncs将列表lib中的函数添加到位于栈顶的新表中。<br>我们这里感兴趣的是luaL_setfuncs的第三个参数，这个参数给出了库中的新函数共享的上值个数。当调用lua_pushcclosure时，这些上值的初始值应该位于栈顶。因此，如果要创建一个库，这个库中的所有函数共享一张表作为它们唯一的上值，则可以使用如下的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 创建库的表*/</span><br><span class="line">luaL_newlibtable(L,lib);</span><br><span class="line">/* 创建共享上值 */</span><br><span class="line">lua_newtable(L);</span><br><span class="line">/*将表&#x27;lib&#x27;中的函数加入到新库中，将之前的表共享为上值*/</span><br><span class="line">luaL_setfuncs(L,lib,1);</span><br></pre></td></tr></table></figure>
<p>最后一个函数调用从栈中删除了这张共享表，只留下了新库。</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>自动售货机控制系统(VHDL开发)</title>
    <url>/16522.html</url>
    <content><![CDATA[<blockquote>
<p>这周完成一个课程任务，用VHDL语言写一个自动售货机的控制系统。使用的仿真器是MAX+plus。</p>
</blockquote>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h2 id="设计说明"><a href="#设计说明" class="headerlink" title="设计说明"></a>设计说明</h2><p>根据要求可自动出售两种货物，这里的自动售货机可销售cola和pepsi两种饮料：售货机可识别1元和0.5元两种货币，在一次购买过程中，可购买一个或者多个商品，系统会自动计算所需钱数和找零的钱数并自动找零。另外有3个发光二极管、6个LCD数码管：两个用来显示所需金额，两个用来显示已付金额，两个用来显示找零数。</p>
<hr>
<h3 id="流程说明"><a href="#流程说明" class="headerlink" title="流程说明"></a>流程说明</h3><p>这里设计的自动售货机当通电时，表示一次销售的开始。顾客选择一种商品或多种商品后就进入投币状态。若不投币，则自动返回初始状态。投币后，系统自动计算所投钱数。若投币够，则出货并找零。若投币不够，如果顾客没有继续投币，则退币并回到初始状态。本系统的投币销售流程图如图所示：<br><img data-src="https://pic.imgdb.cn/item/66434c8d0ea9cb1403d24021.png" alt="流程图"></p>
<hr>
<h3 id="各模块说明"><a href="#各模块说明" class="headerlink" title="各模块说明"></a>各模块说明</h3><p>本文设计的自动售货机总体分四个模块：总控模块、二进制译码模块、BCD码译码模块和顶层模块。</p>
<p><strong>总控模块：</strong>总控模块是本系统最重要的模块，该模块大体有5个输入端口和6个输出端口。其输入端口包括clk、coin1（投入一元货币）、coin5（投入0.5元货币）、cola（选择cola）、pepsi(选择pepsi)，输出端口有paid（已投入多少钱）、needed（还需多少钱）moneyout（找零）、success（灯亮表示交易成功）、failure（灯亮表示交易失败）、showmoneyout（灯亮表示正在找零）。该模块实现了本系统最重要的交易过程，包括选择商品、投入货币，计算剩余金额，找零出货等。</p>
<p><strong>二进制译码模块：</strong>该模块有一个输入端口和两个输出端口。输入端口是一个8位的二进制数输出端口bcd0、bcd1是两个4位的BCD码。该模块的主要的功能是实现将主控模块输出的二进制数（paid、needed、moneyout）转换成BCD码，以便输出到七段数码管上显示出来。该模块的原理是将一个8位的二进制转换成2个4位的BCD码，分为高四位和低四位。</p>
<p><strong>BCD码译码模块：</strong>该模块有一个输入端口和一个输出端口</p>
<p><strong>顶层模块：</strong>该模块有五个输入和九个输出端口。其输入口包括clk1、P2（选择pepsi）、P1_5（选择cola）、C5（投入5毛）、C1（投入1块），输出端口有shuwout(退币指示灯)、s（交易成功指示灯）、f（交易失败指示灯）、paid_lcd0、paid_lcd1（已付金额）、needed_lcd0、needed_lcd1（需付金额）、mout__lcd0、mout_lcd1（退币金额）。</p>
<hr>
<h3 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h3><p><strong>主控模块完整程序</strong><br><strong>BCD译码模块完整程序</strong><br><strong>顶层模块完整程序</strong><br>具体的代码见我的<a href="https://github.com/lengmo714/Vending-machine-system">github网站</a>（1自动售货机文档）.</p>
<h3 id="各模块连接"><a href="#各模块连接" class="headerlink" title="各模块连接"></a>各模块连接</h3><blockquote>
<p>售货机主控系统和译码器模块图：<br><img data-src="https://pic.imgdb.cn/item/66434c8d0ea9cb1403d24035.png" alt="售货机主控系统和译码器模块图"></p>
</blockquote>
<blockquote>
<p>售货机顶层模块：<br><img data-src="https://pic.imgdb.cn/item/66434c8d0ea9cb1403d24042.png" alt="顶层模块"></p>
</blockquote>
<h2 id="波形仿真"><a href="#波形仿真" class="headerlink" title="波形仿真"></a>波形仿真</h2><h3 id="主控模块的波形方真"><a href="#主控模块的波形方真" class="headerlink" title="主控模块的波形方真"></a>主控模块的波形方真</h3><blockquote>
<p><img data-src="https://pic.imgdb.cn/item/66434c8d0ea9cb1403d24069.png" alt="这里写图片描述"><br>上图表示顾客选择了pepsi饮料后，且投了2个一元的硬币。Success为高电平，代表售货机有饮料售出。且余额为0.</p>
<p><img data-src="https://pic.imgdb.cn/item/66434c8d0ea9cb1403d24081.png" alt="这里写图片描述"><br>上图表示顾客选择了cola饮料后，且投2个一元的硬币。Success为高电平，代表有饮料售出，且找回顾客0.5元。</p>
</blockquote>
<h3 id="BCD译码仿真"><a href="#BCD译码仿真" class="headerlink" title="BCD译码仿真"></a>BCD译码仿真</h3><blockquote>
<p><img data-src="https://pic.imgdb.cn/item/66434cbe0ea9cb1403d284c4.png" alt="这里写图片描述"><br>上图表示自动售货机的译码系统，上图表示将8位数字转换成４位BCD码。</p>
</blockquote>
<h3 id="TOP文件的仿真"><a href="#TOP文件的仿真" class="headerlink" title="TOP文件的仿真"></a>TOP文件的仿真</h3><blockquote>
<p><img data-src="https://pic.imgdb.cn/item/66434cbe0ea9cb1403d284da.png" alt="这里写图片描述"><br>上图表示顾客选择了pepsi饮料后，且投了2个一元的硬币。Success为高电平，代表售货机有饮料售出。且余额为0。</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实这个自动售货机控制系统老师很早之前就要我弄了，我自己一直拖，直到老师要考核才重视起来。<br>这个项目很多都是在网上找资料借鉴的别人的东西，自己就是把别人的代码读懂了，再将整个的流程走了一遍。收货还是很多的。自己为了第二天老师考核（答辩）的时候能够顺利通过，前一天晚上熬夜到三点。也算是体会到了做项目的艰辛。<br>在答辩的过程中，老师的一些问题，一些话语也是让我受益匪浅。做项目真的是让我收益很多。这里也希望这篇博客能给大家带来帮助，但是希望只是作为一个参考，更多的部分还是要自己去做，这才您才能真正学习到知识。</p>
]]></content>
      <categories>
        <category>嵌入式开发</category>
      </categories>
      <tags>
        <tag>硬件</tag>
      </tags>
  </entry>
  <entry>
    <title>恋爱计时表白页面</title>
    <url>/bd03ee4c.html</url>
    <content><![CDATA[<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><img data-src="https://pic.imgdb.cn/item/664338e90ea9cb1403afddb6.png" alt="效果图" />

<h3 id="演示链接"><a href="#演示链接" class="headerlink" title="演示链接"></a>演示链接</h3><a href="https://lengmo714.top/libs/Love/baby.html" title="" target="">情人节表白代码演示,</a>

<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>恋爱计时<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">			 <span class="attribute">background-color</span>: <span class="number">#FCE8F8</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#snow-container</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">pointer-events</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">z-index</span>: -<span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.snowflake</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">opacity</span>: <span class="number">0.8</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">pointer-events</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">animation</span>: snowfall linear infinite;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">        <span class="keyword">@keyframes</span> snowfall &#123;</span></span><br><span class="line"><span class="language-css">            <span class="number">0%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">100%</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">100vh</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.heart</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">animation</span>: heartbeat <span class="number">1s</span> infinite;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform-origin</span>: center center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.heart</span><span class="selector-pseudo">:before</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.heart</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">50px</span> <span class="number">50px</span> <span class="number">0</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.heart</span><span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">160px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">45deg</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.heart</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">160px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform-origin</span>: <span class="number">100%</span> <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#timeElapsed</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">        <span class="keyword">@keyframes</span> heartbeat &#123;</span></span><br><span class="line"><span class="language-css">            <span class="number">0%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="number">50%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.2</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">        <span class="keyword">@keyframes</span> falling &#123;</span></span><br><span class="line"><span class="language-css">            <span class="number">0%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">100vh</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">100vh</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.sakura</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: -<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: -<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;https://www.unicode.org/emoji/charts/full-emoji-list.html#1f338&#x27;</span>); <span class="comment">/* 🌸的Unicode转义序列 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-size</span>: cover;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">animation</span>: falling linear infinite;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">animation-duration</span>: <span class="number">10s</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;snow-container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;heart&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;timeElapsed&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;wanfeng.mp3&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dd&quot;</span> <span class="attr">autoplay</span>=<span class="string">&quot;autoplay&quot;</span> <span class="attr">loop</span>=<span class="string">&quot;loop&quot;</span> <span class="attr">preload</span>=<span class="string">&quot;auto&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">getTimeElapsed</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> startDate = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;2022-03-26 21:03:00&quot;</span>); <span class="comment">// 设置开始日期，替换为实际的起始日期</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> currentDate = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> timeDiff = currentDate - startDate;</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> milliseconds = timeDiff % <span class="number">1000</span>;</span></span><br><span class="line"><span class="language-javascript">            timeDiff = <span class="title class_">Math</span>.<span class="title function_">floor</span>(timeDiff / <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> seconds = timeDiff % <span class="number">60</span>;</span></span><br><span class="line"><span class="language-javascript">            timeDiff = <span class="title class_">Math</span>.<span class="title function_">floor</span>(timeDiff / <span class="number">60</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> minutes = timeDiff % <span class="number">60</span>;</span></span><br><span class="line"><span class="language-javascript">            timeDiff = <span class="title class_">Math</span>.<span class="title function_">floor</span>(timeDiff / <span class="number">60</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> hours = timeDiff % <span class="number">24</span>;</span></span><br><span class="line"><span class="language-javascript">            timeDiff = <span class="title class_">Math</span>.<span class="title function_">floor</span>(timeDiff / <span class="number">24</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> days = timeDiff;</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> timeString = <span class="string">&quot;宝贝我们已经在一起 &quot;</span> + days + <span class="string">&quot; 天 &quot;</span> + hours + <span class="string">&quot; 小时 &quot;</span> + minutes + <span class="string">&quot; 分钟 &quot;</span> + seconds + <span class="string">&quot; 秒了&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;timeElapsed&quot;</span>).<span class="property">textContent</span> = timeString;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setInterval</span>(getTimeElapsed, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">createSnowflake</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> snowflake = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            snowflake.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;snowflake&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            snowflake.<span class="property">style</span>.<span class="property">left</span> = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="variable language_">window</span>.<span class="property">innerWidth</span> + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            snowflake.<span class="property">style</span>.<span class="property">animationDuration</span> = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">3</span> + <span class="number">2</span> + <span class="string">&#x27;s&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            snowflake.<span class="property">style</span>.<span class="property">opacity</span> = <span class="title class_">Math</span>.<span class="title function_">random</span>();</span></span><br><span class="line"><span class="language-javascript">            snowflake.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">10</span> + <span class="number">10</span> + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> randomColor = <span class="title function_">getRandomColor</span>();</span></span><br><span class="line"><span class="language-javascript">            snowflake.<span class="property">style</span>.<span class="property">backgroundColor</span> = randomColor;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> num = <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">8</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> name = [<span class="string">&#x27;多幸运遇见你&#x27;</span>,<span class="string">&#x27;我爱你&#x27;</span>,<span class="string">&#x27;宝贝&#x27;</span>,<span class="string">&#x27;温柔&#x27;</span>,<span class="string">&#x27;善良&#x27;</span>,<span class="string">&#x27;漂亮&#x27;</span>,<span class="string">&#x27;优雅&#x27;</span>,<span class="string">&#x27;生命之光&#x27;</span>,<span class="string">&#x27;有你真好&#x27;</span>];</span></span><br><span class="line"><span class="language-javascript">            snowflake.<span class="property">innerHTML</span> = name[num]; <span class="comment">// You can customize the snowflake symbol here</span></span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> snowflake;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">getRandomColor</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> letters = <span class="string">&#x27;0123456789ABCDEF&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> color = <span class="string">&#x27;#&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                color += letters[<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">16</span>)];</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> color;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">snowfall</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> snowContainer = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;snow-container&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> numSnowflakes = <span class="number">50</span>; <span class="comment">// Adjust the number of snowflakes here</span></span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numSnowflakes; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> snowflake = <span class="title function_">createSnowflake</span>();</span></span><br><span class="line"><span class="language-javascript">                snowContainer.<span class="title function_">appendChild</span>(snowflake);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">snowfall</span>();</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">createSakura</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> sakura = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            sakura.<span class="property">className</span> = <span class="string">&quot;sakura&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            sakura.<span class="property">style</span>.<span class="property">left</span> = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100</span> + <span class="string">&quot;vw&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            sakura.<span class="property">style</span>.<span class="property">animationDelay</span> = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">5</span> + <span class="string">&quot;s&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(sakura);</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                sakura.<span class="title function_">remove</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;, <span class="number">20000</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setInterval</span>(createSakura, <span class="number">200</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="小白使用教程"><a href="#小白使用教程" class="headerlink" title="小白使用教程"></a>小白使用教程</h3><p>先在电脑桌面新建一个<code>记事本</code>,然后打开记事本，将上面代码复制粘贴记事本，修改文件后缀为<code>.html</code>，然后用浏览器打开该文件即可</p>
]]></content>
      <categories>
        <category>网页设计</category>
      </categories>
  </entry>
  <entry>
    <title>要在Microsoft Store中搜索应用吗？</title>
    <url>/3f5b9a1.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在windows11系统上点击<code>.exe</code>安装包文件安装软件时，有时会弹出<code>要在Microsoft Store中搜索应用吗？</code>的弹窗，如下图：<br><img data-src="https://s1.ax1x.com/2023/04/10/ppqO1ln.png" style="width:600px;height:200px" alt="" /></p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>右键该<code>.exe</code>文件，选择<code>属性</code>-&gt;<code>常规</code>，在安全选项中将<code>解除锁定</code>前面勾上。默认是没有勾上的，点下框框，将选项勾上 ，最后点击应用即可。如下图：<br><img data-src="https://s1.ax1x.com/2023/04/10/ppqOlSs.png" style="width:484px;height:658px" alt="" /></p>
]]></content>
      <categories>
        <category>电脑使用技巧</category>
      </categories>
  </entry>
  <entry>
    <title>国外AppleID注册</title>
    <url>/6f89e884.html</url>
    <content><![CDATA[<p>今天无意见发现网上有人出售国外的Apple ID，而且还不便宜，十几块一个。于是就想着自己注册一个。<br>直接步入正题，按照下面的步骤去操作，基本都能成功，超级简单。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol>
<li>一部iphone或者ipad</li>
<li>一个能接受验证码的手机号（注册过国内ID的也可）</li>
</ol>
<h2 id="注册教程"><a href="#注册教程" class="headerlink" title="注册教程"></a>注册教程</h2><ol>
<li><p>iPhone或者ipad的<strong>设置</strong>退出原来的AppleID，点击<strong>登录</strong> -&gt; <strong>没有或忘记Apple ID</strong>。注意，退出ID是在<code>设置</code> 里面，不是在<code>APP Store</code></p>
</li>
<li><p>选择 <strong>创建Apple ID</strong> 输入姓名、出生日期等常规信息，然后<strong>下一步</strong>（年龄要大于18岁）</p>
</li>
<li><p>这里我们选择<code>使用电子邮箱地址</code>，再选择<strong>没有电子邮件地址</strong>。这样就可以免费创建一个苹果iCloud电子邮件地址了，方便快捷。</p>
</li>
<li><p>选择<strong>获取iCloud电子邮件地址</strong>，接着在“电子邮件”框框里输入方便记忆的账号名。然后点击<strong>下一步</strong>（Apple新闻和公告可以关掉）</p>
</li>
<li><p>接着是设置密码，这步很关键。密码必须要设置8位数以上，且要同时包括数字、大小写字母。比如<code>123abcABC</code>这样就是可以的。设置好后然后 <strong>下一步</strong> 。</p>
</li>
</ol>
<p>** 重要提醒：** 密码里不要包括有刚设置的姓名、电话号码或电子邮件地址中的某个部分，否则会导致无法创建账户。 </p>
<ol start="6">
<li>接着验证电话号码。输入自己常用的号码、接收短信验证码填入后会自动进入下一步。</li>
</ol>
<blockquote>
<p>说个情况，如果是没有插卡的手机，填入电话号码下一步后它会提示“无法创建账户”</p>
</blockquote>
<ol start="7">
<li>继续，并同意使用条款。</li>
<li>经过几十秒的等待，你的Apple ID就初步创建完成了。输入手机密码进入下一步（如跳出提示是否合并，选择“不合并”）</li>
<li>如果不需要这个帐号同步你的帐号信息，建议把同步功能给关掉。</li>
<li>接着打开APP Store，会让你完善Apple ID的相关信息。<br>Ps：如没跳出“检查”提示框也没关系，点击帐号–输入密码并登录，也会跳出“检查”提示框。</li>
<li>地区更改为“美国”或者你想设置的其他地区。这里以注册美区为例，所以选择美国。更改好后同意使用条款，然后“下一步”</li>
<li>这步很关键 ，首先付款方式不需要填写。然后因为我们要注册的是美区ID，所以账单寄送地址必须填美国的地址，这需要借助美国地址生成器来完成（也可以自己在网上百度一个美国地址填上去）。</li>
<li>ok，完成地址的验证，你的美区ID就算成功注册并可以正常使用了。APP Store的界面也自动切换到了美区的，搜个国区没有的游戏试试…完全没问题~<br>此刻我已经在开心的刷着TikTok了</li>
</ol>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li><p>填写地址时提示时，区号记得不要填“1”开头的；</p>
</li>
<li><p>后续使用帐号，最好就不要通过设置里去登录，直接在APP Store登录即可；</p>
</li>
<li><p>登录后如还是国区界面，后台退出APP Store后再打开即可</p>
</li>
</ol>
<a href="https://it.sohu.com/a/611118869_120387930" title="" target="">原文链接,</a>
]]></content>
      <categories>
        <category>国外AppleID注册</category>
      </categories>
  </entry>
  <entry>
    <title>破解软件下载链接合集</title>
    <url>/c8f6e556.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>首先关注下方公众号<br><img data-src="https://s1.ax1x.com/2023/05/08/p9wEfHJ.jpg" style="width:200px;height:250px" alt="" /></p>
<h2 id="下载关键词"><a href="#下载关键词" class="headerlink" title="下载关键词"></a>下载关键词</h2><h3 id="腾讯视频"><a href="#腾讯视频" class="headerlink" title="腾讯视频"></a>腾讯视频</h3><p>公众号后台回复<code>腾讯视频</code>获取下载链接</p>
<h3 id="网易云"><a href="#网易云" class="headerlink" title="网易云"></a>网易云</h3><p>公众号后台回复<code>网易云</code>获取下载链接</p>
<h3 id="Autodesk-Inventor"><a href="#Autodesk-Inventor" class="headerlink" title="Autodesk Inventor"></a>Autodesk Inventor</h3><p>公众号后台回复<code>Autodesk Inventor</code>获取下载链接</p>
<h3 id="GstarCAD"><a href="#GstarCAD" class="headerlink" title="GstarCAD"></a>GstarCAD</h3><p>公众号后台回复<code>GstarCAD</code>获取下载链接</p>
<h3 id="MATLAB"><a href="#MATLAB" class="headerlink" title="MATLAB"></a>MATLAB</h3><p>公众号后台回复<code>MATLAB</code>获取下载链接</p>
<h3 id="ArcGIS"><a href="#ArcGIS" class="headerlink" title="ArcGIS"></a>ArcGIS</h3><p>公众号后台回复<code>ArcGIS</code>获取下载链接</p>
<h3 id="SketchUp"><a href="#SketchUp" class="headerlink" title="SketchUp"></a>SketchUp</h3><p>公众号后台回复<code>SketchUp</code>获取下载链接</p>
<h3 id="Autodesk-Revit"><a href="#Autodesk-Revit" class="headerlink" title="Autodesk Revit"></a>Autodesk Revit</h3><p>公众号后台回复<code>Autodesk Revit</code>获取下载链接</p>
<h3 id="vpn免费版"><a href="#vpn免费版" class="headerlink" title="vpn免费版"></a>vpn免费版</h3><p>公众号后台回复<code>免费vpn</code>获取下载链接</p>
<h3 id="七猫免费看小说"><a href="#七猫免费看小说" class="headerlink" title="七猫免费看小说"></a>七猫免费看小说</h3><p>公众号后台回复<code>免费看小说</code>获取下载链接</p>
<h3 id="自动抢红包插件"><a href="#自动抢红包插件" class="headerlink" title="自动抢红包插件"></a>自动抢红包插件</h3><p>公众号后台回复<code>红包</code>获取下载链接</p>
<h3 id="哔站看直播自动抢红包"><a href="#哔站看直播自动抢红包" class="headerlink" title="哔站看直播自动抢红包"></a>哔站看直播自动抢红包</h3><p>公众号后台回复<code>哔站</code>获取下载链接</p>
]]></content>
      <categories>
        <category>破解软件</category>
      </categories>
  </entry>
  <entry>
    <title>通信工程交换传输实习报告</title>
    <url>/892cf0a2.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>本学期的3-5周，我们进行了为期3周的专业实习，本次实习的内容是程控交换和光纤传输，实习地点是云塘校区理科楼B304程控交换实验室。<br>实习的形式是老师讲述理论知识，然后同学分组参观设备，将老师所讲的理论知识应用到实际中。在老师指导下，了解程控交换机及其工作原理，光纤传输设备以及其工作原理。同时进行了包括对华为C&amp;C08交换机相关操作，对程控交换机的设置，了解光纤传输设备OSN2000、Metrolo1000维护终端，认识各个设备的基本结构及构造，认识设备中的单板，了解各个单板的作用，实现对传输设备的维护和管理。</p>
<h2 id="第一部分-程控交换设备"><a href="#第一部分-程控交换设备" class="headerlink" title="第一部分   程控交换设备"></a>第一部分   程控交换设备</h2><h3 id="一、程控交换实习目的和要求"><a href="#一、程控交换实习目的和要求" class="headerlink" title="一、程控交换实习目的和要求"></a>一、程控交换实习目的和要求</h3><p>1、认识实际交换机的外观及结构，了解交换机的型号、参数、性能指标和运行情况；<br>2、学习交换机的基本操作过程和常规维护管理；<br>3、认识交换机的基本组成，认识交换模块、控制模块及外围模块，熟悉交换机各组成部分的主要作用，加深理解交换机在整个通信网中的地位；<br>4、通过现场参观和实地操作，了解设备的基本组成和运行状况；<br>5、实习完成后，针对期间的主要收获，记录实习日志，并写实习报告。</p>
<h3 id="二、程控交换主要设备硬件结构介绍"><a href="#二、程控交换主要设备硬件结构介绍" class="headerlink" title="二、程控交换主要设备硬件结构介绍"></a>二、程控交换主要设备硬件结构介绍</h3><p>C&amp;C08程控交换机主要由用户框、中继框、时钟框、主控框和BAM组成。图1.1为C&amp;C08程控交换机组成图，用户框和中继框实拍图如图1.2，其实标配图如图1.3、1.4、1.5所示。<br><img data-src="https://pic.imgdb.cn/item/664345240ea9cb1403c59842.png" alt=""/><br> 用户框的PWX板除了提供电源外，还提供铃流。ASL板即A32板，提供32路用户接口，可归纳为BORSCHT七个功能，即馈电、过压保护、振铃控制、监视、编译码和滤波、混合电路和测试功能。DRV板主要作为32路DTMF收号器，驱动半框的HW信号、串口和时钟。<br><img data-src="https://pic.imgdb.cn/item/664345220ea9cb1403c5963e.png" alt=""/><br>   <img data-src="https://pic.imgdb.cn/item/664345210ea9cb1403c594f2.png" alt=""/><br>   用户框中存在DRV、ASL、PWX三种单板。DRV单板是32路DTMF收号器，能驱动半框HW信号、串口和时钟。单板ASL模拟用户板可提供32路用户接口。单板PWX是二次电源板，为本机框提供5V&#x2F;10A直流电源，-5V&#x2F;5A直流电源，同时可为提供用于振铃的75V&#x2F;400mA的铃流。用户电路是交换网络和用户线间的接口电路，能够把语音信号（模拟或数字）传送给交换网络，也能把用户线上的其他信号和交换网隔开，以免损坏交换网络。<br><img data-src="https://pic.imgdb.cn/item/664345200ea9cb1403c5941c.png" alt=""/><br> 中继框中存在PWC、DTM、SET、DRV四种单板。单板PWC也是二次 电源板，为本机框提供5V&#x2F;10A直流电源，-5V&#x2F;5A直流电源。DTM单板作为局间数字中继接口，每块板含2个PCM、60条中继，并配合不同的信令设备支持多种业务。SET单板提供HW和NOD的配线座，2个SET提供半框HW和NOD。<br><img data-src="https://pic.imgdb.cn/item/6643451e0ea9cb1403c590dd.png" alt=""/><br> 主控板由PWC、NOD、EMA、SIG、MPU、BNET、MEM、MFC、MC2、ALM、LAP、OPT、TCI等单板组成。MPU单板是主控单元，能够通过总线直接控制主控框单板，通过主节点控制用户和中继电路，获取用户和中继状态，发出相应命令。MPU单板同时提供控制SIG板信号发送、控制命令的接收和NET板处理呼叫接续的功能。NOD板负责MPU与用户框、中继框内单板的通信，每个SM含11个NOD槽位，每块NOD2提供4个主节点。BENT板是模块间的交换网板，提供4K<em>4K交换网络和128条HW。SIG单板提供各种用户音，包括拨号音、忙音、辅助应答等。MFC插槽能够兼容MFC和LAP，MFC是多频互控板，LAP是协议处理板。<br><img data-src="https://pic.imgdb.cn/item/664346170ea9cb1403c79c68.png" alt=""/><br> 交换机的框间连线主要通过HW和NOD。<br> NOD主节点信令线分用户信令线和中继信令线。MCB背后有11个信令线的插接位置，每插接位置提供四组信令线。进行用户信令线的配置时一分为四，一个用户框2个主节点。进行中继信令线的配置时，每板1个主节点，中继框NOD线分两个分支，分别连往MCB的两个NOD槽。<br> HW是传递话音的高速公路，分为用户HW线和中继HW线两种，分别完成用户框和中继框与主控框BNET板的连接，实现单T时隙交换。BNET板的交换能力为4096</em>4096时隙，每条HW承载32时隙，所以BNET板共引出128条HW，其中64条供内部使用，64条供给用户和中继。每用户2跟HW线，每DT板2跟HW线；每根HW电缆内含4根HW线，共16根HW电缆。采用的布线方式是用户框从上到下排，DT板从下到上排。</p>
<h3 id="三、程控交换实习操作具体内容、过程和结果描述"><a href="#三、程控交换实习操作具体内容、过程和结果描述" class="headerlink" title="三、程控交换实习操作具体内容、过程和结果描述"></a>三、程控交换实习操作具体内容、过程和结果描述</h3><p>1、首先进行数据配置<br>单击“开始”—&gt;“所有程序”—&gt;“业务操作终端”—&gt;“C&amp;C08交换机业务维护”，将弹出登录窗口。<br><img data-src="https://pic.imgdb.cn/item/664346160ea9cb1403c79c1c.png" alt=""/><br>输入正确的用户名，密码和局名，IP地址后，维护输出窗口会显示登录成功的相关信息，自动执行几条系统查询命令。<br>点击快捷工具栏上的小房子图标，即可快速进入MML命令输入窗口，在该界面逐条输入一下配置指令完成对交换机的硬件数据配置。<br><img data-src="https://pic.imgdb.cn/item/664346160ea9cb1403c79bf8.png" alt=""/><br>配置步骤：设置格式转换的状态—&gt;关闭性能统计开关—&gt;设置本局信息—&gt;增加SM—&gt;增加控制框—&gt;增加32路用户框—&gt;增加中继框—&gt;删除主控框不存在的单板—&gt;删除用户框不存在的单板—&gt;加载设置<br>2、完成数据配置后，进行数据导入<br>在桌面上单击E-Bridge客户端图标，进入E-Bridge客户端登录界面<br><img data-src="https://pic.imgdb.cn/item/664346160ea9cb1403c79bca.png" alt=""/><br>输入服务器的ip地址，输入端口号点击确定进行登录。<br>单击确定后，进入图1.10所示界面，之后双击“程控：cc08”进入图1.11所示界面<br><img data-src="https://pic.imgdb.cn/item/664346160ea9cb1403c79ba9.png" alt=""/><br><img src ="https://pic.imgdb.cn/item/664346480ea9cb1403c7e46b.png" alt=""/><br>点击“开始程控实验”－&gt;“申请加载数据”－&gt;“确定”，屏幕上方会显示当前占用服务器席位的客户端，你申请席位的客户端排在第几位，剩余多长时间。如图1.12所示。席位申请成功后系统会提示席位申请成功，如图1.13。<br><img data-src="https://pic.imgdb.cn/item/664346480ea9cb1403c7e45a.png" alt=""/><br> <img data-src="https://pic.imgdb.cn/item/664346480ea9cb1403c7e447.png" alt=""/><br>申请到服务器席位时，点击“确认”，系统自动将本客户端的数据库中的数据传到服务器。如图1.14所示。数据加载完成后系统会提示数据加载完成。如图1.15所示。<br><img data-src="https://pic.imgdb.cn/item/664346480ea9cb1403c7e432.png" alt=""/><br><img data-src="https://pic.imgdb.cn/item/664346480ea9cb1403c7e41e.png" alt=""/><br>数据加载完成后，服务器会自动进行数据格式转换，并加载到交换机中<br><img data-src="https://pic.imgdb.cn/item/664346910ea9cb1403c83990.png" alt=""/><br>数据加载到交换机后，开始实验验证。点击“业务操作终端”－&gt;“交换机业务维护”，出现登录窗口<br><img data-src="https://pic.imgdb.cn/item/664346910ea9cb1403c8397a.png" alt=""/><br>我们输入相应的用户名、密码、局名、IP地址后点击“确认”，登录到BAM服务器。<br>点击“维护”－&gt;“配置”－&gt;“硬件配置状态面板”－&gt;“选择模块”可看到交换机1号SM模块的单板运行状态。可以看到配置的单板并没有警告错误，说明我们配置实验是成功。（行的0-25表示槽位号，列的0-5表示框号，不同的颜色代表单板不同的状态。）<br><img data-src="https://pic.imgdb.cn/item/664346910ea9cb1403c83967.png" alt=""/><br>之后点击A32板，查询用户状态，里面可以很清晰地看到用户序号、电话号码、状态是否空闲等，如图1.19所示。<br><img data-src="https://pic.imgdb.cn/item/664346910ea9cb1403c83955.png" alt=""/><br>图中用户类型是有线用户，这是因为我们是电话用户，用户序列是从0-31总有32个用户，状态空闲，HW、TS都是未占用的，因为我们还没有房号不能进行业务，所以都是未占用的。<br>对12号槽位的NET板状态查询，如图1.20所示<br><img data-src="https://pic.imgdb.cn/item/664346910ea9cb1403c83947.png" alt=""/><br>查询表反映了NET板的属性和HW占用情况。<br>对10号槽位的MPU板状态查询，查询表中的硬开关状态主要是与MPU单板的拨码开关有关，如图1.21所示。<br><img data-src="https://pic.imgdb.cn/item/664346e10ea9cb1403c88cb2.png" alt=""/><br>从图中我们可以看到扩展内存、数据内存可用空间、主机时间、备份状态、硬开关状态、软开关状态等信息。<br>对2号槽位的NOD板状态进行查询。如图1.22所示。<br><img data-src="https://pic.imgdb.cn/item/664346e10ea9cb1403c88c85.png" alt=""/><br>上面的一行代表NOD板的属性，一个NOD板有4个主节点，编号从0-3，两个状态是正常的，因为中继框中2个DTM板，一个DTM板占用一个主节点。</p>
<h3 id="四、程控交换实习经历的认识"><a href="#四、程控交换实习经历的认识" class="headerlink" title="四、程控交换实习经历的认识"></a>四、程控交换实习经历的认识</h3><p>此次程控交换实习的实习要求是认识实际交换机的外观及结构，了解交换机的型号、参数、性能指标和运行情况；认识交换机的基本组成，认识交换模块、控制模块及外围模块，熟悉交换机各组成部分的主要作用，加深理解交换机在整个通信网中的地位；学习交换机的基本操作过程和常规维护管理。我们先听老师讲解程控交换设备硬件结构等理论知识，在实验室后面找到对应的各个模块进行学习。然后再在自己小组成员共同努力以及老师的帮助下对机器进行配置，配置完后并验证，再一次次失败后终于配置成功。</p>
<h2 id="第二部分-光纤传输设备"><a href="#第二部分-光纤传输设备" class="headerlink" title="第二部分  光纤传输设备"></a>第二部分  光纤传输设备</h2><h3 id="一、光纤传输实习目的和要求"><a href="#一、光纤传输实习目的和要求" class="headerlink" title="一、光纤传输实习目的和要求"></a>一、光纤传输实习目的和要求</h3><p>1、认识光纤通信设备的外观及结构，了解几种实际设备的型号、参数、性能指标和运行情况；<br>2、初步了解光纤传输设备的常见几种组网方式；<br>3、学习光纤传输设备的基本操作过程和常规维护管理；<br>4、先听知道老师讲述硬件结构和操作方法，然后在操作终端上进行脱机操作，符合基本要求后再轮换进行联机操作，观察和分析操作结果；<br>5、实习完成后，针对期间的主要收获，记录实习日志并写实习报告。</p>
<h3 id="二、光纤传输主要设备硬件结构介绍"><a href="#二、光纤传输主要设备硬件结构介绍" class="headerlink" title="二、光纤传输主要设备硬件结构介绍"></a>二、光纤传输主要设备硬件结构介绍</h3><p>此次实验平台为华为公司最新一代SDH光传输设备，采用多种ADM技术，根据实际需要和配置，目前提供E1、64K语音、10M&#x2F;100M三种接口。实验终端通过局域网采用SEVER&#x2F;CLIENTF方式和光传输网元通讯，并完成对网元业务的设置、数据修改、监视等来达到用户管理的目的。<br>实验平台提供传输设备有OPTIXMETRO1000和OPTIXOSN2000，其中，OSN2000处于网络的接入层，为客户提供全规格设备级别保护的解决方案。传输速率STM-4，即622M。两种设备应用于城域网传输网中的接入层，可与OSN9500、OptiX 10G、OptiX OSN2500、OptiX OSN2000、OptiX OSN3000混合组网。<br>1、OPTIXMETRO1000设备在网络中的地位如图2.1所示：<br><img data-src="https://pic.imgdb.cn/item/664346e00ea9cb1403c88c60.png" alt=""/><br>2、OptiX 155&#x2F;622H(Metro1000)设备<br><img data-src="https://pic.imgdb.cn/item/664346e00ea9cb1403c88c4c.png" alt=""/><br>OptiX 155&#x2F;622H(Metro1000)设备由电源头柜、风扇子架、子架、接口区和插板区组成。其单板槽位如图2.3<br><img data-src="https://pic.imgdb.cn/item/664346e00ea9cb1403c88c37.png" alt=""/><br>Metro 1000由五块单板组成，其单板槽位和功能有IU1:光接口板位，OI2&#x2F;OI4&#x2F;SB2；IU2，IU3：光&#x2F;电接口板位，OI2&#x2F;OI4&#x2F;SB2，SP1&#x2F;SP2&#x2F;SM1&#x2F;HP2&#x2F;PL3；IU3：环境监控，EMU；IU4：电接口板位，PD2&#x2F;PM2&#x2F;TDA；SCB：系统控制板位，X42、SCC、STG、OHP2；A：防尘网，电源滤波板，POI；B：风扇板位，FAN。<br>155&#x2F;622H的IU板根据它所完成的功能，可分为SDH功能单元、PDH功能单元、以太网功能单元、交叉连接和时钟功能单元、系统控制功能单元、辅助单元、电源单元和风扇单元。在SDH功能单元，有OI4（1路STM-4光接口板）、OI4D（2路STM-4光接口板）、OI2S（1路STM-1光接口板）、OI2D（2路STM-1光接口板）。其中OI4&#x2F; OI4D的功能包括接收和发送STM-4光信号；提供I-4、S-4.1、L-4.1、L-4.2标准光模块；提供丰富的告警和性能事件，从而便于设备的管理和维护；提供光口级别的内外环回功能，便于快速定位故障；提供激光器自动关断功能；支持复用段保护和子网连接保护（SNCP）。<br>3、OptiX OSN2000 STM-1&#x2F;STM-4光传输设备<br>OptiX OSN 2000 STM-1&#x2F;STM-4 光传输设备（以下简称OptiX OSN 2000）是华为技术有限公司根据城域网现状和未来发展趋势，开发的光传输设备，它融合了SDH、Ethernet、PDH技术，实现在同一个平台上高效地传送语音和数据业务。<br><img data-src="https://pic.imgdb.cn/item/664347060ea9cb1403c8b893.png" alt=""/><br>OptiX OSN2000 系统由SDH业务处理单元、PDH业务处理单元、以太网业务处理单元、交叉、时钟单元、系统控制与通信单元、电源单元、辅助单元、辅助接口单元、光功率放大单元组成。OptiX OSN2000 设备应用于城域传输网中的接入层，可与OptiX OSN2500、OptiX OSN3500、OptiX OSN7500、OptiX OSN9500等设备组成传输网。<br><img data-src="https://pic.imgdb.cn/item/664347060ea9cb1403c8b86e.png" alt=""/><br>从图中可以看出OptiX OSN2000位于Access layer层<br>OptiX OSN2000光传输系统槽位分布如图2.6<br><img data-src="https://pic.imgdb.cn/item/664347060ea9cb1403c8b85a.png" alt=""/><br>其中01，02，03……是单板槽位号；特殊槽位：XCS，SCC，PIU，AUX单独标明；7号交叉板上的线路板槽位为27，8号交叉板上的线路板槽位为28；AUX单板上的EOW槽位为18、STI槽位为19；风扇槽位为：22；V1R2版本不支持主控备份，只能插在12槽位。系统采用集中供电方式，14槽位和15槽位包括48V电源引入、电源转换等功能，而且14槽位和15槽位电源主备份。IU4<del>IU5、IU6</del>IU9、IU7<del>IU8、IU10</del>IU11互为对偶槽位，只有IU4<del>IU6&amp;IU9</del>IU11对应有接口板，因此支路板需要插到这些槽位。</p>
<h3 id="三、光纤传输实习操作具体内容、过程和结果描述"><a href="#三、光纤传输实习操作具体内容、过程和结果描述" class="headerlink" title="三、光纤传输实习操作具体内容、过程和结果描述"></a>三、光纤传输实习操作具体内容、过程和结果描述</h3><p>光纤传输部分的实习主要是针对OSN2000、Mctro1000的单板进行选择和设置，其中板位选择的是实验室中设备所使用的板子，进入维护系统之后对其中的一些参数进行设置可以实现不同的功能，期间我们实际操作的有包括对ID、SDH业务配置、会议电话配置等。从而实现对硬件的配置。<br><img data-src="https://pic.imgdb.cn/item/664347060ea9cb1403c8b80e.png" alt=""/><br>光纤接口是用来连接光纤线缆的物理接口。其原理是利用了光从光密介质进入光疏介质从而发生了全反射。通常有SC、ST、FC等几种类型，它们由日本NTT公司开发。FC其外部加强方式是采用金属套，紧固方式为螺丝扣。ST接口通常用于10Base-F，SC接口通常用于100Base-FX。<br>SDH采用的信息结构等级称为同步传送模块STM-N(Synchronous Transport Mode，N&#x3D;1，4， 16流程，64)，最基本的模块为STM-1，四个STM-1同步复用构成STM-4，16个STM-1或四个 STM-4同步复用构成STM-16，四个STM-16同步复用构成STM-64，甚至四个STM-64同步复用构成STM-256;SDH采用块状的帧结构来承载信息，每帧由纵向9行和横向 270×N列字节组成，每个字节含8bit。<br>STM-4 光接口单元OI4&#x2F;OI4D功能有：接收和发送STM-4 光信号；提供I-4，S-4.1，L-4.1 和L-4.2 标准光模块；提供丰富的告警和性能事件，便于设备的管理和维护；提供光口级别的内外环回功能，便于快速定位故障；提供激光器自动关断功能；支持复用段保护和子网连接保护（SNCP）。<br><img data-src="https://pic.imgdb.cn/item/664347050ea9cb1403c8b7be.png" alt=""/><br>交叉模块提供32 x 32 VC4全交叉，2016×2016 VC12低阶交叉或等效的VC3交叉能力 ；交叉处理单元和时钟处理单元均支持1＋1备份 ；提供最大27路时钟源，分别为12路线路时钟源、12路支路时钟源、2路BITS时钟源和1个内部时钟源。线路源最大可提供20路，支路源最大可提供18路 ；支持标准和扩展SSM协议 ；提供120欧姆接口的2路外时钟接口，输入&#x2F;输出可选择2MHz或者2Mbit&#x2F;S ，可以通过120欧姆转75欧姆的转接电缆提供75欧姆的外时钟接口；支持外时钟透传DCC的功能 。<br><img data-src="https://pic.imgdb.cn/item/6643472c0ea9cb1403c8f4d9.png" alt=""/></p>
<h3 id="四、光纤传输实习经历的认识"><a href="#四、光纤传输实习经历的认识" class="headerlink" title="四、光纤传输实习经历的认识"></a>四、光纤传输实习经历的认识</h3><p>光纤传输实习过程是分组进行，参照老师讲解的内容，对照设备进行连接认识，老师在旁边指导。本次光纤传输的实习操作内容主要包括认识光纤通信设备的外观及结构，了解传输设备的型号、参数、性能指标和运行情况；指导光纤传输设备的常见几种组网方式，即链形、环形、环相切等；学习光纤传输设备的基本操作过程和常规维护管理，并且对SDH光传输点对点组网进行了基本的配置。</p>
<h2 id="第三部分-实习总结"><a href="#第三部分-实习总结" class="headerlink" title="第三部分  实习总结"></a>第三部分  实习总结</h2><p>在老师的精心指导和同学的帮助下，我们圆满的完成了为期三周的实习。本次实习分为交换和传输两个模块，经过这三周的学习，自己收获不少。<br>这三周的实习把大学前三年所学很多的东西都结合起来，让自己在专业知识这方面得到了很好的复习。虽然实习的知识都是书本上的，但是不够详细，而且自己对于某些知识的理解也不透彻，这次实习通过实际的操作，让自己的对知识理解得更为透彻。<br>其次锻炼了自己的动手能力以及团队合作能力。这次实习不像上课，只有老师讲，而是老师在讲了之后让我们自己实际动手去操作，自己写脚本写代码，修改参数，观察配置，锻炼了我的动手能力对问题的理解能力。我们实习是以小组形式进行的，每次老师布置任务都是布置给一个小组，具体小组内部怎么分配老师不管，我们小组同学为了能够完成我们小组的任务都很认真的参与进来，培养了我们的团队合作能力。<br>最后现在自己大四，正在找工作。自己从一开始就找不准方向，这次实习过后，自己对自己的专业有了更深的认识，对自己找工作也有更明确的方向。<br>这次实习的收获非常的大，感谢学校安排的这次专业实习，感谢老师在实习过程中对我的教导和同学们对我的帮助。</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>]]></content>
      <categories>
        <category>课程设计</category>
        <category>通信工程</category>
        <category>实习报告</category>
      </categories>
  </entry>
  <entry>
    <title>timeRecords is at its maximum size[64]. Ignore this when unittesting.</title>
    <url>/a463e3d8.html</url>
    <content><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>今天把项目打安卓包，运行的时候看日志，发现报了一个错，如下图：</p>
<img data-src="https://pic.imgdb.cn/item/664328220ea9cb140391bed7.png" alt="" />

<p><code>timeRecords is at its maximum size[64]. Ignore this when unittesting.</code>意思就是time Records 已达到最大大小[64]。 单元测试时忽略这一点。</p>
<p>因为我是在本地测试，所以这个错也没有对项目产生什么影响，项目还是能够正常运行。虽然报错说测试的时候可以忽略，但是还是有点担心上线后会不会有什么问题。</p>
<p>如果哪位大佬遇到过这个问题，还请多多请教。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>通信科技人员职业道德</title>
    <url>/7ae85f4f.html</url>
    <content><![CDATA[<h1 id="1-通信科技的地位"><a href="#1-通信科技的地位" class="headerlink" title="1.通信科技的地位"></a>1.通信科技的地位</h1><p>通信科技既是整个科学技术的重要组成部分，又是通信生产力中越来越突出和具有重要意义的因素。<br>目前，载波、微波、光纤、卫星、移动通信和Internet已在各种通信业务中广泛应用没电话和移动终端进入了大部分家庭。通信，通信部门本身就是一个技术密集型的行业。因此通信科技在世界科技和生产力发展中有这重要地位。<br>从世界范围来看，通信技术正向着数字化、综合化、智能化、个人化和标准化方向发展。<br>（1）数字化就是在通信网上全面使用数字技术，包括数字传输、数字交换和数字终端等。<br>（2）综合化就是把来自各种信息源的业务综合在一个数字通信网中加工，为用户提供综合性服务。<br>（3）智能化是指在通信网中引进更多的智能，形成所谓的智能网，从而提高网路的业务应变能力，对网路资源进行重分配，随时提供满足各类用户需要的业务。<br>（4）宽带化是指宽带的普及。宽带指的是用来传输大容量信息的宽带，就网络终端的传输速度而言，高于当时历史时期一般传输速度的，就称为“宽带”。宽带是相对于窄带而言的。<br>（5）个人化是由指“服务到家”的通信方式变为“服务到人”。使用户随时对地可以与任何地方的另一个人进行通信。<br>（6）标准化是指随着通信网的演变不断制定或修订全国统一网络标准以及有关国际标准的过程。</p>
<h1 id="2-通信科技人员职业道德的含义即特点"><a href="#2-通信科技人员职业道德的含义即特点" class="headerlink" title="2.通信科技人员职业道德的含义即特点"></a>2.通信科技人员职业道德的含义即特点</h1><h2 id="2-1-通信科技人员职业道德的含义"><a href="#2-1-通信科技人员职业道德的含义" class="headerlink" title="2.1 通信科技人员职业道德的含义"></a>2.1 通信科技人员职业道德的含义</h2><p>通信科技人员职业道德，是社会道德原则在通信行业的具体运用，是通信科技人员在职业活动中为贯彻社会主义道德原则而遵循的具体行为准则，也是社会评价通信科技人员通过、是非、荣辱、善恶的标准。</p>
<h2 id="2-2-通信科技人员职业道德的两重性"><a href="#2-2-通信科技人员职业道德的两重性" class="headerlink" title="2.2 通信科技人员职业道德的两重性"></a>2.2 通信科技人员职业道德的两重性</h2><p>通信科技人员是整个科技队伍的一部分，又是通信企业的主力军，承担着发展通信生产力、确保通信畅通无阻的繁重任务。完成这个任务，不仅是要掌握现代化的科学技术，还要讲究职业道德，使自己在处理个人与自然界的关系方面，增强进取精神；在处理个人与社会、与他人的关系方面，增强协调性，将自己所掌握的现代科学技术的作用充分发挥出来。另外，通信科技人员所从事的职业活动，既是科学技术的职业劳动，又是通信的职业劳动，既具有一般科技职业活动的特点，又具有通信职业活动的特点。通信科技人员在通信科技的职业活动中，应既遵循一般科技人员的职业道德，又讲究和遵循通信科技人员的职业道德。因此，通信科技人员的职业道德具有两重性。</p>
<h2 id="2-3-通信科技职业的特点"><a href="#2-3-通信科技职业的特点" class="headerlink" title="2.3 通信科技职业的特点"></a>2.3 通信科技职业的特点</h2><p>通信科技是科学技术在通信中的运用，它受通信职业特点的制约。与其他科技职业相比，通信科技职业既具有一般科技职业的特点，又具有自身的特点。具体来说，通信科技职业的特点体现在以下几个方面。<br>（1）从通信科技劳动的特点看，通信科技职业具有实践性、应用性。通信既是把探索科学理论与技术实践相结合，把脑力劳动与一定的体力劳动相结合，把科学知识迅速地转化为通信生产的手段，为社会服务，为人类造福。通信科技劳动是将基础科学的一般原理和通用性技术的理论，运用于解决通信生产的设备技术问题的一种“物化”劳动。它不仅具有一般科技劳动的探索性、创造性，更具有实践性和实用性。<br>（2）从通信科技劳动的目的和结果看，通信科技职业具有严谨性、准确性。通信科技劳动的产品是一种特殊的产品——“效用”。其劳动过程和消费过程不可分割。通信科技劳动过程与用户的使用过程同时进行。因此，通信科技劳动过程不能发生差错，一旦发生，将给用户造成物质、精神、经济、人身安全方面的损失和危害。所以，从事通信科技劳动，首先要树立一丝不苟、严谨、准确的观念。<br>（3）从通信科技全程全网、联合作业的劳动过程看，通信科技职业具有高度的统一性。首先，要求企业与企业之间、企业内的各个工序之间。上一班下一班之间、昼夜之间，必须紧密衔接、配合默契、协调一致。其次，为了确保通信科技劳动的整体性，依赖纪律、法律、规章制度的管理和约束尤为重要。<br>（4）从通信科技劳动的人际关系看，具有广和远的特点。广，是指通信科技人员在劳动中人际关系广泛，不仅要处理本工序间与其他科技人员的关系、与管理人员和辅助工作人员的关系，还要处理个人与其他工序间、其他班组间各类人员的关系。远，是指通信科技人员还要处理好相距甚远、素不相识的同行和其他工作人员的关系。这些关系如果处理不好，势必造成通信受阻甚至中断，直接影响到通信任务的完成。因此，和谐一致的人际关系，是通信职业技术特点所要求的。<br>##2.4 通信科技人员职业道德的特点<br>通信科技职业的特点，决定了通信科技人员职业道德也具有自身的特点。具体表现在以下几个方面。<br>（1）通信科技人员职业道德是一切通信工作的出发点和落脚点。通信科技人员职业道德是检验通信行业道德的标准，可从法律上约束通信科技人员贯彻执行为人民服务的宗旨。<br>（2）通信职业道德体现了通信的集中统一性。通信科技人员职业道德要求在通信生产中，必须树立全程全网的整体观念，服从统一指挥调度，另外，通信科技人员职业道德要求通信科技人员要加强团结协作，要有组织、有纪律。<br>（3）通信科技人员职业道德体现了通信“迅速、准确、安全、方便”的服务方针。通信的服务方针反映了通信的基本特点和工作标准，也反映了社会和人民群众对通信的基本要求。通信的效用在于缩短时间和空间距离，时间要求短，效用要求准确，传递要求安全，服务要去便利。</p>
<h1 id="3-通信科技人员职业道德的基本要求"><a href="#3-通信科技人员职业道德的基本要求" class="headerlink" title="3.通信科技人员职业道德的基本要求"></a>3.通信科技人员职业道德的基本要求</h1><p>由于通信科技职业具有实践性和应用性、严谨性和准确性、高度的集中统一性以及“广”和“远”的特性，因此，通信科技人员在从事通信科技的职业活动中，除应具有一般通信人员的职业道德和一般科技人员的职业道德外，还应具有通信科技人员职业道德。通信科技人员职业道德的基本要求如下：</p>
<h2 id="3-1-通信科技人员要有全程全网的观念，不能搞本位主义"><a href="#3-1-通信科技人员要有全程全网的观念，不能搞本位主义" class="headerlink" title="3.1 通信科技人员要有全程全网的观念，不能搞本位主义"></a>3.1 通信科技人员要有全程全网的观念，不能搞本位主义</h2><p>通信科技工作的行业特点，要求通信科技人员必须树立着眼全程全网的观念，反对本位主义的思想作风。这是社会主义、集体主义思想在通信科技职业活动中的重要体现，是通信科技人员职业道德的重要规范。本位主义是从本地区、本部门的利益出发，不顾大局、不顾整体、不顾其他部门的不良思想作风，是放大了的个人主义。这就要求通信科技人员树立整体观念，要一切从整体的利益出发，识大体、顾大局，维护整体利益。<br>全程全网通信，要求每一个局部、每一个岗位都要首先做好本职工作。任何一个部门、一个岗位的失调都会使通信发生故障，受到阻碍。通信科技工作这个岗位肩负的责任，较之其他工种更为重大，稍有失误，影响所及将不仅仅是一两个用户，往往会使大面积的通信受到干扰。因此，通信科技人员一定要严格要求自己，立足于本职，为确保全程全网的通信畅通，兢兢业业、勤勤恳恳做好科技工作。<br>在开通电路、维修引进、安装设备等科技工作中要做到支线服从干线、局部服从全局、下级服从上级、地方服从中央；在处理企业间、局际间、工序间、班组间的关系中，要主动为对方着想，紧密配合、相互支持，一切从实现全程全网的通信出发。要克服个人主义和小团体主义。因为在个人主义思想的支配下，为了个人利益和小团体利益，常常会使国家的，集体的利益受到损害，在互联互通上不自觉地给全程全网的通信造成恶劣影响。要立足于本职，从自己做起。</p>
<h2 id="3-2-通信科技人员要发扬协作精神，协调好人际关系，发扬科学技术的民主精神"><a href="#3-2-通信科技人员要发扬协作精神，协调好人际关系，发扬科学技术的民主精神" class="headerlink" title="3.2 通信科技人员要发扬协作精神，协调好人际关系，发扬科学技术的民主精神"></a>3.2 通信科技人员要发扬协作精神，协调好人际关系，发扬科学技术的民主精神</h2><p>由于通信的联合作业，既有明确的分工和严明的岗位职责，又有紧密的衔接。因此，通信科技人员要做到主动协作和配合，发挥主观能动性，充分发挥团结协作精神，只有如此，才能优质高效地完成通信任务。<br>发扬协作精神，首先要营造和谐的人际关系，这是实现全程全网联合作业的重要保证。因此，通信科技人员之间要做到互敬、互尊、互助、互谅。其次要树立集体荣誉感。要破除知识和技术私有的观念，积极开展学术方面的交流，促进通信科技水平的全面提高。最后要发扬科学技术的民主精神。工作不分彼此，通信科技人员在分配任务时，不斤斤计较，不相互扯皮，要紧密配合，充分调动各方面的积极性，共同完成科研设计和设备维护等任务，要弘扬把困难留给自己、方便让给别人的风格。</p>
<h2 id="3-3-通信科技人员要具有高度的组织纪律性、强烈的社会责任感"><a href="#3-3-通信科技人员要具有高度的组织纪律性、强烈的社会责任感" class="headerlink" title="3.3 通信科技人员要具有高度的组织纪律性、强烈的社会责任感"></a>3.3 通信科技人员要具有高度的组织纪律性、强烈的社会责任感</h2><p>通信是高度集中统一、与人们工作和生活息息相关的极其复杂的庞大系统，因此要求通信科技人员要具有高度的组织纪律性、强烈的社会责任感，这是对通信科技人员职业道德的突出要求。与从事其他科技工作的人员相比，通信科技人员的职业活动受集体、受组织纪律的约束要更严、更多。因此，为了确保通信，通信科技人员必须具有高度的组织纪律性，一切行动听从指挥，严格遵纪守法。<br>（1）要有高度的组织纪律观念。人的行为是受思想支配的，从思想上树立了高度的组织纪律观念，掌握了辨别是非善恶的标准，才能保证法律、规章制度的贯彻执行，通信科技人员也毫不例外。增强组织纪律观念，一是要提高对遵纪守法的重要性的认识；二是要认真学习法律、规章制度，懂得工作中的行为规范；三是要把法律、纪律、规章制度变成自己的行为准则，自觉自愿地遵守和服从。只有这样，才能奠定遵纪守法的坚实理论思想基础。<br>（2）要有强烈的社会责任感。社会责任感，是与科技人员对祖国。对社会、对人民所持正确态度相关联的一种情感，是通信科技人员具有高度组织纪律性的思想基础，是通信科技人员在任何情况、任何时候做到服从组织领导、遵纪守法的内在动力。只有具有强烈的社会责任感，才能把自己从事的通信科技工作和祖国、社会、人民的利益紧密联系起来，从而产生职业情感、职业信念，并通过自己内心的道德法庭鞭策自己自觉地、无条件地、不折不扣地服从组织纪律，在关键时刻不离岗，危险关头冲上前，自觉遵纪守法。具有强烈的社会责任感，是通过科技人员的光荣传统。</p>
<h2 id="3-4-通信科技人员要遵守通信法律和执行规章制度"><a href="#3-4-通信科技人员要遵守通信法律和执行规章制度" class="headerlink" title="3.4 通信科技人员要遵守通信法律和执行规章制度"></a>3.4 通信科技人员要遵守通信法律和执行规章制度</h2><p>通信科技人员遵守通信法律和执行规章制度。这主要体现在以下几方面。<br>（1）要遵守各项法律法规。法律带有强制性，它以国家颁布的法律、法令为手段，要求通信科技人员必须以它来约束自己的职业行为。现在已经颁布的与通信有关的宪法、刑法、反不正当竞争法、保密法、电信条例等，都是通信科技人员必须认真学习和严格遵守的。通信规章制度，是多年来通信工作的正反两方面经验的总结，通信科技人员必须自觉遵守，严格贯彻执行。<br>（2）要遵守劳动纪律。劳动纪律是组织人们进行劳动的形式，又是劳动过程中人与人之间的一种社会联系。纪律，作为一种行为规则，是以服从为前提的，因而具有强制性和约束力。遵守纪律也是一种美德，因而又具有道德意义。遵守劳动纪律，要遵守劳动时间，不迟到、不早退、不旷工，有事提前请假，上岗聚精会神，注重质量效益、工作效率、不闲谈、不做私事，要挺胸指挥、服从调度。<br>（3）通信科技人员要遵守保密制度。对工作中接触到的通信内容以及其他需要保密的内容、科技资料、图纸等，都要守口如瓶，严格保管保密，不得随意泄露；在测试、维修通信设备时，要严格按照有关规定的程序作业，不得任意更改严防调错、插错电路、设备，防止电路设备间串音串话；提高警惕，防止别有用心的人盗窃机密，如拦截通信信号、窃听通话内容等。</p>
<h2 id="3-5-通信科技人员要服从社会利益，不图谋技术垄断"><a href="#3-5-通信科技人员要服从社会利益，不图谋技术垄断" class="headerlink" title="3.5 通信科技人员要服从社会利益，不图谋技术垄断"></a>3.5 通信科技人员要服从社会利益，不图谋技术垄断</h2><p>通信全程全网的特点决定了通信科技人员必须从社会整体利益的高度出发，正确对待通信科学技术的发展、应用、交流、传播和发明创造。尤其在引入商品经济的竞争机制，大力推进技术市场发展、科技成果商品化的今天，服从社会整体利益，不图谋技术垄断，就成为通信科技人员从事职业活动的一项重要的道德原则。遵循这条原则，是通信科技人员树立服务保障观念、不图名利地位的重要体现，也是通信科技人员将个人利益、团体利益服从整体利益的强烈的社会责任感的重要体现。<br>遵循这一原则，要求通信科技人员要做到以下几点。<br>（1）端正竞争态度。在社会主义市场经济条件下，企业竞争的根本利益是一致的。竞争者之间的额关系是打破垄断，目的是相互促进、共同提高。在社会主义制度下，如果通信科技人员为了竞争，把持、独占、封锁技术活采用不正当的竞争手段，是应该摒弃的。为了通信科技的进步，同行间应通过正常的竞争力，加强技术合作和技术交流，相互学习、相互促进。将通信科技不断推向新的水平。<br>（2）不保守技术，搞好传、帮、带。要积极传授新技术，要热情帮助新职工，使其尽快掌握和利用先进技术，要带动一片，各展才能，共同促进通信科技事业的发展。<br>（3）不高技术封锁。为推动通科技的进步，通信科技人员要积极参加技术协作、技术攻关和技术交流，同行相亲、通力合作，不封锁技术。要正确对待科技成果，有了发明创造，应按照国家专利法正确履行应有的权利和义务。<br>（4）不以技术权威的地位自居。不图谋技术垄断，不仅是对已有的科学技术成果不能把持和独占，还要不以权威自居压制新的科学技术的发明、发现。尤其不应以自己的权威地位压制不同学术观点的发表和青年人的成长。要为青年人的成长创造条件，要支持与自己学术观点不相同的人向自己的理论挑战。</p>
<h2 id="3-6-树立服务保障观念，不图名利地位"><a href="#3-6-树立服务保障观念，不图名利地位" class="headerlink" title="3.6 树立服务保障观念，不图名利地位"></a>3.6 树立服务保障观念，不图名利地位</h2><p>树立服务保障观念，是通信科技工作的出发点和落脚点，是通信科技人员职业道德的最高宗旨和根本原则，是通信科技人员把自己造福人民、振兴祖国的良好愿望同行动统一起来的基本要求。<br>（1）通信科技是通信的技术保障，因此，通信科技人员要做到工作第一、服从需要。通信科技人员要认真履行党和国家以及人民赋予的职责。通信科技有多重分工，有的维护、保养机器设备，有的攻克高、精、尖科技，工作在各个岗位上的通信科技人员，都应充分认识到自己平凡劳动的伟大意义，安其位，忠其职，兢兢业业，在平凡的岗位上做出不平凡的成绩。在平时，通信科技是完成政府部门指挥工作、组织生产、了解情况，以及人民群众相互联系的工具。在战时，在非常时期，通信科技又是配合军事通信部门、临时指挥机关，保证沟通联络的重要手段。因此通信科技人员应树立工作第一、服从需要的观念。<br>（2）通信科技人员要不畏艰苦，坚守岗位。通信科技工作的艰苦性主要是生活、工作环境的艰苦，它需要有人常年战斗在生产第一线，战斗在实验室，战斗在边陆、孤岛、深山老林和未开发的贫穷落后地区，无论严冬酷暑、白天黑夜、节日假日、敌情、险情、灾情，都要坚守岗位，关键时刻还要挺身而出。通信科技人员，要确保通信的畅通无阻和质量效益的不断提高，赶超世界先进通信水平，就需要有不畏艰苦的精神。在紧要关头，为了确保通信，通信科技人员要做到临危不惧，坚守岗位，以自己的献血和生命确保通信任务的完成。<br>（3）通信科技人员要确保设备的完好率，确保质量第一。通信科技人员顺利服务保障观念，不仅要尤为人民服务的良好愿望和精神状态，还要树立质量第一的思想，努力精通技术业务，用于革新创造，不断为通信提供良好的、先进的设备和技术。<br>要树立质量第一的观念。通信科技是为提高传递信息和实物的效益提供服务和技术保障的，通信科技工作一旦发生质量问题，就会影响通信效益或造成通信的中断，从而给通信和使用者造成严重的、甚至是不可估量的损失和危害。因此，通信科技人员，应把确保质量放在高于一切、重于一切、大于一切的位置上去，牢固地树立质量第一和创全优的意识。<br>没有完好的、优质的设备，科技服务保障就成了无源之水、无本之木。因此，通信科技设备时完成通信科技任务的工具和手段。通信科技人员要精通通信科技知识，不断更新知识结构和提高自己的通信科技理论水平；要精通设备的维修技术，在发生故障时能应用自如，及时排除；要加强设备的维修保养，确保设备的完好率，以严谨、求实的态度对待可疑的现象和故障，不敷衍塞责，不因个人的失职或疏忽大意而导致通信的中断和传递的差错。<br>（4）要发扬开拓创新精神，用于革新。开拓、创新是通信科技人员的必备品质，通信科技人员应发扬开拓、创新精神，改造旧设备、更新旧技术、研制新设备，拓展新技术，为填补我国通信设备的空白，为提高技术装备、增强通信能力，增强五服务效益做出积极的贡献。</p>
]]></content>
      <categories>
        <category>通信科技人员职业道德</category>
      </categories>
  </entry>
  <entry>
    <title>Lua连续教程之Lua资源管理</title>
    <url>/45984.html</url>
    <content><![CDATA[<p>函数dir会遍历目录并返回一张包含指定目录下所有内容的表。这里对dir新的实现会返回一个迭代器，每次调用这个迭代器时它都会返回一个新元素。通过这种实现，我们就能使用如下的循环来遍历目录：</p>
<span id="more"></span>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> fname <span class="keyword">in</span> <span class="built_in">dir</span>.<span class="built_in">open</span>(<span class="string">&quot;.&quot;</span>)do</span><br><span class="line">	<span class="built_in">print</span>(fname)</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>要在C语言中遍历一个目录，我们需要用到DIR结构体。DIR的实例由opendir创建，且必须通过调用closedir显示地释放。在之前的实现中，我们将DIR的示例当做局部变量，并在或获取最后一个文件名后释放了它。而在新的实现中，由于必须通过多次调用来查询该值，因此不能把DIR的实例保存到局部变量中。此外，不能在获取最后一个文件名后再释放DIR的示例，因为如果程序从循环中跳出，那么迭代器永远不会获取最后一个文件名。因此，为了确保DIR的实例能被正确释放，需要把该实例的地址存入一个用户数据中，并且用这个用户数据的远方__gc来释放该结构体。<br>尽管用户数据在我们实现中处于核心地位，但这个表示目录数据并不一定需要对Lua可见。函数dir.open会返回一个Lua可见的迭代函数，而目录可以作为迭代函数的一个上值。这样，迭代函数能直接访问这个结构体，而Lua代码则不能。<br>总之，我们需要三个C语言函数。首先，我们需要函数dir.open，该函数是一个工厂函数，Lua调用该函数来创建迭代器；它必须打开一个DIR结构体，并将这个结构体作为上值创建一个迭代函数的闭包。其次，我们需要迭代函数。最后，我们需要__gc元方法，该元方法用于释放DIR结构体。通常情况下，我们还需要一个额外的函数进行一些初始化工作，例如为目录创建和初始化元表。<br>先来看函数dir.open，参加下面示例</p>
<blockquote>
<p>示例 工厂函数dir.open</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dirent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;lua.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;luaxlib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*迭代函数的前向声明*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">dir_iter</span><span class="params">(lua_State *L)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">l_dir</span> <span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	<span class="type">const</span> <span class="type">char</span> *path = luaL_checkstring(L,<span class="number">1</span>);</span><br><span class="line">	<span class="comment">/*创建一个保存DIR结构体的用户数据*/</span></span><br><span class="line">	DIR **d = (DIR **)lua_newuserdata(L,<span class="keyword">sizeof</span>(DIR *));</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 预先初始化*/</span></span><br><span class="line">	*d = <span class="literal">NULL</span>；</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*设置元表*/</span></span><br><span class="line">	luaL_getmetatable(L,<span class="string">&quot;LuaBook.dir&quot;</span>);</span><br><span class="line">	lua_setmetatable(L,<span class="number">-2</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*尝试打开指定目录*/</span></span><br><span class="line">	*d = opendir(path);</span><br><span class="line">	<span class="keyword">if</span> (*d == <span class="literal">NULL</span>)  <span class="comment">/* 打开目录失败*/</span></span><br><span class="line">		luaL_error(L, <span class="string">&quot;cannot open %s:%s&quot;</span>,path,strerror(errno));</span><br><span class="line">	<span class="comment">/*创建并返回迭代函数；该函数唯一的上值，即代表目录的用户数据本身就位于栈顶*/</span></span><br><span class="line">	lua_pushcclosure(L,dir_iter,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个函数中要注意的是，必须在打开目录前先创建用户数据。如果先打开目录再调用lua_newuserdata，那么会引发内存错误，该函数会丢失并泄露DIR结构体。如果顺序正确，DIR结构体一旦被创建就会立即与用户数据相关联；无论此后发生什么，元方法__gc最终都会将其释放。<br>另一个需要注意的点是用户数据的一致性。一旦设置了元表，元方法__gc就一定会被调用。因此，在设置元表前，我们需要使用NULL预先初始化用户数据，以确保用户数据具有定义明确的值。<br>下一个函数dir_iter也就是迭代器本身。</p>
<blockquote>
<p>示例 dir库中的其他函数</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">dir_iter</span><span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	DIR *d = *(DIR **)lua_touserdata(L, lua_upvalueindex(<span class="number">1</span>));</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> *<span class="title">entry</span> =</span> readdir(d);</span><br><span class="line">	<span class="keyword">if</span> (entry != <span class="literal">NULL</span>)&#123;</span><br><span class="line">		lua_pushstring(L,entry -&gt;d_name);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">/* 遍历完成*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">dir_gc</span><span class="params">(lua_State *L)</span> &#123;</span><br><span class="line">	DIR *d = *(DIR **)lua_touserdata(L,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span>(d) closedir(d);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">luaL_Reg</span> <span class="title">dirlib</span> [] =</span> &#123;</span><br><span class="line">	&#123;<span class="string">&quot;open&quot;</span>,l_dir&#125;,</span><br><span class="line">	(<span class="literal">NULL</span>,<span class="literal">NULL</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">luaopen_dir</span> <span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	luaL_newmetatable(L,<span class="string">&quot;luaBook.dir&quot;</span>);</span><br><span class="line">	<span class="comment">/*设置__gc字段*/</span></span><br><span class="line">	lua_pushcfunction(L,dir_gc);</span><br><span class="line">	lua_setfield(L,<span class="number">-2</span>,<span class="string">&quot;__gc&quot;</span>);</span><br><span class="line">	<span class="comment">/*创建库*/</span></span><br><span class="line">	luaL_newlib(L,dirlib);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码很简单，它从上值中获取DIR结构体的地址，然后调用readdir读取下一个元素。<br>函数dir_gc就是元方法__gc，该元方法用于关闭目录。正如之前提到的，该元方法必须做好防御措施：如果初始化出现错误，那么目录可能会是NULL。<br>整个示例中还有一点需要注意。dir_gc似乎应该检查其参数是否为一个目录以及目录是否已经被关闭；否则，恶意用户可能会用其他类型的用户数据来调用dir_gc或者关闭一个目录两次，这样会造成灾难性后果。然而，Lua程序时无法访问这个函数的：该函数被保存在目录的元表中，而用户数据又被保存为迭代函数的上值，因此Lua代码无法访问这些目录。</p>
<h2 id="XML解析器"><a href="#XML解析器" class="headerlink" title="XML解析器"></a>XML解析器</h2><p>接下来，我们介绍一种使用Lua语言编写的Expat绑定的简单实现，称为lxp。Expat是一个用C语言编写的开源XML1.0解析器，实现了SAX，即<em>Simple API for XML</em>。SAX是一套基于事件的API，这就意味着一个SAX解析器在读取XML文档时会边读取边通过回调函数向应用上报读取到的内容。例如，如果让Expat解析形如”<tag cap="5">hi</tag>“的字符串，那么Expat会生成三个事件：当读取到子串”<tag cap ="5">“时，生成开始元素事件；当读取到”hi”时，生成文本事件，也称为字符数据事件；当读取到”</tag>“时，生成结束元素事件。每个事件都会调用应用中相应的回调处理器。<br>在此我们不会介绍整个Expat库，只关注于那些用于演示与Lua交互的新技术部分。虽然Expat可以处理很多不同的事件，但我们只考虑前面示例中所提到的三个事件（开始元素、结束元素和文本事件）。<br>本例中用到的Expat API很少。首先，我们需要用于创建和销毁Expat解析器的函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">XML_Parser <span class="title function_">XML_ParserCreate</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *encoding)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">XML_PaserFree</span><span class="params">(XML_Parser p)</span>;</span><br></pre></td></tr></table></figure>
<p>参数encoding是可选的，本例中将使用NULL。<br>当解析器创建完成后，必须注册回调处理器：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">XML_SetElementHandler</span><span class="params">(SML_Parser p,XML_StartElementHandler start,XML_EndElementHandler end)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">XML_SetCharacterDataHandler</span><span class="params">(XML_Parser p, XML_CharacterDataHandler hndl)</span>;</span><br></pre></td></tr></table></figure>
<p>第一个函数为开始元素和结束元素事件注册了处理函数，第二个函数为文本（XML术语中的字符数据character data)事件注册了处理函数。<br>所有回调处理函数的第一个参数都是用户数据，开始元素事件的处理函数还能接收标签名（tag name）及其属性（attribute):</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="title function_">void</span><span class="params">(*XML_StartElementHandler)</span><span class="params">(<span class="type">void</span> *uData, <span class="type">const</span> <span class="type">char</span> *name, <span class="type">const</span> <span class="type">char</span> **atts)</span>;</span><br></pre></td></tr></table></figure>
<p>属性是一个以NULL结尾的字符串数组，其中每对连续的字符串保存一个属性的名称和值。结束元素事件处理函数除了用户数据外还有一个额外的参数，即标签名：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="title function_">void</span><span class="params">(XML_EndElementHandler)</span><span class="params">(<span class="type">void</span> *uData, <span class="type">const</span> <span class="type">char</span> *name)</span>;</span><br></pre></td></tr></table></figure>
<p>最后，文本事件处理函数只接收文本作为额外参数，该文本字符串不是以NULL结尾的，它有一个显示的长度：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef void(*XML_CharacterDataHandler)(void *uData, const char *s, int len);</span><br><span class="line">```c</span><br><span class="line">为了将文本输入Expat，可以使用如下的函数：</span><br></pre></td></tr></table></figure>
<p>int XML_Parser(XML_Parser p, const char *s, int len, int isLast);</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Expat通过连续调用函数XML_Parse一段一段地接收要解析的文档。XML_Parse的最后一个参数，布尔类型的isLast，告知Expat该片段是否是文档的最后一个片段。如果检测到解析错误，XML_返回零。</span><br><span class="line">Expat中要用到的最后一个函数允许我们设置传递给事件处理函数的用户数据：</span><br><span class="line">```c</span><br><span class="line">void XML_SetUserData(XML_Parser p, void *uData);</span><br></pre></td></tr></table></figure>
<p>现在，让我们看一下如何在Lua中使用这个库。第一种方法是一种直接的方法，即简单地把所有函数导出给Lua。另一个更好的方法是让这些函数适配Lua。例如，因为Lua语言不是强类型的，所以不需要为每一种回调函数设置不同的函数。我们可以做得更好，甚至免去所有注册回调函数的函数。我们要做的只是创建解析器时提供一个包含所有事件处理函数的回调函数表，其中每一个键值对是与相应时间对应的键和事件处理函数。例如，如果需要打印出一个文档的布局，可以使用如下的回调函数表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">local count = <span class="number">0</span></span><br><span class="line">callbacks = &#123;</span><br><span class="line">	StartElement = function(parser, tagname)</span><br><span class="line">		io.write(<span class="string">&quot;+ &quot;</span>, string.rep(<span class="string">&quot; &quot;</span>,count),tagname,<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">		count = count + <span class="number">1</span></span><br><span class="line">	end,</span><br><span class="line"></span><br><span class="line">	EndElement = function (parser,tagname)</span><br><span class="line">		count = count - <span class="number">1</span></span><br><span class="line">		io.write(<span class="string">&quot;- &quot;</span>,string.rep(<span class="string">&quot; &quot;</span>,count),tagname,<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">	end,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输入内容”<to><yes/></to>“时，这些事件处理函数会打印出如下内容：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">+ to</span><br><span class="line">+   yes</span><br><span class="line">-   yes</span><br><span class="line">- to</span><br></pre></td></tr></table></figure>
<p>有了这个API，我们就不再需要那些操作回调函数的函数了，可以直接在回调函数表中操作它们。因此，整个API只需用到三个函数：一个用于创建解析器，一个用于解析文本，一个用于关闭解析器。实际上，我们可以将后两个函数实现为解析器对象的方法。该API的典型用法如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">local lxp = require <span class="string">&quot;lxp&quot;</span></span><br><span class="line">p = lxp.new(callbacks)</span><br><span class="line"><span class="keyword">for</span> l in io.lines() <span class="keyword">do</span></span><br><span class="line">	assert(p:parse(l))</span><br><span class="line">	assert(p:parse(<span class="string">&quot;\n&quot;</span>))</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">assert(p:parse())</span><br><span class="line">p:close()</span><br></pre></td></tr></table></figure>
<p>现在，让我们来看看如何实现它。首先要决定如何在Lua语言中表示一个解析器。我们会很自然地想到使用用户数据来包含C语言结构体，但是需要在用户数据中放些什么东西呢？我们至少需要实际的Expat解析器来回调函数表。由于这些解析器对象都是Expat回调函数接收的，并且回调函数需要调用Lua语言，因此还需要保存Lua状态。我们可以直接在C语言结构体中保存Expat解析器和Lua状态；而对于作为Lua语言值的回调函数表，一个选择是在注册表中为其创建引用并保存该引用，另一个选择是使用用户值。每个用户数据都可以有一个与其直接关联的唯一的Lua语言值，这个值就被叫做用户值。要是使用这种方式的话，解析器对象的定义形如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;expat.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;lua.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;luaxlib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">lxp_userdata</span>&#123;</span></span><br><span class="line">	XML_Parser parser;</span><br><span class="line">	lua_State *L;</span><br><span class="line">&#125;lxp_userdata;</span><br></pre></td></tr></table></figure>
<p>下一步是创建解析器对象的函数lxp_make_parser,参考下例</p>
<blockquote>
<p>示例 创建XML解析器对象的函数</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 回调函数的前向声明 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">f_StartElemnt</span> <span class="params">(<span class="type">void</span> *ud, <span class="type">const</span> <span class="type">char</span> *name, <span class="type">const</span> <span class="type">char</span> **atts)</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">f_CharData</span><span class="params">(<span class="type">void</span> *ud, <span class="type">const</span> <span class="type">char</span> *s,<span class="type">int</span> len)</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">lxp_make_parser</span><span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	XML_Parser p;</span><br><span class="line">	<span class="comment">/* 创建解析器对象 */</span></span><br><span class="line">	lxp_userdata *xpu = (lxp_userdata *)lua_newuserdata(L, <span class="keyword">sizeof</span>(lxp_userdata));</span><br><span class="line">	<span class="comment">/* 预先初始化以防止错误发生 */</span></span><br><span class="line">	xpu-&gt;parser = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 设置元表*/</span></span><br><span class="line">	luaL_getmetatable(L, <span class="string">&quot;Expat&quot;</span>);</span><br><span class="line">	lua_setmetatable(L,<span class="number">-2</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 创建Expat解析器 */</span></span><br><span class="line">	p = xpu-&gt; parser = XML_ParserCreate(<span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">if</span>(!p)</span><br><span class="line">		luaL_error(L,<span class="string">&quot;XML_ParserCreate failed&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 检查并保存回调函数表*/</span></span><br><span class="line">	luaL_checktype(L,<span class="number">1</span>,LUA_TTABLE );</span><br><span class="line">	lua_pushvalue(L,<span class="number">1</span>); <span class="comment">/* 回调函数表入栈 */</span></span><br><span class="line">	lua_setuservalue(L,<span class="number">-2</span>); <span class="comment">/* 将回调函数表设置为用户值*/</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 设置Expat解析器 */</span></span><br><span class="line">	XML_SetUserData(p,xpu);</span><br><span class="line"></span><br><span class="line">	XML_SetElementHandler(p,f_StartElemnt, f_EndElement);</span><br><span class="line">	XML_SetCharacterDataHandler(p,f_CharData);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该函数有四个主要步骤。</p>
<ul>
<li>第一步遵循常见的模 式：先创建用户数据，然后使用一致性的值预先初始化用户数据，最后设置用户数据的元表（其中的预先初始化确保如果在初始化过程中发生了错误，解析器能够以一致性的状态处理用户数据）。</li>
<li>第二步中，该函数创建了一个Expat解析器，将其存储到用户数据中，并检查了错误。</li>
<li>第三步保证该函数的第一个参数是一个表（回调函数表），并将其作为用户值赋给了新的用户数据。</li>
<li>最后一步初始化Expat解析器，将用户数据设为传递给回调函数的对象，并设置了回调函数。请注意，这些回调函数对于所有的解析器来说都是相同的；毕竟，用户无法在C语言中动态地创建新函数。不同点在于，这些固定的C语言函数会通过回调函数表来决定每次应该调用哪些Lua函数。<br>接下来是解析函数lxp_parse，该函数用于解析XML数据片段。<blockquote>
<p>示例 解析XML片段的函数</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">lxp_parse</span><span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	<span class="type">int</span> status;</span><br><span class="line">	<span class="type">size_t</span> len;</span><br><span class="line">	<span class="type">const</span> <span class="type">char</span> *s;</span><br><span class="line">	lxp_userdata *xpu;</span><br><span class="line">	<span class="comment">/* 获取并检查第一个参数 */</span></span><br><span class="line">	xpu = (lxp_userdata *)luaL_checkudata(L,<span class="number">1</span>,<span class="string">&quot;Expat&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 检查解析器是否已经被关闭了*/</span></span><br><span class="line">	luaL_argcheck(L,xpu-&gt;parser != <span class="literal">NULL</span>, <span class="number">1</span>,  <span class="string">&quot;parser is closed&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 获取第二个参数*/</span></span><br><span class="line">	s = luaL_optlstring(L,<span class="number">2</span>,<span class="literal">NULL</span>, &amp;len);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 将回调函数表放在栈索引为3的位置 */</span></span><br><span class="line">	lua_settop(L,<span class="number">2</span>);</span><br><span class="line">	lua_getuservalue(L,<span class="number">1</span>);</span><br><span class="line">	xpu-&gt;L = L; <span class="comment">/*设置Lua状态*/</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*调用Expat解析字符串*/</span></span><br><span class="line">	status = XML_Parse(xpu-&gt;parser , s, (<span class="type">int</span>)len , s == <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 返回错误码 */</span></span><br><span class="line">	lua_pushboolean(L,status);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
该函数有两个参数，即解析器对象和一个可选的XML数据。如果调用该函数时未传入XML数据，那么它谁通知Expat文档已结束。<br>当lxp_parse调用XML_Parse时，后一个函数会为指定文件片段中找到的每个相关元素调用处理函数。这些处理函数需要访问回调函数表，因此lxp_parse会将这个表放到栈索引为3的位置。在调用XML_Parse时还有一个细节：请注意，该函数的最后一个参数会告诉Expat文本的指定片段是否为最后一个片段。当不带参数调用parse时，s是NULL，这样最后一个参数就为真。<br>现在我们把注意力放到处理回调的f_CharData、f_StartElement和f_EndElement函数上。这三个函数的代码结构类似，它们都会检查回调函数表是否为指定的事情定义了Lua处理函数，如果是，则准备好参数并调用这个处理函数。<br>首先来看实力中的梳理函数f_CharData.<blockquote>
<p>示例 字符数据事件的处理函数</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">f_CharData</span><span class="params">(<span class="type">void</span> *ud , <span class="type">const</span> <span class="type">char</span> *s, <span class="type">int</span> len)</span>&#123;</span><br><span class="line">	lxp_userdata *xpu = (lxp_userdata *)ud;</span><br><span class="line">	lua_State *L = xpu -&gt; L;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 从回调函数表中获取处理函数 */</span></span><br><span class="line">	lua_getfield(L,<span class="number">3</span>,<span class="string">&quot;CharacterDara&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (lua_isnil(L,<span class="number">-1</span>)) &#123; <span class="comment">/* 没有处理函数？ */</span></span><br><span class="line">		lua_pop(L,<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	lua_pushvalue(L,<span class="number">1</span>); <span class="comment">/* 解析器压栈*/</span></span><br><span class="line">	lua_pushlstring(L,<span class="number">1</span>,len); <span class="comment">/* 压入字符数据 */</span></span><br><span class="line">	lua_call(L,<span class="number">2</span>,<span class="number">0</span>); <span class="comment">/* 调用处理函数 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
该函数的代码很简单。由于创建解析器时调用了XML_SetUserData，所以处理函数的第一个参数是lxp_userdata结构体。在获取Lua状态后，处理函数就可以访问由lxp_parse设置的位于栈索引3位置的回调函数表，以及位于栈索引1位置的解析器。然后，该函数就可以用解析器和字符数据作为参数调用Lua中对应的处理函数了。<br>处理函数f_EndElement与f_CharData十分相似，参见示例<blockquote>
<p>示例 结束元素事件的处理函数</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">f_EndElement</span><span class="params">(<span class="type">void</span> *ud, <span class="type">const</span> <span class="type">char</span> *name)</span>&#123;</span><br><span class="line">	lxp_userdata *xpu = (lxp_userdata *)ud;</span><br><span class="line">	lua_State *L = xpu -&gt;L;</span><br><span class="line"></span><br><span class="line">	lua_getfield(L,<span class="number">3</span>,<span class="string">&quot;EndElement&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (lua_isnil(L,<span class="number">-1</span>))&#123; <span class="comment">/*没有处理函数？*/</span></span><br><span class="line">		lua_pop(L,<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	lua_pushvalue(L,<span class="number">1</span>); <span class="comment">/* 解析器压栈 */</span></span><br><span class="line">	lua_pushstring(L,name); <span class="comment">/* 压入标签名 */</span></span><br><span class="line">	lua_call(L,<span class="number">2</span>,<span class="number">0</span>); <span class="comment">/* 调用处理函数 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
该函数也以解析器和标签名（也是一个字符串，但是以null结尾）作为参数调用相应的Lua处理函数。<br>示例演示了最后一个处理函数f_StartElement.<blockquote>
<p>示例  开始元素事件的处理函数</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">f_StartElemnt</span> <span class="params">(<span class="type">void</span> *ud, <span class="type">const</span> <span class="type">char</span> *name, <span class="type">const</span> <span class="type">char</span> **atts)</span>&#123;</span><br><span class="line">	lxp_userdata *xpu = (lxp_userdata *)ud;</span><br><span class="line">	lua_State *L = xpu-&gt;L;</span><br><span class="line"></span><br><span class="line">	lua_getfield(L,<span class="number">3</span>,<span class="string">&quot;StartElement&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (lua_isnil(L,<span class="number">-1</span>)) &#123; <span class="comment">/* 没有处理函数？ */</span>&#125;</span><br><span class="line">		lua_pop(L,<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">	lua_pushvalue(L,<span class="number">1</span>); <span class="comment">/* 解析器压栈 */</span></span><br><span class="line">	lua_pushstring(L,name); <span class="comment">/* 压入标签名*/</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 创建并填充属性表 */</span></span><br><span class="line">	lua_newtable(L);</span><br><span class="line">	<span class="keyword">for</span> (; *atts; atts += <span class="number">2</span>)&#123;</span><br><span class="line">		lua_pushstring(L, *(atts + <span class="number">1</span>));</span><br><span class="line">		lua_Setfield(l,<span class="number">-2</span>,*atts); <span class="comment">/* table[*atts] = *(atts + 1) */</span></span><br><span class="line">	&#125;</span><br><span class="line">	lua_call(L,<span class="number">3</span>,<span class="number">0</span>); <span class="comment">/* 调用处理函数 */</span></span><br></pre></td></tr></table></figure>
该函数以解析器、标签名和一个属性列表为参数，调用了Lua处理函数。处理函数f_StartElement比其他的处理函数稍微复杂一点，因为它需要将属性的标签列表转换为Lua语言。f_StartElement使用了一种非常自然的转换方法，即创建一张包含属性名和属性值的表。例如，类似这样的开始标签：<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&lt;to method = <span class="string">&quot;post&quot;</span> proirity = <span class="string">&quot;hight&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
会产生如下的属性表：<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&#123;method = <span class="string">&quot;post&quot;</span>, priority = <span class="string">&quot;hight&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
解析器的最后一个方法是close，参见示例<blockquote>
<p>示例 关闭XML解析器的方法</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">lxp_close</span><span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	lxp_userdata *xpu = (lxp_userdata *)luaL_checkudata(L,<span class="number">1</span>,<span class="string">&quot;Expat&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 释放Expat解析器 */</span></span><br><span class="line">	<span class="keyword">if</span> (xpu-&gt;parser)</span><br><span class="line">		XML_ParserFree(xpu-&gt;parser);</span><br><span class="line">	xpu-&gt;parser = <span class="literal">NULL</span>; <span class="comment">/* 避免重复关闭*/</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
当关闭解析器时，必须释放其资源，也就是Expat结构体。请注意，由于在创建解析器时可能会发生错误，解析器可能没有这些资源。此外还需注意，如何像关闭解析器一样，在一致的状态中保存解析器，这样当我们试图再次关闭解析器或者垃圾收集器结束解析器时才不会产生问题。实际上，我们可以将这个函数当做终结器来使用。这样便可以确保，即使程序员没有关闭解析器，每个解析器最终也会释放其资源。<br>下面示例是最后一步，它演示了打开库的luaopen_lxp。luaopen_lxp将前面所有的部分组织到一起。<blockquote>
<p>示例 lxp库的初始化代码</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">luaL_Reg</span> <span class="title">lxp_meths</span>[] =</span> &#123;</span><br><span class="line">	&#123;<span class="string">&quot;parse&quot;</span>, lxp_parse&#125;,</span><br><span class="line">	&#123;<span class="string">&quot;close&quot;</span>, lxp_close&#125;,</span><br><span class="line">	&#123;<span class="string">&quot;__gc&quot;</span>,  lxp_close&#125;,</span><br><span class="line">	&#123;<span class="literal">NULL</span>,<span class="literal">NULL</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">luaL_Reg</span> <span class="title">lxp_funcs</span>[] =</span> &#123;</span><br><span class="line">	&#123;<span class="string">&quot;new&quot;</span>,lxp_make_parser&#125;，</span><br><span class="line">	&#123;<span class="literal">NULL</span>,<span class="literal">NULL</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">luaopen_lxp</span><span class="params">(lua_State *L)</span>&#123;</span><br><span class="line">	<span class="comment">/*创建元表*/</span></span><br><span class="line">	luaL_newmetatble(L,<span class="string">&quot;Expat&quot;</span>);</span><br><span class="line">	<span class="comment">/* metatable.__index = metatable */</span></span><br><span class="line">	lua_pushvalue(L,<span class="number">-1</span>);</span><br><span class="line">	lua_setfield(L,<span class="number">-2</span>,<span class="string">&quot;__index&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*注册方法*/</span></span><br><span class="line">	luaL_setfuncs(L,lxp_meths,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 注册（只有lxp.new） */</span></span><br><span class="line">	luaL_newlib(L,lxp_funcs);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>windows电脑提示缺少丢失dll文件</title>
    <url>/62d7ce39.html</url>
    <content><![CDATA[<p>我们在使用windows电脑进行开发的过程中经常会遇到缺少或丢失<code>.dll</code>文件的错误。博主今天在安装<code>Visual Studio 2022</code>的时候就遇到了这个问题。</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3160571902547760"
     crossorigin="anonymous"></script>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3160571902547760"
     data-ad-slot="8630948880"></ins></p>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<p>如图：</p>
<!-- [![报错图](https://s1.ax1x.com/2022/11/01/x7qaee.jpg)](https://imgse.com/i/x7qaee) -->
<img data-src="https://s1.ax1x.com/2022/11/01/x7qaee.jpg" alt="报错图" />
在网上查找资料，发现网上给出的建议大致分为以下3点

<h3 id="重装软件"><a href="#重装软件" class="headerlink" title="重装软件"></a>重装软件</h3><p>大家也都知道<code>Visual Studio</code>这个软件有多大，所以不到万不得已，不建议使用这种方法。</p>
<h3 id="使用各种修复工具"><a href="#使用各种修复工具" class="headerlink" title="使用各种修复工具"></a>使用各种修复工具</h3><p>博主也不太喜欢这种方法，主要是还要下载另外的软件。而且很多软件都没有实际作用，或者是需要收费。</p>
<h3 id="直接下载缺少的dll文件"><a href="#直接下载缺少的dll文件" class="headerlink" title="直接下载缺少的dll文件"></a>直接下载缺少的dll文件</h3><p>这里给大家推荐一个网站，非常好用。<a href="https://cn.dll-files.com/">DLL‑FILES.COM</a><br>在这个网站上搜索自己需要的dll文件，然后放到相应的目录下即可。<br>这个网站非常好用，博主首推！！！</p>
]]></content>
      <categories>
        <category>Windows</category>
        <category>Visual Studio</category>
      </categories>
  </entry>
  <entry>
    <title>语音信号滤波去噪——使用FLATTOPWIN设计的FIR滤波器</title>
    <url>/8eb5184f.html</url>
    <content><![CDATA[<p><strong>摘  要</strong>  本课程设计主要内容是设计利用窗口设计法选择FLATTOPWIN窗设计一个FIR滤波器，对一段含噪语音信号进行滤波去噪处理并根据滤波前后的波形和频谱分析滤波性能。本课程设计仿真平台为MATLAB7.0，开发工具是M语言编程，通过课程设计了解FIR滤波器设计的原理和步骤，掌握用MATLAB语言设计滤波器的方法，了解FLATTOPWIN对FIR滤波器的设计及编程方法。首先利用windows自带的录音机录制一段语音信号，加入一单频噪声，对信号进行频谱分析以确定所加噪声频率，设计滤波器进行滤波去噪处理，比较滤波前后的波形和频谱并进行分析。由分析结果可知，滤波<br>后的语音信号与原始信号基本一致，即设计的FIR滤波器能够去除信号中所加单频噪声，达到了设计目的。<br><strong>关键词</strong>  滤波去噪；FIR滤波器；FLATTOPWIN窗；MATLAB</p>
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>本课程设计主要解决在含噪情况下对语音信号的滤波去噪处理，处理时采用的是利用窗口设计法选择FLATTOPWIN窗设计的FIR滤波器[1]。通过对比滤波前后波形图和滤波前后语音信号的对比 ，可以看出滤波器对有用信号无失真放大具有重大意义。</p>
<h2 id="课程设计目的"><a href="#课程设计目的" class="headerlink" title="课程设计目的"></a>课程设计目的</h2><p>熟悉Matlab语言环境，掌握Matlab语言的编程规则，利用Flattopwin窗函数设计法来设计符合要求的FIR滤波器来实现语音信号的滤波去噪。并绘制滤波前后的时域波形和频谱图。根据图形分析判断滤波器设计的正确性。通过本次课程设计熟悉利用<br>flattopwin窗函数法设计FIR滤波器的过程[2]。增强自己独立解决问题的能力，提高自己的动手能力。加深对理论知识联系实际问题的理解。为以后的工作奠定坚实的基础。</p>
<h2 id="课程设计要求"><a href="#课程设计要求" class="headerlink" title="课程设计要求"></a>课程设计要求</h2><p>录制一段语音，绘制波形并观察其频谱特点，加入一个带外单频噪声，设计一个满足指标的滤波器，对该含噪语音信号进行滤波去噪处理，比较滤波前后的波形和频谱并进行分析，根据结果和学过的理论得出合理的结论[3]。</p>
<h2 id="课程设计平台"><a href="#课程设计平台" class="headerlink" title="课程设计平台"></a>课程设计平台</h2><p>MATLB是美国MathWorks公司出品的商业教学软件，用于算法开发。数据可视化、数据分析以及数值计算的高级技术计算语言和交互式环境，主要包括MATLAB和Simulink两大部分。<br>MATLAB由一系列工具组成。这些工具方便用户使用MATLAB的函数和文件，其中许多工具采用的是图形用户界面。包括MATLAB桌面和命令窗口、历史命令窗口、编辑器和调试器、路径搜索和用于用户浏览帮助、工作空间、文件的浏览器。随着MATLAB的商业化以及软件本身的不断升级，MATLAB的用户界面也越来越精致，更加接近Windows的标准界面，人机交互性更强，操作更简单。而且新版本的MATLAB提供了完整的联机查询、帮助系统，极大的方便了用户的使用。简单的编程环境提供了比较完备的调试系统，程序不必经过编译就可以直接运行，而且能够及时地报告出现的错误及进行出错原因分析。<br>MATLAB是一个高级的矩阵&#x2F;阵列语言，它包含控制语句、函数、数据结构、输入和输出和面向对象编程特点。用户可以在命令窗口中将输入语句与执行命令同步，也可以先编写好一个较大的复杂的应用程序（M文件）后再一起运行。新版本的MATLAB语言是基于最为流行的C++语言基础上的，因此语法特征与C++语言极为相似，而且更加简单，更加符合科技人员对数学表达式的书写格式。使之更利于非计算机专业的科技人员使用。而且这种语言可移植性好、可拓展性极强，这也是MATLAB能够深入到科学研究及工程计算各个领域的重要原因[4]。<br>MATLAB是一个包含大量计算算法的集合。其拥有600多个工程中要用到的数学运算函数，可以方便的实现用户所需的各种计算功能。函数中所使用的算法都是科研和工程<br>计算中的最新研究成果，而且经过了各种优化和容错处理。在通常情况下，可以用它来代替底层编程语言，如C和C++ 。在计算要求相同的情况下，使用MATLAB的编程工作量会大大减少。MATLAB的这些函数集包括从最简单最基本的函数到诸如矩阵，特征向量、快速傅立叶变换的复杂函数。函数所能解决的问题其大致包括矩阵运算和线性方程组的求解、微分方程及偏微分方程的组的求解、符号运算、傅立叶变换和数据的统计分析、工程中的优化问题、稀疏矩阵运算、复数的各种运算、三角函数和其他初等数学运算、多维数组操作以及建模动态仿真等。</p>
<h1 id="基本理论"><a href="#基本理论" class="headerlink" title="基本理论"></a>基本理论</h1><h2 id="FIR滤波器"><a href="#FIR滤波器" class="headerlink" title="FIR滤波器"></a>FIR滤波器</h2><p>FIR(Finite Impulse Response)滤波器：有限长单位冲激响应滤波器，又称为非递归型滤波器，是数字信号处理系统中最基本的元件，它可以在保证任意幅频特性的同时具有严格的线性相频特性，同时其单位抽样响应是有限长的，因而滤波器是稳定的系统。因此，FIR滤波器在通信、图像处理、模式识别等领域都有着广泛的应用。<br>工作原理：在进入FIR滤波器前，首先要将信号通过A&#x2F;D器件进行模数转换，把模拟信号转化为数字信号；为了使信号处理能够不发生失真，信号的采样速度必须满足奈奎斯特定理，一般取信号频率上限的4-5倍做为采样频率；一般可用速度较高的逐次逼进式A&#x2F;D转换器，不论采用乘累加方法还是分布式算法设计FIR滤波器，滤波器输出的数据都是一串序列，要使它能直观地反应出来，还需经过数模转换，因此由FPGA构成的FIR滤波器的输出须外接D&#x2F;A模块。FPGA有着规整的内部逻辑阵列和丰富的连线资源，特别适合于数字信号处理任务，相对于串行运算为主导的通用DSP芯片来说，其并行性和可扩展性更好，利用FPGA乘累加的快速算法，可以设计出高速的FIR数字滤波器[5]。</p>
<img data-src="https://pic.imgdb.cn/item/664348550ea9cb1403cb2ed2.png"/>
    
<h2 id="窗口设计法"><a href="#窗口设计法" class="headerlink" title="窗口设计法"></a>窗口设计法</h2><p>窗口设计法是一种通过截断和计权的方法使无限长非因果序列成为有限长脉冲响应序列的设计方法。通常在设计滤波器之前，应该先根据具体的工程应用确定滤波器的技术指标。在大多数实际应用中，数字滤波器常常被用来实现选频操作，所以指标的形式一般为在频域中以分贝值给出的相对幅度响应和相位响应。<br>窗口设计法步骤如下：<br><strong>（1）</strong>根据过渡带宽及阻带衰减要求，选择窗函数的类型并估计窗口长度N。窗函数的类型可根据最小阻带衰减AS独立选择[6]。<br><strong>（2）</strong>根据待求滤波器的理想频率响应求出理想单位脉冲响应hd(n)。<br><strong>（3）</strong>由性能指标确定窗函数W(n)和长度N。<br><strong>（4）</strong>求得实际滤波器的单位脉冲响应h(n)， h(n)即为所设计FIR滤波器系数向量b(n)。	<br><img data-src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNTE1MTU1NjQ4NzIy?x-oss-process=image/format,png" alt="这里写图片描述">（2.1）</p>
<p>常见的窗函数性能表如下表2.1所示：<br>表2.1 常见窗函数性能表<br><img data-src="https://s21.ax1x.com/2024/03/16/pF20N6A.png"/></p>
<h2 id="FLATTOPWIN窗"><a href="#FLATTOPWIN窗" class="headerlink" title="FLATTOPWIN窗"></a>FLATTOPWIN窗</h2><p>w&#x3D;Flattopwin (L) 返回L-点Flattopwin窗口中列向量。Flattopwin窗的滤波器的过渡带宽为19.6π&#x2F;M，最小阻带衰减108db。<br><img data-src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNTE1MTYwMDUxNzM1?x-oss-process=image/format,png" alt="这里写图片描述"><br>时间波形和幅度谱如下图2.2、图2.3：<br><img data-src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNTE1MTYwMTQ0NDM5?x-oss-process=image/format,png" alt="这里写图片描述">图2.2 时间波形<br><img data-src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNTE1MTYwMjQxODUw?x-oss-process=image/format,png" alt="这里写图片描述">图2.3 幅度谱</p>
<h1 id="设计步骤"><a href="#设计步骤" class="headerlink" title="设计步骤"></a>设计步骤</h1><h2 id="设计流程图"><a href="#设计流程图" class="headerlink" title="设计流程图"></a>设计流程图</h2><p>根据设计的要求，首先自己录制一段语音信号，修改语音文件格式，对语音信号加入噪声干扰，再利用Flattopwin窗设计合理的FIR滤波器。最后用滤波器对干扰后的语音信号进行滤波去噪。具体设计流程图如下图3.1所示：<br><img data-src="https://pic.imgdb.cn/item/664348a10ea9cb1403cb8fdf.png" width="60%" alt="图3.1设计流程图"/></p>
<h2 id="录制语音信号"><a href="#录制语音信号" class="headerlink" title="录制语音信号"></a>录制语音信号</h2><p>从电脑上录制一段语音信号，并命名为“cf.wav”，修改语音文件的格式，并放在E盘目录下。在MATLAB软件中调用wavread函数可采集到语音信号。代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[x,fs,bits]=wavread(&#x27;e:\cf.wav&#x27;); </span><br></pre></td></tr></table></figure>
<blockquote>
<p>%fs是生成该波形文件的采样频率，bits是波形文件没样本的编码位数</p>
</blockquote>
<p>得到原始语音信号时域波形图如图3.2<br><img data-src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNTE1MTYwOTA2MzU1?x-oss-process=image/format,png" alt="这里写图片描述">图3.2 原始语音信号时域波形图</p>
<p>然后对语音号进行快速傅里叶变换，得到信号的频谱特性，并将原始音乐信号的波形图与加干扰后的波形图进行比较。部分代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">y=x+0.1*sin(fn*2*pi*t);    %给原始信号加噪声</span><br><span class="line">X=abs(fft(x));             %对原始信号进行傅里叶变换</span><br><span class="line">Y=abs(fft(y));             %对加噪声后信号进行傅里叶变换</span><br></pre></td></tr></table></figure>
<p>加噪声前后的时域与频谱图如图3.3<br><img data-src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNTE1MTYxMDU3OTUx?x-oss-process=image/format,png" alt="这里写图片描述"><br>图3.3 加噪声前后的时域图与频谱图比较</p>
<h2 id="滤波器设计"><a href="#滤波器设计" class="headerlink" title="滤波器设计"></a>滤波器设计</h2><p>在本次的课程设计中我所采用的是利用Flattopwin窗函数来设计FIR滤波器。其中主要用了freqz_m.m和ideal_lp.m两个自编函数。<br>设计的滤波器图如图3.4<br><img data-src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNTE1MTYxMjExNzYx?x-oss-process=image/format,png" alt="这里写图片描述"><br>图3.4 滤波器图形</p>
<h2 id="信号滤波处理"><a href="#信号滤波处理" class="headerlink" title="信号滤波处理"></a>信号滤波处理</h2><p>滤波器设计完成后，在MATLAB平台上用函数fftfilt实现滤波。<br>得到的滤波前后语音信号的时域波形图和频谱图对比图如图3.5、3.6<br><img data-src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNTE1MTYxMzM4NzQ3?x-oss-process=image/format,png" alt="这里写图片描述"><br>图3.5 滤波前后语音信号的时域波形图和频谱图<br><img data-src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNTE1MTYxNDA3NzM3?x-oss-process=image/format,png" alt="这里写图片描述"><br>图3.6 滤波前后语音信号的比较</p>
<h2 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h2><p>在MATLAB中，对原始的语音信号加噪音，利用FLATTOPWIN窗口设计FIR滤波器，通过所设计的滤波器对加噪声后的信号进行处理。再通过sound(x,fs,bits)函数对滤波后的语音信号进行回放，可以听到滤波之后的信号和原始信号一样清晰。具体代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sound(x,fs,bits);        %播放原始语音信号</span><br><span class="line">sound (y_fil,fs,bits);   % 播放滤波后的音乐信号</span><br></pre></td></tr></table></figure>
<p>所得结果证明了用Flattopwin窗设计的FIR滤波器和音乐信号去噪设计是成功的。</p>
<h1 id="出现的问题及解决方法"><a href="#出现的问题及解决方法" class="headerlink" title="出现的问题及解决方法"></a>出现的问题及解决方法</h1><p>在本次课程设计中我遇到的问题如下：<br>1、对Flattopwin窗不是很了解，对用Flattopwin窗函数设计FIR滤波器的设计步骤很生疏。<br>2、 语音文件的格式有问题，不知道如何修改。<br>3、不知道如何调用函数，对MATLAB的使用不熟悉。<br>4、对滤波器一些参数以及通带阻带等概念不是很清楚。<br>5、在采用Flattopwin窗函数设计的FIR滤波器时得不到理想的滤波器，因而信号的恢<br>复不是特别理想。</p>
<pre><code>针对以上问题，相应的解决方案如下：
</code></pre>
<p>1、自己上网查阅资料，以及查看之前《数字信号处理》教材和向图书馆借阅资料，掌<br>握利用Flattopwin窗函数设计FIR滤波器的方法和步骤。<br>2、询问同学，找同学帮忙。<br>3、利用MATLAB这款软件自带的help功能，以及查看老师所给提供的课设资料和上<br>网看阅资料。<br>4、请教值班老师以及在网上查阅资料。<br>5、通过不断设置参数的值，最终达到最理想的值，设计出理想的滤波器，使信号得到理想恢复。</p>
<h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>本次的课程设计，我的题目是《语音信号滤波去噪——使用Flattopwin设计的FIR滤波》。在本次课程设计之前，我对Flattopwin窗函数完全没有了解，因此在看到这个题目时，我是一头雾水。但是通过自己翻阅资料和询问同学，我掌握了用Flattopwin窗函数设计FIR滤波器的方法步骤，了解了窗函数的基本设计流程。经过这三周的课程设计，我学会了很多东西，不仅仅是技术，更多的是自学能力的提高以及处理问题的方法。<br>我们通信工程专业是个实践性很强的专业，而我们在校大部分的学习时间都是花在理论学习上面，实践的机会很少。因而我对很多所学的理论知识如何跟实践联系的概念很模糊，这次的课程设计给了我这个机会，加深了我对理论联系实际的理解，增强了自己独立分析问题和解决问题的能力，开阔了自己的思维。<br>还有让我看到了自己的不足，自己对本专业的相关知识掌握的还很少，还有很多知识都没掌握，还让我认识到解决问题的方法、途径很多，做事要开阔自己的思维，看待问题要从多个角度看。<br>在此我要感谢学校为我们提供这次课程设计的机会，感谢老师对我的悉心指导，也感谢同学对我的帮助。这次的课程设计让我理论联系实际，不仅巩固了我们的理论知识，还提高了我的动手能力，在这次课程设计中我所学到的知识是我的财富，让我终身受益。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="语音信号滤波去噪设计源程序清单"><a href="#语音信号滤波去噪设计源程序清单" class="headerlink" title="语音信号滤波去噪设计源程序清单"></a>语音信号滤波去噪设计源程序清单</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">% 程序名称：c.m</span><br><span class="line">% 程序功能：利用FLATTOPWIN设计的FIR滤波对语音信号进行滤波去噪</span><br><span class="line">% 程序作者： </span><br><span class="line">% 最后修改日期：2017年3月8日</span><br><span class="line">[x,fs,bits]=wavread(&#x27;e:\cf.wav&#x27;);  % 输了参数为文件的全路径和文件名，输出的第一个参数是每个样本的值，fs是生成该波形文件时的采样率，bits是波形文件每样本的编码位数。</span><br><span class="line">sound(x,fs,bits);      % 按指定的采样率和每样本编码位数回放</span><br><span class="line">N=length(x);       % 计算信号X的长度</span><br><span class="line">fn=2200;            % 单频噪声频率</span><br><span class="line">t=0:1/fs:(N-1)/fs;         % 计算时间范围，样本数除以采样频率</span><br><span class="line">x=x(:,1)&#x27;;               % 将双声道转为单声道</span><br><span class="line">y=x+0.1*sin(fn*2*pi*t);     % 加噪声</span><br><span class="line">sound(y,fs,bits);         % 应该可以明显听出有尖锐的单品啸叫声</span><br><span class="line">X=abs(fft(x));  Y=abs(fft(y));    % 对原始信号和加噪声信号进行fft变换，取幅度值</span><br><span class="line">X=X(1:N/2); Y=Y(1:N/2);       % 截取前半部分</span><br><span class="line">deltaf=fs/N;            % 计算频谱的谱线间隔</span><br><span class="line">f=0:deltaf:fs/2-deltaf;     % 计算频谱频率范围</span><br><span class="line">figure(1)</span><br><span class="line">subplot(2,2,1);plot(t,x);xlabel(&#x27;时间t&#x27;);</span><br><span class="line">ylabel(&#x27;幅度&#x27;);title(&#x27;原始语音信号&#x27;);</span><br><span class="line">axis([0,4,-1.5,1.5]);</span><br><span class="line"></span><br><span class="line">subplot(2,2,2);plot(f,X);xlabel(&#x27;频率f&#x27;);ylabel(&#x27;幅度谱&#x27;);</span><br><span class="line">title(&#x27;原始语音信号幅度谱&#x27;);</span><br><span class="line">axis([-10,6000,0,700]);</span><br><span class="line">subplot(2,2,3);plot(t,y);xlabel(&#x27;时间&#x27;);ylabel(&#x27;幅度&#x27;);</span><br><span class="line">title(&#x27;加干扰后的语音信号&#x27;);</span><br><span class="line">axis([0,4,-1.5,1.5]);</span><br><span class="line">subplot(2,2,4);plot(f,Y);xlabel(&#x27;频率 f&#x27;);ylabel(&#x27;幅度谱&#x27;);</span><br><span class="line">title(&#x27;加干扰后的语音信号幅度谱&#x27;);</span><br><span class="line">axis([-10,6000,0,700]);</span><br><span class="line"> </span><br><span class="line">fpd=2100;fsd=2150;fsu=2250;fpu=2300;Rp=1;As=30;      % 阻带滤波器设计指标</span><br><span class="line">fcd=(fpd+fsd)/2;fcu=(fpu+fsu)/2;df=min((fsd-fpd),(fpu-fsu));  % 计算上下边带中心频率和频率间隔</span><br><span class="line">wcd=fcd/fs*2*pi;wcu=fcu/fs*2*pi;dw=df/fs*2*pi;    %将Hz为单位的模拟频率换算为rad为单位的数字频率 </span><br><span class="line">wsd=fsd/fs*2*pi;wsu=fsu/fs*2*pi;</span><br><span class="line">M=ceil(6.2*pi/dw)+1;      %计算flattopwin窗设计滤波器时需要的阶数</span><br><span class="line">n=0:M-1;         % 定义时间范围</span><br><span class="line">w_fla=(Flattopwin(M));    % 产生M阶的flattopwin窗</span><br><span class="line">hd_bs=ideal_lp(wcd,M)+ideal_lp(pi,M)-ideal_lp(wcu,M); </span><br><span class="line">% 调用自编函数计算理想阻带滤波器的脉冲响应</span><br><span class="line">h_bs=w_fla&#x27;.*hd_bs;       % 用窗口法计算实际滤波器脉冲响应</span><br><span class="line">[db,mag,pha,grd,w]=freqz_m(h_bs,1);  % 调用自编函数计算滤波器的频率特征</span><br><span class="line"> </span><br><span class="line">figure(2)</span><br><span class="line">subplot(2,2,1);plot(w,db);title(&#x27;滤波器幅度响应图&#x27;);</span><br><span class="line">xlabel(&#x27;w/pi&#x27;);ylabel(&#x27;db&#x27;);</span><br><span class="line">axis([0,0.8,-60,10]);</span><br><span class="line">line([0,2],[-As,-As],&#x27;color&#x27;,&#x27;y&#x27;,&#x27;linestyle&#x27;,&#x27;--&#x27;,&#x27;LineWidth&#x27;,2);</span><br><span class="line">line([0,2],[-Rp,-Rp],&#x27;color&#x27;,&#x27;g&#x27;,&#x27;linestyle&#x27;,&#x27;--&#x27;,&#x27;LineWidth&#x27;,2);</span><br><span class="line">line([wsd,wsd],[-30,10],&#x27;color&#x27;,&#x27;r&#x27;,&#x27;linestyle&#x27;,&#x27;--&#x27;,&#x27;LineWidth&#x27;,2);</span><br><span class="line">line([wsu,wsu],[-30,10],&#x27;color&#x27;,&#x27;r&#x27;,&#x27;linestyle&#x27;,&#x27;--&#x27;,&#x27;LineWidth&#x27;,2);</span><br><span class="line">subplot(2,2,2);plot(w,mag);title(&#x27;滤波器幅度响应图&#x27;);</span><br><span class="line">xlabel(&#x27;w/pi&#x27;);ylabel(&#x27;幅度mag&#x27;);</span><br><span class="line">axis([0,1,-0.5,1.5]);</span><br><span class="line">subplot(2,2,3);plot(w,pha);title(&#x27;滤波器幅度响应图&#x27;);</span><br><span class="line">xlabel(&#x27;w/pi&#x27;);ylabel(&#x27;相位pha&#x27;);</span><br><span class="line">axis([0,1,-4,4]);</span><br><span class="line">subplot(2,2,4);stem(n,h_bs);title(&#x27;滤波器幅度响应图&#x27;);</span><br><span class="line">xlabel(&#x27;w/pi&#x27;);ylabel(&#x27;db&#x27;);</span><br><span class="line">axis([0,1500,0,1]);</span><br><span class="line"> </span><br><span class="line">y_fil=fftfilt(h_bs,y);  %用设计好的滤波器对y进行滤波</span><br><span class="line">Y_fil=fft(y_fil);Y_fil=Y_fil(1:N/2);  %计算频谱取前一半</span><br><span class="line">figure(3)</span><br><span class="line">subplot(3,2,1);plot(t,x);xlabel(&#x27;时间t&#x27;);ylabel(&#x27;幅度&#x27;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">title(&#x27;原始语音信号&#x27;);</span><br><span class="line">subplot(3,2,2);plot(f,X);xlabel(&#x27;频率f&#x27;);ylabel(&#x27;幅度谱&#x27;);</span><br><span class="line">title(&#x27;原始语音信号幅度谱&#x27;);</span><br><span class="line">axis([0,4000,0,600]);</span><br><span class="line">subplot(3,2,3);plot(t,y);xlabel(&#x27;时间t&#x27;);ylabel(&#x27;·幅度&#x27;);</span><br><span class="line">title(&#x27;加干扰后语音信号&#x27;);</span><br><span class="line">subplot(3,2,4);plot(f,Y);xlabel(&#x27;频率f&#x27;);ylabel(&#x27;幅度谱&#x27;);</span><br><span class="line">title(&#x27;加干扰后语音信号幅度谱&#x27;);</span><br><span class="line">axis([0,4000,0,600]);</span><br><span class="line">subplot(3,2,5);plot(t,y_fil);xlabel(&#x27;时间t&#x27;);ylabel(&#x27;幅度&#x27;);</span><br><span class="line">title(&#x27;滤波后语音信号&#x27;);</span><br><span class="line">subplot(3,2,6);plot(f,Y_fil);xlabel(&#x27;频率f&#x27;);ylabel(&#x27;幅度谱&#x27;);</span><br><span class="line">title(&#x27;滤波后语音信号幅度谱&#x27;);</span><br><span class="line">axis([0,4000,0,600]);</span><br><span class="line">figure(4)</span><br><span class="line">subplot(2,1,1);plot(f,20*log10(Y));grid on; </span><br><span class="line">subplot(2,1,2);plot(f,20*log10(Y_fil));grid on; </span><br><span class="line">sound(x,fs,bits);   % 播放原始信号</span><br><span class="line">sound (y_fil,fs,bits);  %播放滤波后的信号</span><br><span class="line"> </span><br><span class="line">[C,B,A]=dir2fs(h_bs);</span><br></pre></td></tr></table></figure>

<h2 id="函数FREQZ-M-M定义："><a href="#函数FREQZ-M-M定义：" class="headerlink" title="函数FREQZ_M.M定义："></a>函数FREQZ_M.M定义：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function [db,mag,pha,grd,w] = freqz_m(b,a);</span><br><span class="line">% Modified version of freqz subroutine</span><br><span class="line">% ------------------------------------</span><br><span class="line">% [db,mag,pha,grd,w] = freqz_m(b,a);</span><br><span class="line">%  db = Relative magnitude in dB computed over 0 to pi radians</span><br><span class="line">% mag = absolute magnitude computed over 0 to pi radians </span><br><span class="line">% pha = Phase response in radians over 0 to pi radians</span><br><span class="line">% grd = Group delay over 0 to pi radians</span><br><span class="line">%   w = 501 frequency samples between 0 to pi radians</span><br><span class="line">%   b = numerator polynomial of H(z)   (for FIR: b=h)</span><br><span class="line">%   a = denominator polynomial of H(z) (for FIR: a=[1])</span><br><span class="line">%</span><br><span class="line">[H,w] = freqz(b,a,1000,&#x27;whole&#x27;);</span><br><span class="line">    H = (H(1:1:501))&#x27;; w = (w(1:1:501))&#x27;;</span><br><span class="line">  mag = abs(H);</span><br><span class="line">   db = 20*log10((mag+eps)/max(mag));</span><br><span class="line">  pha = angle(H);</span><br><span class="line">%  pha = unwrap(angle(H));</span><br><span class="line">  grd = grpdelay(b,a,w);</span><br><span class="line">%  grd = diff(pha);</span><br><span class="line">%  grd = [grd(1) grd];</span><br><span class="line">%  grd = [0 grd(1:1:500); grd; grd(2:1:501) 0];</span><br><span class="line">%  grd = median(grd)*500/pi;</span><br></pre></td></tr></table></figure>
<h2 id="函数IDEAL-LP-M定义："><a href="#函数IDEAL-LP-M定义：" class="headerlink" title="函数IDEAL_LP.M定义："></a>函数IDEAL_LP.M定义：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function hd = ideal_lp(wc,M);</span><br><span class="line">% Ideal LowPass filter computation</span><br><span class="line">% --------------------------------</span><br><span class="line">% [hd] = ideal_lp(wc,M)</span><br><span class="line">%  hd = ideal impulse response between 0 to M-1</span><br><span class="line">%  wc = cutoff frequency in radians</span><br><span class="line">%   M = length of the ideal filter</span><br><span class="line">%</span><br><span class="line">alpha = (M-1)/2;</span><br><span class="line">n = [0:1:(M-1)];</span><br><span class="line">m = n - alpha + eps;</span><br><span class="line">hd = sin(wc*m) ./ (pi*m);</span><br></pre></td></tr></table></figure>



<blockquote>
<p>该文为笔者课程设计论文，如有不妥，还请指出</p>
</blockquote>
]]></content>
      <categories>
        <category>课程设计</category>
      </categories>
  </entry>
</search>
